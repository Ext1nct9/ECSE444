
KalmanLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009658  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08009818  08009818  00019818  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009db4  08009db4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009db4  08009db4  00019db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dbc  08009dbc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dbc  08009dbc  00019dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dc0  08009dc0  00019dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009dc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001d4  08009f98  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08009f98  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001aa84  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  0003accb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00019ba3  00000000  00000000  0003ad53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002f0c  00000000  00000000  000548f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000016a0  00000000  00000000  00057808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011fb27  00000000  00000000  00058ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 0000117e  00000000  00000000  001789cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00004b67  00000000  00000000  00179b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007068  00000000  00000000  0017e6b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009800 	.word	0x08009800

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08009800 	.word	0x08009800

08000200 <kalman>:
.global kalman


// states order: q, r, x, p, k
kalman:
    VPUSH.32 {s4, s5, s6, s7}
 8000200:	ed2d 2a04 	vpush	{s4-s7}

    // calculate p = p + q
    VLDR.32 s4, [r0, #12]     // load p in s4
 8000204:	ed90 2a03 	vldr	s4, [r0, #12]
    VLDR.32 s5, [r0]         // load q in S5
 8000208:	edd0 2a00 	vldr	s5, [r0]
    VADD.F32 s4, s4, s5        // calculate p = p + q, result in s4
 800020c:	ee32 2a22 	vadd.f32	s4, s4, s5
    VSTR.32 s4, [r0, #12]     // save new p in struct
 8000210:	ed80 2a03 	vstr	s4, [r0, #12]

    // calculate k = p / (p + r)
    VLDR.32 s5, [r0, #4]     // load r in s5, new p already in s4
 8000214:	edd0 2a01 	vldr	s5, [r0, #4]
    VADD.F32 s5, s4, s5        // calculate p + r, result in s5
 8000218:	ee72 2a22 	vadd.f32	s5, s4, s5
    VDIV.F32 s5, s4, s5        // calculate k = p / (p+r) , result in s5
 800021c:	eec2 2a22 	vdiv.f32	s5, s4, s5
    VSTR.32 s5, [r0, #16]    // save new k in struct
 8000220:	edc0 2a04 	vstr	s5, [r0, #16]

	// p in S4   k in S5
    // calculate x = x + k * (meas - x)
    VLDR.32 s6, [r0, #8]    // load x in s6
 8000224:	ed90 3a02 	vldr	s6, [r0, #8]
    VSUB.F32 s7, s0, s6		// calculate meas - x, result in s7
 8000228:	ee70 3a43 	vsub.f32	s7, s0, s6
    VMLA.F32 s6, s5, s7		// calculate x, result in s6
 800022c:	ee02 3aa3 	vmla.f32	s6, s5, s7
    VSTR.32 s6, [r0, #8]	// save new x in struct
 8000230:	ed80 3a02 	vstr	s6, [r0, #8]

    // calculate p = (1 - k) * p
    VMOV.F32 s7, #1.0   // load 1.0 in s7
 8000234:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
    VSUB.F32 s5, s7, s5		// calculate 1 - k, result in s5
 8000238:	ee73 2ae2 	vsub.f32	s5, s7, s5
    VMUL.F32 s4, s5, s4		// calculate new p, result in s4
 800023c:	ee22 2a82 	vmul.f32	s4, s5, s4
    VSTR.32 s4, [r0, #12]    // save new p in struct
 8000240:	ed80 2a03 	vstr	s4, [r0, #12]

    VPOP.32 {s4, s5, s6, s7}
 8000244:	ecbd 2a04 	vpop	{s4-s7}
    BX LR
 8000248:	4770      	bx	lr
 800024a:	0000      	movs	r0, r0
 800024c:	0000      	movs	r0, r0
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <strlen>:
 80002f0:	4603      	mov	r3, r0
 80002f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002f6:	2a00      	cmp	r2, #0
 80002f8:	d1fb      	bne.n	80002f2 <strlen+0x2>
 80002fa:	1a18      	subs	r0, r3, r0
 80002fc:	3801      	subs	r0, #1
 80002fe:	4770      	bx	lr

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	3c01      	subs	r4, #1
 800043c:	bf28      	it	cs
 800043e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000442:	d2e9      	bcs.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b970 	b.w	8000f20 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9e08      	ldr	r6, [sp, #32]
 8000c5e:	460d      	mov	r5, r1
 8000c60:	4604      	mov	r4, r0
 8000c62:	460f      	mov	r7, r1
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d14a      	bne.n	8000cfe <__udivmoddi4+0xa6>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4694      	mov	ip, r2
 8000c6c:	d965      	bls.n	8000d3a <__udivmoddi4+0xe2>
 8000c6e:	fab2 f382 	clz	r3, r2
 8000c72:	b143      	cbz	r3, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c78:	f1c3 0220 	rsb	r2, r3, #32
 8000c7c:	409f      	lsls	r7, r3
 8000c7e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c82:	4317      	orrs	r7, r2
 8000c84:	409c      	lsls	r4, r3
 8000c86:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c8a:	fa1f f58c 	uxth.w	r5, ip
 8000c8e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c92:	0c22      	lsrs	r2, r4, #16
 8000c94:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c9c:	fb01 f005 	mul.w	r0, r1, r5
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x62>
 8000ca4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ca8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cac:	f080 811c 	bcs.w	8000ee8 <__udivmoddi4+0x290>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f240 8119 	bls.w	8000ee8 <__udivmoddi4+0x290>
 8000cb6:	3902      	subs	r1, #2
 8000cb8:	4462      	add	r2, ip
 8000cba:	1a12      	subs	r2, r2, r0
 8000cbc:	b2a4      	uxth	r4, r4
 8000cbe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cc2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cc6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cca:	fb00 f505 	mul.w	r5, r0, r5
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	d90a      	bls.n	8000ce8 <__udivmoddi4+0x90>
 8000cd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cda:	f080 8107 	bcs.w	8000eec <__udivmoddi4+0x294>
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	f240 8104 	bls.w	8000eec <__udivmoddi4+0x294>
 8000ce4:	4464      	add	r4, ip
 8000ce6:	3802      	subs	r0, #2
 8000ce8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cec:	1b64      	subs	r4, r4, r5
 8000cee:	2100      	movs	r1, #0
 8000cf0:	b11e      	cbz	r6, 8000cfa <__udivmoddi4+0xa2>
 8000cf2:	40dc      	lsrs	r4, r3
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0xbc>
 8000d02:	2e00      	cmp	r6, #0
 8000d04:	f000 80ed 	beq.w	8000ee2 <__udivmoddi4+0x28a>
 8000d08:	2100      	movs	r1, #0
 8000d0a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d0e:	4608      	mov	r0, r1
 8000d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d14:	fab3 f183 	clz	r1, r3
 8000d18:	2900      	cmp	r1, #0
 8000d1a:	d149      	bne.n	8000db0 <__udivmoddi4+0x158>
 8000d1c:	42ab      	cmp	r3, r5
 8000d1e:	d302      	bcc.n	8000d26 <__udivmoddi4+0xce>
 8000d20:	4282      	cmp	r2, r0
 8000d22:	f200 80f8 	bhi.w	8000f16 <__udivmoddi4+0x2be>
 8000d26:	1a84      	subs	r4, r0, r2
 8000d28:	eb65 0203 	sbc.w	r2, r5, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	4617      	mov	r7, r2
 8000d30:	2e00      	cmp	r6, #0
 8000d32:	d0e2      	beq.n	8000cfa <__udivmoddi4+0xa2>
 8000d34:	e9c6 4700 	strd	r4, r7, [r6]
 8000d38:	e7df      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000d3a:	b902      	cbnz	r2, 8000d3e <__udivmoddi4+0xe6>
 8000d3c:	deff      	udf	#255	; 0xff
 8000d3e:	fab2 f382 	clz	r3, r2
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f040 8090 	bne.w	8000e68 <__udivmoddi4+0x210>
 8000d48:	1a8a      	subs	r2, r1, r2
 8000d4a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4e:	fa1f fe8c 	uxth.w	lr, ip
 8000d52:	2101      	movs	r1, #1
 8000d54:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d58:	fb07 2015 	mls	r0, r7, r5, r2
 8000d5c:	0c22      	lsrs	r2, r4, #16
 8000d5e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d62:	fb0e f005 	mul.w	r0, lr, r5
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x124>
 8000d6a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d6e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d72:	d202      	bcs.n	8000d7a <__udivmoddi4+0x122>
 8000d74:	4290      	cmp	r0, r2
 8000d76:	f200 80cb 	bhi.w	8000f10 <__udivmoddi4+0x2b8>
 8000d7a:	4645      	mov	r5, r8
 8000d7c:	1a12      	subs	r2, r2, r0
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d84:	fb07 2210 	mls	r2, r7, r0, r2
 8000d88:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d8c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d90:	45a6      	cmp	lr, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x14e>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x14c>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f200 80bb 	bhi.w	8000f1a <__udivmoddi4+0x2c2>
 8000da4:	4610      	mov	r0, r2
 8000da6:	eba4 040e 	sub.w	r4, r4, lr
 8000daa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dae:	e79f      	b.n	8000cf0 <__udivmoddi4+0x98>
 8000db0:	f1c1 0720 	rsb	r7, r1, #32
 8000db4:	408b      	lsls	r3, r1
 8000db6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dba:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dbe:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dc6:	40fd      	lsrs	r5, r7
 8000dc8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dcc:	4323      	orrs	r3, r4
 8000dce:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dd2:	fa1f fe8c 	uxth.w	lr, ip
 8000dd6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dda:	0c1c      	lsrs	r4, r3, #16
 8000ddc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000de0:	fb08 f50e 	mul.w	r5, r8, lr
 8000de4:	42a5      	cmp	r5, r4
 8000de6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dea:	fa00 f001 	lsl.w	r0, r0, r1
 8000dee:	d90b      	bls.n	8000e08 <__udivmoddi4+0x1b0>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df8:	f080 8088 	bcs.w	8000f0c <__udivmoddi4+0x2b4>
 8000dfc:	42a5      	cmp	r5, r4
 8000dfe:	f240 8085 	bls.w	8000f0c <__udivmoddi4+0x2b4>
 8000e02:	f1a8 0802 	sub.w	r8, r8, #2
 8000e06:	4464      	add	r4, ip
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	b29d      	uxth	r5, r3
 8000e0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e10:	fb09 4413 	mls	r4, r9, r3, r4
 8000e14:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e18:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	d908      	bls.n	8000e32 <__udivmoddi4+0x1da>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e28:	d26c      	bcs.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2a:	45a6      	cmp	lr, r4
 8000e2c:	d96a      	bls.n	8000f04 <__udivmoddi4+0x2ac>
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	4464      	add	r4, ip
 8000e32:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e36:	fba3 9502 	umull	r9, r5, r3, r2
 8000e3a:	eba4 040e 	sub.w	r4, r4, lr
 8000e3e:	42ac      	cmp	r4, r5
 8000e40:	46c8      	mov	r8, r9
 8000e42:	46ae      	mov	lr, r5
 8000e44:	d356      	bcc.n	8000ef4 <__udivmoddi4+0x29c>
 8000e46:	d053      	beq.n	8000ef0 <__udivmoddi4+0x298>
 8000e48:	b156      	cbz	r6, 8000e60 <__udivmoddi4+0x208>
 8000e4a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e4e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e52:	fa04 f707 	lsl.w	r7, r4, r7
 8000e56:	40ca      	lsrs	r2, r1
 8000e58:	40cc      	lsrs	r4, r1
 8000e5a:	4317      	orrs	r7, r2
 8000e5c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e60:	4618      	mov	r0, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e68:	f1c3 0120 	rsb	r1, r3, #32
 8000e6c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e70:	fa20 f201 	lsr.w	r2, r0, r1
 8000e74:	fa25 f101 	lsr.w	r1, r5, r1
 8000e78:	409d      	lsls	r5, r3
 8000e7a:	432a      	orrs	r2, r5
 8000e7c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e80:	fa1f fe8c 	uxth.w	lr, ip
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1510 	mls	r5, r7, r0, r1
 8000e8c:	0c11      	lsrs	r1, r2, #16
 8000e8e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e92:	fb00 f50e 	mul.w	r5, r0, lr
 8000e96:	428d      	cmp	r5, r1
 8000e98:	fa04 f403 	lsl.w	r4, r4, r3
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x258>
 8000e9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ea6:	d22f      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000ea8:	428d      	cmp	r5, r1
 8000eaa:	d92d      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000eac:	3802      	subs	r0, #2
 8000eae:	4461      	add	r1, ip
 8000eb0:	1b49      	subs	r1, r1, r5
 8000eb2:	b292      	uxth	r2, r2
 8000eb4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000eb8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ebc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ec0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ec4:	4291      	cmp	r1, r2
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x282>
 8000ec8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ecc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ed0:	d216      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed2:	4291      	cmp	r1, r2
 8000ed4:	d914      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000ed6:	3d02      	subs	r5, #2
 8000ed8:	4462      	add	r2, ip
 8000eda:	1a52      	subs	r2, r2, r1
 8000edc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ee0:	e738      	b.n	8000d54 <__udivmoddi4+0xfc>
 8000ee2:	4631      	mov	r1, r6
 8000ee4:	4630      	mov	r0, r6
 8000ee6:	e708      	b.n	8000cfa <__udivmoddi4+0xa2>
 8000ee8:	4639      	mov	r1, r7
 8000eea:	e6e6      	b.n	8000cba <__udivmoddi4+0x62>
 8000eec:	4610      	mov	r0, r2
 8000eee:	e6fb      	b.n	8000ce8 <__udivmoddi4+0x90>
 8000ef0:	4548      	cmp	r0, r9
 8000ef2:	d2a9      	bcs.n	8000e48 <__udivmoddi4+0x1f0>
 8000ef4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000efc:	3b01      	subs	r3, #1
 8000efe:	e7a3      	b.n	8000e48 <__udivmoddi4+0x1f0>
 8000f00:	4645      	mov	r5, r8
 8000f02:	e7ea      	b.n	8000eda <__udivmoddi4+0x282>
 8000f04:	462b      	mov	r3, r5
 8000f06:	e794      	b.n	8000e32 <__udivmoddi4+0x1da>
 8000f08:	4640      	mov	r0, r8
 8000f0a:	e7d1      	b.n	8000eb0 <__udivmoddi4+0x258>
 8000f0c:	46d0      	mov	r8, sl
 8000f0e:	e77b      	b.n	8000e08 <__udivmoddi4+0x1b0>
 8000f10:	3d02      	subs	r5, #2
 8000f12:	4462      	add	r2, ip
 8000f14:	e732      	b.n	8000d7c <__udivmoddi4+0x124>
 8000f16:	4608      	mov	r0, r1
 8000f18:	e70a      	b.n	8000d30 <__udivmoddi4+0xd8>
 8000f1a:	4464      	add	r4, ip
 8000f1c:	3802      	subs	r0, #2
 8000f1e:	e742      	b.n	8000da6 <__udivmoddi4+0x14e>

08000f20 <__aeabi_idiv0>:
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop

08000f24 <KalmanFilter.0>:
  int Length = sizeof(measurement)/sizeof(measurement[0]);
  float OutputArray[Length];


  // Assembly
  int KalmanFilter(float* InputArray, float* OutputArray, struct kalman_state * kstate, int length){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6178      	str	r0, [r7, #20]
 8000f2c:	6139      	str	r1, [r7, #16]
 8000f2e:	60fa      	str	r2, [r7, #12]
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	f8c7 c004 	str.w	ip, [r7, #4]
  	for (int i = 0; i<length; i++){
 8000f36:	2300      	movs	r3, #0
 8000f38:	61fb      	str	r3, [r7, #28]
 8000f3a:	e014      	b.n	8000f66 <KalmanFilter.0+0x42>
  		kalman(kstate,InputArray[i]);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	697a      	ldr	r2, [r7, #20]
 8000f42:	4413      	add	r3, r2
 8000f44:	edd3 7a00 	vldr	s15, [r3]
 8000f48:	eeb0 0a67 	vmov.f32	s0, s15
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f7ff f957 	bl	8000200 <kalman>
  		OutputArray[i] = kstate->x;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4413      	add	r3, r2
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	6892      	ldr	r2, [r2, #8]
 8000f5e:	601a      	str	r2, [r3, #0]
  	for (int i = 0; i<length; i++){
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	3301      	adds	r3, #1
 8000f64:	61fb      	str	r3, [r7, #28]
 8000f66:	69fa      	ldr	r2, [r7, #28]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbe6      	blt.n	8000f3c <KalmanFilter.0+0x18>
  	}
  	return 0;
 8000f6e:	2300      	movs	r3, #0
  }
 8000f70:	4618      	mov	r0, r3
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <main>:
{
 8000f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f7c:	b0f4      	sub	sp, #464	; 0x1d0
 8000f7e:	af00      	add	r7, sp, #0
int main(void)
 8000f80:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8000f84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  HAL_Init();
 8000f88:	f001 fa53 	bl	8002432 <HAL_Init>
  SystemClock_Config();
 8000f8c:	f000 f882 	bl	8001094 <SystemClock_Config>
  PeriphCommonClock_Config();
 8000f90:	f000 f8e2 	bl	8001158 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8000f94:	f000 fc38 	bl	8001808 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f98:	f000 f90e 	bl	80011b8 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000f9c:	f000 f970 	bl	8001280 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000fa0:	f000 f9a6 	bl	80012f0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fa4:	f000 f9e4 	bl	8001370 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000fa8:	f000 fa22 	bl	80013f0 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000fac:	f000 fa76 	bl	800149c <MX_SPI1_Init>
  MX_SPI3_Init();
 8000fb0:	f000 fab2 	bl	8001518 <MX_SPI3_Init>
  MX_UART4_Init();
 8000fb4:	f000 faee 	bl	8001594 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000fb8:	f000 fb38 	bl	800162c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fbc:	f000 fb82 	bl	80016c4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fc0:	f000 fbce 	bl	8001760 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fc4:	f000 fc18 	bl	80017f8 <MX_USB_OTG_FS_USB_Init>
  float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8000fc8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000fcc:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8000fd0:	4a2d      	ldr	r2, [pc, #180]	; (8001088 <main+0x110>)
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	4611      	mov	r1, r2
 8000fd6:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000fda:	461a      	mov	r2, r3
 8000fdc:	f006 fcb5 	bl	800794a <memcpy>
  float measurement[] = {0,1,2,3,4};
 8000fe0:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000fe4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000fe8:	4a28      	ldr	r2, [pc, #160]	; (800108c <main+0x114>)
 8000fea:	461c      	mov	r4, r3
 8000fec:	4615      	mov	r5, r2
 8000fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ff2:	682b      	ldr	r3, [r5, #0]
 8000ff4:	6023      	str	r3, [r4, #0]
  struct kalman_state SValue = {0.1,0.1,5,0.1,0};
 8000ff6:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000ffa:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8000ffe:	4a24      	ldr	r2, [pc, #144]	; (8001090 <main+0x118>)
 8001000:	461c      	mov	r4, r3
 8001002:	4615      	mov	r5, r2
 8001004:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001008:	682b      	ldr	r3, [r5, #0]
 800100a:	6023      	str	r3, [r4, #0]
  int Length = sizeof(measurement)/sizeof(measurement[0]);
 800100c:	2305      	movs	r3, #5
 800100e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  float OutputArray[Length];
 8001012:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8001016:	1e4b      	subs	r3, r1, #1
 8001018:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800101c:	460a      	mov	r2, r1
 800101e:	2300      	movs	r3, #0
 8001020:	4692      	mov	sl, r2
 8001022:	469b      	mov	fp, r3
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	f04f 0300 	mov.w	r3, #0
 800102c:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001030:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8001034:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001038:	460a      	mov	r2, r1
 800103a:	2300      	movs	r3, #0
 800103c:	4690      	mov	r8, r2
 800103e:	4699      	mov	r9, r3
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800104c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001050:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001054:	460b      	mov	r3, r1
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	3307      	adds	r3, #7
 800105a:	08db      	lsrs	r3, r3, #3
 800105c:	00db      	lsls	r3, r3, #3
 800105e:	ebad 0d03 	sub.w	sp, sp, r3
 8001062:	466b      	mov	r3, sp
 8001064:	3303      	adds	r3, #3
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  {
//	int ArraySize = sizeof(TEST_ARRAY)/sizeof(TEST_ARRAY[0]);
//    int MeasurementSize = sizeof(measurement)/sizeof(measurement[0]);
//	for (int i = 0; i<MeasurementSize;i++){
//		kalman(&SValue, measurement[i]);
	KalmanFilter(&measurement,&OutputArray,&SValue, Length);
 800106e:	1d3a      	adds	r2, r7, #4
 8001070:	f107 0018 	add.w	r0, r7, #24
 8001074:	f507 73e0 	add.w	r3, r7, #448	; 0x1c0
 8001078:	469c      	mov	ip, r3
 800107a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800107e:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 8001082:	f7ff ff4f 	bl	8000f24 <KalmanFilter.0>
 8001086:	e7f2      	b.n	800106e <main+0xf6>
 8001088:	08009818 	.word	0x08009818
 800108c:	080099ac 	.word	0x080099ac
 8001090:	080099c0 	.word	0x080099c0

08001094 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b096      	sub	sp, #88	; 0x58
 8001098:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2244      	movs	r2, #68	; 0x44
 80010a0:	2100      	movs	r1, #0
 80010a2:	4618      	mov	r0, r3
 80010a4:	f006 fc18 	bl	80078d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010a8:	463b      	mov	r3, r7
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
 80010b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010b6:	2000      	movs	r0, #0
 80010b8:	f003 fb36 	bl	8004728 <HAL_PWREx_ControlVoltageScaling>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010c2:	f000 fce3 	bl	8001a8c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010c6:	f003 faff 	bl	80046c8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010ca:	4b22      	ldr	r3, [pc, #136]	; (8001154 <SystemClock_Config+0xc0>)
 80010cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010d0:	4a20      	ldr	r2, [pc, #128]	; (8001154 <SystemClock_Config+0xc0>)
 80010d2:	f023 0318 	bic.w	r3, r3, #24
 80010d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010da:	2314      	movs	r3, #20
 80010dc:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010de:	2301      	movs	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010e2:	2301      	movs	r3, #1
 80010e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010e6:	2300      	movs	r3, #0
 80010e8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010ea:	2360      	movs	r3, #96	; 0x60
 80010ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ee:	2302      	movs	r3, #2
 80010f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80010f2:	2301      	movs	r3, #1
 80010f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80010fa:	233c      	movs	r3, #60	; 0x3c
 80010fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010fe:	2302      	movs	r3, #2
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001102:	2302      	movs	r3, #2
 8001104:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001106:	2302      	movs	r3, #2
 8001108:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0314 	add.w	r3, r7, #20
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fbae 	bl	8004870 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800111a:	f000 fcb7 	bl	8001a8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2303      	movs	r3, #3
 8001124:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001132:	463b      	mov	r3, r7
 8001134:	2105      	movs	r1, #5
 8001136:	4618      	mov	r0, r3
 8001138:	f003 ffb4 	bl	80050a4 <HAL_RCC_ClockConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001142:	f000 fca3 	bl	8001a8c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001146:	f004 fd9b 	bl	8005c80 <HAL_RCCEx_EnableMSIPLLMode>
}
 800114a:	bf00      	nop
 800114c:	3758      	adds	r7, #88	; 0x58
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40021000 	.word	0x40021000

08001158 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b0a6      	sub	sp, #152	; 0x98
 800115c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2294      	movs	r2, #148	; 0x94
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f006 fbb7 	bl	80078d8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800116a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800116e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001170:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001178:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800117c:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800117e:	2301      	movs	r3, #1
 8001180:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001182:	2301      	movs	r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001186:	2318      	movs	r3, #24
 8001188:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800118a:	2302      	movs	r3, #2
 800118c:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001192:	2302      	movs	r3, #2
 8001194:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001196:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800119a:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f004 fa3e 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011aa:	f000 fc6f 	bl	8001a8c <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3798      	adds	r7, #152	; 0x98
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
 80011cc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011d0:	4a29      	ldr	r2, [pc, #164]	; (8001278 <MX_ADC1_Init+0xc0>)
 80011d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ec:	4b21      	ldr	r3, [pc, #132]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011ee:	2204      	movs	r2, #4
 80011f0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <MX_ADC1_Init+0xbc>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80011fe:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <MX_ADC1_Init+0xbc>)
 8001200:	2201      	movs	r2, #1
 8001202:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <MX_ADC1_Init+0xbc>)
 8001206:	2200      	movs	r2, #0
 8001208:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800120c:	4b19      	ldr	r3, [pc, #100]	; (8001274 <MX_ADC1_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001212:	4b18      	ldr	r3, [pc, #96]	; (8001274 <MX_ADC1_Init+0xbc>)
 8001214:	2200      	movs	r2, #0
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001218:	4b16      	ldr	r3, [pc, #88]	; (8001274 <MX_ADC1_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001220:	4b14      	ldr	r3, [pc, #80]	; (8001274 <MX_ADC1_Init+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001226:	4b13      	ldr	r3, [pc, #76]	; (8001274 <MX_ADC1_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800122e:	4811      	ldr	r0, [pc, #68]	; (8001274 <MX_ADC1_Init+0xbc>)
 8001230:	f001 fb14 	bl	800285c <HAL_ADC_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800123a:	f000 fc27 	bl	8001a8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_ADC1_Init+0xc4>)
 8001240:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001242:	2306      	movs	r3, #6
 8001244:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800124a:	237f      	movs	r3, #127	; 0x7f
 800124c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800124e:	2304      	movs	r3, #4
 8001250:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	4619      	mov	r1, r3
 800125a:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_ADC1_Init+0xbc>)
 800125c:	f001 fc44 	bl	8002ae8 <HAL_ADC_ConfigChannel>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001266:	f000 fc11 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001f0 	.word	0x200001f0
 8001278:	50040000 	.word	0x50040000
 800127c:	04300002 	.word	0x04300002

08001280 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 8001286:	4a19      	ldr	r2, [pc, #100]	; (80012ec <MX_DFSDM1_Init+0x6c>)
 8001288:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 800128c:	2201      	movs	r2, #1
 800128e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 8001298:	2202      	movs	r2, #2
 800129a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012b6:	2204      	movs	r2, #4
 80012b8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012bc:	2200      	movs	r2, #0
 80012be:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80012c0:	4b09      	ldr	r3, [pc, #36]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80012cc:	4b06      	ldr	r3, [pc, #24]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_DFSDM1_Init+0x68>)
 80012d4:	f002 f916 	bl	8003504 <HAL_DFSDM_ChannelInit>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80012de:	f000 fbd5 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000258 	.word	0x20000258
 80012ec:	40016040 	.word	0x40016040

080012f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f4:	4b1b      	ldr	r3, [pc, #108]	; (8001364 <MX_I2C1_Init+0x74>)
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <MX_I2C1_Init+0x78>)
 80012f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <MX_I2C1_Init+0x74>)
 80012fc:	4a1b      	ldr	r2, [pc, #108]	; (800136c <MX_I2C1_Init+0x7c>)
 80012fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001300:	4b18      	ldr	r3, [pc, #96]	; (8001364 <MX_I2C1_Init+0x74>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001306:	4b17      	ldr	r3, [pc, #92]	; (8001364 <MX_I2C1_Init+0x74>)
 8001308:	2201      	movs	r2, #1
 800130a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <MX_I2C1_Init+0x74>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001312:	4b14      	ldr	r3, [pc, #80]	; (8001364 <MX_I2C1_Init+0x74>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001318:	4b12      	ldr	r3, [pc, #72]	; (8001364 <MX_I2C1_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131e:	4b11      	ldr	r3, [pc, #68]	; (8001364 <MX_I2C1_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <MX_I2C1_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <MX_I2C1_Init+0x74>)
 800132c:	f002 fbc3 	bl	8003ab6 <HAL_I2C_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001336:	f000 fba9 	bl	8001a8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133a:	2100      	movs	r1, #0
 800133c:	4809      	ldr	r0, [pc, #36]	; (8001364 <MX_I2C1_Init+0x74>)
 800133e:	f002 fc55 	bl	8003bec <HAL_I2CEx_ConfigAnalogFilter>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001348:	f000 fba0 	bl	8001a8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800134c:	2100      	movs	r1, #0
 800134e:	4805      	ldr	r0, [pc, #20]	; (8001364 <MX_I2C1_Init+0x74>)
 8001350:	f002 fc97 	bl	8003c82 <HAL_I2CEx_ConfigDigitalFilter>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800135a:	f000 fb97 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	20000290 	.word	0x20000290
 8001368:	40005400 	.word	0x40005400
 800136c:	307075b1 	.word	0x307075b1

08001370 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001376:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <MX_I2C2_Init+0x78>)
 8001378:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_I2C2_Init+0x74>)
 800137c:	4a1b      	ldr	r2, [pc, #108]	; (80013ec <MX_I2C2_Init+0x7c>)
 800137e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001386:	4b17      	ldr	r3, [pc, #92]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800138c:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_I2C2_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001392:	4b14      	ldr	r3, [pc, #80]	; (80013e4 <MX_I2C2_Init+0x74>)
 8001394:	2200      	movs	r2, #0
 8001396:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001398:	4b12      	ldr	r3, [pc, #72]	; (80013e4 <MX_I2C2_Init+0x74>)
 800139a:	2200      	movs	r2, #0
 800139c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013a4:	4b0f      	ldr	r3, [pc, #60]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013aa:	480e      	ldr	r0, [pc, #56]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013ac:	f002 fb83 	bl	8003ab6 <HAL_I2C_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013b6:	f000 fb69 	bl	8001a8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ba:	2100      	movs	r1, #0
 80013bc:	4809      	ldr	r0, [pc, #36]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013be:	f002 fc15 	bl	8003bec <HAL_I2CEx_ConfigAnalogFilter>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013c8:	f000 fb60 	bl	8001a8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013cc:	2100      	movs	r1, #0
 80013ce:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_I2C2_Init+0x74>)
 80013d0:	f002 fc57 	bl	8003c82 <HAL_I2CEx_ConfigDigitalFilter>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013da:	f000 fb57 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002e4 	.word	0x200002e4
 80013e8:	40005800 	.word	0x40005800
 80013ec:	307075b1 	.word	0x307075b1

080013f0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001406:	4a24      	ldr	r2, [pc, #144]	; (8001498 <MX_OCTOSPI1_Init+0xa8>)
 8001408:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800140a:	4b22      	ldr	r3, [pc, #136]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 800140c:	2201      	movs	r2, #1
 800140e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001410:	4b20      	ldr	r3, [pc, #128]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001416:	4b1f      	ldr	r3, [pc, #124]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001418:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800141c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001420:	2220      	movs	r2, #32
 8001422:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001426:	2201      	movs	r2, #1
 8001428:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001436:	4b17      	ldr	r3, [pc, #92]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001438:	2201      	movs	r2, #1
 800143a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 800143e:	2200      	movs	r2, #0
 8001440:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001450:	2208      	movs	r2, #8
 8001452:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001454:	480f      	ldr	r0, [pc, #60]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 8001456:	f002 fc61 	bl	8003d1c <HAL_OSPI_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001460:	f000 fb14 	bl	8001a8c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001464:	2301      	movs	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001468:	2301      	movs	r3, #1
 800146a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800146c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001470:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001472:	1d3b      	adds	r3, r7, #4
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4619      	mov	r1, r3
 800147a:	4806      	ldr	r0, [pc, #24]	; (8001494 <MX_OCTOSPI1_Init+0xa4>)
 800147c:	f002 fd08 	bl	8003e90 <HAL_OSPIM_Config>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001486:	f000 fb01 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800148a:	bf00      	nop
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000338 	.word	0x20000338
 8001498:	a0001000 	.word	0xa0001000

0800149c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_SPI1_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_SPI1_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_SPI1_Init+0x74>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_SPI1_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_SPI1_Init+0x74>)
 80014b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_SPI1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_SPI1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_SPI1_Init+0x74>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_SPI1_Init+0x74>)
 80014d2:	2208      	movs	r2, #8
 80014d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_SPI1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_SPI1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_SPI1_Init+0x74>)
 80014ea:	2207      	movs	r2, #7
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_SPI1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_SPI1_Init+0x74>)
 80014f6:	2208      	movs	r2, #8
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_SPI1_Init+0x74>)
 80014fc:	f004 fdb8 	bl	8006070 <HAL_SPI_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 fac1 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000388 	.word	0x20000388
 8001514:	40013000 	.word	0x40013000

08001518 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <MX_SPI3_Init+0x74>)
 800151e:	4a1c      	ldr	r2, [pc, #112]	; (8001590 <MX_SPI3_Init+0x78>)
 8001520:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001522:	4b1a      	ldr	r3, [pc, #104]	; (800158c <MX_SPI3_Init+0x74>)
 8001524:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001528:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800152a:	4b18      	ldr	r3, [pc, #96]	; (800158c <MX_SPI3_Init+0x74>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_SPI3_Init+0x74>)
 8001532:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001536:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_SPI3_Init+0x74>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <MX_SPI3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001544:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_SPI3_Init+0x74>)
 8001546:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_SPI3_Init+0x74>)
 800154e:	2208      	movs	r2, #8
 8001550:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_SPI3_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_SPI3_Init+0x74>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <MX_SPI3_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_SPI3_Init+0x74>)
 8001566:	2207      	movs	r2, #7
 8001568:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <MX_SPI3_Init+0x74>)
 800156c:	2200      	movs	r2, #0
 800156e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001570:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_SPI3_Init+0x74>)
 8001572:	2208      	movs	r2, #8
 8001574:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001576:	4805      	ldr	r0, [pc, #20]	; (800158c <MX_SPI3_Init+0x74>)
 8001578:	f004 fd7a 	bl	8006070 <HAL_SPI_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001582:	f000 fa83 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200003ec 	.word	0x200003ec
 8001590:	40003c00 	.word	0x40003c00

08001594 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001598:	4b22      	ldr	r3, [pc, #136]	; (8001624 <MX_UART4_Init+0x90>)
 800159a:	4a23      	ldr	r2, [pc, #140]	; (8001628 <MX_UART4_Init+0x94>)
 800159c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <MX_UART4_Init+0x90>)
 80015a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b1f      	ldr	r3, [pc, #124]	; (8001624 <MX_UART4_Init+0x90>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b1d      	ldr	r3, [pc, #116]	; (8001624 <MX_UART4_Init+0x90>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b1c      	ldr	r3, [pc, #112]	; (8001624 <MX_UART4_Init+0x90>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_UART4_Init+0x90>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b19      	ldr	r3, [pc, #100]	; (8001624 <MX_UART4_Init+0x90>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_UART4_Init+0x90>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_UART4_Init+0x90>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015d0:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_UART4_Init+0x90>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_UART4_Init+0x90>)
 80015d8:	2200      	movs	r2, #0
 80015da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015dc:	4811      	ldr	r0, [pc, #68]	; (8001624 <MX_UART4_Init+0x90>)
 80015de:	f004 fdea 	bl	80061b6 <HAL_UART_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015e8:	f000 fa50 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015ec:	2100      	movs	r1, #0
 80015ee:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_UART4_Init+0x90>)
 80015f0:	f005 fb80 	bl	8006cf4 <HAL_UARTEx_SetTxFifoThreshold>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 80015fa:	f000 fa47 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015fe:	2100      	movs	r1, #0
 8001600:	4808      	ldr	r0, [pc, #32]	; (8001624 <MX_UART4_Init+0x90>)
 8001602:	f005 fbb5 	bl	8006d70 <HAL_UARTEx_SetRxFifoThreshold>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 800160c:	f000 fa3e 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_UART4_Init+0x90>)
 8001612:	f005 fb36 	bl	8006c82 <HAL_UARTEx_DisableFifoMode>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 800161c:	f000 fa36 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000450 	.word	0x20000450
 8001628:	40004c00 	.word	0x40004c00

0800162c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001632:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <MX_USART1_UART_Init+0x94>)
 8001634:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001636:	4b21      	ldr	r3, [pc, #132]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001638:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800163c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800163e:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001644:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001646:	2200      	movs	r2, #0
 8001648:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800164a:	4b1c      	ldr	r3, [pc, #112]	; (80016bc <MX_USART1_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001650:	4b1a      	ldr	r3, [pc, #104]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001652:	220c      	movs	r2, #12
 8001654:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001656:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800165c:	4b17      	ldr	r3, [pc, #92]	; (80016bc <MX_USART1_UART_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001662:	4b16      	ldr	r3, [pc, #88]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001668:	4b14      	ldr	r3, [pc, #80]	; (80016bc <MX_USART1_UART_Init+0x90>)
 800166a:	2200      	movs	r2, #0
 800166c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166e:	4b13      	ldr	r3, [pc, #76]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001674:	4811      	ldr	r0, [pc, #68]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001676:	f004 fd9e 	bl	80061b6 <HAL_UART_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001680:	f000 fa04 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001684:	2100      	movs	r1, #0
 8001686:	480d      	ldr	r0, [pc, #52]	; (80016bc <MX_USART1_UART_Init+0x90>)
 8001688:	f005 fb34 	bl	8006cf4 <HAL_UARTEx_SetTxFifoThreshold>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001692:	f000 f9fb 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001696:	2100      	movs	r1, #0
 8001698:	4808      	ldr	r0, [pc, #32]	; (80016bc <MX_USART1_UART_Init+0x90>)
 800169a:	f005 fb69 	bl	8006d70 <HAL_UARTEx_SetRxFifoThreshold>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016a4:	f000 f9f2 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016a8:	4804      	ldr	r0, [pc, #16]	; (80016bc <MX_USART1_UART_Init+0x90>)
 80016aa:	f005 faea 	bl	8006c82 <HAL_UARTEx_DisableFifoMode>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f9ea 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	200004e4 	.word	0x200004e4
 80016c0:	40013800 	.word	0x40013800

080016c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c8:	4b23      	ldr	r3, [pc, #140]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016ca:	4a24      	ldr	r2, [pc, #144]	; (800175c <MX_USART2_UART_Init+0x98>)
 80016cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016d6:	4b20      	ldr	r3, [pc, #128]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016d8:	2200      	movs	r2, #0
 80016da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016dc:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016e2:	4b1d      	ldr	r3, [pc, #116]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016ea:	220c      	movs	r2, #12
 80016ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016f0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016f4:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <MX_USART2_UART_Init+0x94>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_USART2_UART_Init+0x94>)
 8001704:	2200      	movs	r2, #0
 8001706:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <MX_USART2_UART_Init+0x94>)
 800170a:	2200      	movs	r2, #0
 800170c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <MX_USART2_UART_Init+0x94>)
 8001710:	f004 fd51 	bl	80061b6 <HAL_UART_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800171a:	f000 f9b7 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800171e:	2100      	movs	r1, #0
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <MX_USART2_UART_Init+0x94>)
 8001722:	f005 fae7 	bl	8006cf4 <HAL_UARTEx_SetTxFifoThreshold>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 800172c:	f000 f9ae 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001730:	2100      	movs	r1, #0
 8001732:	4809      	ldr	r0, [pc, #36]	; (8001758 <MX_USART2_UART_Init+0x94>)
 8001734:	f005 fb1c 	bl	8006d70 <HAL_UARTEx_SetRxFifoThreshold>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 800173e:	f000 f9a5 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART2_UART_Init+0x94>)
 8001744:	f005 fa9d 	bl	8006c82 <HAL_UARTEx_DisableFifoMode>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 800174e:	f000 f99d 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	20000578 	.word	0x20000578
 800175c:	40004400 	.word	0x40004400

08001760 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001764:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001766:	4a23      	ldr	r2, [pc, #140]	; (80017f4 <MX_USART3_UART_Init+0x94>)
 8001768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b17      	ldr	r3, [pc, #92]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017a8:	4811      	ldr	r0, [pc, #68]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017aa:	f004 fd04 	bl	80061b6 <HAL_UART_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017b4:	f000 f96a 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017b8:	2100      	movs	r1, #0
 80017ba:	480d      	ldr	r0, [pc, #52]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017bc:	f005 fa9a 	bl	8006cf4 <HAL_UARTEx_SetTxFifoThreshold>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d001      	beq.n	80017ca <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017c6:	f000 f961 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017ca:	2100      	movs	r1, #0
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017ce:	f005 facf 	bl	8006d70 <HAL_UARTEx_SetRxFifoThreshold>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017d8:	f000 f958 	bl	8001a8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017dc:	4804      	ldr	r0, [pc, #16]	; (80017f0 <MX_USART3_UART_Init+0x90>)
 80017de:	f005 fa50 	bl	8006c82 <HAL_UARTEx_DisableFifoMode>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017e8:	f000 f950 	bl	8001a8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000060c 	.word	0x2000060c
 80017f4:	40004800 	.word	0x40004800

080017f8 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b08c      	sub	sp, #48	; 0x30
 800180c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
 8001816:	605a      	str	r2, [r3, #4]
 8001818:	609a      	str	r2, [r3, #8]
 800181a:	60da      	str	r2, [r3, #12]
 800181c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800181e:	4b96      	ldr	r3, [pc, #600]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001822:	4a95      	ldr	r2, [pc, #596]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001824:	f043 0310 	orr.w	r3, r3, #16
 8001828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800182a:	4b93      	ldr	r3, [pc, #588]	; (8001a78 <MX_GPIO_Init+0x270>)
 800182c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182e:	f003 0310 	and.w	r3, r3, #16
 8001832:	61bb      	str	r3, [r7, #24]
 8001834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b90      	ldr	r3, [pc, #576]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a8f      	ldr	r2, [pc, #572]	; (8001a78 <MX_GPIO_Init+0x270>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b8d      	ldr	r3, [pc, #564]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800184e:	4b8a      	ldr	r3, [pc, #552]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a89      	ldr	r2, [pc, #548]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b87      	ldr	r3, [pc, #540]	; (8001a78 <MX_GPIO_Init+0x270>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001866:	4b84      	ldr	r3, [pc, #528]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	4a83      	ldr	r2, [pc, #524]	; (8001a78 <MX_GPIO_Init+0x270>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001872:	4b81      	ldr	r3, [pc, #516]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	4b7e      	ldr	r3, [pc, #504]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	4a7d      	ldr	r2, [pc, #500]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	64d3      	str	r3, [r2, #76]	; 0x4c
 800188a:	4b7b      	ldr	r3, [pc, #492]	; (8001a78 <MX_GPIO_Init+0x270>)
 800188c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	60bb      	str	r3, [r7, #8]
 8001894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001896:	4b78      	ldr	r3, [pc, #480]	; (8001a78 <MX_GPIO_Init+0x270>)
 8001898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189a:	4a77      	ldr	r2, [pc, #476]	; (8001a78 <MX_GPIO_Init+0x270>)
 800189c:	f043 0308 	orr.w	r3, r3, #8
 80018a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a2:	4b75      	ldr	r3, [pc, #468]	; (8001a78 <MX_GPIO_Init+0x270>)
 80018a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	607b      	str	r3, [r7, #4]
 80018ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80018ae:	2200      	movs	r2, #0
 80018b0:	f240 1105 	movw	r1, #261	; 0x105
 80018b4:	4871      	ldr	r0, [pc, #452]	; (8001a7c <MX_GPIO_Init+0x274>)
 80018b6:	f002 f8c3 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80018ba:	2200      	movs	r2, #0
 80018bc:	f248 111c 	movw	r1, #33052	; 0x811c
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f002 f8bc 	bl	8003a40 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80018c8:	2200      	movs	r2, #0
 80018ca:	f24f 0134 	movw	r1, #61492	; 0xf034
 80018ce:	486c      	ldr	r0, [pc, #432]	; (8001a80 <MX_GPIO_Init+0x278>)
 80018d0:	f002 f8b6 	bl	8003a40 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80018d4:	2200      	movs	r2, #0
 80018d6:	f242 0183 	movw	r1, #8323	; 0x2083
 80018da:	486a      	ldr	r0, [pc, #424]	; (8001a84 <MX_GPIO_Init+0x27c>)
 80018dc:	f002 f8b0 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80018e6:	4868      	ldr	r0, [pc, #416]	; (8001a88 <MX_GPIO_Init+0x280>)
 80018e8:	f002 f8aa 	bl	8003a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80018ec:	f240 1305 	movw	r3, #261	; 0x105
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f2:	2301      	movs	r3, #1
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fa:	2300      	movs	r3, #0
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018fe:	f107 031c 	add.w	r3, r7, #28
 8001902:	4619      	mov	r1, r3
 8001904:	485d      	ldr	r0, [pc, #372]	; (8001a7c <MX_GPIO_Init+0x274>)
 8001906:	f001 ff09 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800190a:	237a      	movs	r3, #122	; 0x7a
 800190c:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800190e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001918:	f107 031c 	add.w	r3, r7, #28
 800191c:	4619      	mov	r1, r3
 800191e:	4857      	ldr	r0, [pc, #348]	; (8001a7c <MX_GPIO_Init+0x274>)
 8001920:	f001 fefc 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001924:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800192a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800192e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001934:	f107 031c 	add.w	r3, r7, #28
 8001938:	4619      	mov	r1, r3
 800193a:	4853      	ldr	r0, [pc, #332]	; (8001a88 <MX_GPIO_Init+0x280>)
 800193c:	f001 feee 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001940:	f248 131c 	movw	r3, #33052	; 0x811c
 8001944:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001946:	2301      	movs	r3, #1
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001952:	f107 031c 	add.w	r3, r7, #28
 8001956:	4619      	mov	r1, r3
 8001958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195c:	f001 fede 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001960:	2301      	movs	r3, #1
 8001962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001964:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	4619      	mov	r1, r3
 8001974:	4842      	ldr	r0, [pc, #264]	; (8001a80 <MX_GPIO_Init+0x278>)
 8001976:	f001 fed1 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800197a:	2302      	movs	r3, #2
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001986:	2300      	movs	r3, #0
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800198a:	2302      	movs	r3, #2
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	483a      	ldr	r0, [pc, #232]	; (8001a80 <MX_GPIO_Init+0x278>)
 8001996:	f001 fec1 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800199a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800199e:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a0:	2301      	movs	r3, #1
 80019a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a8:	2300      	movs	r3, #0
 80019aa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	4619      	mov	r1, r3
 80019b2:	4833      	ldr	r0, [pc, #204]	; (8001a80 <MX_GPIO_Init+0x278>)
 80019b4:	f001 feb2 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80019b8:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80019bc:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019c8:	f107 031c 	add.w	r3, r7, #28
 80019cc:	4619      	mov	r1, r3
 80019ce:	482d      	ldr	r0, [pc, #180]	; (8001a84 <MX_GPIO_Init+0x27c>)
 80019d0:	f001 fea4 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80019d4:	f242 0383 	movw	r3, #8323	; 0x2083
 80019d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019da:	2301      	movs	r3, #1
 80019dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019de:	2300      	movs	r3, #0
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	4825      	ldr	r0, [pc, #148]	; (8001a84 <MX_GPIO_Init+0x27c>)
 80019ee:	f001 fe95 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80019f2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f8:	2301      	movs	r3, #1
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 031c 	add.w	r3, r7, #28
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481f      	ldr	r0, [pc, #124]	; (8001a88 <MX_GPIO_Init+0x280>)
 8001a0c:	f001 fe86 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a16:	2300      	movs	r3, #0
 8001a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a28:	f001 fe78 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001a2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a3e:	230a      	movs	r3, #10
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4c:	f001 fe66 	bl	800371c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	2100      	movs	r1, #0
 8001a54:	2017      	movs	r0, #23
 8001a56:	f001 fd1e 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a5a:	2017      	movs	r0, #23
 8001a5c:	f001 fd37 	bl	80034ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2028      	movs	r0, #40	; 0x28
 8001a66:	f001 fd16 	bl	8003496 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a6a:	2028      	movs	r0, #40	; 0x28
 8001a6c:	f001 fd2f 	bl	80034ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a70:	bf00      	nop
 8001a72:	3730      	adds	r7, #48	; 0x30
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	48001000 	.word	0x48001000
 8001a80:	48000400 	.word	0x48000400
 8001a84:	48000c00 	.word	0x48000c00
 8001a88:	48000800 	.word	0x48000800

08001a8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <Error_Handler+0x8>
	...

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_MspInit+0x44>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_MspInit+0x44>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_MspInit+0x44>)
 8001aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	607b      	str	r3, [r7, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b09      	ldr	r3, [pc, #36]	; (8001adc <HAL_MspInit+0x44>)
 8001ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aba:	4a08      	ldr	r2, [pc, #32]	; (8001adc <HAL_MspInit+0x44>)
 8001abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	603b      	str	r3, [r7, #0]
 8001acc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08a      	sub	sp, #40	; 0x28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	605a      	str	r2, [r3, #4]
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	60da      	str	r2, [r3, #12]
 8001af6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <HAL_ADC_MspInit+0x74>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d123      	bne.n	8001b4a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b02:	4b15      	ldr	r3, [pc, #84]	; (8001b58 <HAL_ADC_MspInit+0x78>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a14      	ldr	r2, [pc, #80]	; (8001b58 <HAL_ADC_MspInit+0x78>)
 8001b08:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_ADC_MspInit+0x78>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b1a:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <HAL_ADC_MspInit+0x78>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <HAL_ADC_MspInit+0x78>)
 8001b20:	f043 0304 	orr.w	r3, r3, #4
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b0c      	ldr	r3, [pc, #48]	; (8001b58 <HAL_ADC_MspInit+0x78>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001b32:	233f      	movs	r3, #63	; 0x3f
 8001b34:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b36:	230b      	movs	r3, #11
 8001b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <HAL_ADC_MspInit+0x7c>)
 8001b46:	f001 fde9 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b4a:	bf00      	nop
 8001b4c:	3728      	adds	r7, #40	; 0x28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	50040000 	.word	0x50040000
 8001b58:	40021000 	.word	0x40021000
 8001b5c:	48000800 	.word	0x48000800

08001b60 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b0ae      	sub	sp, #184	; 0xb8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2294      	movs	r2, #148	; 0x94
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 fea9 	bl	80078d8 <memset>
  if(DFSDM1_Init == 0)
 8001b86:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d142      	bne.n	8001c14 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b8e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b9a:	f107 0310 	add.w	r3, r7, #16
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 fd3e 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001baa:	f7ff ff6f 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bb2:	4a1b      	ldr	r2, [pc, #108]	; (8001c20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8001bba:	4b19      	ldr	r3, [pc, #100]	; (8001c20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bca:	4a15      	ldr	r2, [pc, #84]	; (8001c20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd2:	4b13      	ldr	r3, [pc, #76]	; (8001c20 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001bde:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bec:	2300      	movs	r3, #0
 8001bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001bf8:	2306      	movs	r3, #6
 8001bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c02:	4619      	mov	r1, r3
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c06:	f001 fd89 	bl	800371c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c0a:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	4a02      	ldr	r2, [pc, #8]	; (8001c1c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c12:	6013      	str	r3, [r2, #0]
  }

}
 8001c14:	bf00      	nop
 8001c16:	37b8      	adds	r7, #184	; 0xb8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	200006a0 	.word	0x200006a0
 8001c20:	40021000 	.word	0x40021000
 8001c24:	48001000 	.word	0x48001000

08001c28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b0b0      	sub	sp, #192	; 0xc0
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	2294      	movs	r2, #148	; 0x94
 8001c46:	2100      	movs	r1, #0
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f005 fe45 	bl	80078d8 <memset>
  if(hi2c->Instance==I2C1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a42      	ldr	r2, [pc, #264]	; (8001d5c <HAL_I2C_MspInit+0x134>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d13c      	bne.n	8001cd2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c58:	2340      	movs	r3, #64	; 0x40
 8001c5a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c60:	f107 0318 	add.w	r3, r7, #24
 8001c64:	4618      	mov	r0, r3
 8001c66:	f003 fcdb 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d001      	beq.n	8001c74 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c70:	f7ff ff0c 	bl	8001a8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001c76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c78:	4a39      	ldr	r2, [pc, #228]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001c7a:	f043 0302 	orr.w	r3, r3, #2
 8001c7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001c82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c8c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c94:	2312      	movs	r3, #18
 8001c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ca6:	2304      	movs	r3, #4
 8001ca8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	482c      	ldr	r0, [pc, #176]	; (8001d64 <HAL_I2C_MspInit+0x13c>)
 8001cb4:	f001 fd32 	bl	800371c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cb8:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	4a28      	ldr	r2, [pc, #160]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001cbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cc2:	6593      	str	r3, [r2, #88]	; 0x58
 8001cc4:	4b26      	ldr	r3, [pc, #152]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cd0:	e040      	b.n	8001d54 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a24      	ldr	r2, [pc, #144]	; (8001d68 <HAL_I2C_MspInit+0x140>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d13b      	bne.n	8001d54 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cdc:	2380      	movs	r3, #128	; 0x80
 8001cde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ce4:	f107 0318 	add.w	r3, r7, #24
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fc99 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001cf4:	f7ff feca 	bl	8001a8c <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001cfe:	f043 0302 	orr.w	r3, r3, #2
 8001d02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d04:	4b16      	ldr	r3, [pc, #88]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001d06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d24:	2303      	movs	r3, #3
 8001d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d2a:	2304      	movs	r3, #4
 8001d2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d34:	4619      	mov	r1, r3
 8001d36:	480b      	ldr	r0, [pc, #44]	; (8001d64 <HAL_I2C_MspInit+0x13c>)
 8001d38:	f001 fcf0 	bl	800371c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d3c:	4b08      	ldr	r3, [pc, #32]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d40:	4a07      	ldr	r2, [pc, #28]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d46:	6593      	str	r3, [r2, #88]	; 0x58
 8001d48:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <HAL_I2C_MspInit+0x138>)
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d50:	60bb      	str	r3, [r7, #8]
 8001d52:	68bb      	ldr	r3, [r7, #8]
}
 8001d54:	bf00      	nop
 8001d56:	37c0      	adds	r7, #192	; 0xc0
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40005400 	.word	0x40005400
 8001d60:	40021000 	.word	0x40021000
 8001d64:	48000400 	.word	0x48000400
 8001d68:	40005800 	.word	0x40005800

08001d6c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b0b0      	sub	sp, #192	; 0xc0
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	2294      	movs	r2, #148	; 0x94
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f005 fda3 	bl	80078d8 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a28      	ldr	r2, [pc, #160]	; (8001e38 <HAL_OSPI_MspInit+0xcc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d149      	bne.n	8001e30 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001d9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001da0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001da8:	f107 0318 	add.w	r3, r7, #24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f003 fc37 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001db8:	f7ff fe68 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc0:	4a1e      	ldr	r2, [pc, #120]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001dd4:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd8:	4a18      	ldr	r2, [pc, #96]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6513      	str	r3, [r2, #80]	; 0x50
 8001de0:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de8:	613b      	str	r3, [r7, #16]
 8001dea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dec:	4b13      	ldr	r3, [pc, #76]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df0:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001df2:	f043 0310 	orr.w	r3, r3, #16
 8001df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001df8:	4b10      	ldr	r3, [pc, #64]	; (8001e3c <HAL_OSPI_MspInit+0xd0>)
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	f003 0310 	and.w	r3, r3, #16
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e04:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e08:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001e1e:	230a      	movs	r3, #10
 8001e20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e24:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4805      	ldr	r0, [pc, #20]	; (8001e40 <HAL_OSPI_MspInit+0xd4>)
 8001e2c:	f001 fc76 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001e30:	bf00      	nop
 8001e32:	37c0      	adds	r7, #192	; 0xc0
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	a0001000 	.word	0xa0001000
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	48001000 	.word	0x48001000

08001e44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e4c:	f107 031c 	add.w	r3, r7, #28
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a2f      	ldr	r2, [pc, #188]	; (8001f20 <HAL_SPI_MspInit+0xdc>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d129      	bne.n	8001eba <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e66:	4b2f      	ldr	r3, [pc, #188]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	4a2e      	ldr	r2, [pc, #184]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e70:	6613      	str	r3, [r2, #96]	; 0x60
 8001e72:	4b2c      	ldr	r3, [pc, #176]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7a:	61bb      	str	r3, [r7, #24]
 8001e7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	4b29      	ldr	r3, [pc, #164]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e82:	4a28      	ldr	r2, [pc, #160]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e8a:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
 8001e94:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001e96:	23e0      	movs	r3, #224	; 0xe0
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eaa:	f107 031c 	add.w	r3, r7, #28
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb4:	f001 fc32 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001eb8:	e02d      	b.n	8001f16 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a1a      	ldr	r2, [pc, #104]	; (8001f28 <HAL_SPI_MspInit+0xe4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d128      	bne.n	8001f16 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ec4:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001ec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec8:	4a16      	ldr	r2, [pc, #88]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ece:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed0:	4b14      	ldr	r3, [pc, #80]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001ede:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ee0:	4a10      	ldr	r2, [pc, #64]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ee8:	4b0e      	ldr	r3, [pc, #56]	; (8001f24 <HAL_SPI_MspInit+0xe0>)
 8001eea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	60fb      	str	r3, [r7, #12]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001ef4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efa:	2302      	movs	r3, #2
 8001efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	2300      	movs	r3, #0
 8001f00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f02:	2303      	movs	r3, #3
 8001f04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f06:	2306      	movs	r3, #6
 8001f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f0a:	f107 031c 	add.w	r3, r7, #28
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4806      	ldr	r0, [pc, #24]	; (8001f2c <HAL_SPI_MspInit+0xe8>)
 8001f12:	f001 fc03 	bl	800371c <HAL_GPIO_Init>
}
 8001f16:	bf00      	nop
 8001f18:	3730      	adds	r7, #48	; 0x30
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40013000 	.word	0x40013000
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40003c00 	.word	0x40003c00
 8001f2c:	48000800 	.word	0x48000800

08001f30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b0b4      	sub	sp, #208	; 0xd0
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	609a      	str	r2, [r3, #8]
 8001f44:	60da      	str	r2, [r3, #12]
 8001f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f48:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f4c:	2294      	movs	r2, #148	; 0x94
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f005 fcc1 	bl	80078d8 <memset>
  if(huart->Instance==UART4)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a83      	ldr	r2, [pc, #524]	; (8002168 <HAL_UART_MspInit+0x238>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d13c      	bne.n	8001fda <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f60:	2308      	movs	r3, #8
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f64:	2300      	movs	r3, #0
 8001f66:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f003 fb57 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f78:	f7ff fd88 	bl	8001a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f7c:	4b7b      	ldr	r3, [pc, #492]	; (800216c <HAL_UART_MspInit+0x23c>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a7a      	ldr	r2, [pc, #488]	; (800216c <HAL_UART_MspInit+0x23c>)
 8001f82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
 8001f88:	4b78      	ldr	r3, [pc, #480]	; (800216c <HAL_UART_MspInit+0x23c>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
 8001f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f94:	4b75      	ldr	r3, [pc, #468]	; (800216c <HAL_UART_MspInit+0x23c>)
 8001f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f98:	4a74      	ldr	r2, [pc, #464]	; (800216c <HAL_UART_MspInit+0x23c>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa0:	4b72      	ldr	r3, [pc, #456]	; (800216c <HAL_UART_MspInit+0x23c>)
 8001fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	623b      	str	r3, [r7, #32]
 8001faa:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001fac:	2303      	movs	r3, #3
 8001fae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fc4:	2308      	movs	r3, #8
 8001fc6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fce:	4619      	mov	r1, r3
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd4:	f001 fba2 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fd8:	e0c2      	b.n	8002160 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a64      	ldr	r2, [pc, #400]	; (8002170 <HAL_UART_MspInit+0x240>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d13b      	bne.n	800205c <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f003 fb15 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001ffc:	f7ff fd46 	bl	8001a8c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002000:	4b5a      	ldr	r3, [pc, #360]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002004:	4a59      	ldr	r2, [pc, #356]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800200a:	6613      	str	r3, [r2, #96]	; 0x60
 800200c:	4b57      	ldr	r3, [pc, #348]	; (800216c <HAL_UART_MspInit+0x23c>)
 800200e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002014:	61fb      	str	r3, [r7, #28]
 8002016:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002018:	4b54      	ldr	r3, [pc, #336]	; (800216c <HAL_UART_MspInit+0x23c>)
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	4a53      	ldr	r2, [pc, #332]	; (800216c <HAL_UART_MspInit+0x23c>)
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002024:	4b51      	ldr	r3, [pc, #324]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	61bb      	str	r3, [r7, #24]
 800202e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002036:	2302      	movs	r3, #2
 8002038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002048:	2307      	movs	r3, #7
 800204a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800204e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002052:	4619      	mov	r1, r3
 8002054:	4847      	ldr	r0, [pc, #284]	; (8002174 <HAL_UART_MspInit+0x244>)
 8002056:	f001 fb61 	bl	800371c <HAL_GPIO_Init>
}
 800205a:	e081      	b.n	8002160 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a45      	ldr	r2, [pc, #276]	; (8002178 <HAL_UART_MspInit+0x248>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d13b      	bne.n	80020de <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002066:	2302      	movs	r3, #2
 8002068:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800206a:	2300      	movs	r3, #0
 800206c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800206e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002072:	4618      	mov	r0, r3
 8002074:	f003 fad4 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <HAL_UART_MspInit+0x152>
      Error_Handler();
 800207e:	f7ff fd05 	bl	8001a8c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002082:	4b3a      	ldr	r3, [pc, #232]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002086:	4a39      	ldr	r2, [pc, #228]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002088:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800208c:	6593      	str	r3, [r2, #88]	; 0x58
 800208e:	4b37      	ldr	r3, [pc, #220]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_UART_MspInit+0x23c>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800209e:	4a33      	ldr	r2, [pc, #204]	; (800216c <HAL_UART_MspInit+0x23c>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_UART_MspInit+0x23c>)
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80020b2:	2378      	movs	r3, #120	; 0x78
 80020b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020ca:	2307      	movs	r3, #7
 80020cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020d4:	4619      	mov	r1, r3
 80020d6:	4829      	ldr	r0, [pc, #164]	; (800217c <HAL_UART_MspInit+0x24c>)
 80020d8:	f001 fb20 	bl	800371c <HAL_GPIO_Init>
}
 80020dc:	e040      	b.n	8002160 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a27      	ldr	r2, [pc, #156]	; (8002180 <HAL_UART_MspInit+0x250>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d13b      	bne.n	8002160 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020e8:	2304      	movs	r3, #4
 80020ea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 fa93 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002100:	f7ff fcc4 	bl	8001a8c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002104:	4b19      	ldr	r3, [pc, #100]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	4a18      	ldr	r2, [pc, #96]	; (800216c <HAL_UART_MspInit+0x23c>)
 800210a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800210e:	6593      	str	r3, [r2, #88]	; 0x58
 8002110:	4b16      	ldr	r3, [pc, #88]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002114:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002118:	60fb      	str	r3, [r7, #12]
 800211a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800211c:	4b13      	ldr	r3, [pc, #76]	; (800216c <HAL_UART_MspInit+0x23c>)
 800211e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002120:	4a12      	ldr	r2, [pc, #72]	; (800216c <HAL_UART_MspInit+0x23c>)
 8002122:	f043 0308 	orr.w	r3, r3, #8
 8002126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002128:	4b10      	ldr	r3, [pc, #64]	; (800216c <HAL_UART_MspInit+0x23c>)
 800212a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212c:	f003 0308 	and.w	r3, r3, #8
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002134:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800213c:	2302      	movs	r3, #2
 800213e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800214e:	2307      	movs	r3, #7
 8002150:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002154:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002158:	4619      	mov	r1, r3
 800215a:	4808      	ldr	r0, [pc, #32]	; (800217c <HAL_UART_MspInit+0x24c>)
 800215c:	f001 fade 	bl	800371c <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	37d0      	adds	r7, #208	; 0xd0
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40004c00 	.word	0x40004c00
 800216c:	40021000 	.word	0x40021000
 8002170:	40013800 	.word	0x40013800
 8002174:	48000400 	.word	0x48000400
 8002178:	40004400 	.word	0x40004400
 800217c:	48000c00 	.word	0x48000c00
 8002180:	40004800 	.word	0x40004800

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d0:	f000 f984 	bl	80024dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80021dc:	2020      	movs	r0, #32
 80021de:	f001 fc47 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80021e2:	2040      	movs	r0, #64	; 0x40
 80021e4:	f001 fc44 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80021e8:	2080      	movs	r0, #128	; 0x80
 80021ea:	f001 fc41 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80021ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80021f2:	f001 fc3d 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}

080021fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80021fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002202:	f001 fc35 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8002206:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800220a:	f001 fc31 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 800220e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002212:	f001 fc2d 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8002216:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800221a:	f001 fc29 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800221e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002222:	f001 fc25 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8002226:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800222a:	f001 fc21 	bl	8003a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}

08002232 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002232:	b480      	push	{r7}
 8002234:	af00      	add	r7, sp, #0
  return 1;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <_kill>:

int _kill(int pid, int sig)
{
 8002242:	b580      	push	{r7, lr}
 8002244:	b082      	sub	sp, #8
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
 800224a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800224c:	f005 fb50 	bl	80078f0 <__errno>
 8002250:	4603      	mov	r3, r0
 8002252:	2216      	movs	r2, #22
 8002254:	601a      	str	r2, [r3, #0]
  return -1;
 8002256:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800225a:	4618      	mov	r0, r3
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <_exit>:

void _exit (int status)
{
 8002262:	b580      	push	{r7, lr}
 8002264:	b082      	sub	sp, #8
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800226a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f7ff ffe7 	bl	8002242 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002274:	e7fe      	b.n	8002274 <_exit+0x12>

08002276 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b086      	sub	sp, #24
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e00a      	b.n	800229e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002288:	f3af 8000 	nop.w
 800228c:	4601      	mov	r1, r0
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60ba      	str	r2, [r7, #8]
 8002294:	b2ca      	uxtb	r2, r1
 8002296:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	3301      	adds	r3, #1
 800229c:	617b      	str	r3, [r7, #20]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	dbf0      	blt.n	8002288 <_read+0x12>
  }

  return len;
 80022a6:	687b      	ldr	r3, [r7, #4]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	3718      	adds	r7, #24
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	e009      	b.n	80022d6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	60ba      	str	r2, [r7, #8]
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3301      	adds	r3, #1
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	697a      	ldr	r2, [r7, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	429a      	cmp	r2, r3
 80022dc:	dbf1      	blt.n	80022c2 <_write+0x12>
  }
  return len;
 80022de:	687b      	ldr	r3, [r7, #4]
}
 80022e0:	4618      	mov	r0, r3
 80022e2:	3718      	adds	r7, #24
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}

080022e8 <_close>:

int _close(int file)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002310:	605a      	str	r2, [r3, #4]
  return 0;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <_isatty>:

int _isatty(int file)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002328:	2301      	movs	r3, #1
}
 800232a:	4618      	mov	r0, r3
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002336:	b480      	push	{r7}
 8002338:	b085      	sub	sp, #20
 800233a:	af00      	add	r7, sp, #0
 800233c:	60f8      	str	r0, [r7, #12]
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002358:	4a14      	ldr	r2, [pc, #80]	; (80023ac <_sbrk+0x5c>)
 800235a:	4b15      	ldr	r3, [pc, #84]	; (80023b0 <_sbrk+0x60>)
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002364:	4b13      	ldr	r3, [pc, #76]	; (80023b4 <_sbrk+0x64>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d102      	bne.n	8002372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800236c:	4b11      	ldr	r3, [pc, #68]	; (80023b4 <_sbrk+0x64>)
 800236e:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <_sbrk+0x68>)
 8002370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002372:	4b10      	ldr	r3, [pc, #64]	; (80023b4 <_sbrk+0x64>)
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	429a      	cmp	r2, r3
 800237e:	d207      	bcs.n	8002390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002380:	f005 fab6 	bl	80078f0 <__errno>
 8002384:	4603      	mov	r3, r0
 8002386:	220c      	movs	r2, #12
 8002388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800238a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800238e:	e009      	b.n	80023a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002396:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <_sbrk+0x64>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4413      	add	r3, r2
 800239e:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <_sbrk+0x64>)
 80023a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200a0000 	.word	0x200a0000
 80023b0:	00000400 	.word	0x00000400
 80023b4:	200006a4 	.word	0x200006a4
 80023b8:	20000820 	.word	0x20000820

080023bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <SystemInit+0x20>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c6:	4a05      	ldr	r2, [pc, #20]	; (80023dc <SystemInit+0x20>)
 80023c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002418 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023e4:	f7ff ffea 	bl	80023bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023e8:	480c      	ldr	r0, [pc, #48]	; (800241c <LoopForever+0x6>)
  ldr r1, =_edata
 80023ea:	490d      	ldr	r1, [pc, #52]	; (8002420 <LoopForever+0xa>)
  ldr r2, =_sidata
 80023ec:	4a0d      	ldr	r2, [pc, #52]	; (8002424 <LoopForever+0xe>)
  movs r3, #0
 80023ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f0:	e002      	b.n	80023f8 <LoopCopyDataInit>

080023f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023f6:	3304      	adds	r3, #4

080023f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023fc:	d3f9      	bcc.n	80023f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023fe:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002400:	4c0a      	ldr	r4, [pc, #40]	; (800242c <LoopForever+0x16>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002404:	e001      	b.n	800240a <LoopFillZerobss>

08002406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002408:	3204      	adds	r2, #4

0800240a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800240c:	d3fb      	bcc.n	8002406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800240e:	f005 fa75 	bl	80078fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002412:	f7fe fdb1 	bl	8000f78 <main>

08002416 <LoopForever>:

LoopForever:
    b LoopForever
 8002416:	e7fe      	b.n	8002416 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002418:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002420:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002424:	08009dc4 	.word	0x08009dc4
  ldr r2, =_sbss
 8002428:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800242c:	2000081c 	.word	0x2000081c

08002430 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_IRQHandler>

08002432 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002432:	b580      	push	{r7, lr}
 8002434:	b082      	sub	sp, #8
 8002436:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002438:	2300      	movs	r3, #0
 800243a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800243c:	2003      	movs	r0, #3
 800243e:	f001 f81f 	bl	8003480 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002442:	2000      	movs	r0, #0
 8002444:	f000 f80e 	bl	8002464 <HAL_InitTick>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d002      	beq.n	8002454 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	71fb      	strb	r3, [r7, #7]
 8002452:	e001      	b.n	8002458 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002454:	f7ff fb20 	bl	8001a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002458:	79fb      	ldrb	r3, [r7, #7]
}
 800245a:	4618      	mov	r0, r3
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
	...

08002464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_InitTick+0x6c>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d023      	beq.n	80024c0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002478:	4b16      	ldr	r3, [pc, #88]	; (80024d4 <HAL_InitTick+0x70>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_InitTick+0x6c>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002486:	fbb3 f3f1 	udiv	r3, r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f001 f82b 	bl	80034ea <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10f      	bne.n	80024ba <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b0f      	cmp	r3, #15
 800249e:	d809      	bhi.n	80024b4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a0:	2200      	movs	r2, #0
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024a8:	f000 fff5 	bl	8003496 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_InitTick+0x74>)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6013      	str	r3, [r2, #0]
 80024b2:	e007      	b.n	80024c4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e004      	b.n	80024c4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	73fb      	strb	r3, [r7, #15]
 80024be:	e001      	b.n	80024c4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000000 	.word	0x20000000
 80024d8:	20000004 	.word	0x20000004

080024dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <HAL_IncTick+0x20>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <HAL_IncTick+0x24>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4413      	add	r3, r2
 80024ec:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_IncTick+0x24>)
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000008 	.word	0x20000008
 8002500:	200006a8 	.word	0x200006a8

08002504 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  return uwTick;
 8002508:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GetTick+0x14>)
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	200006a8 	.word	0x200006a8

0800251c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800251c:	b480      	push	{r7}
 800251e:	b083      	sub	sp, #12
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	431a      	orrs	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	609a      	str	r2, [r3, #8]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002542:	b480      	push	{r7}
 8002544:	b083      	sub	sp, #12
 8002546:	af00      	add	r7, sp, #0
 8002548:	6078      	str	r0, [r7, #4]
 800254a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	609a      	str	r2, [r3, #8]
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002584:	b480      	push	{r7}
 8002586:	b087      	sub	sp, #28
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
 8002590:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	3360      	adds	r3, #96	; 0x60
 8002596:	461a      	mov	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4413      	add	r3, r2
 800259e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <LL_ADC_SetOffset+0x44>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	430a      	orrs	r2, r1
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025bc:	bf00      	nop
 80025be:	371c      	adds	r7, #28
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	03fff000 	.word	0x03fff000

080025cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3360      	adds	r3, #96	; 0x60
 80025da:	461a      	mov	r2, r3
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	3360      	adds	r3, #96	; 0x60
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	431a      	orrs	r2, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002622:	bf00      	nop
 8002624:	371c      	adds	r7, #28
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	615a      	str	r2, [r3, #20]
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002654:	b480      	push	{r7}
 8002656:	b087      	sub	sp, #28
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3330      	adds	r3, #48	; 0x30
 8002664:	461a      	mov	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	f003 030c 	and.w	r3, r3, #12
 8002670:	4413      	add	r3, r2
 8002672:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f003 031f 	and.w	r3, r3, #31
 800267e:	211f      	movs	r1, #31
 8002680:	fa01 f303 	lsl.w	r3, r1, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	401a      	ands	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	0e9b      	lsrs	r3, r3, #26
 800268c:	f003 011f 	and.w	r1, r3, #31
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	f003 031f 	and.w	r3, r3, #31
 8002696:	fa01 f303 	lsl.w	r3, r1, r3
 800269a:	431a      	orrs	r2, r3
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026a0:	bf00      	nop
 80026a2:	371c      	adds	r7, #28
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b087      	sub	sp, #28
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	3314      	adds	r3, #20
 80026bc:	461a      	mov	r2, r3
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	0e5b      	lsrs	r3, r3, #25
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	4413      	add	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	0d1b      	lsrs	r3, r3, #20
 80026d4:	f003 031f 	and.w	r3, r3, #31
 80026d8:	2107      	movs	r1, #7
 80026da:	fa01 f303 	lsl.w	r3, r1, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	401a      	ands	r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	0d1b      	lsrs	r3, r3, #20
 80026e6:	f003 031f 	and.w	r3, r3, #31
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	fa01 f303 	lsl.w	r3, r1, r3
 80026f0:	431a      	orrs	r2, r3
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026f6:	bf00      	nop
 80026f8:	371c      	adds	r7, #28
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	60f8      	str	r0, [r7, #12]
 800270c:	60b9      	str	r1, [r7, #8]
 800270e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f003 0318 	and.w	r3, r3, #24
 8002726:	4908      	ldr	r1, [pc, #32]	; (8002748 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002728:	40d9      	lsrs	r1, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	400b      	ands	r3, r1
 800272e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002732:	431a      	orrs	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800273a:	bf00      	nop
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	0007ffff 	.word	0x0007ffff

0800274c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800275c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6093      	str	r3, [r2, #8]
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002784:	d101      	bne.n	800278a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002786:	2301      	movs	r3, #1
 8002788:	e000      	b.n	800278c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d4:	d101      	bne.n	80027da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d101      	bne.n	8002800 <LL_ADC_IsEnabled+0x18>
 80027fc:	2301      	movs	r3, #1
 80027fe:	e000      	b.n	8002802 <LL_ADC_IsEnabled+0x1a>
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b04      	cmp	r3, #4
 8002820:	d101      	bne.n	8002826 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b08      	cmp	r3, #8
 8002846:	d101      	bne.n	800284c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
	...

0800285c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002864:	2300      	movs	r3, #0
 8002866:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002868:	2300      	movs	r3, #0
 800286a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d101      	bne.n	8002876 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e129      	b.n	8002aca <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002880:	2b00      	cmp	r3, #0
 8002882:	d109      	bne.n	8002898 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff f92b 	bl	8001ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff67 	bl	8002770 <LL_ADC_IsDeepPowerDownEnabled>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d004      	beq.n	80028b2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ff4d 	bl	800274c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ff82 	bl	80027c0 <LL_ADC_IsInternalRegulatorEnabled>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d115      	bne.n	80028ee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff66 	bl	8002798 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028cc:	4b81      	ldr	r3, [pc, #516]	; (8002ad4 <HAL_ADC_Init+0x278>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	4a81      	ldr	r2, [pc, #516]	; (8002ad8 <HAL_ADC_Init+0x27c>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028e0:	e002      	b.n	80028e8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f9      	bne.n	80028e2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff ff64 	bl	80027c0 <LL_ADC_IsInternalRegulatorEnabled>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d10d      	bne.n	800291a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002902:	f043 0210 	orr.w	r2, r3, #16
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	f043 0201 	orr.w	r2, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4618      	mov	r0, r3
 8002920:	f7ff ff75 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 8002924:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	f040 80c2 	bne.w	8002ab8 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	2b00      	cmp	r3, #0
 8002938:	f040 80be 	bne.w	8002ab8 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002940:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002944:	f043 0202 	orr.w	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff ff49 	bl	80027e8 <LL_ADC_IsEnabled>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10b      	bne.n	8002974 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800295c:	485f      	ldr	r0, [pc, #380]	; (8002adc <HAL_ADC_Init+0x280>)
 800295e:	f7ff ff43 	bl	80027e8 <LL_ADC_IsEnabled>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4619      	mov	r1, r3
 800296e:	485c      	ldr	r0, [pc, #368]	; (8002ae0 <HAL_ADC_Init+0x284>)
 8002970:	f7ff fdd4 	bl	800251c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7e5b      	ldrb	r3, [r3, #25]
 8002978:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800297e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002984:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800298a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002992:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002994:	4313      	orrs	r3, r2
 8002996:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d106      	bne.n	80029b0 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a6:	3b01      	subs	r3, #1
 80029a8:	045b      	lsls	r3, r3, #17
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d009      	beq.n	80029cc <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	68da      	ldr	r2, [r3, #12]
 80029d2:	4b44      	ldr	r3, [pc, #272]	; (8002ae4 <HAL_ADC_Init+0x288>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6812      	ldr	r2, [r2, #0]
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	430b      	orrs	r3, r1
 80029de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff ff25 	bl	8002834 <LL_ADC_INJ_IsConversionOngoing>
 80029ea:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d140      	bne.n	8002a74 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d13d      	bne.n	8002a74 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	7e1b      	ldrb	r3, [r3, #24]
 8002a00:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a02:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a0a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a1a:	f023 0306 	bic.w	r3, r3, #6
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6812      	ldr	r2, [r2, #0]
 8002a22:	69b9      	ldr	r1, [r7, #24]
 8002a24:	430b      	orrs	r3, r1
 8002a26:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d118      	bne.n	8002a64 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a48:	4311      	orrs	r1, r2
 8002a4a:	687a      	ldr	r2, [r7, #4]
 8002a4c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a4e:	4311      	orrs	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a54:	430a      	orrs	r2, r1
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	611a      	str	r2, [r3, #16]
 8002a62:	e007      	b.n	8002a74 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691a      	ldr	r2, [r3, #16]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f022 0201 	bic.w	r2, r2, #1
 8002a72:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d10c      	bne.n	8002a96 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	f023 010f 	bic.w	r1, r3, #15
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	1e5a      	subs	r2, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	631a      	str	r2, [r3, #48]	; 0x30
 8002a94:	e007      	b.n	8002aa6 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 020f 	bic.w	r2, r2, #15
 8002aa4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	f043 0201 	orr.w	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	659a      	str	r2, [r3, #88]	; 0x58
 8002ab6:	e007      	b.n	8002ac8 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	f043 0210 	orr.w	r2, r3, #16
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ac8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	053e2d63 	.word	0x053e2d63
 8002adc:	50040000 	.word	0x50040000
 8002ae0:	50040300 	.word	0x50040300
 8002ae4:	fff0c007 	.word	0xfff0c007

08002ae8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b0b6      	sub	sp, #216	; 0xd8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d101      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x22>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e3d5      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x7ce>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fe79 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	f040 83ba 	bne.w	8003298 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b05      	cmp	r3, #5
 8002b32:	d824      	bhi.n	8002b7e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	3b02      	subs	r3, #2
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d81b      	bhi.n	8002b76 <HAL_ADC_ConfigChannel+0x8e>
 8002b3e:	a201      	add	r2, pc, #4	; (adr r2, 8002b44 <HAL_ADC_ConfigChannel+0x5c>)
 8002b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b44:	08002b55 	.word	0x08002b55
 8002b48:	08002b5d 	.word	0x08002b5d
 8002b4c:	08002b65 	.word	0x08002b65
 8002b50:	08002b6d 	.word	0x08002b6d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b54:	230c      	movs	r3, #12
 8002b56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b5a:	e010      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b5c:	2312      	movs	r3, #18
 8002b5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b62:	e00c      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b64:	2318      	movs	r3, #24
 8002b66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b6a:	e008      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b74:	e003      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b76:	2306      	movs	r3, #6
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b7c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6818      	ldr	r0, [r3, #0]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b8c:	f7ff fd62 	bl	8002654 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff fe3a 	bl	800280e <LL_ADC_REG_IsConversionOngoing>
 8002b9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe46 	bl	8002834 <LL_ADC_INJ_IsConversionOngoing>
 8002ba8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f040 81bf 	bne.w	8002f34 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f040 81ba 	bne.w	8002f34 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bc8:	d10f      	bne.n	8002bea <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6818      	ldr	r0, [r3, #0]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f7ff fd69 	bl	80026ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7ff fd23 	bl	800262e <LL_ADC_SetSamplingTimeCommonConfig>
 8002be8:	e00e      	b.n	8002c08 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6818      	ldr	r0, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	6819      	ldr	r1, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	f7ff fd58 	bl	80026ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fd13 	bl	800262e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695a      	ldr	r2, [r3, #20]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
 8002c12:	08db      	lsrs	r3, r3, #3
 8002c14:	f003 0303 	and.w	r3, r3, #3
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d00a      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6818      	ldr	r0, [r3, #0]
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6919      	ldr	r1, [r3, #16]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c3a:	f7ff fca3 	bl	8002584 <LL_ADC_SetOffset>
 8002c3e:	e179      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7ff fcc0 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10a      	bne.n	8002c6c <HAL_ADC_ConfigChannel+0x184>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fcb5 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	0e9b      	lsrs	r3, r3, #26
 8002c66:	f003 021f 	and.w	r2, r3, #31
 8002c6a:	e01e      	b.n	8002caa <HAL_ADC_ConfigChannel+0x1c2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2100      	movs	r1, #0
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fcaa 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c82:	fa93 f3a3 	rbit	r3, r3
 8002c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002c9a:	2320      	movs	r3, #32
 8002c9c:	e004      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002c9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002ca2:	fab3 f383 	clz	r3, r3
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d105      	bne.n	8002cc2 <HAL_ADC_ConfigChannel+0x1da>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	0e9b      	lsrs	r3, r3, #26
 8002cbc:	f003 031f 	and.w	r3, r3, #31
 8002cc0:	e018      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x20c>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002cce:	fa93 f3a3 	rbit	r3, r3
 8002cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002cd6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002cde:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	e004      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002cea:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cee:	fab3 f383 	clz	r3, r3
 8002cf2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d106      	bne.n	8002d06 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7ff fc79 	bl	80025f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fc5d 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10a      	bne.n	8002d32 <HAL_ADC_ConfigChannel+0x24a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2101      	movs	r1, #1
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7ff fc52 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	0e9b      	lsrs	r3, r3, #26
 8002d2c:	f003 021f 	and.w	r2, r3, #31
 8002d30:	e01e      	b.n	8002d70 <HAL_ADC_ConfigChannel+0x288>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2101      	movs	r1, #1
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fc47 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d48:	fa93 f3a3 	rbit	r3, r3
 8002d4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d54:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d58:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d101      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002d60:	2320      	movs	r3, #32
 8002d62:	e004      	b.n	8002d6e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002d64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x2a0>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	e018      	b.n	8002dba <HAL_ADC_ConfigChannel+0x2d2>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002da0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d101      	bne.n	8002db0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002dac:	2320      	movs	r3, #32
 8002dae:	e004      	b.n	8002dba <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002db0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002db4:	fab3 f383 	clz	r3, r3
 8002db8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d106      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fc16 	bl	80025f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2102      	movs	r1, #2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fbfa 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x310>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2102      	movs	r1, #2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff fbef 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002dee:	4603      	mov	r3, r0
 8002df0:	0e9b      	lsrs	r3, r3, #26
 8002df2:	f003 021f 	and.w	r2, r3, #31
 8002df6:	e01e      	b.n	8002e36 <HAL_ADC_ConfigChannel+0x34e>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2102      	movs	r1, #2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff fbe4 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002e1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002e26:	2320      	movs	r3, #32
 8002e28:	e004      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002e2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e2e:	fab3 f383 	clz	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d105      	bne.n	8002e4e <HAL_ADC_ConfigChannel+0x366>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	0e9b      	lsrs	r3, r3, #26
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	e014      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x390>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e54:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e56:	fa93 f3a3 	rbit	r3, r3
 8002e5a:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e62:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002e6a:	2320      	movs	r3, #32
 8002e6c:	e004      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002e6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e72:	fab3 f383 	clz	r3, r3
 8002e76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d106      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2102      	movs	r1, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fbb7 	bl	80025f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2103      	movs	r1, #3
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fb9b 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002e96:	4603      	mov	r3, r0
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <HAL_ADC_ConfigChannel+0x3ce>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2103      	movs	r1, #3
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fb90 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002eac:	4603      	mov	r3, r0
 8002eae:	0e9b      	lsrs	r3, r3, #26
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	e017      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x3fe>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2103      	movs	r1, #3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fb85 	bl	80025cc <LL_ADC_GetOffsetChannel>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ec8:	fa93 f3a3 	rbit	r3, r3
 8002ecc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ece:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ed0:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002ed2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e003      	b.n	8002ee4 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ede:	fab3 f383 	clz	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d105      	bne.n	8002efe <HAL_ADC_ConfigChannel+0x416>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	0e9b      	lsrs	r3, r3, #26
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	e011      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x43a>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f0e:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002f16:	2320      	movs	r3, #32
 8002f18:	e003      	b.n	8002f22 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002f1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d106      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2103      	movs	r1, #3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7ff fb62 	bl	80025f8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff fc55 	bl	80027e8 <LL_ADC_IsEnabled>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f040 813f 	bne.w	80031c4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6818      	ldr	r0, [r3, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6819      	ldr	r1, [r3, #0]
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	461a      	mov	r2, r3
 8002f54:	f7ff fbd6 	bl	8002704 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	4a8e      	ldr	r2, [pc, #568]	; (8003198 <HAL_ADC_ConfigChannel+0x6b0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	f040 8130 	bne.w	80031c4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d10b      	bne.n	8002f8c <HAL_ADC_ConfigChannel+0x4a4>
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	0e9b      	lsrs	r3, r3, #26
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2b09      	cmp	r3, #9
 8002f82:	bf94      	ite	ls
 8002f84:	2301      	movls	r3, #1
 8002f86:	2300      	movhi	r3, #0
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	e019      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x4d8>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d101      	bne.n	8002fa8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002fa4:	2320      	movs	r3, #32
 8002fa6:	e003      	b.n	8002fb0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002faa:	fab3 f383 	clz	r3, r3
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f003 031f 	and.w	r3, r3, #31
 8002fb6:	2b09      	cmp	r3, #9
 8002fb8:	bf94      	ite	ls
 8002fba:	2301      	movls	r3, #1
 8002fbc:	2300      	movhi	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d079      	beq.n	80030b8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x4f8>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	069b      	lsls	r3, r3, #26
 8002fda:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fde:	e015      	b.n	800300c <HAL_ADC_ConfigChannel+0x524>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d101      	bne.n	8002ffc <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002ff8:	2320      	movs	r3, #32
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002ffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	3301      	adds	r3, #1
 8003006:	069b      	lsls	r3, r3, #26
 8003008:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_ConfigChannel+0x544>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	3301      	adds	r3, #1
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2101      	movs	r1, #1
 8003026:	fa01 f303 	lsl.w	r3, r1, r3
 800302a:	e017      	b.n	800305c <HAL_ADC_ConfigChannel+0x574>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003034:	fa93 f3a3 	rbit	r3, r3
 8003038:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800303a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800303e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003044:	2320      	movs	r3, #32
 8003046:	e003      	b.n	8003050 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f003 031f 	and.w	r3, r3, #31
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	ea42 0103 	orr.w	r1, r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10a      	bne.n	8003082 <HAL_ADC_ConfigChannel+0x59a>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	3301      	adds	r3, #1
 8003074:	f003 021f 	and.w	r2, r3, #31
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	051b      	lsls	r3, r3, #20
 8003080:	e018      	b.n	80030b4 <HAL_ADC_ConfigChannel+0x5cc>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308a:	fa93 f3a3 	rbit	r3, r3
 800308e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003092:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800309a:	2320      	movs	r3, #32
 800309c:	e003      	b.n	80030a6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	3301      	adds	r3, #1
 80030a8:	f003 021f 	and.w	r2, r3, #31
 80030ac:	4613      	mov	r3, r2
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	4413      	add	r3, r2
 80030b2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030b4:	430b      	orrs	r3, r1
 80030b6:	e080      	b.n	80031ba <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x5ec>
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	0e9b      	lsrs	r3, r3, #26
 80030ca:	3301      	adds	r3, #1
 80030cc:	069b      	lsls	r3, r3, #26
 80030ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030d2:	e015      	b.n	8003100 <HAL_ADC_ConfigChannel+0x618>
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030dc:	fa93 f3a3 	rbit	r3, r3
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80030ec:	2320      	movs	r3, #32
 80030ee:	e003      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80030f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030f2:	fab3 f383 	clz	r3, r3
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	069b      	lsls	r3, r3, #26
 80030fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x638>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	0e9b      	lsrs	r3, r3, #26
 8003112:	3301      	adds	r3, #1
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	2101      	movs	r1, #1
 800311a:	fa01 f303 	lsl.w	r3, r1, r3
 800311e:	e017      	b.n	8003150 <HAL_ADC_ConfigChannel+0x668>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	61bb      	str	r3, [r7, #24]
  return result;
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d101      	bne.n	800313c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8003138:	2320      	movs	r3, #32
 800313a:	e003      	b.n	8003144 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800313c:	6a3b      	ldr	r3, [r7, #32]
 800313e:	fab3 f383 	clz	r3, r3
 8003142:	b2db      	uxtb	r3, r3
 8003144:	3301      	adds	r3, #1
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2101      	movs	r1, #1
 800314c:	fa01 f303 	lsl.w	r3, r1, r3
 8003150:	ea42 0103 	orr.w	r1, r2, r3
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315c:	2b00      	cmp	r3, #0
 800315e:	d10d      	bne.n	800317c <HAL_ADC_ConfigChannel+0x694>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	0e9b      	lsrs	r3, r3, #26
 8003166:	3301      	adds	r3, #1
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4613      	mov	r3, r2
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	4413      	add	r3, r2
 8003172:	3b1e      	subs	r3, #30
 8003174:	051b      	lsls	r3, r3, #20
 8003176:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800317a:	e01d      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x6d0>
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	60fb      	str	r3, [r7, #12]
  return result;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d103      	bne.n	800319c <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003194:	2320      	movs	r3, #32
 8003196:	e005      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x6bc>
 8003198:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f003 021f 	and.w	r2, r3, #31
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	3b1e      	subs	r3, #30
 80031b2:	051b      	lsls	r3, r3, #20
 80031b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031b8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031be:	4619      	mov	r1, r3
 80031c0:	f7ff fa74 	bl	80026ac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_ADC_ConfigChannel+0x7d8>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d06c      	beq.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d0:	483c      	ldr	r0, [pc, #240]	; (80032c4 <HAL_ADC_ConfigChannel+0x7dc>)
 80031d2:	f7ff f9c9 	bl	8002568 <LL_ADC_GetCommonPathInternalCh>
 80031d6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3a      	ldr	r2, [pc, #232]	; (80032c8 <HAL_ADC_ConfigChannel+0x7e0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d127      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d121      	bne.n	8003234 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a35      	ldr	r2, [pc, #212]	; (80032cc <HAL_ADC_ConfigChannel+0x7e4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d157      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003202:	4619      	mov	r1, r3
 8003204:	482f      	ldr	r0, [pc, #188]	; (80032c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003206:	f7ff f99c 	bl	8002542 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800320a:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <HAL_ADC_ConfigChannel+0x7e8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	099b      	lsrs	r3, r3, #6
 8003210:	4a30      	ldr	r2, [pc, #192]	; (80032d4 <HAL_ADC_ConfigChannel+0x7ec>)
 8003212:	fba2 2303 	umull	r2, r3, r2, r3
 8003216:	099b      	lsrs	r3, r3, #6
 8003218:	1c5a      	adds	r2, r3, #1
 800321a:	4613      	mov	r3, r2
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003224:	e002      	b.n	800322c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	3b01      	subs	r3, #1
 800322a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f9      	bne.n	8003226 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003232:	e03a      	b.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a27      	ldr	r2, [pc, #156]	; (80032d8 <HAL_ADC_ConfigChannel+0x7f0>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d113      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800323e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003242:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10d      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a1f      	ldr	r2, [pc, #124]	; (80032cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d12a      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003258:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800325c:	4619      	mov	r1, r3
 800325e:	4819      	ldr	r0, [pc, #100]	; (80032c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003260:	f7ff f96f 	bl	8002542 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003264:	e021      	b.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <HAL_ADC_ConfigChannel+0x7f4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d11c      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d116      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a12      	ldr	r2, [pc, #72]	; (80032cc <HAL_ADC_ConfigChannel+0x7e4>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d111      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003286:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800328a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800328e:	4619      	mov	r1, r3
 8003290:	480c      	ldr	r0, [pc, #48]	; (80032c4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003292:	f7ff f956 	bl	8002542 <LL_ADC_SetCommonPathInternalCh>
 8003296:	e008      	b.n	80032aa <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329c:	f043 0220 	orr.w	r2, r3, #32
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80032b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	37d8      	adds	r7, #216	; 0xd8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	80080000 	.word	0x80080000
 80032c4:	50040300 	.word	0x50040300
 80032c8:	c7520000 	.word	0xc7520000
 80032cc:	50040000 	.word	0x50040000
 80032d0:	20000000 	.word	0x20000000
 80032d4:	053e2d63 	.word	0x053e2d63
 80032d8:	cb840000 	.word	0xcb840000
 80032dc:	80000001 	.word	0x80000001

080032e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032f0:	4b0c      	ldr	r3, [pc, #48]	; (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032fc:	4013      	ands	r3, r2
 80032fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003308:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800330c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003310:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003312:	4a04      	ldr	r2, [pc, #16]	; (8003324 <__NVIC_SetPriorityGrouping+0x44>)
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	60d3      	str	r3, [r2, #12]
}
 8003318:	bf00      	nop
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	e000ed00 	.word	0xe000ed00

08003328 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800332c:	4b04      	ldr	r3, [pc, #16]	; (8003340 <__NVIC_GetPriorityGrouping+0x18>)
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	0a1b      	lsrs	r3, r3, #8
 8003332:	f003 0307 	and.w	r3, r3, #7
}
 8003336:	4618      	mov	r0, r3
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003352:	2b00      	cmp	r3, #0
 8003354:	db0b      	blt.n	800336e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003356:	79fb      	ldrb	r3, [r7, #7]
 8003358:	f003 021f 	and.w	r2, r3, #31
 800335c:	4907      	ldr	r1, [pc, #28]	; (800337c <__NVIC_EnableIRQ+0x38>)
 800335e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2001      	movs	r0, #1
 8003366:	fa00 f202 	lsl.w	r2, r0, r2
 800336a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800336e:	bf00      	nop
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	e000e100 	.word	0xe000e100

08003380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	4603      	mov	r3, r0
 8003388:	6039      	str	r1, [r7, #0]
 800338a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800338c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003390:	2b00      	cmp	r3, #0
 8003392:	db0a      	blt.n	80033aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	490c      	ldr	r1, [pc, #48]	; (80033cc <__NVIC_SetPriority+0x4c>)
 800339a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	b2d2      	uxtb	r2, r2
 80033a2:	440b      	add	r3, r1
 80033a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033a8:	e00a      	b.n	80033c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	b2da      	uxtb	r2, r3
 80033ae:	4908      	ldr	r1, [pc, #32]	; (80033d0 <__NVIC_SetPriority+0x50>)
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	f003 030f 	and.w	r3, r3, #15
 80033b6:	3b04      	subs	r3, #4
 80033b8:	0112      	lsls	r2, r2, #4
 80033ba:	b2d2      	uxtb	r2, r2
 80033bc:	440b      	add	r3, r1
 80033be:	761a      	strb	r2, [r3, #24]
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	e000e100 	.word	0xe000e100
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b089      	sub	sp, #36	; 0x24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	f1c3 0307 	rsb	r3, r3, #7
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	bf28      	it	cs
 80033f2:	2304      	movcs	r3, #4
 80033f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	3304      	adds	r3, #4
 80033fa:	2b06      	cmp	r3, #6
 80033fc:	d902      	bls.n	8003404 <NVIC_EncodePriority+0x30>
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	3b03      	subs	r3, #3
 8003402:	e000      	b.n	8003406 <NVIC_EncodePriority+0x32>
 8003404:	2300      	movs	r3, #0
 8003406:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003408:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43da      	mvns	r2, r3
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	401a      	ands	r2, r3
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800341c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43d9      	mvns	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800342c:	4313      	orrs	r3, r2
         );
}
 800342e:	4618      	mov	r0, r3
 8003430:	3724      	adds	r7, #36	; 0x24
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
	...

0800343c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	3b01      	subs	r3, #1
 8003448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800344c:	d301      	bcc.n	8003452 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800344e:	2301      	movs	r3, #1
 8003450:	e00f      	b.n	8003472 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003452:	4a0a      	ldr	r2, [pc, #40]	; (800347c <SysTick_Config+0x40>)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3b01      	subs	r3, #1
 8003458:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800345a:	210f      	movs	r1, #15
 800345c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003460:	f7ff ff8e 	bl	8003380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003464:	4b05      	ldr	r3, [pc, #20]	; (800347c <SysTick_Config+0x40>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800346a:	4b04      	ldr	r3, [pc, #16]	; (800347c <SysTick_Config+0x40>)
 800346c:	2207      	movs	r2, #7
 800346e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	e000e010 	.word	0xe000e010

08003480 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ff29 	bl	80032e0 <__NVIC_SetPriorityGrouping>
}
 800348e:	bf00      	nop
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b086      	sub	sp, #24
 800349a:	af00      	add	r7, sp, #0
 800349c:	4603      	mov	r3, r0
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034a4:	2300      	movs	r3, #0
 80034a6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034a8:	f7ff ff3e 	bl	8003328 <__NVIC_GetPriorityGrouping>
 80034ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	6978      	ldr	r0, [r7, #20]
 80034b4:	f7ff ff8e 	bl	80033d4 <NVIC_EncodePriority>
 80034b8:	4602      	mov	r2, r0
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	4611      	mov	r1, r2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7ff ff5d 	bl	8003380 <__NVIC_SetPriority>
}
 80034c6:	bf00      	nop
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b082      	sub	sp, #8
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	4603      	mov	r3, r0
 80034d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff31 	bl	8003344 <__NVIC_EnableIRQ>
}
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ffa2 	bl	800343c <SysTick_Config>
 80034f8:	4603      	mov	r3, r0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
	...

08003504 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0ac      	b.n	8003670 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 f8b2 	bl	8003684 <DFSDM_GetChannelFromInstance>
 8003520:	4603      	mov	r3, r0
 8003522:	4a55      	ldr	r2, [pc, #340]	; (8003678 <HAL_DFSDM_ChannelInit+0x174>)
 8003524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e09f      	b.n	8003670 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7fe fb15 	bl	8001b60 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003536:	4b51      	ldr	r3, [pc, #324]	; (800367c <HAL_DFSDM_ChannelInit+0x178>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	3301      	adds	r3, #1
 800353c:	4a4f      	ldr	r2, [pc, #316]	; (800367c <HAL_DFSDM_ChannelInit+0x178>)
 800353e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003540:	4b4e      	ldr	r3, [pc, #312]	; (800367c <HAL_DFSDM_ChannelInit+0x178>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d125      	bne.n	8003594 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003548:	4b4d      	ldr	r3, [pc, #308]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a4c      	ldr	r2, [pc, #304]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 800354e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003552:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003554:	4b4a      	ldr	r3, [pc, #296]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4948      	ldr	r1, [pc, #288]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003562:	4b47      	ldr	r3, [pc, #284]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a46      	ldr	r2, [pc, #280]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 8003568:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800356c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	791b      	ldrb	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d108      	bne.n	8003588 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003576:	4b42      	ldr	r3, [pc, #264]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	493f      	ldr	r1, [pc, #252]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003588:	4b3d      	ldr	r3, [pc, #244]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a3c      	ldr	r2, [pc, #240]	; (8003680 <HAL_DFSDM_ChannelInit+0x17c>)
 800358e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003592:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80035a2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035b2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035b8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 020f 	bic.w	r2, r2, #15
 80035d0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	6819      	ldr	r1, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80035f8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6899      	ldr	r1, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f002 0207 	and.w	r2, r2, #7
 8003624:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	6859      	ldr	r1, [r3, #4]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003630:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003636:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003638:	431a      	orrs	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003650:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f810 	bl	8003684 <DFSDM_GetChannelFromInstance>
 8003664:	4602      	mov	r2, r0
 8003666:	4904      	ldr	r1, [pc, #16]	; (8003678 <HAL_DFSDM_ChannelInit+0x174>)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200006b0 	.word	0x200006b0
 800367c:	200006ac 	.word	0x200006ac
 8003680:	40016000 	.word	0x40016000

08003684 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <DFSDM_GetChannelFromInstance+0x7c>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d102      	bne.n	800369a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003694:	2300      	movs	r3, #0
 8003696:	60fb      	str	r3, [r7, #12]
 8003698:	e02b      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <DFSDM_GetChannelFromInstance+0x80>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d102      	bne.n	80036a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80036a2:	2301      	movs	r3, #1
 80036a4:	60fb      	str	r3, [r7, #12]
 80036a6:	e024      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a17      	ldr	r2, [pc, #92]	; (8003708 <DFSDM_GetChannelFromInstance+0x84>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d102      	bne.n	80036b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80036b0:	2302      	movs	r3, #2
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	e01d      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a14      	ldr	r2, [pc, #80]	; (800370c <DFSDM_GetChannelFromInstance+0x88>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d102      	bne.n	80036c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80036be:	2304      	movs	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e016      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a12      	ldr	r2, [pc, #72]	; (8003710 <DFSDM_GetChannelFromInstance+0x8c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d102      	bne.n	80036d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80036cc:	2305      	movs	r3, #5
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	e00f      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <DFSDM_GetChannelFromInstance+0x90>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d102      	bne.n	80036e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80036da:	2306      	movs	r3, #6
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	e008      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0d      	ldr	r2, [pc, #52]	; (8003718 <DFSDM_GetChannelFromInstance+0x94>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d102      	bne.n	80036ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80036e8:	2307      	movs	r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	e001      	b.n	80036f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80036ee:	2303      	movs	r3, #3
 80036f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80036f2:	68fb      	ldr	r3, [r7, #12]
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40016000 	.word	0x40016000
 8003704:	40016020 	.word	0x40016020
 8003708:	40016040 	.word	0x40016040
 800370c:	40016080 	.word	0x40016080
 8003710:	400160a0 	.word	0x400160a0
 8003714:	400160c0 	.word	0x400160c0
 8003718:	400160e0 	.word	0x400160e0

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372a:	e166      	b.n	80039fa <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2101      	movs	r1, #1
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	fa01 f303 	lsl.w	r3, r1, r3
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8158 	beq.w	80039f4 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b01      	cmp	r3, #1
 800374e:	d005      	beq.n	800375c <HAL_GPIO_Init+0x40>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f003 0303 	and.w	r3, r3, #3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d130      	bne.n	80037be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	2203      	movs	r2, #3
 8003768:	fa02 f303 	lsl.w	r3, r2, r3
 800376c:	43db      	mvns	r3, r3
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68da      	ldr	r2, [r3, #12]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	005b      	lsls	r3, r3, #1
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003792:	2201      	movs	r2, #1
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4013      	ands	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0201 	and.w	r2, r3, #1
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d017      	beq.n	80037fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	2203      	movs	r2, #3
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	689a      	ldr	r2, [r3, #8]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b02      	cmp	r3, #2
 8003804:	d123      	bne.n	800384e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	08da      	lsrs	r2, r3, #3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3208      	adds	r2, #8
 800380e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	f003 0307 	and.w	r3, r3, #7
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	220f      	movs	r2, #15
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43db      	mvns	r3, r3
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4013      	ands	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	693a      	ldr	r2, [r7, #16]
 800383c:	4313      	orrs	r3, r2
 800383e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	6939      	ldr	r1, [r7, #16]
 800384a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0203 	and.w	r2, r3, #3
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	fa02 f303 	lsl.w	r3, r2, r3
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80b2 	beq.w	80039f4 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003890:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <HAL_GPIO_Init+0x2fc>)
 8003892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003894:	4a60      	ldr	r2, [pc, #384]	; (8003a18 <HAL_GPIO_Init+0x2fc>)
 8003896:	f043 0301 	orr.w	r3, r3, #1
 800389a:	6613      	str	r3, [r2, #96]	; 0x60
 800389c:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_GPIO_Init+0x2fc>)
 800389e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038a8:	4a5c      	ldr	r2, [pc, #368]	; (8003a1c <HAL_GPIO_Init+0x300>)
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	089b      	lsrs	r3, r3, #2
 80038ae:	3302      	adds	r3, #2
 80038b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f003 0303 	and.w	r3, r3, #3
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	220f      	movs	r2, #15
 80038c0:	fa02 f303 	lsl.w	r3, r2, r3
 80038c4:	43db      	mvns	r3, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038d2:	d02b      	beq.n	800392c <HAL_GPIO_Init+0x210>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a52      	ldr	r2, [pc, #328]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d025      	beq.n	8003928 <HAL_GPIO_Init+0x20c>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a51      	ldr	r2, [pc, #324]	; (8003a24 <HAL_GPIO_Init+0x308>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d01f      	beq.n	8003924 <HAL_GPIO_Init+0x208>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	4a50      	ldr	r2, [pc, #320]	; (8003a28 <HAL_GPIO_Init+0x30c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d019      	beq.n	8003920 <HAL_GPIO_Init+0x204>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <HAL_GPIO_Init+0x310>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d013      	beq.n	800391c <HAL_GPIO_Init+0x200>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a4e      	ldr	r2, [pc, #312]	; (8003a30 <HAL_GPIO_Init+0x314>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00d      	beq.n	8003918 <HAL_GPIO_Init+0x1fc>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <HAL_GPIO_Init+0x318>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d007      	beq.n	8003914 <HAL_GPIO_Init+0x1f8>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a4c      	ldr	r2, [pc, #304]	; (8003a38 <HAL_GPIO_Init+0x31c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d101      	bne.n	8003910 <HAL_GPIO_Init+0x1f4>
 800390c:	2307      	movs	r3, #7
 800390e:	e00e      	b.n	800392e <HAL_GPIO_Init+0x212>
 8003910:	2308      	movs	r3, #8
 8003912:	e00c      	b.n	800392e <HAL_GPIO_Init+0x212>
 8003914:	2306      	movs	r3, #6
 8003916:	e00a      	b.n	800392e <HAL_GPIO_Init+0x212>
 8003918:	2305      	movs	r3, #5
 800391a:	e008      	b.n	800392e <HAL_GPIO_Init+0x212>
 800391c:	2304      	movs	r3, #4
 800391e:	e006      	b.n	800392e <HAL_GPIO_Init+0x212>
 8003920:	2303      	movs	r3, #3
 8003922:	e004      	b.n	800392e <HAL_GPIO_Init+0x212>
 8003924:	2302      	movs	r3, #2
 8003926:	e002      	b.n	800392e <HAL_GPIO_Init+0x212>
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <HAL_GPIO_Init+0x212>
 800392c:	2300      	movs	r3, #0
 800392e:	697a      	ldr	r2, [r7, #20]
 8003930:	f002 0203 	and.w	r2, r2, #3
 8003934:	0092      	lsls	r2, r2, #2
 8003936:	4093      	lsls	r3, r2
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800393e:	4937      	ldr	r1, [pc, #220]	; (8003a1c <HAL_GPIO_Init+0x300>)
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	3302      	adds	r3, #2
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800394c:	4b3b      	ldr	r3, [pc, #236]	; (8003a3c <HAL_GPIO_Init+0x320>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	43db      	mvns	r3, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4013      	ands	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d003      	beq.n	8003970 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003970:	4a32      	ldr	r2, [pc, #200]	; (8003a3c <HAL_GPIO_Init+0x320>)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <HAL_GPIO_Init+0x320>)
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	43db      	mvns	r3, r3
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4013      	ands	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d003      	beq.n	800399a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <HAL_GPIO_Init+0x320>)
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039a0:	4b26      	ldr	r3, [pc, #152]	; (8003a3c <HAL_GPIO_Init+0x320>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	43db      	mvns	r3, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039c4:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <HAL_GPIO_Init+0x320>)
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039ca:	4b1c      	ldr	r3, [pc, #112]	; (8003a3c <HAL_GPIO_Init+0x320>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d003      	beq.n	80039ee <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80039ee:	4a13      	ldr	r2, [pc, #76]	; (8003a3c <HAL_GPIO_Init+0x320>)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	3301      	adds	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	fa22 f303 	lsr.w	r3, r2, r3
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f47f ae91 	bne.w	800372c <HAL_GPIO_Init+0x10>
  }
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	371c      	adds	r7, #28
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40010000 	.word	0x40010000
 8003a20:	48000400 	.word	0x48000400
 8003a24:	48000800 	.word	0x48000800
 8003a28:	48000c00 	.word	0x48000c00
 8003a2c:	48001000 	.word	0x48001000
 8003a30:	48001400 	.word	0x48001400
 8003a34:	48001800 	.word	0x48001800
 8003a38:	48001c00 	.word	0x48001c00
 8003a3c:	40010400 	.word	0x40010400

08003a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	460b      	mov	r3, r1
 8003a4a:	807b      	strh	r3, [r7, #2]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a50:	787b      	ldrb	r3, [r7, #1]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a56:	887a      	ldrh	r2, [r7, #2]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a5c:	e002      	b.n	8003a64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a5e:	887a      	ldrh	r2, [r7, #2]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	4603      	mov	r3, r0
 8003a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a7a:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	88fb      	ldrh	r3, [r7, #6]
 8003a80:	4013      	ands	r3, r2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d006      	beq.n	8003a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a86:	4a05      	ldr	r2, [pc, #20]	; (8003a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a8c:	88fb      	ldrh	r3, [r7, #6]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f806 	bl	8003aa0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a94:	bf00      	nop
 8003a96:	3708      	adds	r7, #8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40010400 	.word	0x40010400

08003aa0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b082      	sub	sp, #8
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e08d      	b.n	8003be4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fe f8a3 	bl	8001c28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2224      	movs	r2, #36	; 0x24
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b06:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b16:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d107      	bne.n	8003b30 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	e006      	b.n	8003b3e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d108      	bne.n	8003b58 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b54:	605a      	str	r2, [r3, #4]
 8003b56:	e007      	b.n	8003b68 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685a      	ldr	r2, [r3, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b66:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b7a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	691a      	ldr	r2, [r3, #16]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69d9      	ldr	r1, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1a      	ldr	r2, [r3, #32]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f042 0201 	orr.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3708      	adds	r7, #8
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}

08003bec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d138      	bne.n	8003c74 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e032      	b.n	8003c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2224      	movs	r2, #36	; 0x24
 8003c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0201 	bic.w	r2, r2, #1
 8003c2e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c3e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6819      	ldr	r1, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b085      	sub	sp, #20
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d139      	bne.n	8003d0c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ca2:	2302      	movs	r3, #2
 8003ca4:	e033      	b.n	8003d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2224      	movs	r2, #36	; 0x24
 8003cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0201 	bic.w	r2, r2, #1
 8003cc4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003cd4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	021b      	lsls	r3, r3, #8
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68fa      	ldr	r2, [r7, #12]
 8003ce6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	e000      	b.n	8003d0e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d0c:	2302      	movs	r3, #2
  }
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af02      	add	r7, sp, #8
 8003d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d24:	2300      	movs	r3, #0
 8003d26:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7fe fbec 	bl	8002504 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d102      	bne.n	8003d3a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
 8003d38:	e092      	b.n	8003e60 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f040 808b 	bne.w	8003e60 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7fe f80e 	bl	8001d6c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003d50:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f88b 	bl	8003e70 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	4b42      	ldr	r3, [pc, #264]	; (8003e6c <HAL_OSPI_Init+0x150>)
 8003d62:	4013      	ands	r3, r2
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	68d1      	ldr	r1, [r2, #12]
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	6912      	ldr	r2, [r2, #16]
 8003d6c:	3a01      	subs	r2, #1
 8003d6e:	0412      	lsls	r2, r2, #16
 8003d70:	4311      	orrs	r1, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6952      	ldr	r2, [r2, #20]
 8003d76:	3a01      	subs	r2, #1
 8003d78:	0212      	lsls	r2, r2, #8
 8003d7a:	4311      	orrs	r1, r2
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d80:	4311      	orrs	r1, r2
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	69d2      	ldr	r2, [r2, #28]
 8003d86:	4311      	orrs	r1, r2
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	430b      	orrs	r3, r1
 8003d8e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0412      	lsls	r2, r2, #16
 8003d9a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	021a      	lsls	r2, r3, #8
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	430a      	orrs	r2, r1
 8003db4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2120      	movs	r1, #32
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 fb98 	bl	80044f8 <OSPI_WaitFlagStateUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003dcc:	7bfb      	ldrb	r3, [r7, #15]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d146      	bne.n	8003e60 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	1e5a      	subs	r2, r3, #1
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e08:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f042 0201 	orr.w	r2, r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d107      	bne.n	8003e48 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	689a      	ldr	r2, [r3, #8]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0202 	orr.w	r2, r2, #2
 8003e46:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e50:	d103      	bne.n	8003e5a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
 8003e58:	e002      	b.n	8003e60 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	f8e0f8f4 	.word	0xf8e0f8f4

08003e70 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
	...

08003e90 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b092      	sub	sp, #72	; 0x48
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a08      	ldr	r2, [pc, #32]	; (8003ed0 <HAL_OSPIM_Config+0x40>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d105      	bne.n	8003ebe <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003ebc:	e004      	b.n	8003ec8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003ece:	e01f      	b.n	8003f10 <HAL_OSPIM_Config+0x80>
 8003ed0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003ed4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003ed8:	3301      	adds	r3, #1
 8003eda:	b2d8      	uxtb	r0, r3
 8003edc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003ee0:	f107 0114 	add.w	r1, r7, #20
 8003ee4:	4613      	mov	r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	440b      	add	r3, r1
 8003eee:	4619      	mov	r1, r3
 8003ef0:	f000 fb3a 	bl	8004568 <OSPIM_GetConfig>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2208      	movs	r2, #8
 8003f04:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f06:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d9dd      	bls.n	8003ed4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003f18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f040 82de 	bne.w	80044de <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f22:	4bc6      	ldr	r3, [pc, #792]	; (800423c <HAL_OSPIM_Config+0x3ac>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f2e:	4bc3      	ldr	r3, [pc, #780]	; (800423c <HAL_OSPIM_Config+0x3ac>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4ac2      	ldr	r2, [pc, #776]	; (800423c <HAL_OSPIM_Config+0x3ac>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f3a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f3e:	f043 0301 	orr.w	r3, r3, #1
 8003f42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003f46:	4bbe      	ldr	r3, [pc, #760]	; (8004240 <HAL_OSPIM_Config+0x3b0>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00b      	beq.n	8003f6a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f52:	4bbb      	ldr	r3, [pc, #748]	; (8004240 <HAL_OSPIM_Config+0x3b0>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4aba      	ldr	r2, [pc, #744]	; (8004240 <HAL_OSPIM_Config+0x3b0>)
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003f5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f62:	f043 0302 	orr.w	r3, r3, #2
 8003f66:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003f6a:	49b6      	ldr	r1, [pc, #728]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8003f6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	3348      	adds	r3, #72	; 0x48
 8003f78:	443b      	add	r3, r7
 8003f7a:	3b2c      	subs	r3, #44	; 0x2c
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	48af      	ldr	r0, [pc, #700]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8003f88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	4413      	add	r3, r2
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	3348      	adds	r3, #72	; 0x48
 8003f94:	443b      	add	r3, r7
 8003f96:	3b2c      	subs	r3, #44	; 0x2c
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4403      	add	r3, r0
 8003fa4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003fa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	3348      	adds	r3, #72	; 0x48
 8003fb2:	443b      	add	r3, r7
 8003fb4:	3b34      	subs	r3, #52	; 0x34
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80a1 	beq.w	8004100 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003fbe:	49a1      	ldr	r1, [pc, #644]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8003fc0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	009b      	lsls	r3, r3, #2
 8003fca:	3348      	adds	r3, #72	; 0x48
 8003fcc:	443b      	add	r3, r7
 8003fce:	3b34      	subs	r3, #52	; 0x34
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	6859      	ldr	r1, [r3, #4]
 8003fda:	489a      	ldr	r0, [pc, #616]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8003fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fde:	4613      	mov	r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	3348      	adds	r3, #72	; 0x48
 8003fe8:	443b      	add	r3, r7
 8003fea:	3b34      	subs	r3, #52	; 0x34
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	3b01      	subs	r3, #1
 8003ff0:	f021 0201 	bic.w	r2, r1, #1
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4403      	add	r3, r0
 8003ff8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	3348      	adds	r3, #72	; 0x48
 8004006:	443b      	add	r3, r7
 8004008:	3b30      	subs	r3, #48	; 0x30
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01d      	beq.n	800404c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004010:	498c      	ldr	r1, [pc, #560]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8004012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004014:	4613      	mov	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4413      	add	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	3348      	adds	r3, #72	; 0x48
 800401e:	443b      	add	r3, r7
 8004020:	3b30      	subs	r3, #48	; 0x30
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	3b01      	subs	r3, #1
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	6859      	ldr	r1, [r3, #4]
 800402c:	4885      	ldr	r0, [pc, #532]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 800402e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004030:	4613      	mov	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4413      	add	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	3348      	adds	r3, #72	; 0x48
 800403a:	443b      	add	r3, r7
 800403c:	3b30      	subs	r3, #48	; 0x30
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3b01      	subs	r3, #1
 8004042:	f021 0210 	bic.w	r2, r1, #16
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4403      	add	r3, r0
 800404a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800404c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	3348      	adds	r3, #72	; 0x48
 8004058:	443b      	add	r3, r7
 800405a:	3b28      	subs	r3, #40	; 0x28
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d021      	beq.n	80040a6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004062:	4978      	ldr	r1, [pc, #480]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8004064:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004066:	4613      	mov	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	4413      	add	r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	3348      	adds	r3, #72	; 0x48
 8004070:	443b      	add	r3, r7
 8004072:	3b28      	subs	r3, #40	; 0x28
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	3b01      	subs	r3, #1
 8004078:	f003 0301 	and.w	r3, r3, #1
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	440b      	add	r3, r1
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	4870      	ldr	r0, [pc, #448]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8004084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3348      	adds	r3, #72	; 0x48
 8004090:	443b      	add	r3, r7
 8004092:	3b28      	subs	r3, #40	; 0x28
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3b01      	subs	r3, #1
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4403      	add	r3, r0
 80040a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	3348      	adds	r3, #72	; 0x48
 80040b2:	443b      	add	r3, r7
 80040b4:	3b24      	subs	r3, #36	; 0x24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d021      	beq.n	8004100 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80040bc:	4961      	ldr	r1, [pc, #388]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 80040be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	3348      	adds	r3, #72	; 0x48
 80040ca:	443b      	add	r3, r7
 80040cc:	3b24      	subs	r3, #36	; 0x24
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	f003 0301 	and.w	r3, r3, #1
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	4859      	ldr	r0, [pc, #356]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 80040de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3348      	adds	r3, #72	; 0x48
 80040ea:	443b      	add	r3, r7
 80040ec:	3b24      	subs	r3, #36	; 0x24
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3b01      	subs	r3, #1
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	6819      	ldr	r1, [r3, #0]
 8004104:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004108:	4613      	mov	r3, r2
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	3348      	adds	r3, #72	; 0x48
 8004112:	443b      	add	r3, r7
 8004114:	3b34      	subs	r3, #52	; 0x34
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4299      	cmp	r1, r3
 800411a:	d038      	beq.n	800418e <HAL_OSPIM_Config+0x2fe>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004124:	4613      	mov	r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	3348      	adds	r3, #72	; 0x48
 800412e:	443b      	add	r3, r7
 8004130:	3b30      	subs	r3, #48	; 0x30
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4299      	cmp	r1, r3
 8004136:	d02a      	beq.n	800418e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	6899      	ldr	r1, [r3, #8]
 800413c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	3348      	adds	r3, #72	; 0x48
 800414a:	443b      	add	r3, r7
 800414c:	3b2c      	subs	r3, #44	; 0x2c
 800414e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004150:	4299      	cmp	r1, r3
 8004152:	d01c      	beq.n	800418e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	68d9      	ldr	r1, [r3, #12]
 8004158:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800415c:	4613      	mov	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	4413      	add	r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	3348      	adds	r3, #72	; 0x48
 8004166:	443b      	add	r3, r7
 8004168:	3b28      	subs	r3, #40	; 0x28
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4299      	cmp	r1, r3
 800416e:	d00e      	beq.n	800418e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6919      	ldr	r1, [r3, #16]
 8004174:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	3348      	adds	r3, #72	; 0x48
 8004182:	443b      	add	r3, r7
 8004184:	3b24      	subs	r3, #36	; 0x24
 8004186:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004188:	4299      	cmp	r1, r3
 800418a:	f040 80d3 	bne.w	8004334 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800418e:	492d      	ldr	r1, [pc, #180]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8004190:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	3348      	adds	r3, #72	; 0x48
 800419e:	443b      	add	r3, r7
 80041a0:	3b34      	subs	r3, #52	; 0x34
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3b01      	subs	r3, #1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	440b      	add	r3, r1
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	4825      	ldr	r0, [pc, #148]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 80041ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	3348      	adds	r3, #72	; 0x48
 80041bc:	443b      	add	r3, r7
 80041be:	3b34      	subs	r3, #52	; 0x34
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	f021 0201 	bic.w	r2, r1, #1
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4403      	add	r3, r0
 80041cc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80041ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041d2:	4613      	mov	r3, r2
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	3348      	adds	r3, #72	; 0x48
 80041dc:	443b      	add	r3, r7
 80041de:	3b30      	subs	r3, #48	; 0x30
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01f      	beq.n	8004226 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80041e6:	4917      	ldr	r1, [pc, #92]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 80041e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041ec:	4613      	mov	r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	4413      	add	r3, r2
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	3348      	adds	r3, #72	; 0x48
 80041f6:	443b      	add	r3, r7
 80041f8:	3b30      	subs	r3, #48	; 0x30
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	6859      	ldr	r1, [r3, #4]
 8004204:	480f      	ldr	r0, [pc, #60]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8004206:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800420a:	4613      	mov	r3, r2
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	4413      	add	r3, r2
 8004210:	009b      	lsls	r3, r3, #2
 8004212:	3348      	adds	r3, #72	; 0x48
 8004214:	443b      	add	r3, r7
 8004216:	3b30      	subs	r3, #48	; 0x30
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	f021 0210 	bic.w	r2, r1, #16
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4403      	add	r3, r0
 8004224:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004226:	4907      	ldr	r1, [pc, #28]	; (8004244 <HAL_OSPIM_Config+0x3b4>)
 8004228:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	3348      	adds	r3, #72	; 0x48
 8004236:	443b      	add	r3, r7
 8004238:	3b2c      	subs	r3, #44	; 0x2c
 800423a:	e005      	b.n	8004248 <HAL_OSPIM_Config+0x3b8>
 800423c:	a0001000 	.word	0xa0001000
 8004240:	a0001400 	.word	0xa0001400
 8004244:	50061c00 	.word	0x50061c00
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	3b01      	subs	r3, #1
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	6859      	ldr	r1, [r3, #4]
 8004252:	48a6      	ldr	r0, [pc, #664]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004254:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004258:	4613      	mov	r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	3348      	adds	r3, #72	; 0x48
 8004262:	443b      	add	r3, r7
 8004264:	3b2c      	subs	r3, #44	; 0x2c
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	3b01      	subs	r3, #1
 800426a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4403      	add	r3, r0
 8004272:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004274:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	3348      	adds	r3, #72	; 0x48
 8004282:	443b      	add	r3, r7
 8004284:	3b28      	subs	r3, #40	; 0x28
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d023      	beq.n	80042d4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800428c:	4997      	ldr	r1, [pc, #604]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 800428e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	3348      	adds	r3, #72	; 0x48
 800429c:	443b      	add	r3, r7
 800429e:	3b28      	subs	r3, #40	; 0x28
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	440b      	add	r3, r1
 80042ac:	6859      	ldr	r1, [r3, #4]
 80042ae:	488f      	ldr	r0, [pc, #572]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 80042b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042b4:	4613      	mov	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4413      	add	r3, r2
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	3348      	adds	r3, #72	; 0x48
 80042be:	443b      	add	r3, r7
 80042c0:	3b28      	subs	r3, #40	; 0x28
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	f003 0301 	and.w	r3, r3, #1
 80042ca:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	4403      	add	r3, r0
 80042d2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	3348      	adds	r3, #72	; 0x48
 80042e2:	443b      	add	r3, r7
 80042e4:	3b24      	subs	r3, #36	; 0x24
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d023      	beq.n	8004334 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80042ec:	497f      	ldr	r1, [pc, #508]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 80042ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	3348      	adds	r3, #72	; 0x48
 80042fc:	443b      	add	r3, r7
 80042fe:	3b24      	subs	r3, #36	; 0x24
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3b01      	subs	r3, #1
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	6859      	ldr	r1, [r3, #4]
 800430e:	4877      	ldr	r0, [pc, #476]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004310:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3348      	adds	r3, #72	; 0x48
 800431e:	443b      	add	r3, r7
 8004320:	3b24      	subs	r3, #36	; 0x24
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3b01      	subs	r3, #1
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4403      	add	r3, r0
 8004332:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004334:	4a6d      	ldr	r2, [pc, #436]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	3b01      	subs	r3, #1
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	4413      	add	r3, r2
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004348:	025b      	lsls	r3, r3, #9
 800434a:	431a      	orrs	r2, r3
 800434c:	4967      	ldr	r1, [pc, #412]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	3b01      	subs	r3, #1
 8004354:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	440b      	add	r3, r1
 800435c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800435e:	4a63      	ldr	r2, [pc, #396]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3b01      	subs	r3, #1
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f023 0203 	bic.w	r2, r3, #3
 8004370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	431a      	orrs	r2, r3
 8004376:	495d      	ldr	r1, [pc, #372]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3b01      	subs	r3, #1
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	440b      	add	r3, r1
 8004386:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	685b      	ldr	r3, [r3, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d014      	beq.n	80043ba <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004390:	4a56      	ldr	r2, [pc, #344]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043a4:	015b      	lsls	r3, r3, #5
 80043a6:	431a      	orrs	r2, r3
 80043a8:	4950      	ldr	r1, [pc, #320]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	f042 0210 	orr.w	r2, r2, #16
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	440b      	add	r3, r1
 80043b8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d019      	beq.n	80043fa <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043c6:	4a49      	ldr	r2, [pc, #292]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	3b01      	subs	r3, #1
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	4413      	add	r3, r2
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043de:	049b      	lsls	r3, r3, #18
 80043e0:	431a      	orrs	r2, r3
 80043e2:	4942      	ldr	r1, [pc, #264]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	68db      	ldr	r3, [r3, #12]
 80043e8:	3b01      	subs	r3, #1
 80043ea:	f003 0301 	and.w	r3, r3, #1
 80043ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	605a      	str	r2, [r3, #4]
 80043f8:	e01c      	b.n	8004434 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d018      	beq.n	8004434 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004402:	4a3a      	ldr	r2, [pc, #232]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	3b01      	subs	r3, #1
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800441a:	069b      	lsls	r3, r3, #26
 800441c:	431a      	orrs	r2, r3
 800441e:	4933      	ldr	r1, [pc, #204]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	3b01      	subs	r3, #1
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d019      	beq.n	8004474 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004440:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	3b01      	subs	r3, #1
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	4413      	add	r3, r2
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004456:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004458:	049b      	lsls	r3, r3, #18
 800445a:	431a      	orrs	r2, r3
 800445c:	4923      	ldr	r1, [pc, #140]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	3b01      	subs	r3, #1
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	605a      	str	r2, [r3, #4]
 8004472:	e01c      	b.n	80044ae <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d018      	beq.n	80044ae <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800447c:	4a1b      	ldr	r2, [pc, #108]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	3b01      	subs	r3, #1
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004492:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004494:	069b      	lsls	r3, r3, #26
 8004496:	431a      	orrs	r2, r3
 8004498:	4914      	ldr	r1, [pc, #80]	; (80044ec <HAL_OSPIM_Config+0x65c>)
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	3b01      	subs	r3, #1
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80044ae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80044ba:	4b0d      	ldr	r3, [pc, #52]	; (80044f0 <HAL_OSPIM_Config+0x660>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a0c      	ldr	r2, [pc, #48]	; (80044f0 <HAL_OSPIM_Config+0x660>)
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80044c6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80044d2:	4b08      	ldr	r3, [pc, #32]	; (80044f4 <HAL_OSPIM_Config+0x664>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a07      	ldr	r2, [pc, #28]	; (80044f4 <HAL_OSPIM_Config+0x664>)
 80044d8:	f043 0301 	orr.w	r3, r3, #1
 80044dc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80044de:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3748      	adds	r7, #72	; 0x48
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	50061c00 	.word	0x50061c00
 80044f0:	a0001000 	.word	0xa0001000
 80044f4:	a0001400 	.word	0xa0001400

080044f8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004508:	e01a      	b.n	8004540 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004510:	d016      	beq.n	8004540 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fd fff7 	bl	8002504 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	69ba      	ldr	r2, [r7, #24]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10b      	bne.n	8004540 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004534:	f043 0201 	orr.w	r2, r3, #1
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e00e      	b.n	800455e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6a1a      	ldr	r2, [r3, #32]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	4013      	ands	r3, r2
 800454a:	2b00      	cmp	r3, #0
 800454c:	bf14      	ite	ne
 800454e:	2301      	movne	r3, #1
 8004550:	2300      	moveq	r3, #0
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	79fb      	ldrb	r3, [r7, #7]
 8004558:	429a      	cmp	r2, r3
 800455a:	d1d6      	bne.n	800450a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
	...

08004568 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004568:	b480      	push	{r7}
 800456a:	b087      	sub	sp, #28
 800456c:	af00      	add	r7, sp, #0
 800456e:	4603      	mov	r3, r0
 8004570:	6039      	str	r1, [r7, #0]
 8004572:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004574:	2300      	movs	r3, #0
 8004576:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004578:	2300      	movs	r3, #0
 800457a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 800457c:	79fb      	ldrb	r3, [r7, #7]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d005      	beq.n	800458e <OSPIM_GetConfig+0x26>
 8004582:	79fb      	ldrb	r3, [r7, #7]
 8004584:	2b02      	cmp	r3, #2
 8004586:	d802      	bhi.n	800458e <OSPIM_GetConfig+0x26>
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d102      	bne.n	8004594 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	75fb      	strb	r3, [r7, #23]
 8004592:	e08e      	b.n	80046b2 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	2200      	movs	r2, #0
 800459e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2200      	movs	r2, #0
 80045a4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2200      	movs	r2, #0
 80045aa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2200      	movs	r2, #0
 80045b0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d101      	bne.n	80045bc <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80045b8:	4b41      	ldr	r3, [pc, #260]	; (80046c0 <OSPIM_GetConfig+0x158>)
 80045ba:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	e074      	b.n	80046ac <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80045c2:	4a40      	ldr	r2, [pc, #256]	; (80046c4 <OSPIM_GetConfig+0x15c>)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4413      	add	r3, r2
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00a      	beq.n	80045ee <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4053      	eors	r3, r2
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4053      	eors	r3, r2
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d103      	bne.n	800460e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d00a      	beq.n	800462e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	4053      	eors	r3, r2
 800461e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004622:	2b00      	cmp	r3, #0
 8004624:	d103      	bne.n	800462e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d018      	beq.n	800466a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004638:	68ba      	ldr	r2, [r7, #8]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4053      	eors	r3, r2
 800463e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d111      	bne.n	800466a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	60da      	str	r2, [r3, #12]
 800465c:	e005      	b.n	800466a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d018      	beq.n	80046a6 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	4053      	eors	r3, r2
 800467a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d111      	bne.n	80046a6 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d106      	bne.n	800469a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	3301      	adds	r3, #1
 8004690:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	611a      	str	r2, [r3, #16]
 8004698:	e005      	b.n	80046a6 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	3301      	adds	r3, #1
 800469e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3301      	adds	r3, #1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d987      	bls.n	80045c2 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80046b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	04040222 	.word	0x04040222
 80046c4:	50061c00 	.word	0x50061c00

080046c8 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	40007000 	.word	0x40007000

080046e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_PWREx_GetVoltageRange+0x3c>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046f8:	d102      	bne.n	8004700 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80046fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046fe:	e00b      	b.n	8004718 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004700:	4b08      	ldr	r3, [pc, #32]	; (8004724 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004706:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800470e:	d102      	bne.n	8004716 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004710:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004714:	e000      	b.n	8004718 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004716:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004718:	4618      	mov	r0, r3
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40007000 	.word	0x40007000

08004728 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d141      	bne.n	80047ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004736:	4b4b      	ldr	r3, [pc, #300]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800473e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004742:	d131      	bne.n	80047a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004744:	4b47      	ldr	r3, [pc, #284]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800474a:	4a46      	ldr	r2, [pc, #280]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004754:	4b43      	ldr	r3, [pc, #268]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800475c:	4a41      	ldr	r2, [pc, #260]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004762:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004764:	4b40      	ldr	r3, [pc, #256]	; (8004868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2232      	movs	r2, #50	; 0x32
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	4a3f      	ldr	r2, [pc, #252]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004770:	fba2 2303 	umull	r2, r3, r2, r3
 8004774:	0c9b      	lsrs	r3, r3, #18
 8004776:	3301      	adds	r3, #1
 8004778:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800477a:	e002      	b.n	8004782 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b01      	subs	r3, #1
 8004780:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004782:	4b38      	ldr	r3, [pc, #224]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800478a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800478e:	d102      	bne.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1f2      	bne.n	800477c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004796:	4b33      	ldr	r3, [pc, #204]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d158      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e057      	b.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047a8:	4b2e      	ldr	r3, [pc, #184]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ae:	4a2d      	ldr	r2, [pc, #180]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047b8:	e04d      	b.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047c0:	d141      	bne.n	8004846 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047c2:	4b28      	ldr	r3, [pc, #160]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ce:	d131      	bne.n	8004834 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047d0:	4b24      	ldr	r3, [pc, #144]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047d6:	4a23      	ldr	r2, [pc, #140]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047e0:	4b20      	ldr	r3, [pc, #128]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047e8:	4a1e      	ldr	r2, [pc, #120]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80047f0:	4b1d      	ldr	r3, [pc, #116]	; (8004868 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2232      	movs	r2, #50	; 0x32
 80047f6:	fb02 f303 	mul.w	r3, r2, r3
 80047fa:	4a1c      	ldr	r2, [pc, #112]	; (800486c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	0c9b      	lsrs	r3, r3, #18
 8004802:	3301      	adds	r3, #1
 8004804:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004806:	e002      	b.n	800480e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	3b01      	subs	r3, #1
 800480c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800480e:	4b15      	ldr	r3, [pc, #84]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004810:	695b      	ldr	r3, [r3, #20]
 8004812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d102      	bne.n	8004822 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f2      	bne.n	8004808 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004822:	4b10      	ldr	r3, [pc, #64]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d112      	bne.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e011      	b.n	8004858 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004834:	4b0b      	ldr	r3, [pc, #44]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004836:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800483a:	4a0a      	ldr	r2, [pc, #40]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800483c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004840:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004844:	e007      	b.n	8004856 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004846:	4b07      	ldr	r3, [pc, #28]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800484e:	4a05      	ldr	r2, [pc, #20]	; (8004864 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004854:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	40007000 	.word	0x40007000
 8004868:	20000000 	.word	0x20000000
 800486c:	431bde83 	.word	0x431bde83

08004870 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b088      	sub	sp, #32
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d102      	bne.n	8004884 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f000 bc08 	b.w	8005094 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004884:	4b96      	ldr	r3, [pc, #600]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800488e:	4b94      	ldr	r3, [pc, #592]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0303 	and.w	r3, r3, #3
 8004896:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0310 	and.w	r3, r3, #16
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80e4 	beq.w	8004a6e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d007      	beq.n	80048bc <HAL_RCC_OscConfig+0x4c>
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b0c      	cmp	r3, #12
 80048b0:	f040 808b 	bne.w	80049ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	f040 8087 	bne.w	80049ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048bc:	4b88      	ldr	r3, [pc, #544]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d005      	beq.n	80048d4 <HAL_RCC_OscConfig+0x64>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e3df      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a1a      	ldr	r2, [r3, #32]
 80048d8:	4b81      	ldr	r3, [pc, #516]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d004      	beq.n	80048ee <HAL_RCC_OscConfig+0x7e>
 80048e4:	4b7e      	ldr	r3, [pc, #504]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048ec:	e005      	b.n	80048fa <HAL_RCC_OscConfig+0x8a>
 80048ee:	4b7c      	ldr	r3, [pc, #496]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80048f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f4:	091b      	lsrs	r3, r3, #4
 80048f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d223      	bcs.n	8004946 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fdcc 	bl	80054a0 <RCC_SetFlashLatencyFromMSIRange>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e3c0      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004912:	4b73      	ldr	r3, [pc, #460]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a72      	ldr	r2, [pc, #456]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004918:	f043 0308 	orr.w	r3, r3, #8
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b70      	ldr	r3, [pc, #448]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	496d      	ldr	r1, [pc, #436]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800492c:	4313      	orrs	r3, r2
 800492e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004930:	4b6b      	ldr	r3, [pc, #428]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	4968      	ldr	r1, [pc, #416]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004940:	4313      	orrs	r3, r2
 8004942:	604b      	str	r3, [r1, #4]
 8004944:	e025      	b.n	8004992 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004946:	4b66      	ldr	r3, [pc, #408]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a65      	ldr	r2, [pc, #404]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800494c:	f043 0308 	orr.w	r3, r3, #8
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b63      	ldr	r3, [pc, #396]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4960      	ldr	r1, [pc, #384]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004960:	4313      	orrs	r3, r2
 8004962:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004964:	4b5e      	ldr	r3, [pc, #376]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	495b      	ldr	r1, [pc, #364]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004974:	4313      	orrs	r3, r2
 8004976:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fd8c 	bl	80054a0 <RCC_SetFlashLatencyFromMSIRange>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e380      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004992:	f000 fcc1 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 8004996:	4602      	mov	r2, r0
 8004998:	4b51      	ldr	r3, [pc, #324]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	091b      	lsrs	r3, r3, #4
 800499e:	f003 030f 	and.w	r3, r3, #15
 80049a2:	4950      	ldr	r1, [pc, #320]	; (8004ae4 <HAL_RCC_OscConfig+0x274>)
 80049a4:	5ccb      	ldrb	r3, [r1, r3]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	fa22 f303 	lsr.w	r3, r2, r3
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <HAL_RCC_OscConfig+0x278>)
 80049b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049b2:	4b4e      	ldr	r3, [pc, #312]	; (8004aec <HAL_RCC_OscConfig+0x27c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fd fd54 	bl	8002464 <HAL_InitTick>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d052      	beq.n	8004a6c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	e364      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d032      	beq.n	8004a38 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049d2:	4b43      	ldr	r3, [pc, #268]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a42      	ldr	r2, [pc, #264]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80049d8:	f043 0301 	orr.w	r3, r3, #1
 80049dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049de:	f7fd fd91 	bl	8002504 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049e6:	f7fd fd8d 	bl	8002504 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e34d      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049f8:	4b39      	ldr	r3, [pc, #228]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0f0      	beq.n	80049e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a04:	4b36      	ldr	r3, [pc, #216]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a35      	ldr	r2, [pc, #212]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a0a:	f043 0308 	orr.w	r3, r3, #8
 8004a0e:	6013      	str	r3, [r2, #0]
 8004a10:	4b33      	ldr	r3, [pc, #204]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	4930      	ldr	r1, [pc, #192]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a22:	4b2f      	ldr	r3, [pc, #188]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	021b      	lsls	r3, r3, #8
 8004a30:	492b      	ldr	r1, [pc, #172]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	604b      	str	r3, [r1, #4]
 8004a36:	e01a      	b.n	8004a6e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a38:	4b29      	ldr	r3, [pc, #164]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a28      	ldr	r2, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a3e:	f023 0301 	bic.w	r3, r3, #1
 8004a42:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a44:	f7fd fd5e 	bl	8002504 <HAL_GetTick>
 8004a48:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a4c:	f7fd fd5a 	bl	8002504 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e31a      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1dc>
 8004a6a:	e000      	b.n	8004a6e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d073      	beq.n	8004b62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d005      	beq.n	8004a8c <HAL_RCC_OscConfig+0x21c>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b0c      	cmp	r3, #12
 8004a84:	d10e      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d10b      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d063      	beq.n	8004b60 <HAL_RCC_OscConfig+0x2f0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d15f      	bne.n	8004b60 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e2f7      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aac:	d106      	bne.n	8004abc <HAL_RCC_OscConfig+0x24c>
 8004aae:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a0b      	ldr	r2, [pc, #44]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e025      	b.n	8004b08 <HAL_RCC_OscConfig+0x298>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ac4:	d114      	bne.n	8004af0 <HAL_RCC_OscConfig+0x280>
 8004ac6:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad0:	6013      	str	r3, [r2, #0]
 8004ad2:	4b03      	ldr	r3, [pc, #12]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a02      	ldr	r2, [pc, #8]	; (8004ae0 <HAL_RCC_OscConfig+0x270>)
 8004ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004adc:	6013      	str	r3, [r2, #0]
 8004ade:	e013      	b.n	8004b08 <HAL_RCC_OscConfig+0x298>
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	080099d4 	.word	0x080099d4
 8004ae8:	20000000 	.word	0x20000000
 8004aec:	20000004 	.word	0x20000004
 8004af0:	4ba0      	ldr	r3, [pc, #640]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a9f      	ldr	r2, [pc, #636]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004afa:	6013      	str	r3, [r2, #0]
 8004afc:	4b9d      	ldr	r3, [pc, #628]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a9c      	ldr	r2, [pc, #624]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b10:	f7fd fcf8 	bl	8002504 <HAL_GetTick>
 8004b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b16:	e008      	b.n	8004b2a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b18:	f7fd fcf4 	bl	8002504 <HAL_GetTick>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	2b64      	cmp	r3, #100	; 0x64
 8004b24:	d901      	bls.n	8004b2a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b26:	2303      	movs	r3, #3
 8004b28:	e2b4      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2a:	4b92      	ldr	r3, [pc, #584]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d0f0      	beq.n	8004b18 <HAL_RCC_OscConfig+0x2a8>
 8004b36:	e014      	b.n	8004b62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b38:	f7fd fce4 	bl	8002504 <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b3e:	e008      	b.n	8004b52 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b40:	f7fd fce0 	bl	8002504 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	2b64      	cmp	r3, #100	; 0x64
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e2a0      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b52:	4b88      	ldr	r3, [pc, #544]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1f0      	bne.n	8004b40 <HAL_RCC_OscConfig+0x2d0>
 8004b5e:	e000      	b.n	8004b62 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d060      	beq.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d005      	beq.n	8004b80 <HAL_RCC_OscConfig+0x310>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b0c      	cmp	r3, #12
 8004b78:	d119      	bne.n	8004bae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d116      	bne.n	8004bae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b80:	4b7c      	ldr	r3, [pc, #496]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d005      	beq.n	8004b98 <HAL_RCC_OscConfig+0x328>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e27d      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b98:	4b76      	ldr	r3, [pc, #472]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	061b      	lsls	r3, r3, #24
 8004ba6:	4973      	ldr	r1, [pc, #460]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bac:	e040      	b.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d023      	beq.n	8004bfe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bb6:	4b6f      	ldr	r3, [pc, #444]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a6e      	ldr	r2, [pc, #440]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fc9f 	bl	8002504 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bca:	f7fd fc9b 	bl	8002504 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e25b      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bdc:	4b65      	ldr	r3, [pc, #404]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0f0      	beq.n	8004bca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004be8:	4b62      	ldr	r3, [pc, #392]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	061b      	lsls	r3, r3, #24
 8004bf6:	495f      	ldr	r1, [pc, #380]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	604b      	str	r3, [r1, #4]
 8004bfc:	e018      	b.n	8004c30 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bfe:	4b5d      	ldr	r3, [pc, #372]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a5c      	ldr	r2, [pc, #368]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c0a:	f7fd fc7b 	bl	8002504 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c10:	e008      	b.n	8004c24 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c12:	f7fd fc77 	bl	8002504 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d901      	bls.n	8004c24 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e237      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c24:	4b53      	ldr	r3, [pc, #332]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f0      	bne.n	8004c12 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0308 	and.w	r3, r3, #8
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d03c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01c      	beq.n	8004c7e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c44:	4b4b      	ldr	r3, [pc, #300]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4a:	4a4a      	ldr	r2, [pc, #296]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c54:	f7fd fc56 	bl	8002504 <HAL_GetTick>
 8004c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c5a:	e008      	b.n	8004c6e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fc52 	bl	8002504 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d901      	bls.n	8004c6e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e212      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6e:	4b41      	ldr	r3, [pc, #260]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d0ef      	beq.n	8004c5c <HAL_RCC_OscConfig+0x3ec>
 8004c7c:	e01b      	b.n	8004cb6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c7e:	4b3d      	ldr	r3, [pc, #244]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c84:	4a3b      	ldr	r2, [pc, #236]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fc39 	bl	8002504 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd fc35 	bl	8002504 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e1f5      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca8:	4b32      	ldr	r3, [pc, #200]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d1ef      	bne.n	8004c96 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 80a6 	beq.w	8004e10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cc8:	4b2a      	ldr	r3, [pc, #168]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10d      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cd4:	4b27      	ldr	r3, [pc, #156]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	4a26      	ldr	r2, [pc, #152]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cde:	6593      	str	r3, [r2, #88]	; 0x58
 8004ce0:	4b24      	ldr	r3, [pc, #144]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	60bb      	str	r3, [r7, #8]
 8004cea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cec:	2301      	movs	r3, #1
 8004cee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cf0:	4b21      	ldr	r3, [pc, #132]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d118      	bne.n	8004d2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004d02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d08:	f7fd fbfc 	bl	8002504 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d10:	f7fd fbf8 	bl	8002504 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e1b8      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d22:	4b15      	ldr	r3, [pc, #84]	; (8004d78 <HAL_RCC_OscConfig+0x508>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d0f0      	beq.n	8004d10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d108      	bne.n	8004d48 <HAL_RCC_OscConfig+0x4d8>
 8004d36:	4b0f      	ldr	r3, [pc, #60]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d3c:	4a0d      	ldr	r2, [pc, #52]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d46:	e029      	b.n	8004d9c <HAL_RCC_OscConfig+0x52c>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b05      	cmp	r3, #5
 8004d4e:	d115      	bne.n	8004d7c <HAL_RCC_OscConfig+0x50c>
 8004d50:	4b08      	ldr	r3, [pc, #32]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d56:	4a07      	ldr	r2, [pc, #28]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d58:	f043 0304 	orr.w	r3, r3, #4
 8004d5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a03      	ldr	r2, [pc, #12]	; (8004d74 <HAL_RCC_OscConfig+0x504>)
 8004d68:	f043 0301 	orr.w	r3, r3, #1
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d70:	e014      	b.n	8004d9c <HAL_RCC_OscConfig+0x52c>
 8004d72:	bf00      	nop
 8004d74:	40021000 	.word	0x40021000
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	4b9d      	ldr	r3, [pc, #628]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d82:	4a9c      	ldr	r2, [pc, #624]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d8c:	4b99      	ldr	r3, [pc, #612]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d92:	4a98      	ldr	r2, [pc, #608]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004d94:	f023 0304 	bic.w	r3, r3, #4
 8004d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d016      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fd fbae 	bl	8002504 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fd fbaa 	bl	8002504 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e168      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dc2:	4b8c      	ldr	r3, [pc, #560]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0ed      	beq.n	8004dac <HAL_RCC_OscConfig+0x53c>
 8004dd0:	e015      	b.n	8004dfe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dd2:	f7fd fb97 	bl	8002504 <HAL_GetTick>
 8004dd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd8:	e00a      	b.n	8004df0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dda:	f7fd fb93 	bl	8002504 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d901      	bls.n	8004df0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004dec:	2303      	movs	r3, #3
 8004dee:	e151      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004df0:	4b80      	ldr	r3, [pc, #512]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1ed      	bne.n	8004dda <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dfe:	7ffb      	ldrb	r3, [r7, #31]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d105      	bne.n	8004e10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e04:	4b7b      	ldr	r3, [pc, #492]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e08:	4a7a      	ldr	r2, [pc, #488]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d03c      	beq.n	8004e96 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01c      	beq.n	8004e5e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e24:	4b73      	ldr	r3, [pc, #460]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e2a:	4a72      	ldr	r2, [pc, #456]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e34:	f7fd fb66 	bl	8002504 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e3c:	f7fd fb62 	bl	8002504 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e122      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e4e:	4b69      	ldr	r3, [pc, #420]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ef      	beq.n	8004e3c <HAL_RCC_OscConfig+0x5cc>
 8004e5c:	e01b      	b.n	8004e96 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e5e:	4b65      	ldr	r3, [pc, #404]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e64:	4a63      	ldr	r2, [pc, #396]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e66:	f023 0301 	bic.w	r3, r3, #1
 8004e6a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e6e:	f7fd fb49 	bl	8002504 <HAL_GetTick>
 8004e72:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e74:	e008      	b.n	8004e88 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e76:	f7fd fb45 	bl	8002504 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	2b02      	cmp	r3, #2
 8004e82:	d901      	bls.n	8004e88 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e84:	2303      	movs	r3, #3
 8004e86:	e105      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e88:	4b5a      	ldr	r3, [pc, #360]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1ef      	bne.n	8004e76 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 80f9 	beq.w	8005092 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	f040 80cf 	bne.w	8005048 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004eaa:	4b52      	ldr	r3, [pc, #328]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	f003 0203 	and.w	r2, r3, #3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d12c      	bne.n	8004f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d123      	bne.n	8004f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eda:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d11b      	bne.n	8004f18 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d113      	bne.n	8004f18 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	3b01      	subs	r3, #1
 8004efe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d109      	bne.n	8004f18 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	3b01      	subs	r3, #1
 8004f12:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d071      	beq.n	8004ffc <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d068      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f1e:	4b35      	ldr	r3, [pc, #212]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d105      	bne.n	8004f36 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f2a:	4b32      	ldr	r3, [pc, #200]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0ac      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b2e      	ldr	r3, [pc, #184]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a2d      	ldr	r2, [pc, #180]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004f40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f44:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f46:	f7fd fadd 	bl	8002504 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4e:	f7fd fad9 	bl	8002504 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e099      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	4b24      	ldr	r3, [pc, #144]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f6c:	4b21      	ldr	r3, [pc, #132]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004f6e:	68da      	ldr	r2, [r3, #12]
 8004f70:	4b21      	ldr	r3, [pc, #132]	; (8004ff8 <HAL_RCC_OscConfig+0x788>)
 8004f72:	4013      	ands	r3, r2
 8004f74:	687a      	ldr	r2, [r7, #4]
 8004f76:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	0112      	lsls	r2, r2, #4
 8004f80:	4311      	orrs	r1, r2
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f86:	0212      	lsls	r2, r2, #8
 8004f88:	4311      	orrs	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f8e:	0852      	lsrs	r2, r2, #1
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0552      	lsls	r2, r2, #21
 8004f94:	4311      	orrs	r1, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f9a:	0852      	lsrs	r2, r2, #1
 8004f9c:	3a01      	subs	r2, #1
 8004f9e:	0652      	lsls	r2, r2, #25
 8004fa0:	4311      	orrs	r1, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fa6:	06d2      	lsls	r2, r2, #27
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	4912      	ldr	r1, [pc, #72]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fb0:	4b10      	ldr	r3, [pc, #64]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a0f      	ldr	r2, [pc, #60]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004fb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fba:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fbc:	4b0d      	ldr	r3, [pc, #52]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004fc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fc6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fc8:	f7fd fa9c 	bl	8002504 <HAL_GetTick>
 8004fcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fce:	e008      	b.n	8004fe2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd0:	f7fd fa98 	bl	8002504 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d901      	bls.n	8004fe2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004fde:	2303      	movs	r3, #3
 8004fe0:	e058      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	4b04      	ldr	r3, [pc, #16]	; (8004ff4 <HAL_RCC_OscConfig+0x784>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d0f0      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fee:	e050      	b.n	8005092 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e04f      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
 8004ff4:	40021000 	.word	0x40021000
 8004ff8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ffc:	4b27      	ldr	r3, [pc, #156]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d144      	bne.n	8005092 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a23      	ldr	r2, [pc, #140]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 800500e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005012:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a20      	ldr	r2, [pc, #128]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 800501a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005020:	f7fd fa70 	bl	8002504 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005026:	e008      	b.n	800503a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005028:	f7fd fa6c 	bl	8002504 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d901      	bls.n	800503a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e02c      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503a:	4b18      	ldr	r3, [pc, #96]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d0f0      	beq.n	8005028 <HAL_RCC_OscConfig+0x7b8>
 8005046:	e024      	b.n	8005092 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	2b0c      	cmp	r3, #12
 800504c:	d01f      	beq.n	800508e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800504e:	4b13      	ldr	r3, [pc, #76]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8005054:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005058:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505a:	f7fd fa53 	bl	8002504 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005062:	f7fd fa4f 	bl	8002504 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e00f      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005074:	4b09      	ldr	r3, [pc, #36]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f0      	bne.n	8005062 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005080:	4b06      	ldr	r3, [pc, #24]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8005082:	68da      	ldr	r2, [r3, #12]
 8005084:	4905      	ldr	r1, [pc, #20]	; (800509c <HAL_RCC_OscConfig+0x82c>)
 8005086:	4b06      	ldr	r3, [pc, #24]	; (80050a0 <HAL_RCC_OscConfig+0x830>)
 8005088:	4013      	ands	r3, r2
 800508a:	60cb      	str	r3, [r1, #12]
 800508c:	e001      	b.n	8005092 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e000      	b.n	8005094 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3720      	adds	r7, #32
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	40021000 	.word	0x40021000
 80050a0:	feeefffc 	.word	0xfeeefffc

080050a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b086      	sub	sp, #24
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e11d      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050bc:	4b90      	ldr	r3, [pc, #576]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 030f 	and.w	r3, r3, #15
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	d910      	bls.n	80050ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ca:	4b8d      	ldr	r3, [pc, #564]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 020f 	bic.w	r2, r3, #15
 80050d2:	498b      	ldr	r1, [pc, #556]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050da:	4b89      	ldr	r3, [pc, #548]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 030f 	and.w	r3, r3, #15
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d001      	beq.n	80050ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e105      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	4b81      	ldr	r3, [pc, #516]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80050fe:	689b      	ldr	r3, [r3, #8]
 8005100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005104:	429a      	cmp	r2, r3
 8005106:	d908      	bls.n	800511a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b7e      	ldr	r3, [pc, #504]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	497b      	ldr	r1, [pc, #492]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d079      	beq.n	800521a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b03      	cmp	r3, #3
 800512c:	d11e      	bne.n	800516c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800512e:	4b75      	ldr	r3, [pc, #468]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005136:	2b00      	cmp	r3, #0
 8005138:	d101      	bne.n	800513e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e0dc      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800513e:	f000 fa09 	bl	8005554 <RCC_GetSysClockFreqFromPLLSource>
 8005142:	4603      	mov	r3, r0
 8005144:	4a70      	ldr	r2, [pc, #448]	; (8005308 <HAL_RCC_ClockConfig+0x264>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d946      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800514a:	4b6e      	ldr	r3, [pc, #440]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005152:	2b00      	cmp	r3, #0
 8005154:	d140      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005156:	4b6b      	ldr	r3, [pc, #428]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800515e:	4a69      	ldr	r2, [pc, #420]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005164:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005166:	2380      	movs	r3, #128	; 0x80
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e035      	b.n	80051d8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b02      	cmp	r3, #2
 8005172:	d107      	bne.n	8005184 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005174:	4b63      	ldr	r3, [pc, #396]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d115      	bne.n	80051ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0b9      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d107      	bne.n	800519c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800518c:	4b5d      	ldr	r3, [pc, #372]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0302 	and.w	r3, r3, #2
 8005194:	2b00      	cmp	r3, #0
 8005196:	d109      	bne.n	80051ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e0ad      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800519c:	4b59      	ldr	r3, [pc, #356]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e0a5      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80051ac:	f000 f8b4 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a55      	ldr	r2, [pc, #340]	; (8005308 <HAL_RCC_ClockConfig+0x264>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d90f      	bls.n	80051d8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051b8:	4b52      	ldr	r3, [pc, #328]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051c4:	4b4f      	ldr	r3, [pc, #316]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051cc:	4a4d      	ldr	r2, [pc, #308]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80051ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051d2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051d4:	2380      	movs	r3, #128	; 0x80
 80051d6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051d8:	4b4a      	ldr	r3, [pc, #296]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 0203 	bic.w	r2, r3, #3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	4947      	ldr	r1, [pc, #284]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051ea:	f7fd f98b 	bl	8002504 <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f2:	f7fd f987 	bl	8002504 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e077      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005208:	4b3e      	ldr	r3, [pc, #248]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f003 020c 	and.w	r2, r3, #12
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	429a      	cmp	r2, r3
 8005218:	d1eb      	bne.n	80051f2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	2b80      	cmp	r3, #128	; 0x80
 800521e:	d105      	bne.n	800522c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005220:	4b38      	ldr	r3, [pc, #224]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	4a37      	ldr	r2, [pc, #220]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005226:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800522a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d010      	beq.n	800525a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	4b31      	ldr	r3, [pc, #196]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005244:	429a      	cmp	r2, r3
 8005246:	d208      	bcs.n	800525a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005248:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	492b      	ldr	r1, [pc, #172]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005256:	4313      	orrs	r3, r2
 8005258:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800525a:	4b29      	ldr	r3, [pc, #164]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 030f 	and.w	r3, r3, #15
 8005262:	683a      	ldr	r2, [r7, #0]
 8005264:	429a      	cmp	r2, r3
 8005266:	d210      	bcs.n	800528a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005268:	4b25      	ldr	r3, [pc, #148]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f023 020f 	bic.w	r2, r3, #15
 8005270:	4923      	ldr	r1, [pc, #140]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	4313      	orrs	r3, r2
 8005276:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005278:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_RCC_ClockConfig+0x25c>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d001      	beq.n	800528a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e036      	b.n	80052f8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0304 	and.w	r3, r3, #4
 8005292:	2b00      	cmp	r3, #0
 8005294:	d008      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005296:	4b1b      	ldr	r3, [pc, #108]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	4918      	ldr	r1, [pc, #96]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80052a4:	4313      	orrs	r3, r2
 80052a6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d009      	beq.n	80052c8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052b4:	4b13      	ldr	r3, [pc, #76]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	4910      	ldr	r1, [pc, #64]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80052c4:	4313      	orrs	r3, r2
 80052c6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052c8:	f000 f826 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80052cc:	4602      	mov	r2, r0
 80052ce:	4b0d      	ldr	r3, [pc, #52]	; (8005304 <HAL_RCC_ClockConfig+0x260>)
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	091b      	lsrs	r3, r3, #4
 80052d4:	f003 030f 	and.w	r3, r3, #15
 80052d8:	490c      	ldr	r1, [pc, #48]	; (800530c <HAL_RCC_ClockConfig+0x268>)
 80052da:	5ccb      	ldrb	r3, [r1, r3]
 80052dc:	f003 031f 	and.w	r3, r3, #31
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
 80052e4:	4a0a      	ldr	r2, [pc, #40]	; (8005310 <HAL_RCC_ClockConfig+0x26c>)
 80052e6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052e8:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <HAL_RCC_ClockConfig+0x270>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fd f8b9 	bl	8002464 <HAL_InitTick>
 80052f2:	4603      	mov	r3, r0
 80052f4:	73fb      	strb	r3, [r7, #15]

  return status;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3718      	adds	r7, #24
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	40022000 	.word	0x40022000
 8005304:	40021000 	.word	0x40021000
 8005308:	04c4b400 	.word	0x04c4b400
 800530c:	080099d4 	.word	0x080099d4
 8005310:	20000000 	.word	0x20000000
 8005314:	20000004 	.word	0x20000004

08005318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005318:	b480      	push	{r7}
 800531a:	b089      	sub	sp, #36	; 0x24
 800531c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800531e:	2300      	movs	r3, #0
 8005320:	61fb      	str	r3, [r7, #28]
 8005322:	2300      	movs	r3, #0
 8005324:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005326:	4b3e      	ldr	r3, [pc, #248]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	f003 030c 	and.w	r3, r3, #12
 800532e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005330:	4b3b      	ldr	r3, [pc, #236]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	f003 0303 	and.w	r3, r3, #3
 8005338:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <HAL_RCC_GetSysClockFreq+0x34>
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	2b0c      	cmp	r3, #12
 8005344:	d121      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b01      	cmp	r3, #1
 800534a:	d11e      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800534c:	4b34      	ldr	r3, [pc, #208]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0308 	and.w	r3, r3, #8
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800535e:	0a1b      	lsrs	r3, r3, #8
 8005360:	f003 030f 	and.w	r3, r3, #15
 8005364:	61fb      	str	r3, [r7, #28]
 8005366:	e005      	b.n	8005374 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005368:	4b2d      	ldr	r3, [pc, #180]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005374:	4a2b      	ldr	r2, [pc, #172]	; (8005424 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10d      	bne.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d102      	bne.n	8005396 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005390:	4b25      	ldr	r3, [pc, #148]	; (8005428 <HAL_RCC_GetSysClockFreq+0x110>)
 8005392:	61bb      	str	r3, [r7, #24]
 8005394:	e004      	b.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b08      	cmp	r3, #8
 800539a:	d101      	bne.n	80053a0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800539c:	4b23      	ldr	r3, [pc, #140]	; (800542c <HAL_RCC_GetSysClockFreq+0x114>)
 800539e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	2b0c      	cmp	r3, #12
 80053a4:	d134      	bne.n	8005410 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053a6:	4b1e      	ldr	r3, [pc, #120]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f003 0303 	and.w	r3, r3, #3
 80053ae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d003      	beq.n	80053be <HAL_RCC_GetSysClockFreq+0xa6>
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d003      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0xac>
 80053bc:	e005      	b.n	80053ca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053be:	4b1a      	ldr	r3, [pc, #104]	; (8005428 <HAL_RCC_GetSysClockFreq+0x110>)
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	e005      	b.n	80053d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053c4:	4b19      	ldr	r3, [pc, #100]	; (800542c <HAL_RCC_GetSysClockFreq+0x114>)
 80053c6:	617b      	str	r3, [r7, #20]
      break;
 80053c8:	e002      	b.n	80053d0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	617b      	str	r3, [r7, #20]
      break;
 80053ce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053d0:	4b13      	ldr	r3, [pc, #76]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	091b      	lsrs	r3, r3, #4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	3301      	adds	r3, #1
 80053dc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053de:	4b10      	ldr	r3, [pc, #64]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	0a1b      	lsrs	r3, r3, #8
 80053e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	fb03 f202 	mul.w	r2, r3, r2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053f6:	4b0a      	ldr	r3, [pc, #40]	; (8005420 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	0e5b      	lsrs	r3, r3, #25
 80053fc:	f003 0303 	and.w	r3, r3, #3
 8005400:	3301      	adds	r3, #1
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005410:	69bb      	ldr	r3, [r7, #24]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3724      	adds	r7, #36	; 0x24
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40021000 	.word	0x40021000
 8005424:	080099ec 	.word	0x080099ec
 8005428:	00f42400 	.word	0x00f42400
 800542c:	007a1200 	.word	0x007a1200

08005430 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005430:	b480      	push	{r7}
 8005432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005434:	4b03      	ldr	r3, [pc, #12]	; (8005444 <HAL_RCC_GetHCLKFreq+0x14>)
 8005436:	681b      	ldr	r3, [r3, #0]
}
 8005438:	4618      	mov	r0, r3
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	20000000 	.word	0x20000000

08005448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800544c:	f7ff fff0 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 8005450:	4602      	mov	r2, r0
 8005452:	4b06      	ldr	r3, [pc, #24]	; (800546c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	0a1b      	lsrs	r3, r3, #8
 8005458:	f003 0307 	and.w	r3, r3, #7
 800545c:	4904      	ldr	r1, [pc, #16]	; (8005470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800545e:	5ccb      	ldrb	r3, [r1, r3]
 8005460:	f003 031f 	and.w	r3, r3, #31
 8005464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005468:	4618      	mov	r0, r3
 800546a:	bd80      	pop	{r7, pc}
 800546c:	40021000 	.word	0x40021000
 8005470:	080099e4 	.word	0x080099e4

08005474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005478:	f7ff ffda 	bl	8005430 <HAL_RCC_GetHCLKFreq>
 800547c:	4602      	mov	r2, r0
 800547e:	4b06      	ldr	r3, [pc, #24]	; (8005498 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	0adb      	lsrs	r3, r3, #11
 8005484:	f003 0307 	and.w	r3, r3, #7
 8005488:	4904      	ldr	r1, [pc, #16]	; (800549c <HAL_RCC_GetPCLK2Freq+0x28>)
 800548a:	5ccb      	ldrb	r3, [r1, r3]
 800548c:	f003 031f 	and.w	r3, r3, #31
 8005490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005494:	4618      	mov	r0, r3
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000
 800549c:	080099e4 	.word	0x080099e4

080054a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054a8:	2300      	movs	r3, #0
 80054aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054ac:	4b27      	ldr	r3, [pc, #156]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054b8:	f7ff f916 	bl	80046e8 <HAL_PWREx_GetVoltageRange>
 80054bc:	6178      	str	r0, [r7, #20]
 80054be:	e014      	b.n	80054ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b22      	ldr	r3, [pc, #136]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	4a21      	ldr	r2, [pc, #132]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6593      	str	r3, [r2, #88]	; 0x58
 80054cc:	4b1f      	ldr	r3, [pc, #124]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054d8:	f7ff f906 	bl	80046e8 <HAL_PWREx_GetVoltageRange>
 80054dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054de:	4b1b      	ldr	r3, [pc, #108]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e2:	4a1a      	ldr	r2, [pc, #104]	; (800554c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d10b      	bne.n	800550a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d913      	bls.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2ba0      	cmp	r3, #160	; 0xa0
 80054fc:	d902      	bls.n	8005504 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80054fe:	2302      	movs	r3, #2
 8005500:	613b      	str	r3, [r7, #16]
 8005502:	e00d      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005504:	2301      	movs	r3, #1
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e00a      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2b7f      	cmp	r3, #127	; 0x7f
 800550e:	d902      	bls.n	8005516 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005510:	2302      	movs	r3, #2
 8005512:	613b      	str	r3, [r7, #16]
 8005514:	e004      	b.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2b70      	cmp	r3, #112	; 0x70
 800551a:	d101      	bne.n	8005520 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800551c:	2301      	movs	r3, #1
 800551e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f023 020f 	bic.w	r2, r3, #15
 8005528:	4909      	ldr	r1, [pc, #36]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 030f 	and.w	r3, r3, #15
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	429a      	cmp	r2, r3
 800553c:	d001      	beq.n	8005542 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e000      	b.n	8005544 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3718      	adds	r7, #24
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	40021000 	.word	0x40021000
 8005550:	40022000 	.word	0x40022000

08005554 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005554:	b480      	push	{r7}
 8005556:	b087      	sub	sp, #28
 8005558:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800555a:	4b2d      	ldr	r3, [pc, #180]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	f003 0303 	and.w	r3, r3, #3
 8005562:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b03      	cmp	r3, #3
 8005568:	d00b      	beq.n	8005582 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d825      	bhi.n	80055bc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d008      	beq.n	8005588 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2b02      	cmp	r3, #2
 800557a:	d11f      	bne.n	80055bc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800557c:	4b25      	ldr	r3, [pc, #148]	; (8005614 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800557e:	613b      	str	r3, [r7, #16]
    break;
 8005580:	e01f      	b.n	80055c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005582:	4b25      	ldr	r3, [pc, #148]	; (8005618 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005584:	613b      	str	r3, [r7, #16]
    break;
 8005586:	e01c      	b.n	80055c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005588:	4b21      	ldr	r3, [pc, #132]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0308 	and.w	r3, r3, #8
 8005590:	2b00      	cmp	r3, #0
 8005592:	d107      	bne.n	80055a4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005594:	4b1e      	ldr	r3, [pc, #120]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005596:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800559a:	0a1b      	lsrs	r3, r3, #8
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	617b      	str	r3, [r7, #20]
 80055a2:	e005      	b.n	80055b0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055a4:	4b1a      	ldr	r3, [pc, #104]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	091b      	lsrs	r3, r3, #4
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055b0:	4a1a      	ldr	r2, [pc, #104]	; (800561c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055b8:	613b      	str	r3, [r7, #16]
    break;
 80055ba:	e002      	b.n	80055c2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80055bc:	2300      	movs	r3, #0
 80055be:	613b      	str	r3, [r7, #16]
    break;
 80055c0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055c2:	4b13      	ldr	r3, [pc, #76]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055c4:	68db      	ldr	r3, [r3, #12]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	3301      	adds	r3, #1
 80055ce:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055d0:	4b0f      	ldr	r3, [pc, #60]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055d2:	68db      	ldr	r3, [r3, #12]
 80055d4:	0a1b      	lsrs	r3, r3, #8
 80055d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	fb03 f202 	mul.w	r2, r3, r2
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055e8:	4b09      	ldr	r3, [pc, #36]	; (8005610 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	0e5b      	lsrs	r3, r3, #25
 80055ee:	f003 0303 	and.w	r3, r3, #3
 80055f2:	3301      	adds	r3, #1
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80055f8:	693a      	ldr	r2, [r7, #16]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005600:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005602:	683b      	ldr	r3, [r7, #0]
}
 8005604:	4618      	mov	r0, r3
 8005606:	371c      	adds	r7, #28
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr
 8005610:	40021000 	.word	0x40021000
 8005614:	00f42400 	.word	0x00f42400
 8005618:	007a1200 	.word	0x007a1200
 800561c:	080099ec 	.word	0x080099ec

08005620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005628:	2300      	movs	r3, #0
 800562a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800562c:	2300      	movs	r3, #0
 800562e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005638:	2b00      	cmp	r3, #0
 800563a:	d040      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d02a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005644:	2b80      	cmp	r3, #128	; 0x80
 8005646:	d825      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005648:	2b60      	cmp	r3, #96	; 0x60
 800564a:	d026      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800564c:	2b60      	cmp	r3, #96	; 0x60
 800564e:	d821      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005650:	2b40      	cmp	r3, #64	; 0x40
 8005652:	d006      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005654:	2b40      	cmp	r3, #64	; 0x40
 8005656:	d81d      	bhi.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800565c:	2b20      	cmp	r3, #32
 800565e:	d010      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005660:	e018      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005662:	4b89      	ldr	r3, [pc, #548]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	4a88      	ldr	r2, [pc, #544]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800566e:	e015      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	3304      	adds	r3, #4
 8005674:	2100      	movs	r1, #0
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fb12 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 800567c:	4603      	mov	r3, r0
 800567e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005680:	e00c      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	3320      	adds	r3, #32
 8005686:	2100      	movs	r1, #0
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fbfd 	bl	8005e88 <RCCEx_PLLSAI2_Config>
 800568e:	4603      	mov	r3, r0
 8005690:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005692:	e003      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	74fb      	strb	r3, [r7, #19]
      break;
 8005698:	e000      	b.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800569a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800569c:	7cfb      	ldrb	r3, [r7, #19]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10b      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056a2:	4b79      	ldr	r3, [pc, #484]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b0:	4975      	ldr	r1, [pc, #468]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056b8:	e001      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	7cfb      	ldrb	r3, [r7, #19]
 80056bc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d047      	beq.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d2:	d030      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056d8:	d82a      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056de:	d02a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056e4:	d824      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056ea:	d008      	beq.n	80056fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80056ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056f0:	d81e      	bhi.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80056f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056fa:	d010      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80056fc:	e018      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80056fe:	4b62      	ldr	r3, [pc, #392]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005700:	68db      	ldr	r3, [r3, #12]
 8005702:	4a61      	ldr	r2, [pc, #388]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005708:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800570a:	e015      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	3304      	adds	r3, #4
 8005710:	2100      	movs	r1, #0
 8005712:	4618      	mov	r0, r3
 8005714:	f000 fac4 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005718:	4603      	mov	r3, r0
 800571a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800571c:	e00c      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	3320      	adds	r3, #32
 8005722:	2100      	movs	r1, #0
 8005724:	4618      	mov	r0, r3
 8005726:	f000 fbaf 	bl	8005e88 <RCCEx_PLLSAI2_Config>
 800572a:	4603      	mov	r3, r0
 800572c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800572e:	e003      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	74fb      	strb	r3, [r7, #19]
      break;
 8005734:	e000      	b.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800573e:	4b52      	ldr	r3, [pc, #328]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005740:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005744:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800574c:	494e      	ldr	r1, [pc, #312]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005754:	e001      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005762:	2b00      	cmp	r3, #0
 8005764:	f000 809f 	beq.w	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005768:	2300      	movs	r3, #0
 800576a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800576c:	4b46      	ldr	r3, [pc, #280]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800576e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005774:	2b00      	cmp	r3, #0
 8005776:	d101      	bne.n	800577c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005778:	2301      	movs	r3, #1
 800577a:	e000      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800577c:	2300      	movs	r3, #0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00d      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005782:	4b41      	ldr	r3, [pc, #260]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005786:	4a40      	ldr	r2, [pc, #256]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800578c:	6593      	str	r3, [r2, #88]	; 0x58
 800578e:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005796:	60bb      	str	r3, [r7, #8]
 8005798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800579a:	2301      	movs	r3, #1
 800579c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800579e:	4b3b      	ldr	r3, [pc, #236]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a3a      	ldr	r2, [pc, #232]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057aa:	f7fc feab 	bl	8002504 <HAL_GetTick>
 80057ae:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057b0:	e009      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057b2:	f7fc fea7 	bl	8002504 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d902      	bls.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	74fb      	strb	r3, [r7, #19]
        break;
 80057c4:	e005      	b.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057c6:	4b31      	ldr	r3, [pc, #196]	; (800588c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d0ef      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80057d2:	7cfb      	ldrb	r3, [r7, #19]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d15b      	bne.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057d8:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057e2:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d01f      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d019      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057f6:	4b24      	ldr	r3, [pc, #144]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005800:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005808:	4a1f      	ldr	r2, [pc, #124]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800580e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005818:	4a1b      	ldr	r2, [pc, #108]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800581e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005822:	4a19      	ldr	r2, [pc, #100]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d016      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005834:	f7fc fe66 	bl	8002504 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800583a:	e00b      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800583c:	f7fc fe62 	bl	8002504 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f241 3288 	movw	r2, #5000	; 0x1388
 800584a:	4293      	cmp	r3, r2
 800584c:	d902      	bls.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	74fb      	strb	r3, [r7, #19]
            break;
 8005852:	e006      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005854:	4b0c      	ldr	r3, [pc, #48]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	f003 0302 	and.w	r3, r3, #2
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ec      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005862:	7cfb      	ldrb	r3, [r7, #19]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10c      	bne.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005868:	4b07      	ldr	r3, [pc, #28]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005878:	4903      	ldr	r1, [pc, #12]	; (8005888 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587a:	4313      	orrs	r3, r2
 800587c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005880:	e008      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005882:	7cfb      	ldrb	r3, [r7, #19]
 8005884:	74bb      	strb	r3, [r7, #18]
 8005886:	e005      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005888:	40021000 	.word	0x40021000
 800588c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005890:	7cfb      	ldrb	r3, [r7, #19]
 8005892:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005894:	7c7b      	ldrb	r3, [r7, #17]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d105      	bne.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800589a:	4ba0      	ldr	r3, [pc, #640]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800589e:	4a9f      	ldr	r2, [pc, #636]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0301 	and.w	r3, r3, #1
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00a      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058b2:	4b9a      	ldr	r3, [pc, #616]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b8:	f023 0203 	bic.w	r2, r3, #3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c0:	4996      	ldr	r1, [pc, #600]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00a      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058d4:	4b91      	ldr	r3, [pc, #580]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058da:	f023 020c 	bic.w	r2, r3, #12
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	498e      	ldr	r1, [pc, #568]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e4:	4313      	orrs	r3, r2
 80058e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0304 	and.w	r3, r3, #4
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058f6:	4b89      	ldr	r3, [pc, #548]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005904:	4985      	ldr	r1, [pc, #532]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0308 	and.w	r3, r3, #8
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00a      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005918:	4b80      	ldr	r3, [pc, #512]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005926:	497d      	ldr	r1, [pc, #500]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005928:	4313      	orrs	r3, r2
 800592a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800593a:	4b78      	ldr	r3, [pc, #480]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005948:	4974      	ldr	r1, [pc, #464]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800594a:	4313      	orrs	r3, r2
 800594c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800595c:	4b6f      	ldr	r3, [pc, #444]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596a:	496c      	ldr	r1, [pc, #432]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800597a:	2b00      	cmp	r3, #0
 800597c:	d00a      	beq.n	8005994 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800597e:	4b67      	ldr	r3, [pc, #412]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005984:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800598c:	4963      	ldr	r1, [pc, #396]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598e:	4313      	orrs	r3, r2
 8005990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059a0:	4b5e      	ldr	r3, [pc, #376]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059ae:	495b      	ldr	r1, [pc, #364]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00a      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059c2:	4b56      	ldr	r3, [pc, #344]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059d0:	4952      	ldr	r1, [pc, #328]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00a      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059e4:	4b4d      	ldr	r3, [pc, #308]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f2:	494a      	ldr	r1, [pc, #296]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f4:	4313      	orrs	r3, r2
 80059f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00a      	beq.n	8005a1c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a06:	4b45      	ldr	r3, [pc, #276]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a14:	4941      	ldr	r1, [pc, #260]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00a      	beq.n	8005a3e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a28:	4b3c      	ldr	r3, [pc, #240]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a2e:	f023 0203 	bic.w	r2, r3, #3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a36:	4939      	ldr	r1, [pc, #228]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d028      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a4a:	4b34      	ldr	r3, [pc, #208]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a50:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a58:	4930      	ldr	r1, [pc, #192]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a68:	d106      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a6a:	4b2c      	ldr	r3, [pc, #176]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6c:	68db      	ldr	r3, [r3, #12]
 8005a6e:	4a2b      	ldr	r2, [pc, #172]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a74:	60d3      	str	r3, [r2, #12]
 8005a76:	e011      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a7c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a80:	d10c      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	3304      	adds	r3, #4
 8005a86:	2101      	movs	r1, #1
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f909 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a98:	7cfb      	ldrb	r3, [r7, #19]
 8005a9a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d04d      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ab0:	d108      	bne.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ab2:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ab4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ab8:	4a18      	ldr	r2, [pc, #96]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005abe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005ac2:	e012      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ac4:	4b15      	ldr	r3, [pc, #84]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005aca:	4a14      	ldr	r2, [pc, #80]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005acc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae2:	490e      	ldr	r1, [pc, #56]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b09      	ldr	r3, [pc, #36]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a08      	ldr	r2, [pc, #32]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
 8005b00:	e020      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b0a:	d109      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b0c:	4b03      	ldr	r3, [pc, #12]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	4a02      	ldr	r2, [pc, #8]	; (8005b1c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b16:	60d3      	str	r3, [r2, #12]
 8005b18:	e014      	b.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b1a:	bf00      	nop
 8005b1c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b28:	d10c      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	3304      	adds	r3, #4
 8005b2e:	2101      	movs	r1, #1
 8005b30:	4618      	mov	r0, r3
 8005b32:	f000 f8b5 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b3a:	7cfb      	ldrb	r3, [r7, #19]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b40:	7cfb      	ldrb	r3, [r7, #19]
 8005b42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d028      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b50:	4b4a      	ldr	r3, [pc, #296]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b5e:	4947      	ldr	r1, [pc, #284]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b6e:	d106      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b70:	4b42      	ldr	r3, [pc, #264]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b72:	68db      	ldr	r3, [r3, #12]
 8005b74:	4a41      	ldr	r2, [pc, #260]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b7a:	60d3      	str	r3, [r2, #12]
 8005b7c:	e011      	b.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b86:	d10c      	bne.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	4618      	mov	r0, r3
 8005b90:	f000 f886 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005b94:	4603      	mov	r3, r0
 8005b96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b98:	7cfb      	ldrb	r3, [r7, #19]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d001      	beq.n	8005ba2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ba0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d01e      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bae:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bbe:	492f      	ldr	r1, [pc, #188]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bcc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005bd0:	d10c      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	2102      	movs	r1, #2
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f000 f861 	bl	8005ca0 <RCCEx_PLLSAI1_Config>
 8005bde:	4603      	mov	r3, r0
 8005be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005be2:	7cfb      	ldrb	r3, [r7, #19]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d001      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005be8:	7cfb      	ldrb	r3, [r7, #19]
 8005bea:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d00b      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005bf8:	4b20      	ldr	r3, [pc, #128]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bfe:	f023 0204 	bic.w	r2, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c08:	491c      	ldr	r1, [pc, #112]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c1c:	4b17      	ldr	r3, [pc, #92]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c22:	f023 0218 	bic.w	r2, r3, #24
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2c:	4913      	ldr	r1, [pc, #76]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d017      	beq.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c40:	4b0e      	ldr	r3, [pc, #56]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c42:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c50:	490a      	ldr	r1, [pc, #40]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c62:	d105      	bne.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c70:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	3718      	adds	r7, #24
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000

08005c80 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c80:	b480      	push	{r7}
 8005c82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c84:	4b05      	ldr	r3, [pc, #20]	; (8005c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a04      	ldr	r2, [pc, #16]	; (8005c9c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c8a:	f043 0304 	orr.w	r3, r3, #4
 8005c8e:	6013      	str	r3, [r2, #0]
}
 8005c90:	bf00      	nop
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40021000 	.word	0x40021000

08005ca0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cae:	4b72      	ldr	r3, [pc, #456]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00e      	beq.n	8005cd8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cba:	4b6f      	ldr	r3, [pc, #444]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f003 0203 	and.w	r2, r3, #3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d103      	bne.n	8005cd2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
       ||
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d142      	bne.n	8005d58 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	73fb      	strb	r3, [r7, #15]
 8005cd6:	e03f      	b.n	8005d58 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	2b03      	cmp	r3, #3
 8005cde:	d018      	beq.n	8005d12 <RCCEx_PLLSAI1_Config+0x72>
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d825      	bhi.n	8005d30 <RCCEx_PLLSAI1_Config+0x90>
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d002      	beq.n	8005cee <RCCEx_PLLSAI1_Config+0x4e>
 8005ce8:	2b02      	cmp	r3, #2
 8005cea:	d009      	beq.n	8005d00 <RCCEx_PLLSAI1_Config+0x60>
 8005cec:	e020      	b.n	8005d30 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005cee:	4b62      	ldr	r3, [pc, #392]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 0302 	and.w	r3, r3, #2
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d11d      	bne.n	8005d36 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005cfe:	e01a      	b.n	8005d36 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d00:	4b5d      	ldr	r3, [pc, #372]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d116      	bne.n	8005d3a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d10:	e013      	b.n	8005d3a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d12:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10f      	bne.n	8005d3e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d1e:	4b56      	ldr	r3, [pc, #344]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d109      	bne.n	8005d3e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d2e:	e006      	b.n	8005d3e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	73fb      	strb	r3, [r7, #15]
      break;
 8005d34:	e004      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d36:	bf00      	nop
 8005d38:	e002      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d3a:	bf00      	nop
 8005d3c:	e000      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005d46:	4b4c      	ldr	r3, [pc, #304]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f023 0203 	bic.w	r2, r3, #3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4949      	ldr	r1, [pc, #292]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	f040 8086 	bne.w	8005e6c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d60:	4b45      	ldr	r3, [pc, #276]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a44      	ldr	r2, [pc, #272]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d6c:	f7fc fbca 	bl	8002504 <HAL_GetTick>
 8005d70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d72:	e009      	b.n	8005d88 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d74:	f7fc fbc6 	bl	8002504 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d902      	bls.n	8005d88 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	73fb      	strb	r3, [r7, #15]
        break;
 8005d86:	e005      	b.n	8005d94 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d88:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ef      	bne.n	8005d74 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d168      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d113      	bne.n	8005dc8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005da0:	4b35      	ldr	r3, [pc, #212]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da2:	691a      	ldr	r2, [r3, #16]
 8005da4:	4b35      	ldr	r3, [pc, #212]	; (8005e7c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005da6:	4013      	ands	r3, r2
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6892      	ldr	r2, [r2, #8]
 8005dac:	0211      	lsls	r1, r2, #8
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	68d2      	ldr	r2, [r2, #12]
 8005db2:	06d2      	lsls	r2, r2, #27
 8005db4:	4311      	orrs	r1, r2
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6852      	ldr	r2, [r2, #4]
 8005dba:	3a01      	subs	r2, #1
 8005dbc:	0112      	lsls	r2, r2, #4
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	492d      	ldr	r1, [pc, #180]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	610b      	str	r3, [r1, #16]
 8005dc6:	e02d      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d115      	bne.n	8005dfa <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dce:	4b2a      	ldr	r3, [pc, #168]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	4b2b      	ldr	r3, [pc, #172]	; (8005e80 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	6892      	ldr	r2, [r2, #8]
 8005dda:	0211      	lsls	r1, r2, #8
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	6912      	ldr	r2, [r2, #16]
 8005de0:	0852      	lsrs	r2, r2, #1
 8005de2:	3a01      	subs	r2, #1
 8005de4:	0552      	lsls	r2, r2, #21
 8005de6:	4311      	orrs	r1, r2
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	6852      	ldr	r2, [r2, #4]
 8005dec:	3a01      	subs	r2, #1
 8005dee:	0112      	lsls	r2, r2, #4
 8005df0:	430a      	orrs	r2, r1
 8005df2:	4921      	ldr	r1, [pc, #132]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005df4:	4313      	orrs	r3, r2
 8005df6:	610b      	str	r3, [r1, #16]
 8005df8:	e014      	b.n	8005e24 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005dfa:	4b1f      	ldr	r3, [pc, #124]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dfc:	691a      	ldr	r2, [r3, #16]
 8005dfe:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e00:	4013      	ands	r3, r2
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	6892      	ldr	r2, [r2, #8]
 8005e06:	0211      	lsls	r1, r2, #8
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6952      	ldr	r2, [r2, #20]
 8005e0c:	0852      	lsrs	r2, r2, #1
 8005e0e:	3a01      	subs	r2, #1
 8005e10:	0652      	lsls	r2, r2, #25
 8005e12:	4311      	orrs	r1, r2
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	6852      	ldr	r2, [r2, #4]
 8005e18:	3a01      	subs	r2, #1
 8005e1a:	0112      	lsls	r2, r2, #4
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	4916      	ldr	r1, [pc, #88]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e24:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a13      	ldr	r2, [pc, #76]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e30:	f7fc fb68 	bl	8002504 <HAL_GetTick>
 8005e34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e36:	e009      	b.n	8005e4c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e38:	f7fc fb64 	bl	8002504 <HAL_GetTick>
 8005e3c:	4602      	mov	r2, r0
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	1ad3      	subs	r3, r2, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d902      	bls.n	8005e4c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e46:	2303      	movs	r3, #3
 8005e48:	73fb      	strb	r3, [r7, #15]
          break;
 8005e4a:	e005      	b.n	8005e58 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e4c:	4b0a      	ldr	r3, [pc, #40]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ef      	beq.n	8005e38 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005e58:	7bfb      	ldrb	r3, [r7, #15]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d106      	bne.n	8005e6c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e5e:	4b06      	ldr	r3, [pc, #24]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e60:	691a      	ldr	r2, [r3, #16]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	4904      	ldr	r1, [pc, #16]	; (8005e78 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	07ff800f 	.word	0x07ff800f
 8005e80:	ff9f800f 	.word	0xff9f800f
 8005e84:	f9ff800f 	.word	0xf9ff800f

08005e88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e96:	4b72      	ldr	r3, [pc, #456]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0303 	and.w	r3, r3, #3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00e      	beq.n	8005ec0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005ea2:	4b6f      	ldr	r3, [pc, #444]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 0203 	and.w	r2, r3, #3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d103      	bne.n	8005eba <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
       ||
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d142      	bne.n	8005f40 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	73fb      	strb	r3, [r7, #15]
 8005ebe:	e03f      	b.n	8005f40 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b03      	cmp	r3, #3
 8005ec6:	d018      	beq.n	8005efa <RCCEx_PLLSAI2_Config+0x72>
 8005ec8:	2b03      	cmp	r3, #3
 8005eca:	d825      	bhi.n	8005f18 <RCCEx_PLLSAI2_Config+0x90>
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d002      	beq.n	8005ed6 <RCCEx_PLLSAI2_Config+0x4e>
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d009      	beq.n	8005ee8 <RCCEx_PLLSAI2_Config+0x60>
 8005ed4:	e020      	b.n	8005f18 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ed6:	4b62      	ldr	r3, [pc, #392]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d11d      	bne.n	8005f1e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ee6:	e01a      	b.n	8005f1e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ee8:	4b5d      	ldr	r3, [pc, #372]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d116      	bne.n	8005f22 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ef8:	e013      	b.n	8005f22 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005efa:	4b59      	ldr	r3, [pc, #356]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10f      	bne.n	8005f26 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f06:	4b56      	ldr	r3, [pc, #344]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f16:	e006      	b.n	8005f26 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f18:	2301      	movs	r3, #1
 8005f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f1c:	e004      	b.n	8005f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f1e:	bf00      	nop
 8005f20:	e002      	b.n	8005f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f22:	bf00      	nop
 8005f24:	e000      	b.n	8005f28 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005f2e:	4b4c      	ldr	r3, [pc, #304]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f023 0203 	bic.w	r2, r3, #3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4949      	ldr	r1, [pc, #292]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f040 8086 	bne.w	8006054 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f48:	4b45      	ldr	r3, [pc, #276]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a44      	ldr	r2, [pc, #272]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f54:	f7fc fad6 	bl	8002504 <HAL_GetTick>
 8005f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f5a:	e009      	b.n	8005f70 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f5c:	f7fc fad2 	bl	8002504 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d902      	bls.n	8005f70 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	73fb      	strb	r3, [r7, #15]
        break;
 8005f6e:	e005      	b.n	8005f7c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f70:	4b3b      	ldr	r3, [pc, #236]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1ef      	bne.n	8005f5c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f7c:	7bfb      	ldrb	r3, [r7, #15]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d168      	bne.n	8006054 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d113      	bne.n	8005fb0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f88:	4b35      	ldr	r3, [pc, #212]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	4b35      	ldr	r3, [pc, #212]	; (8006064 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005f8e:	4013      	ands	r3, r2
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	6892      	ldr	r2, [r2, #8]
 8005f94:	0211      	lsls	r1, r2, #8
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	68d2      	ldr	r2, [r2, #12]
 8005f9a:	06d2      	lsls	r2, r2, #27
 8005f9c:	4311      	orrs	r1, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	6852      	ldr	r2, [r2, #4]
 8005fa2:	3a01      	subs	r2, #1
 8005fa4:	0112      	lsls	r2, r2, #4
 8005fa6:	430a      	orrs	r2, r1
 8005fa8:	492d      	ldr	r1, [pc, #180]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005faa:	4313      	orrs	r3, r2
 8005fac:	614b      	str	r3, [r1, #20]
 8005fae:	e02d      	b.n	800600c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d115      	bne.n	8005fe2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fb6:	4b2a      	ldr	r3, [pc, #168]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fb8:	695a      	ldr	r2, [r3, #20]
 8005fba:	4b2b      	ldr	r3, [pc, #172]	; (8006068 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	6892      	ldr	r2, [r2, #8]
 8005fc2:	0211      	lsls	r1, r2, #8
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6912      	ldr	r2, [r2, #16]
 8005fc8:	0852      	lsrs	r2, r2, #1
 8005fca:	3a01      	subs	r2, #1
 8005fcc:	0552      	lsls	r2, r2, #21
 8005fce:	4311      	orrs	r1, r2
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	6852      	ldr	r2, [r2, #4]
 8005fd4:	3a01      	subs	r2, #1
 8005fd6:	0112      	lsls	r2, r2, #4
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	4921      	ldr	r1, [pc, #132]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	614b      	str	r3, [r1, #20]
 8005fe0:	e014      	b.n	800600c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fe2:	4b1f      	ldr	r3, [pc, #124]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fe4:	695a      	ldr	r2, [r3, #20]
 8005fe6:	4b21      	ldr	r3, [pc, #132]	; (800606c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005fe8:	4013      	ands	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6892      	ldr	r2, [r2, #8]
 8005fee:	0211      	lsls	r1, r2, #8
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	6952      	ldr	r2, [r2, #20]
 8005ff4:	0852      	lsrs	r2, r2, #1
 8005ff6:	3a01      	subs	r2, #1
 8005ff8:	0652      	lsls	r2, r2, #25
 8005ffa:	4311      	orrs	r1, r2
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	6852      	ldr	r2, [r2, #4]
 8006000:	3a01      	subs	r2, #1
 8006002:	0112      	lsls	r2, r2, #4
 8006004:	430a      	orrs	r2, r1
 8006006:	4916      	ldr	r1, [pc, #88]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006008:	4313      	orrs	r3, r2
 800600a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800600c:	4b14      	ldr	r3, [pc, #80]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a13      	ldr	r2, [pc, #76]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006016:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006018:	f7fc fa74 	bl	8002504 <HAL_GetTick>
 800601c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800601e:	e009      	b.n	8006034 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006020:	f7fc fa70 	bl	8002504 <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d902      	bls.n	8006034 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800602e:	2303      	movs	r3, #3
 8006030:	73fb      	strb	r3, [r7, #15]
          break;
 8006032:	e005      	b.n	8006040 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006034:	4b0a      	ldr	r3, [pc, #40]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d0ef      	beq.n	8006020 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006040:	7bfb      	ldrb	r3, [r7, #15]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d106      	bne.n	8006054 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006048:	695a      	ldr	r2, [r3, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	4904      	ldr	r1, [pc, #16]	; (8006060 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006050:	4313      	orrs	r3, r2
 8006052:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	40021000 	.word	0x40021000
 8006064:	07ff800f 	.word	0x07ff800f
 8006068:	ff9f800f 	.word	0xff9f800f
 800606c:	f9ff800f 	.word	0xf9ff800f

08006070 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d101      	bne.n	8006082 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800607e:	2301      	movs	r3, #1
 8006080:	e095      	b.n	80061ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d108      	bne.n	800609c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006092:	d009      	beq.n	80060a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	61da      	str	r2, [r3, #28]
 800609a:	e005      	b.n	80060a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d106      	bne.n	80060c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f7fb febe 	bl	8001e44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060e8:	d902      	bls.n	80060f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e002      	b.n	80060f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80060f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80060fe:	d007      	beq.n	8006110 <HAL_SPI_Init+0xa0>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006108:	d002      	beq.n	8006110 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006120:	431a      	orrs	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f003 0302 	and.w	r3, r3, #2
 800612a:	431a      	orrs	r2, r3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006152:	ea42 0103 	orr.w	r1, r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	0c1b      	lsrs	r3, r3, #16
 800616c:	f003 0204 	and.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006174:	f003 0310 	and.w	r3, r3, #16
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	68db      	ldr	r3, [r3, #12]
 8006188:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800618c:	ea42 0103 	orr.w	r1, r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	430a      	orrs	r2, r1
 800619c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061ac:	2300      	movs	r3, #0
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3710      	adds	r7, #16
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d101      	bne.n	80061c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e042      	b.n	800624e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d106      	bne.n	80061e0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f7fb fea8 	bl	8001f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2224      	movs	r2, #36	; 0x24
 80061e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0201 	bic.w	r2, r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fb25 	bl	8006850 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 f826 	bl	8006258 <UART_SetConfig>
 800620c:	4603      	mov	r3, r0
 800620e:	2b01      	cmp	r3, #1
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e01b      	b.n	800624e <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685a      	ldr	r2, [r3, #4]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006224:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006234:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f042 0201 	orr.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fba4 	bl	8006994 <UART_CheckIdleState>
 800624c:	4603      	mov	r3, r0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3708      	adds	r7, #8
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
	...

08006258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006258:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800625c:	b08c      	sub	sp, #48	; 0x30
 800625e:	af00      	add	r7, sp, #0
 8006260:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	689a      	ldr	r2, [r3, #8]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	431a      	orrs	r2, r3
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	431a      	orrs	r2, r3
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	69db      	ldr	r3, [r3, #28]
 800627c:	4313      	orrs	r3, r2
 800627e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681a      	ldr	r2, [r3, #0]
 8006286:	4baa      	ldr	r3, [pc, #680]	; (8006530 <UART_SetConfig+0x2d8>)
 8006288:	4013      	ands	r3, r2
 800628a:	697a      	ldr	r2, [r7, #20]
 800628c:	6812      	ldr	r2, [r2, #0]
 800628e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006290:	430b      	orrs	r3, r1
 8006292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a9f      	ldr	r2, [pc, #636]	; (8006534 <UART_SetConfig+0x2dc>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d004      	beq.n	80062c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062c0:	4313      	orrs	r3, r2
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	6812      	ldr	r2, [r2, #0]
 80062d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062d8:	430b      	orrs	r3, r1
 80062da:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e2:	f023 010f 	bic.w	r1, r3, #15
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	430a      	orrs	r2, r1
 80062f0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a90      	ldr	r2, [pc, #576]	; (8006538 <UART_SetConfig+0x2e0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d125      	bne.n	8006348 <UART_SetConfig+0xf0>
 80062fc:	4b8f      	ldr	r3, [pc, #572]	; (800653c <UART_SetConfig+0x2e4>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f003 0303 	and.w	r3, r3, #3
 8006306:	2b03      	cmp	r3, #3
 8006308:	d81a      	bhi.n	8006340 <UART_SetConfig+0xe8>
 800630a:	a201      	add	r2, pc, #4	; (adr r2, 8006310 <UART_SetConfig+0xb8>)
 800630c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006310:	08006321 	.word	0x08006321
 8006314:	08006331 	.word	0x08006331
 8006318:	08006329 	.word	0x08006329
 800631c:	08006339 	.word	0x08006339
 8006320:	2301      	movs	r3, #1
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006326:	e116      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006328:	2302      	movs	r3, #2
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632e:	e112      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006330:	2304      	movs	r3, #4
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006336:	e10e      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006338:	2308      	movs	r3, #8
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633e:	e10a      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006340:	2310      	movs	r3, #16
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006346:	e106      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a7c      	ldr	r2, [pc, #496]	; (8006540 <UART_SetConfig+0x2e8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d138      	bne.n	80063c4 <UART_SetConfig+0x16c>
 8006352:	4b7a      	ldr	r3, [pc, #488]	; (800653c <UART_SetConfig+0x2e4>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f003 030c 	and.w	r3, r3, #12
 800635c:	2b0c      	cmp	r3, #12
 800635e:	d82d      	bhi.n	80063bc <UART_SetConfig+0x164>
 8006360:	a201      	add	r2, pc, #4	; (adr r2, 8006368 <UART_SetConfig+0x110>)
 8006362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006366:	bf00      	nop
 8006368:	0800639d 	.word	0x0800639d
 800636c:	080063bd 	.word	0x080063bd
 8006370:	080063bd 	.word	0x080063bd
 8006374:	080063bd 	.word	0x080063bd
 8006378:	080063ad 	.word	0x080063ad
 800637c:	080063bd 	.word	0x080063bd
 8006380:	080063bd 	.word	0x080063bd
 8006384:	080063bd 	.word	0x080063bd
 8006388:	080063a5 	.word	0x080063a5
 800638c:	080063bd 	.word	0x080063bd
 8006390:	080063bd 	.word	0x080063bd
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063b5 	.word	0x080063b5
 800639c:	2300      	movs	r3, #0
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063a2:	e0d8      	b.n	8006556 <UART_SetConfig+0x2fe>
 80063a4:	2302      	movs	r3, #2
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063aa:	e0d4      	b.n	8006556 <UART_SetConfig+0x2fe>
 80063ac:	2304      	movs	r3, #4
 80063ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b2:	e0d0      	b.n	8006556 <UART_SetConfig+0x2fe>
 80063b4:	2308      	movs	r3, #8
 80063b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ba:	e0cc      	b.n	8006556 <UART_SetConfig+0x2fe>
 80063bc:	2310      	movs	r3, #16
 80063be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063c2:	e0c8      	b.n	8006556 <UART_SetConfig+0x2fe>
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a5e      	ldr	r2, [pc, #376]	; (8006544 <UART_SetConfig+0x2ec>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d125      	bne.n	800641a <UART_SetConfig+0x1c2>
 80063ce:	4b5b      	ldr	r3, [pc, #364]	; (800653c <UART_SetConfig+0x2e4>)
 80063d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063d8:	2b30      	cmp	r3, #48	; 0x30
 80063da:	d016      	beq.n	800640a <UART_SetConfig+0x1b2>
 80063dc:	2b30      	cmp	r3, #48	; 0x30
 80063de:	d818      	bhi.n	8006412 <UART_SetConfig+0x1ba>
 80063e0:	2b20      	cmp	r3, #32
 80063e2:	d00a      	beq.n	80063fa <UART_SetConfig+0x1a2>
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d814      	bhi.n	8006412 <UART_SetConfig+0x1ba>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <UART_SetConfig+0x19a>
 80063ec:	2b10      	cmp	r3, #16
 80063ee:	d008      	beq.n	8006402 <UART_SetConfig+0x1aa>
 80063f0:	e00f      	b.n	8006412 <UART_SetConfig+0x1ba>
 80063f2:	2300      	movs	r3, #0
 80063f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f8:	e0ad      	b.n	8006556 <UART_SetConfig+0x2fe>
 80063fa:	2302      	movs	r3, #2
 80063fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006400:	e0a9      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006402:	2304      	movs	r3, #4
 8006404:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006408:	e0a5      	b.n	8006556 <UART_SetConfig+0x2fe>
 800640a:	2308      	movs	r3, #8
 800640c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006410:	e0a1      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006412:	2310      	movs	r3, #16
 8006414:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006418:	e09d      	b.n	8006556 <UART_SetConfig+0x2fe>
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a4a      	ldr	r2, [pc, #296]	; (8006548 <UART_SetConfig+0x2f0>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d125      	bne.n	8006470 <UART_SetConfig+0x218>
 8006424:	4b45      	ldr	r3, [pc, #276]	; (800653c <UART_SetConfig+0x2e4>)
 8006426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800642a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800642e:	2bc0      	cmp	r3, #192	; 0xc0
 8006430:	d016      	beq.n	8006460 <UART_SetConfig+0x208>
 8006432:	2bc0      	cmp	r3, #192	; 0xc0
 8006434:	d818      	bhi.n	8006468 <UART_SetConfig+0x210>
 8006436:	2b80      	cmp	r3, #128	; 0x80
 8006438:	d00a      	beq.n	8006450 <UART_SetConfig+0x1f8>
 800643a:	2b80      	cmp	r3, #128	; 0x80
 800643c:	d814      	bhi.n	8006468 <UART_SetConfig+0x210>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d002      	beq.n	8006448 <UART_SetConfig+0x1f0>
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d008      	beq.n	8006458 <UART_SetConfig+0x200>
 8006446:	e00f      	b.n	8006468 <UART_SetConfig+0x210>
 8006448:	2300      	movs	r3, #0
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644e:	e082      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006450:	2302      	movs	r3, #2
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006456:	e07e      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006458:	2304      	movs	r3, #4
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645e:	e07a      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006460:	2308      	movs	r3, #8
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006466:	e076      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006468:	2310      	movs	r3, #16
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646e:	e072      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a35      	ldr	r2, [pc, #212]	; (800654c <UART_SetConfig+0x2f4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d12a      	bne.n	80064d0 <UART_SetConfig+0x278>
 800647a:	4b30      	ldr	r3, [pc, #192]	; (800653c <UART_SetConfig+0x2e4>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006488:	d01a      	beq.n	80064c0 <UART_SetConfig+0x268>
 800648a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800648e:	d81b      	bhi.n	80064c8 <UART_SetConfig+0x270>
 8006490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006494:	d00c      	beq.n	80064b0 <UART_SetConfig+0x258>
 8006496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800649a:	d815      	bhi.n	80064c8 <UART_SetConfig+0x270>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <UART_SetConfig+0x250>
 80064a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064a4:	d008      	beq.n	80064b8 <UART_SetConfig+0x260>
 80064a6:	e00f      	b.n	80064c8 <UART_SetConfig+0x270>
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ae:	e052      	b.n	8006556 <UART_SetConfig+0x2fe>
 80064b0:	2302      	movs	r3, #2
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b6:	e04e      	b.n	8006556 <UART_SetConfig+0x2fe>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064be:	e04a      	b.n	8006556 <UART_SetConfig+0x2fe>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	e046      	b.n	8006556 <UART_SetConfig+0x2fe>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e042      	b.n	8006556 <UART_SetConfig+0x2fe>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a17      	ldr	r2, [pc, #92]	; (8006534 <UART_SetConfig+0x2dc>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d13a      	bne.n	8006550 <UART_SetConfig+0x2f8>
 80064da:	4b18      	ldr	r3, [pc, #96]	; (800653c <UART_SetConfig+0x2e4>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064e8:	d01a      	beq.n	8006520 <UART_SetConfig+0x2c8>
 80064ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064ee:	d81b      	bhi.n	8006528 <UART_SetConfig+0x2d0>
 80064f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064f4:	d00c      	beq.n	8006510 <UART_SetConfig+0x2b8>
 80064f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064fa:	d815      	bhi.n	8006528 <UART_SetConfig+0x2d0>
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <UART_SetConfig+0x2b0>
 8006500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006504:	d008      	beq.n	8006518 <UART_SetConfig+0x2c0>
 8006506:	e00f      	b.n	8006528 <UART_SetConfig+0x2d0>
 8006508:	2300      	movs	r3, #0
 800650a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650e:	e022      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006510:	2302      	movs	r3, #2
 8006512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006516:	e01e      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006518:	2304      	movs	r3, #4
 800651a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651e:	e01a      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006520:	2308      	movs	r3, #8
 8006522:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006526:	e016      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006528:	2310      	movs	r3, #16
 800652a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652e:	e012      	b.n	8006556 <UART_SetConfig+0x2fe>
 8006530:	cfff69f3 	.word	0xcfff69f3
 8006534:	40008000 	.word	0x40008000
 8006538:	40013800 	.word	0x40013800
 800653c:	40021000 	.word	0x40021000
 8006540:	40004400 	.word	0x40004400
 8006544:	40004800 	.word	0x40004800
 8006548:	40004c00 	.word	0x40004c00
 800654c:	40005000 	.word	0x40005000
 8006550:	2310      	movs	r3, #16
 8006552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4aae      	ldr	r2, [pc, #696]	; (8006814 <UART_SetConfig+0x5bc>)
 800655c:	4293      	cmp	r3, r2
 800655e:	f040 8097 	bne.w	8006690 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006562:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006566:	2b08      	cmp	r3, #8
 8006568:	d823      	bhi.n	80065b2 <UART_SetConfig+0x35a>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0x318>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006595 	.word	0x08006595
 8006574:	080065b3 	.word	0x080065b3
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065b3 	.word	0x080065b3
 8006580:	080065a3 	.word	0x080065a3
 8006584:	080065b3 	.word	0x080065b3
 8006588:	080065b3 	.word	0x080065b3
 800658c:	080065b3 	.word	0x080065b3
 8006590:	080065ab 	.word	0x080065ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006594:	f7fe ff58 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800659a:	e010      	b.n	80065be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800659c:	4b9e      	ldr	r3, [pc, #632]	; (8006818 <UART_SetConfig+0x5c0>)
 800659e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065a0:	e00d      	b.n	80065be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a2:	f7fe feb9 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80065a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a8:	e009      	b.n	80065be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b0:	e005      	b.n	80065be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8130 	beq.w	8006826 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ca:	4a94      	ldr	r2, [pc, #592]	; (800681c <UART_SetConfig+0x5c4>)
 80065cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d0:	461a      	mov	r2, r3
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80065d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	005b      	lsls	r3, r3, #1
 80065e2:	4413      	add	r3, r2
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d305      	bcc.n	80065f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d903      	bls.n	80065fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80065fc:	e113      	b.n	8006826 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	2200      	movs	r2, #0
 8006602:	60bb      	str	r3, [r7, #8]
 8006604:	60fa      	str	r2, [r7, #12]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	4a84      	ldr	r2, [pc, #528]	; (800681c <UART_SetConfig+0x5c4>)
 800660c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006610:	b29b      	uxth	r3, r3
 8006612:	2200      	movs	r2, #0
 8006614:	603b      	str	r3, [r7, #0]
 8006616:	607a      	str	r2, [r7, #4]
 8006618:	e9d7 2300 	ldrd	r2, r3, [r7]
 800661c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006620:	f7fa fb02 	bl	8000c28 <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4610      	mov	r0, r2
 800662a:	4619      	mov	r1, r3
 800662c:	f04f 0200 	mov.w	r2, #0
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	020b      	lsls	r3, r1, #8
 8006636:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800663a:	0202      	lsls	r2, r0, #8
 800663c:	6979      	ldr	r1, [r7, #20]
 800663e:	6849      	ldr	r1, [r1, #4]
 8006640:	0849      	lsrs	r1, r1, #1
 8006642:	2000      	movs	r0, #0
 8006644:	460c      	mov	r4, r1
 8006646:	4605      	mov	r5, r0
 8006648:	eb12 0804 	adds.w	r8, r2, r4
 800664c:	eb43 0905 	adc.w	r9, r3, r5
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2200      	movs	r2, #0
 8006656:	469a      	mov	sl, r3
 8006658:	4693      	mov	fp, r2
 800665a:	4652      	mov	r2, sl
 800665c:	465b      	mov	r3, fp
 800665e:	4640      	mov	r0, r8
 8006660:	4649      	mov	r1, r9
 8006662:	f7fa fae1 	bl	8000c28 <__aeabi_uldivmod>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4613      	mov	r3, r2
 800666c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800666e:	6a3b      	ldr	r3, [r7, #32]
 8006670:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006674:	d308      	bcc.n	8006688 <UART_SetConfig+0x430>
 8006676:	6a3b      	ldr	r3, [r7, #32]
 8006678:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800667c:	d204      	bcs.n	8006688 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6a3a      	ldr	r2, [r7, #32]
 8006684:	60da      	str	r2, [r3, #12]
 8006686:	e0ce      	b.n	8006826 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800668e:	e0ca      	b.n	8006826 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	69db      	ldr	r3, [r3, #28]
 8006694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006698:	d166      	bne.n	8006768 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800669a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d827      	bhi.n	80066f2 <UART_SetConfig+0x49a>
 80066a2:	a201      	add	r2, pc, #4	; (adr r2, 80066a8 <UART_SetConfig+0x450>)
 80066a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066a8:	080066cd 	.word	0x080066cd
 80066ac:	080066d5 	.word	0x080066d5
 80066b0:	080066dd 	.word	0x080066dd
 80066b4:	080066f3 	.word	0x080066f3
 80066b8:	080066e3 	.word	0x080066e3
 80066bc:	080066f3 	.word	0x080066f3
 80066c0:	080066f3 	.word	0x080066f3
 80066c4:	080066f3 	.word	0x080066f3
 80066c8:	080066eb 	.word	0x080066eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066cc:	f7fe febc 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 80066d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066d2:	e014      	b.n	80066fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066d4:	f7fe fece 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 80066d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066da:	e010      	b.n	80066fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066dc:	4b4e      	ldr	r3, [pc, #312]	; (8006818 <UART_SetConfig+0x5c0>)
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066e0:	e00d      	b.n	80066fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066e2:	f7fe fe19 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80066e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066e8:	e009      	b.n	80066fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066f0:	e005      	b.n	80066fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80066f2:	2300      	movs	r3, #0
 80066f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80066fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 8090 	beq.w	8006826 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670a:	4a44      	ldr	r2, [pc, #272]	; (800681c <UART_SetConfig+0x5c4>)
 800670c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006710:	461a      	mov	r2, r3
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	fbb3 f3f2 	udiv	r3, r3, r2
 8006718:	005a      	lsls	r2, r3, #1
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	085b      	lsrs	r3, r3, #1
 8006720:	441a      	add	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	fbb2 f3f3 	udiv	r3, r2, r3
 800672a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672c:	6a3b      	ldr	r3, [r7, #32]
 800672e:	2b0f      	cmp	r3, #15
 8006730:	d916      	bls.n	8006760 <UART_SetConfig+0x508>
 8006732:	6a3b      	ldr	r3, [r7, #32]
 8006734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006738:	d212      	bcs.n	8006760 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	b29b      	uxth	r3, r3
 800673e:	f023 030f 	bic.w	r3, r3, #15
 8006742:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	085b      	lsrs	r3, r3, #1
 8006748:	b29b      	uxth	r3, r3
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	b29a      	uxth	r2, r3
 8006750:	8bfb      	ldrh	r3, [r7, #30]
 8006752:	4313      	orrs	r3, r2
 8006754:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	8bfa      	ldrh	r2, [r7, #30]
 800675c:	60da      	str	r2, [r3, #12]
 800675e:	e062      	b.n	8006826 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006766:	e05e      	b.n	8006826 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006768:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800676c:	2b08      	cmp	r3, #8
 800676e:	d828      	bhi.n	80067c2 <UART_SetConfig+0x56a>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <UART_SetConfig+0x520>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	0800679d 	.word	0x0800679d
 800677c:	080067a5 	.word	0x080067a5
 8006780:	080067ad 	.word	0x080067ad
 8006784:	080067c3 	.word	0x080067c3
 8006788:	080067b3 	.word	0x080067b3
 800678c:	080067c3 	.word	0x080067c3
 8006790:	080067c3 	.word	0x080067c3
 8006794:	080067c3 	.word	0x080067c3
 8006798:	080067bb 	.word	0x080067bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800679c:	f7fe fe54 	bl	8005448 <HAL_RCC_GetPCLK1Freq>
 80067a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067a2:	e014      	b.n	80067ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067a4:	f7fe fe66 	bl	8005474 <HAL_RCC_GetPCLK2Freq>
 80067a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067aa:	e010      	b.n	80067ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ac:	4b1a      	ldr	r3, [pc, #104]	; (8006818 <UART_SetConfig+0x5c0>)
 80067ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067b0:	e00d      	b.n	80067ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067b2:	f7fe fdb1 	bl	8005318 <HAL_RCC_GetSysClockFreq>
 80067b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b8:	e009      	b.n	80067ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067c0:	e005      	b.n	80067ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80067c2:	2300      	movs	r3, #0
 80067c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067cc:	bf00      	nop
    }

    if (pclk != 0U)
 80067ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d028      	beq.n	8006826 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d8:	4a10      	ldr	r2, [pc, #64]	; (800681c <UART_SetConfig+0x5c4>)
 80067da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067de:	461a      	mov	r2, r3
 80067e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	441a      	add	r2, r3
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80067f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b0f      	cmp	r3, #15
 80067fc:	d910      	bls.n	8006820 <UART_SetConfig+0x5c8>
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d20c      	bcs.n	8006820 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	b29a      	uxth	r2, r3
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60da      	str	r2, [r3, #12]
 8006810:	e009      	b.n	8006826 <UART_SetConfig+0x5ce>
 8006812:	bf00      	nop
 8006814:	40008000 	.word	0x40008000
 8006818:	00f42400 	.word	0x00f42400
 800681c:	08009a1c 	.word	0x08009a1c
      }
      else
      {
        ret = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2201      	movs	r2, #1
 800682a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2201      	movs	r2, #1
 8006832:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	2200      	movs	r2, #0
 800683a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	2200      	movs	r2, #0
 8006840:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006842:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006846:	4618      	mov	r0, r3
 8006848:	3730      	adds	r7, #48	; 0x30
 800684a:	46bd      	mov	sp, r7
 800684c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006850 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685c:	f003 0308 	and.w	r3, r3, #8
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687e:	f003 0301 	and.w	r3, r3, #1
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a0:	f003 0302 	and.w	r3, r3, #2
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c2:	f003 0304 	and.w	r3, r3, #4
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00a      	beq.n	80068e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	430a      	orrs	r2, r1
 80068de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e4:	f003 0310 	and.w	r3, r3, #16
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00a      	beq.n	8006902 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	430a      	orrs	r2, r1
 8006900:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f003 0320 	and.w	r3, r3, #32
 800690a:	2b00      	cmp	r3, #0
 800690c:	d00a      	beq.n	8006924 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d01a      	beq.n	8006966 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800694a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694e:	d10a      	bne.n	8006966 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d00a      	beq.n	8006988 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	430a      	orrs	r2, r1
 8006986:	605a      	str	r2, [r3, #4]
  }
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b098      	sub	sp, #96	; 0x60
 8006998:	af02      	add	r7, sp, #8
 800699a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069a4:	f7fb fdae 	bl	8002504 <HAL_GetTick>
 80069a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0308 	and.w	r3, r3, #8
 80069b4:	2b08      	cmp	r3, #8
 80069b6:	d12f      	bne.n	8006a18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069c0:	2200      	movs	r2, #0
 80069c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f88e 	bl	8006ae8 <UART_WaitOnFlagUntilTimeout>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d022      	beq.n	8006a18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069e6:	653b      	str	r3, [r7, #80]	; 0x50
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069f0:	647b      	str	r3, [r7, #68]	; 0x44
 80069f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2220      	movs	r2, #32
 8006a08:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e063      	b.n	8006ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0304 	and.w	r3, r3, #4
 8006a22:	2b04      	cmp	r3, #4
 8006a24:	d149      	bne.n	8006aba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f857 	bl	8006ae8 <UART_WaitOnFlagUntilTimeout>
 8006a3a:	4603      	mov	r3, r0
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d03c      	beq.n	8006aba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	e853 3f00 	ldrex	r3, [r3]
 8006a4c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a5e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a60:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e6      	bne.n	8006a40 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	e853 3f00 	ldrex	r3, [r3]
 8006a80:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f023 0301 	bic.w	r3, r3, #1
 8006a88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	3308      	adds	r3, #8
 8006a90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a92:	61fa      	str	r2, [r7, #28]
 8006a94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a96:	69b9      	ldr	r1, [r7, #24]
 8006a98:	69fa      	ldr	r2, [r7, #28]
 8006a9a:	e841 2300 	strex	r3, r2, [r1]
 8006a9e:	617b      	str	r3, [r7, #20]
   return(result);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d1e5      	bne.n	8006a72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2220      	movs	r2, #32
 8006aaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e012      	b.n	8006ae0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3758      	adds	r7, #88	; 0x58
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	603b      	str	r3, [r7, #0]
 8006af4:	4613      	mov	r3, r2
 8006af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006af8:	e049      	b.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b00:	d045      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b02:	f7fb fcff 	bl	8002504 <HAL_GetTick>
 8006b06:	4602      	mov	r2, r0
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	1ad3      	subs	r3, r2, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d302      	bcc.n	8006b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b18:	2303      	movs	r3, #3
 8006b1a:	e048      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d031      	beq.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69db      	ldr	r3, [r3, #28]
 8006b30:	f003 0308 	and.w	r3, r3, #8
 8006b34:	2b08      	cmp	r3, #8
 8006b36:	d110      	bne.n	8006b5a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2208      	movs	r2, #8
 8006b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f838 	bl	8006bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2208      	movs	r2, #8
 8006b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e029      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b68:	d111      	bne.n	8006b8e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b72:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 f81e 	bl	8006bb6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e00f      	b.n	8006bae <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69da      	ldr	r2, [r3, #28]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	4013      	ands	r3, r2
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	bf0c      	ite	eq
 8006b9e:	2301      	moveq	r3, #1
 8006ba0:	2300      	movne	r3, #0
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	79fb      	ldrb	r3, [r7, #7]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d0a6      	beq.n	8006afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b095      	sub	sp, #84	; 0x54
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8006bde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006be2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e6      	bne.n	8006bbe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	3308      	adds	r3, #8
 8006bf6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c06:	f023 0301 	bic.w	r3, r3, #1
 8006c0a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c14:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c1c:	e841 2300 	strex	r3, r2, [r1]
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d1e3      	bne.n	8006bf0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d118      	bne.n	8006c62 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f023 0310 	bic.w	r3, r3, #16
 8006c44:	647b      	str	r3, [r7, #68]	; 0x44
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c52:	6979      	ldr	r1, [r7, #20]
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	e841 2300 	strex	r3, r2, [r1]
 8006c5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1e6      	bne.n	8006c30 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2220      	movs	r2, #32
 8006c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2200      	movs	r2, #0
 8006c74:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c76:	bf00      	nop
 8006c78:	3754      	adds	r7, #84	; 0x54
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c82:	b480      	push	{r7}
 8006c84:	b085      	sub	sp, #20
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d101      	bne.n	8006c98 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c94:	2302      	movs	r3, #2
 8006c96:	e027      	b.n	8006ce8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2224      	movs	r2, #36	; 0x24
 8006ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f022 0201 	bic.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cc6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3714      	adds	r7, #20
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e02d      	b.n	8006d68 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	; 0x24
 8006d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f84f 	bl	8006dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e02d      	b.n	8006de4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2224      	movs	r2, #36	; 0x24
 8006d94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0201 	bic.w	r2, r2, #1
 8006dae:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f811 	bl	8006dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68fa      	ldr	r2, [r7, #12]
 8006dd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2220      	movs	r2, #32
 8006dd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006de2:	2300      	movs	r3, #0
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3710      	adds	r7, #16
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e0c:	e031      	b.n	8006e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e0e:	2308      	movs	r3, #8
 8006e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e12:	2308      	movs	r3, #8
 8006e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	0e5b      	lsrs	r3, r3, #25
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	0f5b      	lsrs	r3, r3, #29
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	7b3a      	ldrb	r2, [r7, #12]
 8006e3a:	4911      	ldr	r1, [pc, #68]	; (8006e80 <UARTEx_SetNbDataToProcess+0x94>)
 8006e3c:	5c8a      	ldrb	r2, [r1, r2]
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e42:	7b3a      	ldrb	r2, [r7, #12]
 8006e44:	490f      	ldr	r1, [pc, #60]	; (8006e84 <UARTEx_SetNbDataToProcess+0x98>)
 8006e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	7b7a      	ldrb	r2, [r7, #13]
 8006e58:	4909      	ldr	r1, [pc, #36]	; (8006e80 <UARTEx_SetNbDataToProcess+0x94>)
 8006e5a:	5c8a      	ldrb	r2, [r1, r2]
 8006e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e60:	7b7a      	ldrb	r2, [r7, #13]
 8006e62:	4908      	ldr	r1, [pc, #32]	; (8006e84 <UARTEx_SetNbDataToProcess+0x98>)
 8006e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7c:	4770      	bx	lr
 8006e7e:	bf00      	nop
 8006e80:	08009a34 	.word	0x08009a34
 8006e84:	08009a3c 	.word	0x08009a3c

08006e88 <__cvt>:
 8006e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e8c:	ec55 4b10 	vmov	r4, r5, d0
 8006e90:	2d00      	cmp	r5, #0
 8006e92:	460e      	mov	r6, r1
 8006e94:	4619      	mov	r1, r3
 8006e96:	462b      	mov	r3, r5
 8006e98:	bfbb      	ittet	lt
 8006e9a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e9e:	461d      	movlt	r5, r3
 8006ea0:	2300      	movge	r3, #0
 8006ea2:	232d      	movlt	r3, #45	; 0x2d
 8006ea4:	700b      	strb	r3, [r1, #0]
 8006ea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ea8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006eac:	4691      	mov	r9, r2
 8006eae:	f023 0820 	bic.w	r8, r3, #32
 8006eb2:	bfbc      	itt	lt
 8006eb4:	4622      	movlt	r2, r4
 8006eb6:	4614      	movlt	r4, r2
 8006eb8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ebc:	d005      	beq.n	8006eca <__cvt+0x42>
 8006ebe:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ec2:	d100      	bne.n	8006ec6 <__cvt+0x3e>
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	2102      	movs	r1, #2
 8006ec8:	e000      	b.n	8006ecc <__cvt+0x44>
 8006eca:	2103      	movs	r1, #3
 8006ecc:	ab03      	add	r3, sp, #12
 8006ece:	9301      	str	r3, [sp, #4]
 8006ed0:	ab02      	add	r3, sp, #8
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	ec45 4b10 	vmov	d0, r4, r5
 8006ed8:	4653      	mov	r3, sl
 8006eda:	4632      	mov	r2, r6
 8006edc:	f000 fdcc 	bl	8007a78 <_dtoa_r>
 8006ee0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ee4:	4607      	mov	r7, r0
 8006ee6:	d102      	bne.n	8006eee <__cvt+0x66>
 8006ee8:	f019 0f01 	tst.w	r9, #1
 8006eec:	d022      	beq.n	8006f34 <__cvt+0xac>
 8006eee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ef2:	eb07 0906 	add.w	r9, r7, r6
 8006ef6:	d110      	bne.n	8006f1a <__cvt+0x92>
 8006ef8:	783b      	ldrb	r3, [r7, #0]
 8006efa:	2b30      	cmp	r3, #48	; 0x30
 8006efc:	d10a      	bne.n	8006f14 <__cvt+0x8c>
 8006efe:	2200      	movs	r2, #0
 8006f00:	2300      	movs	r3, #0
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f7f9 fe1f 	bl	8000b48 <__aeabi_dcmpeq>
 8006f0a:	b918      	cbnz	r0, 8006f14 <__cvt+0x8c>
 8006f0c:	f1c6 0601 	rsb	r6, r6, #1
 8006f10:	f8ca 6000 	str.w	r6, [sl]
 8006f14:	f8da 3000 	ldr.w	r3, [sl]
 8006f18:	4499      	add	r9, r3
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	4620      	mov	r0, r4
 8006f20:	4629      	mov	r1, r5
 8006f22:	f7f9 fe11 	bl	8000b48 <__aeabi_dcmpeq>
 8006f26:	b108      	cbz	r0, 8006f2c <__cvt+0xa4>
 8006f28:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f2c:	2230      	movs	r2, #48	; 0x30
 8006f2e:	9b03      	ldr	r3, [sp, #12]
 8006f30:	454b      	cmp	r3, r9
 8006f32:	d307      	bcc.n	8006f44 <__cvt+0xbc>
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f38:	1bdb      	subs	r3, r3, r7
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	b004      	add	sp, #16
 8006f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f44:	1c59      	adds	r1, r3, #1
 8006f46:	9103      	str	r1, [sp, #12]
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	e7f0      	b.n	8006f2e <__cvt+0xa6>

08006f4c <__exponent>:
 8006f4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2900      	cmp	r1, #0
 8006f52:	bfb8      	it	lt
 8006f54:	4249      	neglt	r1, r1
 8006f56:	f803 2b02 	strb.w	r2, [r3], #2
 8006f5a:	bfb4      	ite	lt
 8006f5c:	222d      	movlt	r2, #45	; 0x2d
 8006f5e:	222b      	movge	r2, #43	; 0x2b
 8006f60:	2909      	cmp	r1, #9
 8006f62:	7042      	strb	r2, [r0, #1]
 8006f64:	dd2a      	ble.n	8006fbc <__exponent+0x70>
 8006f66:	f10d 0207 	add.w	r2, sp, #7
 8006f6a:	4617      	mov	r7, r2
 8006f6c:	260a      	movs	r6, #10
 8006f6e:	4694      	mov	ip, r2
 8006f70:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f74:	fb06 1415 	mls	r4, r6, r5, r1
 8006f78:	3430      	adds	r4, #48	; 0x30
 8006f7a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f7e:	460c      	mov	r4, r1
 8006f80:	2c63      	cmp	r4, #99	; 0x63
 8006f82:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006f86:	4629      	mov	r1, r5
 8006f88:	dcf1      	bgt.n	8006f6e <__exponent+0x22>
 8006f8a:	3130      	adds	r1, #48	; 0x30
 8006f8c:	f1ac 0402 	sub.w	r4, ip, #2
 8006f90:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f94:	1c41      	adds	r1, r0, #1
 8006f96:	4622      	mov	r2, r4
 8006f98:	42ba      	cmp	r2, r7
 8006f9a:	d30a      	bcc.n	8006fb2 <__exponent+0x66>
 8006f9c:	f10d 0209 	add.w	r2, sp, #9
 8006fa0:	eba2 020c 	sub.w	r2, r2, ip
 8006fa4:	42bc      	cmp	r4, r7
 8006fa6:	bf88      	it	hi
 8006fa8:	2200      	movhi	r2, #0
 8006faa:	4413      	add	r3, r2
 8006fac:	1a18      	subs	r0, r3, r0
 8006fae:	b003      	add	sp, #12
 8006fb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fb2:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006fb6:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006fba:	e7ed      	b.n	8006f98 <__exponent+0x4c>
 8006fbc:	2330      	movs	r3, #48	; 0x30
 8006fbe:	3130      	adds	r1, #48	; 0x30
 8006fc0:	7083      	strb	r3, [r0, #2]
 8006fc2:	70c1      	strb	r1, [r0, #3]
 8006fc4:	1d03      	adds	r3, r0, #4
 8006fc6:	e7f1      	b.n	8006fac <__exponent+0x60>

08006fc8 <_printf_float>:
 8006fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fcc:	ed2d 8b02 	vpush	{d8}
 8006fd0:	b08d      	sub	sp, #52	; 0x34
 8006fd2:	460c      	mov	r4, r1
 8006fd4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fd8:	4616      	mov	r6, r2
 8006fda:	461f      	mov	r7, r3
 8006fdc:	4605      	mov	r5, r0
 8006fde:	f000 fc83 	bl	80078e8 <_localeconv_r>
 8006fe2:	f8d0 a000 	ldr.w	sl, [r0]
 8006fe6:	4650      	mov	r0, sl
 8006fe8:	f7f9 f982 	bl	80002f0 <strlen>
 8006fec:	2300      	movs	r3, #0
 8006fee:	930a      	str	r3, [sp, #40]	; 0x28
 8006ff0:	6823      	ldr	r3, [r4, #0]
 8006ff2:	9305      	str	r3, [sp, #20]
 8006ff4:	f8d8 3000 	ldr.w	r3, [r8]
 8006ff8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	f023 0307 	bic.w	r3, r3, #7
 8007002:	f103 0208 	add.w	r2, r3, #8
 8007006:	f8c8 2000 	str.w	r2, [r8]
 800700a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800700e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007012:	9307      	str	r3, [sp, #28]
 8007014:	f8cd 8018 	str.w	r8, [sp, #24]
 8007018:	ee08 0a10 	vmov	s16, r0
 800701c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007024:	4b9e      	ldr	r3, [pc, #632]	; (80072a0 <_printf_float+0x2d8>)
 8007026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800702a:	f7f9 fdbf 	bl	8000bac <__aeabi_dcmpun>
 800702e:	bb88      	cbnz	r0, 8007094 <_printf_float+0xcc>
 8007030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007034:	4b9a      	ldr	r3, [pc, #616]	; (80072a0 <_printf_float+0x2d8>)
 8007036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800703a:	f7f9 fd99 	bl	8000b70 <__aeabi_dcmple>
 800703e:	bb48      	cbnz	r0, 8007094 <_printf_float+0xcc>
 8007040:	2200      	movs	r2, #0
 8007042:	2300      	movs	r3, #0
 8007044:	4640      	mov	r0, r8
 8007046:	4649      	mov	r1, r9
 8007048:	f7f9 fd88 	bl	8000b5c <__aeabi_dcmplt>
 800704c:	b110      	cbz	r0, 8007054 <_printf_float+0x8c>
 800704e:	232d      	movs	r3, #45	; 0x2d
 8007050:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007054:	4a93      	ldr	r2, [pc, #588]	; (80072a4 <_printf_float+0x2dc>)
 8007056:	4b94      	ldr	r3, [pc, #592]	; (80072a8 <_printf_float+0x2e0>)
 8007058:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800705c:	bf94      	ite	ls
 800705e:	4690      	movls	r8, r2
 8007060:	4698      	movhi	r8, r3
 8007062:	2303      	movs	r3, #3
 8007064:	6123      	str	r3, [r4, #16]
 8007066:	9b05      	ldr	r3, [sp, #20]
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	6023      	str	r3, [r4, #0]
 800706e:	f04f 0900 	mov.w	r9, #0
 8007072:	9700      	str	r7, [sp, #0]
 8007074:	4633      	mov	r3, r6
 8007076:	aa0b      	add	r2, sp, #44	; 0x2c
 8007078:	4621      	mov	r1, r4
 800707a:	4628      	mov	r0, r5
 800707c:	f000 f9da 	bl	8007434 <_printf_common>
 8007080:	3001      	adds	r0, #1
 8007082:	f040 8090 	bne.w	80071a6 <_printf_float+0x1de>
 8007086:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800708a:	b00d      	add	sp, #52	; 0x34
 800708c:	ecbd 8b02 	vpop	{d8}
 8007090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007094:	4642      	mov	r2, r8
 8007096:	464b      	mov	r3, r9
 8007098:	4640      	mov	r0, r8
 800709a:	4649      	mov	r1, r9
 800709c:	f7f9 fd86 	bl	8000bac <__aeabi_dcmpun>
 80070a0:	b140      	cbz	r0, 80070b4 <_printf_float+0xec>
 80070a2:	464b      	mov	r3, r9
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	bfbc      	itt	lt
 80070a8:	232d      	movlt	r3, #45	; 0x2d
 80070aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070ae:	4a7f      	ldr	r2, [pc, #508]	; (80072ac <_printf_float+0x2e4>)
 80070b0:	4b7f      	ldr	r3, [pc, #508]	; (80072b0 <_printf_float+0x2e8>)
 80070b2:	e7d1      	b.n	8007058 <_printf_float+0x90>
 80070b4:	6863      	ldr	r3, [r4, #4]
 80070b6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070ba:	9206      	str	r2, [sp, #24]
 80070bc:	1c5a      	adds	r2, r3, #1
 80070be:	d13f      	bne.n	8007140 <_printf_float+0x178>
 80070c0:	2306      	movs	r3, #6
 80070c2:	6063      	str	r3, [r4, #4]
 80070c4:	9b05      	ldr	r3, [sp, #20]
 80070c6:	6861      	ldr	r1, [r4, #4]
 80070c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070cc:	2300      	movs	r3, #0
 80070ce:	9303      	str	r3, [sp, #12]
 80070d0:	ab0a      	add	r3, sp, #40	; 0x28
 80070d2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070d6:	ab09      	add	r3, sp, #36	; 0x24
 80070d8:	ec49 8b10 	vmov	d0, r8, r9
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6022      	str	r2, [r4, #0]
 80070e0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070e4:	4628      	mov	r0, r5
 80070e6:	f7ff fecf 	bl	8006e88 <__cvt>
 80070ea:	9b06      	ldr	r3, [sp, #24]
 80070ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80070ee:	2b47      	cmp	r3, #71	; 0x47
 80070f0:	4680      	mov	r8, r0
 80070f2:	d108      	bne.n	8007106 <_printf_float+0x13e>
 80070f4:	1cc8      	adds	r0, r1, #3
 80070f6:	db02      	blt.n	80070fe <_printf_float+0x136>
 80070f8:	6863      	ldr	r3, [r4, #4]
 80070fa:	4299      	cmp	r1, r3
 80070fc:	dd41      	ble.n	8007182 <_printf_float+0x1ba>
 80070fe:	f1ab 0302 	sub.w	r3, fp, #2
 8007102:	fa5f fb83 	uxtb.w	fp, r3
 8007106:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800710a:	d820      	bhi.n	800714e <_printf_float+0x186>
 800710c:	3901      	subs	r1, #1
 800710e:	465a      	mov	r2, fp
 8007110:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007114:	9109      	str	r1, [sp, #36]	; 0x24
 8007116:	f7ff ff19 	bl	8006f4c <__exponent>
 800711a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800711c:	1813      	adds	r3, r2, r0
 800711e:	2a01      	cmp	r2, #1
 8007120:	4681      	mov	r9, r0
 8007122:	6123      	str	r3, [r4, #16]
 8007124:	dc02      	bgt.n	800712c <_printf_float+0x164>
 8007126:	6822      	ldr	r2, [r4, #0]
 8007128:	07d2      	lsls	r2, r2, #31
 800712a:	d501      	bpl.n	8007130 <_printf_float+0x168>
 800712c:	3301      	adds	r3, #1
 800712e:	6123      	str	r3, [r4, #16]
 8007130:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007134:	2b00      	cmp	r3, #0
 8007136:	d09c      	beq.n	8007072 <_printf_float+0xaa>
 8007138:	232d      	movs	r3, #45	; 0x2d
 800713a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800713e:	e798      	b.n	8007072 <_printf_float+0xaa>
 8007140:	9a06      	ldr	r2, [sp, #24]
 8007142:	2a47      	cmp	r2, #71	; 0x47
 8007144:	d1be      	bne.n	80070c4 <_printf_float+0xfc>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1bc      	bne.n	80070c4 <_printf_float+0xfc>
 800714a:	2301      	movs	r3, #1
 800714c:	e7b9      	b.n	80070c2 <_printf_float+0xfa>
 800714e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007152:	d118      	bne.n	8007186 <_printf_float+0x1be>
 8007154:	2900      	cmp	r1, #0
 8007156:	6863      	ldr	r3, [r4, #4]
 8007158:	dd0b      	ble.n	8007172 <_printf_float+0x1aa>
 800715a:	6121      	str	r1, [r4, #16]
 800715c:	b913      	cbnz	r3, 8007164 <_printf_float+0x19c>
 800715e:	6822      	ldr	r2, [r4, #0]
 8007160:	07d0      	lsls	r0, r2, #31
 8007162:	d502      	bpl.n	800716a <_printf_float+0x1a2>
 8007164:	3301      	adds	r3, #1
 8007166:	440b      	add	r3, r1
 8007168:	6123      	str	r3, [r4, #16]
 800716a:	65a1      	str	r1, [r4, #88]	; 0x58
 800716c:	f04f 0900 	mov.w	r9, #0
 8007170:	e7de      	b.n	8007130 <_printf_float+0x168>
 8007172:	b913      	cbnz	r3, 800717a <_printf_float+0x1b2>
 8007174:	6822      	ldr	r2, [r4, #0]
 8007176:	07d2      	lsls	r2, r2, #31
 8007178:	d501      	bpl.n	800717e <_printf_float+0x1b6>
 800717a:	3302      	adds	r3, #2
 800717c:	e7f4      	b.n	8007168 <_printf_float+0x1a0>
 800717e:	2301      	movs	r3, #1
 8007180:	e7f2      	b.n	8007168 <_printf_float+0x1a0>
 8007182:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007186:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007188:	4299      	cmp	r1, r3
 800718a:	db05      	blt.n	8007198 <_printf_float+0x1d0>
 800718c:	6823      	ldr	r3, [r4, #0]
 800718e:	6121      	str	r1, [r4, #16]
 8007190:	07d8      	lsls	r0, r3, #31
 8007192:	d5ea      	bpl.n	800716a <_printf_float+0x1a2>
 8007194:	1c4b      	adds	r3, r1, #1
 8007196:	e7e7      	b.n	8007168 <_printf_float+0x1a0>
 8007198:	2900      	cmp	r1, #0
 800719a:	bfd4      	ite	le
 800719c:	f1c1 0202 	rsble	r2, r1, #2
 80071a0:	2201      	movgt	r2, #1
 80071a2:	4413      	add	r3, r2
 80071a4:	e7e0      	b.n	8007168 <_printf_float+0x1a0>
 80071a6:	6823      	ldr	r3, [r4, #0]
 80071a8:	055a      	lsls	r2, r3, #21
 80071aa:	d407      	bmi.n	80071bc <_printf_float+0x1f4>
 80071ac:	6923      	ldr	r3, [r4, #16]
 80071ae:	4642      	mov	r2, r8
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	d12c      	bne.n	8007214 <_printf_float+0x24c>
 80071ba:	e764      	b.n	8007086 <_printf_float+0xbe>
 80071bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071c0:	f240 80e0 	bls.w	8007384 <_printf_float+0x3bc>
 80071c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071c8:	2200      	movs	r2, #0
 80071ca:	2300      	movs	r3, #0
 80071cc:	f7f9 fcbc 	bl	8000b48 <__aeabi_dcmpeq>
 80071d0:	2800      	cmp	r0, #0
 80071d2:	d034      	beq.n	800723e <_printf_float+0x276>
 80071d4:	4a37      	ldr	r2, [pc, #220]	; (80072b4 <_printf_float+0x2ec>)
 80071d6:	2301      	movs	r3, #1
 80071d8:	4631      	mov	r1, r6
 80071da:	4628      	mov	r0, r5
 80071dc:	47b8      	blx	r7
 80071de:	3001      	adds	r0, #1
 80071e0:	f43f af51 	beq.w	8007086 <_printf_float+0xbe>
 80071e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071e8:	429a      	cmp	r2, r3
 80071ea:	db02      	blt.n	80071f2 <_printf_float+0x22a>
 80071ec:	6823      	ldr	r3, [r4, #0]
 80071ee:	07d8      	lsls	r0, r3, #31
 80071f0:	d510      	bpl.n	8007214 <_printf_float+0x24c>
 80071f2:	ee18 3a10 	vmov	r3, s16
 80071f6:	4652      	mov	r2, sl
 80071f8:	4631      	mov	r1, r6
 80071fa:	4628      	mov	r0, r5
 80071fc:	47b8      	blx	r7
 80071fe:	3001      	adds	r0, #1
 8007200:	f43f af41 	beq.w	8007086 <_printf_float+0xbe>
 8007204:	f04f 0800 	mov.w	r8, #0
 8007208:	f104 091a 	add.w	r9, r4, #26
 800720c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720e:	3b01      	subs	r3, #1
 8007210:	4543      	cmp	r3, r8
 8007212:	dc09      	bgt.n	8007228 <_printf_float+0x260>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	079b      	lsls	r3, r3, #30
 8007218:	f100 8107 	bmi.w	800742a <_printf_float+0x462>
 800721c:	68e0      	ldr	r0, [r4, #12]
 800721e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007220:	4298      	cmp	r0, r3
 8007222:	bfb8      	it	lt
 8007224:	4618      	movlt	r0, r3
 8007226:	e730      	b.n	800708a <_printf_float+0xc2>
 8007228:	2301      	movs	r3, #1
 800722a:	464a      	mov	r2, r9
 800722c:	4631      	mov	r1, r6
 800722e:	4628      	mov	r0, r5
 8007230:	47b8      	blx	r7
 8007232:	3001      	adds	r0, #1
 8007234:	f43f af27 	beq.w	8007086 <_printf_float+0xbe>
 8007238:	f108 0801 	add.w	r8, r8, #1
 800723c:	e7e6      	b.n	800720c <_printf_float+0x244>
 800723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007240:	2b00      	cmp	r3, #0
 8007242:	dc39      	bgt.n	80072b8 <_printf_float+0x2f0>
 8007244:	4a1b      	ldr	r2, [pc, #108]	; (80072b4 <_printf_float+0x2ec>)
 8007246:	2301      	movs	r3, #1
 8007248:	4631      	mov	r1, r6
 800724a:	4628      	mov	r0, r5
 800724c:	47b8      	blx	r7
 800724e:	3001      	adds	r0, #1
 8007250:	f43f af19 	beq.w	8007086 <_printf_float+0xbe>
 8007254:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007258:	4313      	orrs	r3, r2
 800725a:	d102      	bne.n	8007262 <_printf_float+0x29a>
 800725c:	6823      	ldr	r3, [r4, #0]
 800725e:	07d9      	lsls	r1, r3, #31
 8007260:	d5d8      	bpl.n	8007214 <_printf_float+0x24c>
 8007262:	ee18 3a10 	vmov	r3, s16
 8007266:	4652      	mov	r2, sl
 8007268:	4631      	mov	r1, r6
 800726a:	4628      	mov	r0, r5
 800726c:	47b8      	blx	r7
 800726e:	3001      	adds	r0, #1
 8007270:	f43f af09 	beq.w	8007086 <_printf_float+0xbe>
 8007274:	f04f 0900 	mov.w	r9, #0
 8007278:	f104 0a1a 	add.w	sl, r4, #26
 800727c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800727e:	425b      	negs	r3, r3
 8007280:	454b      	cmp	r3, r9
 8007282:	dc01      	bgt.n	8007288 <_printf_float+0x2c0>
 8007284:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007286:	e792      	b.n	80071ae <_printf_float+0x1e6>
 8007288:	2301      	movs	r3, #1
 800728a:	4652      	mov	r2, sl
 800728c:	4631      	mov	r1, r6
 800728e:	4628      	mov	r0, r5
 8007290:	47b8      	blx	r7
 8007292:	3001      	adds	r0, #1
 8007294:	f43f aef7 	beq.w	8007086 <_printf_float+0xbe>
 8007298:	f109 0901 	add.w	r9, r9, #1
 800729c:	e7ee      	b.n	800727c <_printf_float+0x2b4>
 800729e:	bf00      	nop
 80072a0:	7fefffff 	.word	0x7fefffff
 80072a4:	08009a44 	.word	0x08009a44
 80072a8:	08009a48 	.word	0x08009a48
 80072ac:	08009a4c 	.word	0x08009a4c
 80072b0:	08009a50 	.word	0x08009a50
 80072b4:	08009a54 	.word	0x08009a54
 80072b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072bc:	429a      	cmp	r2, r3
 80072be:	bfa8      	it	ge
 80072c0:	461a      	movge	r2, r3
 80072c2:	2a00      	cmp	r2, #0
 80072c4:	4691      	mov	r9, r2
 80072c6:	dc37      	bgt.n	8007338 <_printf_float+0x370>
 80072c8:	f04f 0b00 	mov.w	fp, #0
 80072cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072d0:	f104 021a 	add.w	r2, r4, #26
 80072d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072d6:	9305      	str	r3, [sp, #20]
 80072d8:	eba3 0309 	sub.w	r3, r3, r9
 80072dc:	455b      	cmp	r3, fp
 80072de:	dc33      	bgt.n	8007348 <_printf_float+0x380>
 80072e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072e4:	429a      	cmp	r2, r3
 80072e6:	db3b      	blt.n	8007360 <_printf_float+0x398>
 80072e8:	6823      	ldr	r3, [r4, #0]
 80072ea:	07da      	lsls	r2, r3, #31
 80072ec:	d438      	bmi.n	8007360 <_printf_float+0x398>
 80072ee:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80072f2:	eba2 0903 	sub.w	r9, r2, r3
 80072f6:	9b05      	ldr	r3, [sp, #20]
 80072f8:	1ad2      	subs	r2, r2, r3
 80072fa:	4591      	cmp	r9, r2
 80072fc:	bfa8      	it	ge
 80072fe:	4691      	movge	r9, r2
 8007300:	f1b9 0f00 	cmp.w	r9, #0
 8007304:	dc35      	bgt.n	8007372 <_printf_float+0x3aa>
 8007306:	f04f 0800 	mov.w	r8, #0
 800730a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800730e:	f104 0a1a 	add.w	sl, r4, #26
 8007312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	eba3 0309 	sub.w	r3, r3, r9
 800731c:	4543      	cmp	r3, r8
 800731e:	f77f af79 	ble.w	8007214 <_printf_float+0x24c>
 8007322:	2301      	movs	r3, #1
 8007324:	4652      	mov	r2, sl
 8007326:	4631      	mov	r1, r6
 8007328:	4628      	mov	r0, r5
 800732a:	47b8      	blx	r7
 800732c:	3001      	adds	r0, #1
 800732e:	f43f aeaa 	beq.w	8007086 <_printf_float+0xbe>
 8007332:	f108 0801 	add.w	r8, r8, #1
 8007336:	e7ec      	b.n	8007312 <_printf_float+0x34a>
 8007338:	4613      	mov	r3, r2
 800733a:	4631      	mov	r1, r6
 800733c:	4642      	mov	r2, r8
 800733e:	4628      	mov	r0, r5
 8007340:	47b8      	blx	r7
 8007342:	3001      	adds	r0, #1
 8007344:	d1c0      	bne.n	80072c8 <_printf_float+0x300>
 8007346:	e69e      	b.n	8007086 <_printf_float+0xbe>
 8007348:	2301      	movs	r3, #1
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	9205      	str	r2, [sp, #20]
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f ae97 	beq.w	8007086 <_printf_float+0xbe>
 8007358:	9a05      	ldr	r2, [sp, #20]
 800735a:	f10b 0b01 	add.w	fp, fp, #1
 800735e:	e7b9      	b.n	80072d4 <_printf_float+0x30c>
 8007360:	ee18 3a10 	vmov	r3, s16
 8007364:	4652      	mov	r2, sl
 8007366:	4631      	mov	r1, r6
 8007368:	4628      	mov	r0, r5
 800736a:	47b8      	blx	r7
 800736c:	3001      	adds	r0, #1
 800736e:	d1be      	bne.n	80072ee <_printf_float+0x326>
 8007370:	e689      	b.n	8007086 <_printf_float+0xbe>
 8007372:	9a05      	ldr	r2, [sp, #20]
 8007374:	464b      	mov	r3, r9
 8007376:	4442      	add	r2, r8
 8007378:	4631      	mov	r1, r6
 800737a:	4628      	mov	r0, r5
 800737c:	47b8      	blx	r7
 800737e:	3001      	adds	r0, #1
 8007380:	d1c1      	bne.n	8007306 <_printf_float+0x33e>
 8007382:	e680      	b.n	8007086 <_printf_float+0xbe>
 8007384:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007386:	2a01      	cmp	r2, #1
 8007388:	dc01      	bgt.n	800738e <_printf_float+0x3c6>
 800738a:	07db      	lsls	r3, r3, #31
 800738c:	d53a      	bpl.n	8007404 <_printf_float+0x43c>
 800738e:	2301      	movs	r3, #1
 8007390:	4642      	mov	r2, r8
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	f43f ae74 	beq.w	8007086 <_printf_float+0xbe>
 800739e:	ee18 3a10 	vmov	r3, s16
 80073a2:	4652      	mov	r2, sl
 80073a4:	4631      	mov	r1, r6
 80073a6:	4628      	mov	r0, r5
 80073a8:	47b8      	blx	r7
 80073aa:	3001      	adds	r0, #1
 80073ac:	f43f ae6b 	beq.w	8007086 <_printf_float+0xbe>
 80073b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073b4:	2200      	movs	r2, #0
 80073b6:	2300      	movs	r3, #0
 80073b8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80073bc:	f7f9 fbc4 	bl	8000b48 <__aeabi_dcmpeq>
 80073c0:	b9d8      	cbnz	r0, 80073fa <_printf_float+0x432>
 80073c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80073c6:	f108 0201 	add.w	r2, r8, #1
 80073ca:	4631      	mov	r1, r6
 80073cc:	4628      	mov	r0, r5
 80073ce:	47b8      	blx	r7
 80073d0:	3001      	adds	r0, #1
 80073d2:	d10e      	bne.n	80073f2 <_printf_float+0x42a>
 80073d4:	e657      	b.n	8007086 <_printf_float+0xbe>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4652      	mov	r2, sl
 80073da:	4631      	mov	r1, r6
 80073dc:	4628      	mov	r0, r5
 80073de:	47b8      	blx	r7
 80073e0:	3001      	adds	r0, #1
 80073e2:	f43f ae50 	beq.w	8007086 <_printf_float+0xbe>
 80073e6:	f108 0801 	add.w	r8, r8, #1
 80073ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073ec:	3b01      	subs	r3, #1
 80073ee:	4543      	cmp	r3, r8
 80073f0:	dcf1      	bgt.n	80073d6 <_printf_float+0x40e>
 80073f2:	464b      	mov	r3, r9
 80073f4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80073f8:	e6da      	b.n	80071b0 <_printf_float+0x1e8>
 80073fa:	f04f 0800 	mov.w	r8, #0
 80073fe:	f104 0a1a 	add.w	sl, r4, #26
 8007402:	e7f2      	b.n	80073ea <_printf_float+0x422>
 8007404:	2301      	movs	r3, #1
 8007406:	4642      	mov	r2, r8
 8007408:	e7df      	b.n	80073ca <_printf_float+0x402>
 800740a:	2301      	movs	r3, #1
 800740c:	464a      	mov	r2, r9
 800740e:	4631      	mov	r1, r6
 8007410:	4628      	mov	r0, r5
 8007412:	47b8      	blx	r7
 8007414:	3001      	adds	r0, #1
 8007416:	f43f ae36 	beq.w	8007086 <_printf_float+0xbe>
 800741a:	f108 0801 	add.w	r8, r8, #1
 800741e:	68e3      	ldr	r3, [r4, #12]
 8007420:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007422:	1a5b      	subs	r3, r3, r1
 8007424:	4543      	cmp	r3, r8
 8007426:	dcf0      	bgt.n	800740a <_printf_float+0x442>
 8007428:	e6f8      	b.n	800721c <_printf_float+0x254>
 800742a:	f04f 0800 	mov.w	r8, #0
 800742e:	f104 0919 	add.w	r9, r4, #25
 8007432:	e7f4      	b.n	800741e <_printf_float+0x456>

08007434 <_printf_common>:
 8007434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007438:	4616      	mov	r6, r2
 800743a:	4699      	mov	r9, r3
 800743c:	688a      	ldr	r2, [r1, #8]
 800743e:	690b      	ldr	r3, [r1, #16]
 8007440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007444:	4293      	cmp	r3, r2
 8007446:	bfb8      	it	lt
 8007448:	4613      	movlt	r3, r2
 800744a:	6033      	str	r3, [r6, #0]
 800744c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007450:	4607      	mov	r7, r0
 8007452:	460c      	mov	r4, r1
 8007454:	b10a      	cbz	r2, 800745a <_printf_common+0x26>
 8007456:	3301      	adds	r3, #1
 8007458:	6033      	str	r3, [r6, #0]
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	0699      	lsls	r1, r3, #26
 800745e:	bf42      	ittt	mi
 8007460:	6833      	ldrmi	r3, [r6, #0]
 8007462:	3302      	addmi	r3, #2
 8007464:	6033      	strmi	r3, [r6, #0]
 8007466:	6825      	ldr	r5, [r4, #0]
 8007468:	f015 0506 	ands.w	r5, r5, #6
 800746c:	d106      	bne.n	800747c <_printf_common+0x48>
 800746e:	f104 0a19 	add.w	sl, r4, #25
 8007472:	68e3      	ldr	r3, [r4, #12]
 8007474:	6832      	ldr	r2, [r6, #0]
 8007476:	1a9b      	subs	r3, r3, r2
 8007478:	42ab      	cmp	r3, r5
 800747a:	dc26      	bgt.n	80074ca <_printf_common+0x96>
 800747c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007480:	1e13      	subs	r3, r2, #0
 8007482:	6822      	ldr	r2, [r4, #0]
 8007484:	bf18      	it	ne
 8007486:	2301      	movne	r3, #1
 8007488:	0692      	lsls	r2, r2, #26
 800748a:	d42b      	bmi.n	80074e4 <_printf_common+0xb0>
 800748c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007490:	4649      	mov	r1, r9
 8007492:	4638      	mov	r0, r7
 8007494:	47c0      	blx	r8
 8007496:	3001      	adds	r0, #1
 8007498:	d01e      	beq.n	80074d8 <_printf_common+0xa4>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	6922      	ldr	r2, [r4, #16]
 800749e:	f003 0306 	and.w	r3, r3, #6
 80074a2:	2b04      	cmp	r3, #4
 80074a4:	bf02      	ittt	eq
 80074a6:	68e5      	ldreq	r5, [r4, #12]
 80074a8:	6833      	ldreq	r3, [r6, #0]
 80074aa:	1aed      	subeq	r5, r5, r3
 80074ac:	68a3      	ldr	r3, [r4, #8]
 80074ae:	bf0c      	ite	eq
 80074b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074b4:	2500      	movne	r5, #0
 80074b6:	4293      	cmp	r3, r2
 80074b8:	bfc4      	itt	gt
 80074ba:	1a9b      	subgt	r3, r3, r2
 80074bc:	18ed      	addgt	r5, r5, r3
 80074be:	2600      	movs	r6, #0
 80074c0:	341a      	adds	r4, #26
 80074c2:	42b5      	cmp	r5, r6
 80074c4:	d11a      	bne.n	80074fc <_printf_common+0xc8>
 80074c6:	2000      	movs	r0, #0
 80074c8:	e008      	b.n	80074dc <_printf_common+0xa8>
 80074ca:	2301      	movs	r3, #1
 80074cc:	4652      	mov	r2, sl
 80074ce:	4649      	mov	r1, r9
 80074d0:	4638      	mov	r0, r7
 80074d2:	47c0      	blx	r8
 80074d4:	3001      	adds	r0, #1
 80074d6:	d103      	bne.n	80074e0 <_printf_common+0xac>
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e0:	3501      	adds	r5, #1
 80074e2:	e7c6      	b.n	8007472 <_printf_common+0x3e>
 80074e4:	18e1      	adds	r1, r4, r3
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	2030      	movs	r0, #48	; 0x30
 80074ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ee:	4422      	add	r2, r4
 80074f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074f8:	3302      	adds	r3, #2
 80074fa:	e7c7      	b.n	800748c <_printf_common+0x58>
 80074fc:	2301      	movs	r3, #1
 80074fe:	4622      	mov	r2, r4
 8007500:	4649      	mov	r1, r9
 8007502:	4638      	mov	r0, r7
 8007504:	47c0      	blx	r8
 8007506:	3001      	adds	r0, #1
 8007508:	d0e6      	beq.n	80074d8 <_printf_common+0xa4>
 800750a:	3601      	adds	r6, #1
 800750c:	e7d9      	b.n	80074c2 <_printf_common+0x8e>
	...

08007510 <_printf_i>:
 8007510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	7e0f      	ldrb	r7, [r1, #24]
 8007516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007518:	2f78      	cmp	r7, #120	; 0x78
 800751a:	4691      	mov	r9, r2
 800751c:	4680      	mov	r8, r0
 800751e:	460c      	mov	r4, r1
 8007520:	469a      	mov	sl, r3
 8007522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007526:	d807      	bhi.n	8007538 <_printf_i+0x28>
 8007528:	2f62      	cmp	r7, #98	; 0x62
 800752a:	d80a      	bhi.n	8007542 <_printf_i+0x32>
 800752c:	2f00      	cmp	r7, #0
 800752e:	f000 80d4 	beq.w	80076da <_printf_i+0x1ca>
 8007532:	2f58      	cmp	r7, #88	; 0x58
 8007534:	f000 80c0 	beq.w	80076b8 <_printf_i+0x1a8>
 8007538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800753c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007540:	e03a      	b.n	80075b8 <_printf_i+0xa8>
 8007542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007546:	2b15      	cmp	r3, #21
 8007548:	d8f6      	bhi.n	8007538 <_printf_i+0x28>
 800754a:	a101      	add	r1, pc, #4	; (adr r1, 8007550 <_printf_i+0x40>)
 800754c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007550:	080075a9 	.word	0x080075a9
 8007554:	080075bd 	.word	0x080075bd
 8007558:	08007539 	.word	0x08007539
 800755c:	08007539 	.word	0x08007539
 8007560:	08007539 	.word	0x08007539
 8007564:	08007539 	.word	0x08007539
 8007568:	080075bd 	.word	0x080075bd
 800756c:	08007539 	.word	0x08007539
 8007570:	08007539 	.word	0x08007539
 8007574:	08007539 	.word	0x08007539
 8007578:	08007539 	.word	0x08007539
 800757c:	080076c1 	.word	0x080076c1
 8007580:	080075e9 	.word	0x080075e9
 8007584:	0800767b 	.word	0x0800767b
 8007588:	08007539 	.word	0x08007539
 800758c:	08007539 	.word	0x08007539
 8007590:	080076e3 	.word	0x080076e3
 8007594:	08007539 	.word	0x08007539
 8007598:	080075e9 	.word	0x080075e9
 800759c:	08007539 	.word	0x08007539
 80075a0:	08007539 	.word	0x08007539
 80075a4:	08007683 	.word	0x08007683
 80075a8:	682b      	ldr	r3, [r5, #0]
 80075aa:	1d1a      	adds	r2, r3, #4
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	602a      	str	r2, [r5, #0]
 80075b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075b8:	2301      	movs	r3, #1
 80075ba:	e09f      	b.n	80076fc <_printf_i+0x1ec>
 80075bc:	6820      	ldr	r0, [r4, #0]
 80075be:	682b      	ldr	r3, [r5, #0]
 80075c0:	0607      	lsls	r7, r0, #24
 80075c2:	f103 0104 	add.w	r1, r3, #4
 80075c6:	6029      	str	r1, [r5, #0]
 80075c8:	d501      	bpl.n	80075ce <_printf_i+0xbe>
 80075ca:	681e      	ldr	r6, [r3, #0]
 80075cc:	e003      	b.n	80075d6 <_printf_i+0xc6>
 80075ce:	0646      	lsls	r6, r0, #25
 80075d0:	d5fb      	bpl.n	80075ca <_printf_i+0xba>
 80075d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075d6:	2e00      	cmp	r6, #0
 80075d8:	da03      	bge.n	80075e2 <_printf_i+0xd2>
 80075da:	232d      	movs	r3, #45	; 0x2d
 80075dc:	4276      	negs	r6, r6
 80075de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e2:	485a      	ldr	r0, [pc, #360]	; (800774c <_printf_i+0x23c>)
 80075e4:	230a      	movs	r3, #10
 80075e6:	e012      	b.n	800760e <_printf_i+0xfe>
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	6820      	ldr	r0, [r4, #0]
 80075ec:	1d19      	adds	r1, r3, #4
 80075ee:	6029      	str	r1, [r5, #0]
 80075f0:	0605      	lsls	r5, r0, #24
 80075f2:	d501      	bpl.n	80075f8 <_printf_i+0xe8>
 80075f4:	681e      	ldr	r6, [r3, #0]
 80075f6:	e002      	b.n	80075fe <_printf_i+0xee>
 80075f8:	0641      	lsls	r1, r0, #25
 80075fa:	d5fb      	bpl.n	80075f4 <_printf_i+0xe4>
 80075fc:	881e      	ldrh	r6, [r3, #0]
 80075fe:	4853      	ldr	r0, [pc, #332]	; (800774c <_printf_i+0x23c>)
 8007600:	2f6f      	cmp	r7, #111	; 0x6f
 8007602:	bf0c      	ite	eq
 8007604:	2308      	moveq	r3, #8
 8007606:	230a      	movne	r3, #10
 8007608:	2100      	movs	r1, #0
 800760a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800760e:	6865      	ldr	r5, [r4, #4]
 8007610:	60a5      	str	r5, [r4, #8]
 8007612:	2d00      	cmp	r5, #0
 8007614:	bfa2      	ittt	ge
 8007616:	6821      	ldrge	r1, [r4, #0]
 8007618:	f021 0104 	bicge.w	r1, r1, #4
 800761c:	6021      	strge	r1, [r4, #0]
 800761e:	b90e      	cbnz	r6, 8007624 <_printf_i+0x114>
 8007620:	2d00      	cmp	r5, #0
 8007622:	d04b      	beq.n	80076bc <_printf_i+0x1ac>
 8007624:	4615      	mov	r5, r2
 8007626:	fbb6 f1f3 	udiv	r1, r6, r3
 800762a:	fb03 6711 	mls	r7, r3, r1, r6
 800762e:	5dc7      	ldrb	r7, [r0, r7]
 8007630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007634:	4637      	mov	r7, r6
 8007636:	42bb      	cmp	r3, r7
 8007638:	460e      	mov	r6, r1
 800763a:	d9f4      	bls.n	8007626 <_printf_i+0x116>
 800763c:	2b08      	cmp	r3, #8
 800763e:	d10b      	bne.n	8007658 <_printf_i+0x148>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	07de      	lsls	r6, r3, #31
 8007644:	d508      	bpl.n	8007658 <_printf_i+0x148>
 8007646:	6923      	ldr	r3, [r4, #16]
 8007648:	6861      	ldr	r1, [r4, #4]
 800764a:	4299      	cmp	r1, r3
 800764c:	bfde      	ittt	le
 800764e:	2330      	movle	r3, #48	; 0x30
 8007650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007654:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007658:	1b52      	subs	r2, r2, r5
 800765a:	6122      	str	r2, [r4, #16]
 800765c:	f8cd a000 	str.w	sl, [sp]
 8007660:	464b      	mov	r3, r9
 8007662:	aa03      	add	r2, sp, #12
 8007664:	4621      	mov	r1, r4
 8007666:	4640      	mov	r0, r8
 8007668:	f7ff fee4 	bl	8007434 <_printf_common>
 800766c:	3001      	adds	r0, #1
 800766e:	d14a      	bne.n	8007706 <_printf_i+0x1f6>
 8007670:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007674:	b004      	add	sp, #16
 8007676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f043 0320 	orr.w	r3, r3, #32
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	4833      	ldr	r0, [pc, #204]	; (8007750 <_printf_i+0x240>)
 8007684:	2778      	movs	r7, #120	; 0x78
 8007686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	6829      	ldr	r1, [r5, #0]
 800768e:	061f      	lsls	r7, r3, #24
 8007690:	f851 6b04 	ldr.w	r6, [r1], #4
 8007694:	d402      	bmi.n	800769c <_printf_i+0x18c>
 8007696:	065f      	lsls	r7, r3, #25
 8007698:	bf48      	it	mi
 800769a:	b2b6      	uxthmi	r6, r6
 800769c:	07df      	lsls	r7, r3, #31
 800769e:	bf48      	it	mi
 80076a0:	f043 0320 	orrmi.w	r3, r3, #32
 80076a4:	6029      	str	r1, [r5, #0]
 80076a6:	bf48      	it	mi
 80076a8:	6023      	strmi	r3, [r4, #0]
 80076aa:	b91e      	cbnz	r6, 80076b4 <_printf_i+0x1a4>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	f023 0320 	bic.w	r3, r3, #32
 80076b2:	6023      	str	r3, [r4, #0]
 80076b4:	2310      	movs	r3, #16
 80076b6:	e7a7      	b.n	8007608 <_printf_i+0xf8>
 80076b8:	4824      	ldr	r0, [pc, #144]	; (800774c <_printf_i+0x23c>)
 80076ba:	e7e4      	b.n	8007686 <_printf_i+0x176>
 80076bc:	4615      	mov	r5, r2
 80076be:	e7bd      	b.n	800763c <_printf_i+0x12c>
 80076c0:	682b      	ldr	r3, [r5, #0]
 80076c2:	6826      	ldr	r6, [r4, #0]
 80076c4:	6961      	ldr	r1, [r4, #20]
 80076c6:	1d18      	adds	r0, r3, #4
 80076c8:	6028      	str	r0, [r5, #0]
 80076ca:	0635      	lsls	r5, r6, #24
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	d501      	bpl.n	80076d4 <_printf_i+0x1c4>
 80076d0:	6019      	str	r1, [r3, #0]
 80076d2:	e002      	b.n	80076da <_printf_i+0x1ca>
 80076d4:	0670      	lsls	r0, r6, #25
 80076d6:	d5fb      	bpl.n	80076d0 <_printf_i+0x1c0>
 80076d8:	8019      	strh	r1, [r3, #0]
 80076da:	2300      	movs	r3, #0
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	4615      	mov	r5, r2
 80076e0:	e7bc      	b.n	800765c <_printf_i+0x14c>
 80076e2:	682b      	ldr	r3, [r5, #0]
 80076e4:	1d1a      	adds	r2, r3, #4
 80076e6:	602a      	str	r2, [r5, #0]
 80076e8:	681d      	ldr	r5, [r3, #0]
 80076ea:	6862      	ldr	r2, [r4, #4]
 80076ec:	2100      	movs	r1, #0
 80076ee:	4628      	mov	r0, r5
 80076f0:	f7f8 fdae 	bl	8000250 <memchr>
 80076f4:	b108      	cbz	r0, 80076fa <_printf_i+0x1ea>
 80076f6:	1b40      	subs	r0, r0, r5
 80076f8:	6060      	str	r0, [r4, #4]
 80076fa:	6863      	ldr	r3, [r4, #4]
 80076fc:	6123      	str	r3, [r4, #16]
 80076fe:	2300      	movs	r3, #0
 8007700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007704:	e7aa      	b.n	800765c <_printf_i+0x14c>
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	462a      	mov	r2, r5
 800770a:	4649      	mov	r1, r9
 800770c:	4640      	mov	r0, r8
 800770e:	47d0      	blx	sl
 8007710:	3001      	adds	r0, #1
 8007712:	d0ad      	beq.n	8007670 <_printf_i+0x160>
 8007714:	6823      	ldr	r3, [r4, #0]
 8007716:	079b      	lsls	r3, r3, #30
 8007718:	d413      	bmi.n	8007742 <_printf_i+0x232>
 800771a:	68e0      	ldr	r0, [r4, #12]
 800771c:	9b03      	ldr	r3, [sp, #12]
 800771e:	4298      	cmp	r0, r3
 8007720:	bfb8      	it	lt
 8007722:	4618      	movlt	r0, r3
 8007724:	e7a6      	b.n	8007674 <_printf_i+0x164>
 8007726:	2301      	movs	r3, #1
 8007728:	4632      	mov	r2, r6
 800772a:	4649      	mov	r1, r9
 800772c:	4640      	mov	r0, r8
 800772e:	47d0      	blx	sl
 8007730:	3001      	adds	r0, #1
 8007732:	d09d      	beq.n	8007670 <_printf_i+0x160>
 8007734:	3501      	adds	r5, #1
 8007736:	68e3      	ldr	r3, [r4, #12]
 8007738:	9903      	ldr	r1, [sp, #12]
 800773a:	1a5b      	subs	r3, r3, r1
 800773c:	42ab      	cmp	r3, r5
 800773e:	dcf2      	bgt.n	8007726 <_printf_i+0x216>
 8007740:	e7eb      	b.n	800771a <_printf_i+0x20a>
 8007742:	2500      	movs	r5, #0
 8007744:	f104 0619 	add.w	r6, r4, #25
 8007748:	e7f5      	b.n	8007736 <_printf_i+0x226>
 800774a:	bf00      	nop
 800774c:	08009a56 	.word	0x08009a56
 8007750:	08009a67 	.word	0x08009a67

08007754 <std>:
 8007754:	2300      	movs	r3, #0
 8007756:	b510      	push	{r4, lr}
 8007758:	4604      	mov	r4, r0
 800775a:	e9c0 3300 	strd	r3, r3, [r0]
 800775e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007762:	6083      	str	r3, [r0, #8]
 8007764:	8181      	strh	r1, [r0, #12]
 8007766:	6643      	str	r3, [r0, #100]	; 0x64
 8007768:	81c2      	strh	r2, [r0, #14]
 800776a:	6183      	str	r3, [r0, #24]
 800776c:	4619      	mov	r1, r3
 800776e:	2208      	movs	r2, #8
 8007770:	305c      	adds	r0, #92	; 0x5c
 8007772:	f000 f8b1 	bl	80078d8 <memset>
 8007776:	4b0d      	ldr	r3, [pc, #52]	; (80077ac <std+0x58>)
 8007778:	6263      	str	r3, [r4, #36]	; 0x24
 800777a:	4b0d      	ldr	r3, [pc, #52]	; (80077b0 <std+0x5c>)
 800777c:	62a3      	str	r3, [r4, #40]	; 0x28
 800777e:	4b0d      	ldr	r3, [pc, #52]	; (80077b4 <std+0x60>)
 8007780:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007782:	4b0d      	ldr	r3, [pc, #52]	; (80077b8 <std+0x64>)
 8007784:	6323      	str	r3, [r4, #48]	; 0x30
 8007786:	4b0d      	ldr	r3, [pc, #52]	; (80077bc <std+0x68>)
 8007788:	6224      	str	r4, [r4, #32]
 800778a:	429c      	cmp	r4, r3
 800778c:	d006      	beq.n	800779c <std+0x48>
 800778e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007792:	4294      	cmp	r4, r2
 8007794:	d002      	beq.n	800779c <std+0x48>
 8007796:	33d0      	adds	r3, #208	; 0xd0
 8007798:	429c      	cmp	r4, r3
 800779a:	d105      	bne.n	80077a8 <std+0x54>
 800779c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077a4:	f000 b8ce 	b.w	8007944 <__retarget_lock_init_recursive>
 80077a8:	bd10      	pop	{r4, pc}
 80077aa:	bf00      	nop
 80077ac:	08009019 	.word	0x08009019
 80077b0:	0800903b 	.word	0x0800903b
 80077b4:	08009073 	.word	0x08009073
 80077b8:	08009097 	.word	0x08009097
 80077bc:	200006d0 	.word	0x200006d0

080077c0 <stdio_exit_handler>:
 80077c0:	4a02      	ldr	r2, [pc, #8]	; (80077cc <stdio_exit_handler+0xc>)
 80077c2:	4903      	ldr	r1, [pc, #12]	; (80077d0 <stdio_exit_handler+0x10>)
 80077c4:	4803      	ldr	r0, [pc, #12]	; (80077d4 <stdio_exit_handler+0x14>)
 80077c6:	f000 b869 	b.w	800789c <_fwalk_sglue>
 80077ca:	bf00      	nop
 80077cc:	2000000c 	.word	0x2000000c
 80077d0:	080088b9 	.word	0x080088b9
 80077d4:	20000018 	.word	0x20000018

080077d8 <cleanup_stdio>:
 80077d8:	6841      	ldr	r1, [r0, #4]
 80077da:	4b0c      	ldr	r3, [pc, #48]	; (800780c <cleanup_stdio+0x34>)
 80077dc:	4299      	cmp	r1, r3
 80077de:	b510      	push	{r4, lr}
 80077e0:	4604      	mov	r4, r0
 80077e2:	d001      	beq.n	80077e8 <cleanup_stdio+0x10>
 80077e4:	f001 f868 	bl	80088b8 <_fflush_r>
 80077e8:	68a1      	ldr	r1, [r4, #8]
 80077ea:	4b09      	ldr	r3, [pc, #36]	; (8007810 <cleanup_stdio+0x38>)
 80077ec:	4299      	cmp	r1, r3
 80077ee:	d002      	beq.n	80077f6 <cleanup_stdio+0x1e>
 80077f0:	4620      	mov	r0, r4
 80077f2:	f001 f861 	bl	80088b8 <_fflush_r>
 80077f6:	68e1      	ldr	r1, [r4, #12]
 80077f8:	4b06      	ldr	r3, [pc, #24]	; (8007814 <cleanup_stdio+0x3c>)
 80077fa:	4299      	cmp	r1, r3
 80077fc:	d004      	beq.n	8007808 <cleanup_stdio+0x30>
 80077fe:	4620      	mov	r0, r4
 8007800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007804:	f001 b858 	b.w	80088b8 <_fflush_r>
 8007808:	bd10      	pop	{r4, pc}
 800780a:	bf00      	nop
 800780c:	200006d0 	.word	0x200006d0
 8007810:	20000738 	.word	0x20000738
 8007814:	200007a0 	.word	0x200007a0

08007818 <global_stdio_init.part.0>:
 8007818:	b510      	push	{r4, lr}
 800781a:	4b0b      	ldr	r3, [pc, #44]	; (8007848 <global_stdio_init.part.0+0x30>)
 800781c:	4c0b      	ldr	r4, [pc, #44]	; (800784c <global_stdio_init.part.0+0x34>)
 800781e:	4a0c      	ldr	r2, [pc, #48]	; (8007850 <global_stdio_init.part.0+0x38>)
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	4620      	mov	r0, r4
 8007824:	2200      	movs	r2, #0
 8007826:	2104      	movs	r1, #4
 8007828:	f7ff ff94 	bl	8007754 <std>
 800782c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007830:	2201      	movs	r2, #1
 8007832:	2109      	movs	r1, #9
 8007834:	f7ff ff8e 	bl	8007754 <std>
 8007838:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800783c:	2202      	movs	r2, #2
 800783e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007842:	2112      	movs	r1, #18
 8007844:	f7ff bf86 	b.w	8007754 <std>
 8007848:	20000808 	.word	0x20000808
 800784c:	200006d0 	.word	0x200006d0
 8007850:	080077c1 	.word	0x080077c1

08007854 <__sfp_lock_acquire>:
 8007854:	4801      	ldr	r0, [pc, #4]	; (800785c <__sfp_lock_acquire+0x8>)
 8007856:	f000 b876 	b.w	8007946 <__retarget_lock_acquire_recursive>
 800785a:	bf00      	nop
 800785c:	2000080d 	.word	0x2000080d

08007860 <__sfp_lock_release>:
 8007860:	4801      	ldr	r0, [pc, #4]	; (8007868 <__sfp_lock_release+0x8>)
 8007862:	f000 b871 	b.w	8007948 <__retarget_lock_release_recursive>
 8007866:	bf00      	nop
 8007868:	2000080d 	.word	0x2000080d

0800786c <__sinit>:
 800786c:	b510      	push	{r4, lr}
 800786e:	4604      	mov	r4, r0
 8007870:	f7ff fff0 	bl	8007854 <__sfp_lock_acquire>
 8007874:	6a23      	ldr	r3, [r4, #32]
 8007876:	b11b      	cbz	r3, 8007880 <__sinit+0x14>
 8007878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787c:	f7ff bff0 	b.w	8007860 <__sfp_lock_release>
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <__sinit+0x28>)
 8007882:	6223      	str	r3, [r4, #32]
 8007884:	4b04      	ldr	r3, [pc, #16]	; (8007898 <__sinit+0x2c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1f5      	bne.n	8007878 <__sinit+0xc>
 800788c:	f7ff ffc4 	bl	8007818 <global_stdio_init.part.0>
 8007890:	e7f2      	b.n	8007878 <__sinit+0xc>
 8007892:	bf00      	nop
 8007894:	080077d9 	.word	0x080077d9
 8007898:	20000808 	.word	0x20000808

0800789c <_fwalk_sglue>:
 800789c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078a0:	4607      	mov	r7, r0
 80078a2:	4688      	mov	r8, r1
 80078a4:	4614      	mov	r4, r2
 80078a6:	2600      	movs	r6, #0
 80078a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078ac:	f1b9 0901 	subs.w	r9, r9, #1
 80078b0:	d505      	bpl.n	80078be <_fwalk_sglue+0x22>
 80078b2:	6824      	ldr	r4, [r4, #0]
 80078b4:	2c00      	cmp	r4, #0
 80078b6:	d1f7      	bne.n	80078a8 <_fwalk_sglue+0xc>
 80078b8:	4630      	mov	r0, r6
 80078ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d907      	bls.n	80078d4 <_fwalk_sglue+0x38>
 80078c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078c8:	3301      	adds	r3, #1
 80078ca:	d003      	beq.n	80078d4 <_fwalk_sglue+0x38>
 80078cc:	4629      	mov	r1, r5
 80078ce:	4638      	mov	r0, r7
 80078d0:	47c0      	blx	r8
 80078d2:	4306      	orrs	r6, r0
 80078d4:	3568      	adds	r5, #104	; 0x68
 80078d6:	e7e9      	b.n	80078ac <_fwalk_sglue+0x10>

080078d8 <memset>:
 80078d8:	4402      	add	r2, r0
 80078da:	4603      	mov	r3, r0
 80078dc:	4293      	cmp	r3, r2
 80078de:	d100      	bne.n	80078e2 <memset+0xa>
 80078e0:	4770      	bx	lr
 80078e2:	f803 1b01 	strb.w	r1, [r3], #1
 80078e6:	e7f9      	b.n	80078dc <memset+0x4>

080078e8 <_localeconv_r>:
 80078e8:	4800      	ldr	r0, [pc, #0]	; (80078ec <_localeconv_r+0x4>)
 80078ea:	4770      	bx	lr
 80078ec:	20000158 	.word	0x20000158

080078f0 <__errno>:
 80078f0:	4b01      	ldr	r3, [pc, #4]	; (80078f8 <__errno+0x8>)
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	4770      	bx	lr
 80078f6:	bf00      	nop
 80078f8:	20000064 	.word	0x20000064

080078fc <__libc_init_array>:
 80078fc:	b570      	push	{r4, r5, r6, lr}
 80078fe:	4d0d      	ldr	r5, [pc, #52]	; (8007934 <__libc_init_array+0x38>)
 8007900:	4c0d      	ldr	r4, [pc, #52]	; (8007938 <__libc_init_array+0x3c>)
 8007902:	1b64      	subs	r4, r4, r5
 8007904:	10a4      	asrs	r4, r4, #2
 8007906:	2600      	movs	r6, #0
 8007908:	42a6      	cmp	r6, r4
 800790a:	d109      	bne.n	8007920 <__libc_init_array+0x24>
 800790c:	4d0b      	ldr	r5, [pc, #44]	; (800793c <__libc_init_array+0x40>)
 800790e:	4c0c      	ldr	r4, [pc, #48]	; (8007940 <__libc_init_array+0x44>)
 8007910:	f001 ff76 	bl	8009800 <_init>
 8007914:	1b64      	subs	r4, r4, r5
 8007916:	10a4      	asrs	r4, r4, #2
 8007918:	2600      	movs	r6, #0
 800791a:	42a6      	cmp	r6, r4
 800791c:	d105      	bne.n	800792a <__libc_init_array+0x2e>
 800791e:	bd70      	pop	{r4, r5, r6, pc}
 8007920:	f855 3b04 	ldr.w	r3, [r5], #4
 8007924:	4798      	blx	r3
 8007926:	3601      	adds	r6, #1
 8007928:	e7ee      	b.n	8007908 <__libc_init_array+0xc>
 800792a:	f855 3b04 	ldr.w	r3, [r5], #4
 800792e:	4798      	blx	r3
 8007930:	3601      	adds	r6, #1
 8007932:	e7f2      	b.n	800791a <__libc_init_array+0x1e>
 8007934:	08009dbc 	.word	0x08009dbc
 8007938:	08009dbc 	.word	0x08009dbc
 800793c:	08009dbc 	.word	0x08009dbc
 8007940:	08009dc0 	.word	0x08009dc0

08007944 <__retarget_lock_init_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_acquire_recursive>:
 8007946:	4770      	bx	lr

08007948 <__retarget_lock_release_recursive>:
 8007948:	4770      	bx	lr

0800794a <memcpy>:
 800794a:	440a      	add	r2, r1
 800794c:	4291      	cmp	r1, r2
 800794e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007952:	d100      	bne.n	8007956 <memcpy+0xc>
 8007954:	4770      	bx	lr
 8007956:	b510      	push	{r4, lr}
 8007958:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007960:	4291      	cmp	r1, r2
 8007962:	d1f9      	bne.n	8007958 <memcpy+0xe>
 8007964:	bd10      	pop	{r4, pc}

08007966 <quorem>:
 8007966:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800796a:	6903      	ldr	r3, [r0, #16]
 800796c:	690c      	ldr	r4, [r1, #16]
 800796e:	42a3      	cmp	r3, r4
 8007970:	4607      	mov	r7, r0
 8007972:	db7e      	blt.n	8007a72 <quorem+0x10c>
 8007974:	3c01      	subs	r4, #1
 8007976:	f101 0814 	add.w	r8, r1, #20
 800797a:	f100 0514 	add.w	r5, r0, #20
 800797e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007988:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800798c:	3301      	adds	r3, #1
 800798e:	429a      	cmp	r2, r3
 8007990:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007994:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007998:	fbb2 f6f3 	udiv	r6, r2, r3
 800799c:	d331      	bcc.n	8007a02 <quorem+0x9c>
 800799e:	f04f 0e00 	mov.w	lr, #0
 80079a2:	4640      	mov	r0, r8
 80079a4:	46ac      	mov	ip, r5
 80079a6:	46f2      	mov	sl, lr
 80079a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80079ac:	b293      	uxth	r3, r2
 80079ae:	fb06 e303 	mla	r3, r6, r3, lr
 80079b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079b6:	0c1a      	lsrs	r2, r3, #16
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	ebaa 0303 	sub.w	r3, sl, r3
 80079be:	f8dc a000 	ldr.w	sl, [ip]
 80079c2:	fa13 f38a 	uxtah	r3, r3, sl
 80079c6:	fb06 220e 	mla	r2, r6, lr, r2
 80079ca:	9300      	str	r3, [sp, #0]
 80079cc:	9b00      	ldr	r3, [sp, #0]
 80079ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079d2:	b292      	uxth	r2, r2
 80079d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80079e0:	4581      	cmp	r9, r0
 80079e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079e6:	f84c 3b04 	str.w	r3, [ip], #4
 80079ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80079ee:	d2db      	bcs.n	80079a8 <quorem+0x42>
 80079f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80079f4:	b92b      	cbnz	r3, 8007a02 <quorem+0x9c>
 80079f6:	9b01      	ldr	r3, [sp, #4]
 80079f8:	3b04      	subs	r3, #4
 80079fa:	429d      	cmp	r5, r3
 80079fc:	461a      	mov	r2, r3
 80079fe:	d32c      	bcc.n	8007a5a <quorem+0xf4>
 8007a00:	613c      	str	r4, [r7, #16]
 8007a02:	4638      	mov	r0, r7
 8007a04:	f001 fa08 	bl	8008e18 <__mcmp>
 8007a08:	2800      	cmp	r0, #0
 8007a0a:	db22      	blt.n	8007a52 <quorem+0xec>
 8007a0c:	3601      	adds	r6, #1
 8007a0e:	4629      	mov	r1, r5
 8007a10:	2000      	movs	r0, #0
 8007a12:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a16:	f8d1 c000 	ldr.w	ip, [r1]
 8007a1a:	b293      	uxth	r3, r2
 8007a1c:	1ac3      	subs	r3, r0, r3
 8007a1e:	0c12      	lsrs	r2, r2, #16
 8007a20:	fa13 f38c 	uxtah	r3, r3, ip
 8007a24:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a28:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a32:	45c1      	cmp	r9, r8
 8007a34:	f841 3b04 	str.w	r3, [r1], #4
 8007a38:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a3c:	d2e9      	bcs.n	8007a12 <quorem+0xac>
 8007a3e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a46:	b922      	cbnz	r2, 8007a52 <quorem+0xec>
 8007a48:	3b04      	subs	r3, #4
 8007a4a:	429d      	cmp	r5, r3
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	d30a      	bcc.n	8007a66 <quorem+0x100>
 8007a50:	613c      	str	r4, [r7, #16]
 8007a52:	4630      	mov	r0, r6
 8007a54:	b003      	add	sp, #12
 8007a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a5a:	6812      	ldr	r2, [r2, #0]
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	2a00      	cmp	r2, #0
 8007a60:	d1ce      	bne.n	8007a00 <quorem+0x9a>
 8007a62:	3c01      	subs	r4, #1
 8007a64:	e7c9      	b.n	80079fa <quorem+0x94>
 8007a66:	6812      	ldr	r2, [r2, #0]
 8007a68:	3b04      	subs	r3, #4
 8007a6a:	2a00      	cmp	r2, #0
 8007a6c:	d1f0      	bne.n	8007a50 <quorem+0xea>
 8007a6e:	3c01      	subs	r4, #1
 8007a70:	e7eb      	b.n	8007a4a <quorem+0xe4>
 8007a72:	2000      	movs	r0, #0
 8007a74:	e7ee      	b.n	8007a54 <quorem+0xee>
	...

08007a78 <_dtoa_r>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	ed2d 8b04 	vpush	{d8-d9}
 8007a80:	69c5      	ldr	r5, [r0, #28]
 8007a82:	b093      	sub	sp, #76	; 0x4c
 8007a84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a88:	ec57 6b10 	vmov	r6, r7, d0
 8007a8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a90:	9107      	str	r1, [sp, #28]
 8007a92:	4604      	mov	r4, r0
 8007a94:	920a      	str	r2, [sp, #40]	; 0x28
 8007a96:	930d      	str	r3, [sp, #52]	; 0x34
 8007a98:	b975      	cbnz	r5, 8007ab8 <_dtoa_r+0x40>
 8007a9a:	2010      	movs	r0, #16
 8007a9c:	f000 fdde 	bl	800865c <malloc>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	61e0      	str	r0, [r4, #28]
 8007aa4:	b920      	cbnz	r0, 8007ab0 <_dtoa_r+0x38>
 8007aa6:	4bae      	ldr	r3, [pc, #696]	; (8007d60 <_dtoa_r+0x2e8>)
 8007aa8:	21ef      	movs	r1, #239	; 0xef
 8007aaa:	48ae      	ldr	r0, [pc, #696]	; (8007d64 <_dtoa_r+0x2ec>)
 8007aac:	f001 fb4e 	bl	800914c <__assert_func>
 8007ab0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007ab4:	6005      	str	r5, [r0, #0]
 8007ab6:	60c5      	str	r5, [r0, #12]
 8007ab8:	69e3      	ldr	r3, [r4, #28]
 8007aba:	6819      	ldr	r1, [r3, #0]
 8007abc:	b151      	cbz	r1, 8007ad4 <_dtoa_r+0x5c>
 8007abe:	685a      	ldr	r2, [r3, #4]
 8007ac0:	604a      	str	r2, [r1, #4]
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	4093      	lsls	r3, r2
 8007ac6:	608b      	str	r3, [r1, #8]
 8007ac8:	4620      	mov	r0, r4
 8007aca:	f000 ff69 	bl	80089a0 <_Bfree>
 8007ace:	69e3      	ldr	r3, [r4, #28]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
 8007ad4:	1e3b      	subs	r3, r7, #0
 8007ad6:	bfbb      	ittet	lt
 8007ad8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007adc:	9303      	strlt	r3, [sp, #12]
 8007ade:	2300      	movge	r3, #0
 8007ae0:	2201      	movlt	r2, #1
 8007ae2:	bfac      	ite	ge
 8007ae4:	f8c8 3000 	strge.w	r3, [r8]
 8007ae8:	f8c8 2000 	strlt.w	r2, [r8]
 8007aec:	4b9e      	ldr	r3, [pc, #632]	; (8007d68 <_dtoa_r+0x2f0>)
 8007aee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007af2:	ea33 0308 	bics.w	r3, r3, r8
 8007af6:	d11b      	bne.n	8007b30 <_dtoa_r+0xb8>
 8007af8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007afa:	f242 730f 	movw	r3, #9999	; 0x270f
 8007afe:	6013      	str	r3, [r2, #0]
 8007b00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b04:	4333      	orrs	r3, r6
 8007b06:	f000 8593 	beq.w	8008630 <_dtoa_r+0xbb8>
 8007b0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b0c:	b963      	cbnz	r3, 8007b28 <_dtoa_r+0xb0>
 8007b0e:	4b97      	ldr	r3, [pc, #604]	; (8007d6c <_dtoa_r+0x2f4>)
 8007b10:	e027      	b.n	8007b62 <_dtoa_r+0xea>
 8007b12:	4b97      	ldr	r3, [pc, #604]	; (8007d70 <_dtoa_r+0x2f8>)
 8007b14:	9300      	str	r3, [sp, #0]
 8007b16:	3308      	adds	r3, #8
 8007b18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b1a:	6013      	str	r3, [r2, #0]
 8007b1c:	9800      	ldr	r0, [sp, #0]
 8007b1e:	b013      	add	sp, #76	; 0x4c
 8007b20:	ecbd 8b04 	vpop	{d8-d9}
 8007b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b28:	4b90      	ldr	r3, [pc, #576]	; (8007d6c <_dtoa_r+0x2f4>)
 8007b2a:	9300      	str	r3, [sp, #0]
 8007b2c:	3303      	adds	r3, #3
 8007b2e:	e7f3      	b.n	8007b18 <_dtoa_r+0xa0>
 8007b30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b34:	2200      	movs	r2, #0
 8007b36:	ec51 0b17 	vmov	r0, r1, d7
 8007b3a:	eeb0 8a47 	vmov.f32	s16, s14
 8007b3e:	eef0 8a67 	vmov.f32	s17, s15
 8007b42:	2300      	movs	r3, #0
 8007b44:	f7f9 f800 	bl	8000b48 <__aeabi_dcmpeq>
 8007b48:	4681      	mov	r9, r0
 8007b4a:	b160      	cbz	r0, 8007b66 <_dtoa_r+0xee>
 8007b4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b4e:	2301      	movs	r3, #1
 8007b50:	6013      	str	r3, [r2, #0]
 8007b52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8568 	beq.w	800862a <_dtoa_r+0xbb2>
 8007b5a:	4b86      	ldr	r3, [pc, #536]	; (8007d74 <_dtoa_r+0x2fc>)
 8007b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b5e:	6013      	str	r3, [r2, #0]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	e7da      	b.n	8007b1c <_dtoa_r+0xa4>
 8007b66:	aa10      	add	r2, sp, #64	; 0x40
 8007b68:	a911      	add	r1, sp, #68	; 0x44
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	eeb0 0a48 	vmov.f32	s0, s16
 8007b70:	eef0 0a68 	vmov.f32	s1, s17
 8007b74:	f001 f9f6 	bl	8008f64 <__d2b>
 8007b78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b7c:	4682      	mov	sl, r0
 8007b7e:	2d00      	cmp	r5, #0
 8007b80:	d07f      	beq.n	8007c82 <_dtoa_r+0x20a>
 8007b82:	ee18 3a90 	vmov	r3, s17
 8007b86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b8e:	ec51 0b18 	vmov	r0, r1, d8
 8007b92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	4b75      	ldr	r3, [pc, #468]	; (8007d78 <_dtoa_r+0x300>)
 8007ba4:	f7f8 fbb0 	bl	8000308 <__aeabi_dsub>
 8007ba8:	a367      	add	r3, pc, #412	; (adr r3, 8007d48 <_dtoa_r+0x2d0>)
 8007baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bae:	f7f8 fd63 	bl	8000678 <__aeabi_dmul>
 8007bb2:	a367      	add	r3, pc, #412	; (adr r3, 8007d50 <_dtoa_r+0x2d8>)
 8007bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb8:	f7f8 fba8 	bl	800030c <__adddf3>
 8007bbc:	4606      	mov	r6, r0
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	460f      	mov	r7, r1
 8007bc2:	f7f8 fcef 	bl	80005a4 <__aeabi_i2d>
 8007bc6:	a364      	add	r3, pc, #400	; (adr r3, 8007d58 <_dtoa_r+0x2e0>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	f7f8 fd54 	bl	8000678 <__aeabi_dmul>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	4630      	mov	r0, r6
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	f7f8 fb98 	bl	800030c <__adddf3>
 8007bdc:	4606      	mov	r6, r0
 8007bde:	460f      	mov	r7, r1
 8007be0:	f7f8 fffa 	bl	8000bd8 <__aeabi_d2iz>
 8007be4:	2200      	movs	r2, #0
 8007be6:	4683      	mov	fp, r0
 8007be8:	2300      	movs	r3, #0
 8007bea:	4630      	mov	r0, r6
 8007bec:	4639      	mov	r1, r7
 8007bee:	f7f8 ffb5 	bl	8000b5c <__aeabi_dcmplt>
 8007bf2:	b148      	cbz	r0, 8007c08 <_dtoa_r+0x190>
 8007bf4:	4658      	mov	r0, fp
 8007bf6:	f7f8 fcd5 	bl	80005a4 <__aeabi_i2d>
 8007bfa:	4632      	mov	r2, r6
 8007bfc:	463b      	mov	r3, r7
 8007bfe:	f7f8 ffa3 	bl	8000b48 <__aeabi_dcmpeq>
 8007c02:	b908      	cbnz	r0, 8007c08 <_dtoa_r+0x190>
 8007c04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c08:	f1bb 0f16 	cmp.w	fp, #22
 8007c0c:	d857      	bhi.n	8007cbe <_dtoa_r+0x246>
 8007c0e:	4b5b      	ldr	r3, [pc, #364]	; (8007d7c <_dtoa_r+0x304>)
 8007c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c18:	ec51 0b18 	vmov	r0, r1, d8
 8007c1c:	f7f8 ff9e 	bl	8000b5c <__aeabi_dcmplt>
 8007c20:	2800      	cmp	r0, #0
 8007c22:	d04e      	beq.n	8007cc2 <_dtoa_r+0x24a>
 8007c24:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c28:	2300      	movs	r3, #0
 8007c2a:	930c      	str	r3, [sp, #48]	; 0x30
 8007c2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c2e:	1b5b      	subs	r3, r3, r5
 8007c30:	1e5a      	subs	r2, r3, #1
 8007c32:	bf45      	ittet	mi
 8007c34:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c38:	9305      	strmi	r3, [sp, #20]
 8007c3a:	2300      	movpl	r3, #0
 8007c3c:	2300      	movmi	r3, #0
 8007c3e:	9206      	str	r2, [sp, #24]
 8007c40:	bf54      	ite	pl
 8007c42:	9305      	strpl	r3, [sp, #20]
 8007c44:	9306      	strmi	r3, [sp, #24]
 8007c46:	f1bb 0f00 	cmp.w	fp, #0
 8007c4a:	db3c      	blt.n	8007cc6 <_dtoa_r+0x24e>
 8007c4c:	9b06      	ldr	r3, [sp, #24]
 8007c4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c52:	445b      	add	r3, fp
 8007c54:	9306      	str	r3, [sp, #24]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9308      	str	r3, [sp, #32]
 8007c5a:	9b07      	ldr	r3, [sp, #28]
 8007c5c:	2b09      	cmp	r3, #9
 8007c5e:	d868      	bhi.n	8007d32 <_dtoa_r+0x2ba>
 8007c60:	2b05      	cmp	r3, #5
 8007c62:	bfc4      	itt	gt
 8007c64:	3b04      	subgt	r3, #4
 8007c66:	9307      	strgt	r3, [sp, #28]
 8007c68:	9b07      	ldr	r3, [sp, #28]
 8007c6a:	f1a3 0302 	sub.w	r3, r3, #2
 8007c6e:	bfcc      	ite	gt
 8007c70:	2500      	movgt	r5, #0
 8007c72:	2501      	movle	r5, #1
 8007c74:	2b03      	cmp	r3, #3
 8007c76:	f200 8085 	bhi.w	8007d84 <_dtoa_r+0x30c>
 8007c7a:	e8df f003 	tbb	[pc, r3]
 8007c7e:	3b2e      	.short	0x3b2e
 8007c80:	5839      	.short	0x5839
 8007c82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c86:	441d      	add	r5, r3
 8007c88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	bfc1      	itttt	gt
 8007c90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c94:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007ca0:	bfd6      	itet	le
 8007ca2:	f1c3 0320 	rsble	r3, r3, #32
 8007ca6:	ea48 0003 	orrgt.w	r0, r8, r3
 8007caa:	fa06 f003 	lslle.w	r0, r6, r3
 8007cae:	f7f8 fc69 	bl	8000584 <__aeabi_ui2d>
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cb8:	3d01      	subs	r5, #1
 8007cba:	920e      	str	r2, [sp, #56]	; 0x38
 8007cbc:	e76f      	b.n	8007b9e <_dtoa_r+0x126>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	e7b3      	b.n	8007c2a <_dtoa_r+0x1b2>
 8007cc2:	900c      	str	r0, [sp, #48]	; 0x30
 8007cc4:	e7b2      	b.n	8007c2c <_dtoa_r+0x1b4>
 8007cc6:	9b05      	ldr	r3, [sp, #20]
 8007cc8:	eba3 030b 	sub.w	r3, r3, fp
 8007ccc:	9305      	str	r3, [sp, #20]
 8007cce:	f1cb 0300 	rsb	r3, fp, #0
 8007cd2:	9308      	str	r3, [sp, #32]
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cd8:	e7bf      	b.n	8007c5a <_dtoa_r+0x1e2>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	9309      	str	r3, [sp, #36]	; 0x24
 8007cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	dc52      	bgt.n	8007d8a <_dtoa_r+0x312>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	9301      	str	r3, [sp, #4]
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	461a      	mov	r2, r3
 8007cec:	920a      	str	r2, [sp, #40]	; 0x28
 8007cee:	e00b      	b.n	8007d08 <_dtoa_r+0x290>
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e7f3      	b.n	8007cdc <_dtoa_r+0x264>
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cfa:	445b      	add	r3, fp
 8007cfc:	9301      	str	r3, [sp, #4]
 8007cfe:	3301      	adds	r3, #1
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	9304      	str	r3, [sp, #16]
 8007d04:	bfb8      	it	lt
 8007d06:	2301      	movlt	r3, #1
 8007d08:	69e0      	ldr	r0, [r4, #28]
 8007d0a:	2100      	movs	r1, #0
 8007d0c:	2204      	movs	r2, #4
 8007d0e:	f102 0614 	add.w	r6, r2, #20
 8007d12:	429e      	cmp	r6, r3
 8007d14:	d93d      	bls.n	8007d92 <_dtoa_r+0x31a>
 8007d16:	6041      	str	r1, [r0, #4]
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 fe01 	bl	8008920 <_Balloc>
 8007d1e:	9000      	str	r0, [sp, #0]
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d139      	bne.n	8007d98 <_dtoa_r+0x320>
 8007d24:	4b16      	ldr	r3, [pc, #88]	; (8007d80 <_dtoa_r+0x308>)
 8007d26:	4602      	mov	r2, r0
 8007d28:	f240 11af 	movw	r1, #431	; 0x1af
 8007d2c:	e6bd      	b.n	8007aaa <_dtoa_r+0x32>
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e7e1      	b.n	8007cf6 <_dtoa_r+0x27e>
 8007d32:	2501      	movs	r5, #1
 8007d34:	2300      	movs	r3, #0
 8007d36:	9307      	str	r3, [sp, #28]
 8007d38:	9509      	str	r5, [sp, #36]	; 0x24
 8007d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d3e:	9301      	str	r3, [sp, #4]
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	2200      	movs	r2, #0
 8007d44:	2312      	movs	r3, #18
 8007d46:	e7d1      	b.n	8007cec <_dtoa_r+0x274>
 8007d48:	636f4361 	.word	0x636f4361
 8007d4c:	3fd287a7 	.word	0x3fd287a7
 8007d50:	8b60c8b3 	.word	0x8b60c8b3
 8007d54:	3fc68a28 	.word	0x3fc68a28
 8007d58:	509f79fb 	.word	0x509f79fb
 8007d5c:	3fd34413 	.word	0x3fd34413
 8007d60:	08009a85 	.word	0x08009a85
 8007d64:	08009a9c 	.word	0x08009a9c
 8007d68:	7ff00000 	.word	0x7ff00000
 8007d6c:	08009a81 	.word	0x08009a81
 8007d70:	08009a78 	.word	0x08009a78
 8007d74:	08009a55 	.word	0x08009a55
 8007d78:	3ff80000 	.word	0x3ff80000
 8007d7c:	08009b88 	.word	0x08009b88
 8007d80:	08009af4 	.word	0x08009af4
 8007d84:	2301      	movs	r3, #1
 8007d86:	9309      	str	r3, [sp, #36]	; 0x24
 8007d88:	e7d7      	b.n	8007d3a <_dtoa_r+0x2c2>
 8007d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	9304      	str	r3, [sp, #16]
 8007d90:	e7ba      	b.n	8007d08 <_dtoa_r+0x290>
 8007d92:	3101      	adds	r1, #1
 8007d94:	0052      	lsls	r2, r2, #1
 8007d96:	e7ba      	b.n	8007d0e <_dtoa_r+0x296>
 8007d98:	69e3      	ldr	r3, [r4, #28]
 8007d9a:	9a00      	ldr	r2, [sp, #0]
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	9b04      	ldr	r3, [sp, #16]
 8007da0:	2b0e      	cmp	r3, #14
 8007da2:	f200 80a8 	bhi.w	8007ef6 <_dtoa_r+0x47e>
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	f000 80a5 	beq.w	8007ef6 <_dtoa_r+0x47e>
 8007dac:	f1bb 0f00 	cmp.w	fp, #0
 8007db0:	dd38      	ble.n	8007e24 <_dtoa_r+0x3ac>
 8007db2:	4bc0      	ldr	r3, [pc, #768]	; (80080b4 <_dtoa_r+0x63c>)
 8007db4:	f00b 020f 	and.w	r2, fp, #15
 8007db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dbc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007dc0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dc4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007dc8:	d019      	beq.n	8007dfe <_dtoa_r+0x386>
 8007dca:	4bbb      	ldr	r3, [pc, #748]	; (80080b8 <_dtoa_r+0x640>)
 8007dcc:	ec51 0b18 	vmov	r0, r1, d8
 8007dd0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dd4:	f7f8 fd7a 	bl	80008cc <__aeabi_ddiv>
 8007dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ddc:	f008 080f 	and.w	r8, r8, #15
 8007de0:	2503      	movs	r5, #3
 8007de2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080b8 <_dtoa_r+0x640>
 8007de6:	f1b8 0f00 	cmp.w	r8, #0
 8007dea:	d10a      	bne.n	8007e02 <_dtoa_r+0x38a>
 8007dec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007df0:	4632      	mov	r2, r6
 8007df2:	463b      	mov	r3, r7
 8007df4:	f7f8 fd6a 	bl	80008cc <__aeabi_ddiv>
 8007df8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dfc:	e02b      	b.n	8007e56 <_dtoa_r+0x3de>
 8007dfe:	2502      	movs	r5, #2
 8007e00:	e7ef      	b.n	8007de2 <_dtoa_r+0x36a>
 8007e02:	f018 0f01 	tst.w	r8, #1
 8007e06:	d008      	beq.n	8007e1a <_dtoa_r+0x3a2>
 8007e08:	4630      	mov	r0, r6
 8007e0a:	4639      	mov	r1, r7
 8007e0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e10:	f7f8 fc32 	bl	8000678 <__aeabi_dmul>
 8007e14:	3501      	adds	r5, #1
 8007e16:	4606      	mov	r6, r0
 8007e18:	460f      	mov	r7, r1
 8007e1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e1e:	f109 0908 	add.w	r9, r9, #8
 8007e22:	e7e0      	b.n	8007de6 <_dtoa_r+0x36e>
 8007e24:	f000 809f 	beq.w	8007f66 <_dtoa_r+0x4ee>
 8007e28:	f1cb 0600 	rsb	r6, fp, #0
 8007e2c:	4ba1      	ldr	r3, [pc, #644]	; (80080b4 <_dtoa_r+0x63c>)
 8007e2e:	4fa2      	ldr	r7, [pc, #648]	; (80080b8 <_dtoa_r+0x640>)
 8007e30:	f006 020f 	and.w	r2, r6, #15
 8007e34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e3c:	ec51 0b18 	vmov	r0, r1, d8
 8007e40:	f7f8 fc1a 	bl	8000678 <__aeabi_dmul>
 8007e44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e48:	1136      	asrs	r6, r6, #4
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	2502      	movs	r5, #2
 8007e4e:	2e00      	cmp	r6, #0
 8007e50:	d17e      	bne.n	8007f50 <_dtoa_r+0x4d8>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1d0      	bne.n	8007df8 <_dtoa_r+0x380>
 8007e56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 8084 	beq.w	8007f6a <_dtoa_r+0x4f2>
 8007e62:	4b96      	ldr	r3, [pc, #600]	; (80080bc <_dtoa_r+0x644>)
 8007e64:	2200      	movs	r2, #0
 8007e66:	4640      	mov	r0, r8
 8007e68:	4649      	mov	r1, r9
 8007e6a:	f7f8 fe77 	bl	8000b5c <__aeabi_dcmplt>
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d07b      	beq.n	8007f6a <_dtoa_r+0x4f2>
 8007e72:	9b04      	ldr	r3, [sp, #16]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d078      	beq.n	8007f6a <_dtoa_r+0x4f2>
 8007e78:	9b01      	ldr	r3, [sp, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	dd39      	ble.n	8007ef2 <_dtoa_r+0x47a>
 8007e7e:	4b90      	ldr	r3, [pc, #576]	; (80080c0 <_dtoa_r+0x648>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	f7f8 fbf7 	bl	8000678 <__aeabi_dmul>
 8007e8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e8e:	9e01      	ldr	r6, [sp, #4]
 8007e90:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007e94:	3501      	adds	r5, #1
 8007e96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7f8 fb82 	bl	80005a4 <__aeabi_i2d>
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	f7f8 fbe8 	bl	8000678 <__aeabi_dmul>
 8007ea8:	4b86      	ldr	r3, [pc, #536]	; (80080c4 <_dtoa_r+0x64c>)
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f7f8 fa2e 	bl	800030c <__adddf3>
 8007eb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eb8:	9303      	str	r3, [sp, #12]
 8007eba:	2e00      	cmp	r6, #0
 8007ebc:	d158      	bne.n	8007f70 <_dtoa_r+0x4f8>
 8007ebe:	4b82      	ldr	r3, [pc, #520]	; (80080c8 <_dtoa_r+0x650>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4640      	mov	r0, r8
 8007ec4:	4649      	mov	r1, r9
 8007ec6:	f7f8 fa1f 	bl	8000308 <__aeabi_dsub>
 8007eca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ece:	4680      	mov	r8, r0
 8007ed0:	4689      	mov	r9, r1
 8007ed2:	f7f8 fe61 	bl	8000b98 <__aeabi_dcmpgt>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f040 8296 	bne.w	8008408 <_dtoa_r+0x990>
 8007edc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	f7f8 fe38 	bl	8000b5c <__aeabi_dcmplt>
 8007eec:	2800      	cmp	r0, #0
 8007eee:	f040 8289 	bne.w	8008404 <_dtoa_r+0x98c>
 8007ef2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007ef6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f2c0 814e 	blt.w	800819a <_dtoa_r+0x722>
 8007efe:	f1bb 0f0e 	cmp.w	fp, #14
 8007f02:	f300 814a 	bgt.w	800819a <_dtoa_r+0x722>
 8007f06:	4b6b      	ldr	r3, [pc, #428]	; (80080b4 <_dtoa_r+0x63c>)
 8007f08:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f0c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f280 80dc 	bge.w	80080d0 <_dtoa_r+0x658>
 8007f18:	9b04      	ldr	r3, [sp, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	f300 80d8 	bgt.w	80080d0 <_dtoa_r+0x658>
 8007f20:	f040 826f 	bne.w	8008402 <_dtoa_r+0x98a>
 8007f24:	4b68      	ldr	r3, [pc, #416]	; (80080c8 <_dtoa_r+0x650>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	4640      	mov	r0, r8
 8007f2a:	4649      	mov	r1, r9
 8007f2c:	f7f8 fba4 	bl	8000678 <__aeabi_dmul>
 8007f30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f34:	f7f8 fe26 	bl	8000b84 <__aeabi_dcmpge>
 8007f38:	9e04      	ldr	r6, [sp, #16]
 8007f3a:	4637      	mov	r7, r6
 8007f3c:	2800      	cmp	r0, #0
 8007f3e:	f040 8245 	bne.w	80083cc <_dtoa_r+0x954>
 8007f42:	9d00      	ldr	r5, [sp, #0]
 8007f44:	2331      	movs	r3, #49	; 0x31
 8007f46:	f805 3b01 	strb.w	r3, [r5], #1
 8007f4a:	f10b 0b01 	add.w	fp, fp, #1
 8007f4e:	e241      	b.n	80083d4 <_dtoa_r+0x95c>
 8007f50:	07f2      	lsls	r2, r6, #31
 8007f52:	d505      	bpl.n	8007f60 <_dtoa_r+0x4e8>
 8007f54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f58:	f7f8 fb8e 	bl	8000678 <__aeabi_dmul>
 8007f5c:	3501      	adds	r5, #1
 8007f5e:	2301      	movs	r3, #1
 8007f60:	1076      	asrs	r6, r6, #1
 8007f62:	3708      	adds	r7, #8
 8007f64:	e773      	b.n	8007e4e <_dtoa_r+0x3d6>
 8007f66:	2502      	movs	r5, #2
 8007f68:	e775      	b.n	8007e56 <_dtoa_r+0x3de>
 8007f6a:	9e04      	ldr	r6, [sp, #16]
 8007f6c:	465f      	mov	r7, fp
 8007f6e:	e792      	b.n	8007e96 <_dtoa_r+0x41e>
 8007f70:	9900      	ldr	r1, [sp, #0]
 8007f72:	4b50      	ldr	r3, [pc, #320]	; (80080b4 <_dtoa_r+0x63c>)
 8007f74:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f78:	4431      	add	r1, r6
 8007f7a:	9102      	str	r1, [sp, #8]
 8007f7c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f7e:	eeb0 9a47 	vmov.f32	s18, s14
 8007f82:	eef0 9a67 	vmov.f32	s19, s15
 8007f86:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f8a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f8e:	2900      	cmp	r1, #0
 8007f90:	d044      	beq.n	800801c <_dtoa_r+0x5a4>
 8007f92:	494e      	ldr	r1, [pc, #312]	; (80080cc <_dtoa_r+0x654>)
 8007f94:	2000      	movs	r0, #0
 8007f96:	f7f8 fc99 	bl	80008cc <__aeabi_ddiv>
 8007f9a:	ec53 2b19 	vmov	r2, r3, d9
 8007f9e:	f7f8 f9b3 	bl	8000308 <__aeabi_dsub>
 8007fa2:	9d00      	ldr	r5, [sp, #0]
 8007fa4:	ec41 0b19 	vmov	d9, r0, r1
 8007fa8:	4649      	mov	r1, r9
 8007faa:	4640      	mov	r0, r8
 8007fac:	f7f8 fe14 	bl	8000bd8 <__aeabi_d2iz>
 8007fb0:	4606      	mov	r6, r0
 8007fb2:	f7f8 faf7 	bl	80005a4 <__aeabi_i2d>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	4640      	mov	r0, r8
 8007fbc:	4649      	mov	r1, r9
 8007fbe:	f7f8 f9a3 	bl	8000308 <__aeabi_dsub>
 8007fc2:	3630      	adds	r6, #48	; 0x30
 8007fc4:	f805 6b01 	strb.w	r6, [r5], #1
 8007fc8:	ec53 2b19 	vmov	r2, r3, d9
 8007fcc:	4680      	mov	r8, r0
 8007fce:	4689      	mov	r9, r1
 8007fd0:	f7f8 fdc4 	bl	8000b5c <__aeabi_dcmplt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	d164      	bne.n	80080a2 <_dtoa_r+0x62a>
 8007fd8:	4642      	mov	r2, r8
 8007fda:	464b      	mov	r3, r9
 8007fdc:	4937      	ldr	r1, [pc, #220]	; (80080bc <_dtoa_r+0x644>)
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f7f8 f992 	bl	8000308 <__aeabi_dsub>
 8007fe4:	ec53 2b19 	vmov	r2, r3, d9
 8007fe8:	f7f8 fdb8 	bl	8000b5c <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f040 80b6 	bne.w	800815e <_dtoa_r+0x6e6>
 8007ff2:	9b02      	ldr	r3, [sp, #8]
 8007ff4:	429d      	cmp	r5, r3
 8007ff6:	f43f af7c 	beq.w	8007ef2 <_dtoa_r+0x47a>
 8007ffa:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <_dtoa_r+0x648>)
 8007ffc:	ec51 0b19 	vmov	r0, r1, d9
 8008000:	2200      	movs	r2, #0
 8008002:	f7f8 fb39 	bl	8000678 <__aeabi_dmul>
 8008006:	4b2e      	ldr	r3, [pc, #184]	; (80080c0 <_dtoa_r+0x648>)
 8008008:	ec41 0b19 	vmov	d9, r0, r1
 800800c:	2200      	movs	r2, #0
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fb31 	bl	8000678 <__aeabi_dmul>
 8008016:	4680      	mov	r8, r0
 8008018:	4689      	mov	r9, r1
 800801a:	e7c5      	b.n	8007fa8 <_dtoa_r+0x530>
 800801c:	ec51 0b17 	vmov	r0, r1, d7
 8008020:	f7f8 fb2a 	bl	8000678 <__aeabi_dmul>
 8008024:	9b02      	ldr	r3, [sp, #8]
 8008026:	9d00      	ldr	r5, [sp, #0]
 8008028:	930f      	str	r3, [sp, #60]	; 0x3c
 800802a:	ec41 0b19 	vmov	d9, r0, r1
 800802e:	4649      	mov	r1, r9
 8008030:	4640      	mov	r0, r8
 8008032:	f7f8 fdd1 	bl	8000bd8 <__aeabi_d2iz>
 8008036:	4606      	mov	r6, r0
 8008038:	f7f8 fab4 	bl	80005a4 <__aeabi_i2d>
 800803c:	3630      	adds	r6, #48	; 0x30
 800803e:	4602      	mov	r2, r0
 8008040:	460b      	mov	r3, r1
 8008042:	4640      	mov	r0, r8
 8008044:	4649      	mov	r1, r9
 8008046:	f7f8 f95f 	bl	8000308 <__aeabi_dsub>
 800804a:	f805 6b01 	strb.w	r6, [r5], #1
 800804e:	9b02      	ldr	r3, [sp, #8]
 8008050:	429d      	cmp	r5, r3
 8008052:	4680      	mov	r8, r0
 8008054:	4689      	mov	r9, r1
 8008056:	f04f 0200 	mov.w	r2, #0
 800805a:	d124      	bne.n	80080a6 <_dtoa_r+0x62e>
 800805c:	4b1b      	ldr	r3, [pc, #108]	; (80080cc <_dtoa_r+0x654>)
 800805e:	ec51 0b19 	vmov	r0, r1, d9
 8008062:	f7f8 f953 	bl	800030c <__adddf3>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 fd93 	bl	8000b98 <__aeabi_dcmpgt>
 8008072:	2800      	cmp	r0, #0
 8008074:	d173      	bne.n	800815e <_dtoa_r+0x6e6>
 8008076:	ec53 2b19 	vmov	r2, r3, d9
 800807a:	4914      	ldr	r1, [pc, #80]	; (80080cc <_dtoa_r+0x654>)
 800807c:	2000      	movs	r0, #0
 800807e:	f7f8 f943 	bl	8000308 <__aeabi_dsub>
 8008082:	4602      	mov	r2, r0
 8008084:	460b      	mov	r3, r1
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fd67 	bl	8000b5c <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f43f af2f 	beq.w	8007ef2 <_dtoa_r+0x47a>
 8008094:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008096:	1e6b      	subs	r3, r5, #1
 8008098:	930f      	str	r3, [sp, #60]	; 0x3c
 800809a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800809e:	2b30      	cmp	r3, #48	; 0x30
 80080a0:	d0f8      	beq.n	8008094 <_dtoa_r+0x61c>
 80080a2:	46bb      	mov	fp, r7
 80080a4:	e04a      	b.n	800813c <_dtoa_r+0x6c4>
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <_dtoa_r+0x648>)
 80080a8:	f7f8 fae6 	bl	8000678 <__aeabi_dmul>
 80080ac:	4680      	mov	r8, r0
 80080ae:	4689      	mov	r9, r1
 80080b0:	e7bd      	b.n	800802e <_dtoa_r+0x5b6>
 80080b2:	bf00      	nop
 80080b4:	08009b88 	.word	0x08009b88
 80080b8:	08009b60 	.word	0x08009b60
 80080bc:	3ff00000 	.word	0x3ff00000
 80080c0:	40240000 	.word	0x40240000
 80080c4:	401c0000 	.word	0x401c0000
 80080c8:	40140000 	.word	0x40140000
 80080cc:	3fe00000 	.word	0x3fe00000
 80080d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080d4:	9d00      	ldr	r5, [sp, #0]
 80080d6:	4642      	mov	r2, r8
 80080d8:	464b      	mov	r3, r9
 80080da:	4630      	mov	r0, r6
 80080dc:	4639      	mov	r1, r7
 80080de:	f7f8 fbf5 	bl	80008cc <__aeabi_ddiv>
 80080e2:	f7f8 fd79 	bl	8000bd8 <__aeabi_d2iz>
 80080e6:	9001      	str	r0, [sp, #4]
 80080e8:	f7f8 fa5c 	bl	80005a4 <__aeabi_i2d>
 80080ec:	4642      	mov	r2, r8
 80080ee:	464b      	mov	r3, r9
 80080f0:	f7f8 fac2 	bl	8000678 <__aeabi_dmul>
 80080f4:	4602      	mov	r2, r0
 80080f6:	460b      	mov	r3, r1
 80080f8:	4630      	mov	r0, r6
 80080fa:	4639      	mov	r1, r7
 80080fc:	f7f8 f904 	bl	8000308 <__aeabi_dsub>
 8008100:	9e01      	ldr	r6, [sp, #4]
 8008102:	9f04      	ldr	r7, [sp, #16]
 8008104:	3630      	adds	r6, #48	; 0x30
 8008106:	f805 6b01 	strb.w	r6, [r5], #1
 800810a:	9e00      	ldr	r6, [sp, #0]
 800810c:	1bae      	subs	r6, r5, r6
 800810e:	42b7      	cmp	r7, r6
 8008110:	4602      	mov	r2, r0
 8008112:	460b      	mov	r3, r1
 8008114:	d134      	bne.n	8008180 <_dtoa_r+0x708>
 8008116:	f7f8 f8f9 	bl	800030c <__adddf3>
 800811a:	4642      	mov	r2, r8
 800811c:	464b      	mov	r3, r9
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	f7f8 fd39 	bl	8000b98 <__aeabi_dcmpgt>
 8008126:	b9c8      	cbnz	r0, 800815c <_dtoa_r+0x6e4>
 8008128:	4642      	mov	r2, r8
 800812a:	464b      	mov	r3, r9
 800812c:	4630      	mov	r0, r6
 800812e:	4639      	mov	r1, r7
 8008130:	f7f8 fd0a 	bl	8000b48 <__aeabi_dcmpeq>
 8008134:	b110      	cbz	r0, 800813c <_dtoa_r+0x6c4>
 8008136:	9b01      	ldr	r3, [sp, #4]
 8008138:	07db      	lsls	r3, r3, #31
 800813a:	d40f      	bmi.n	800815c <_dtoa_r+0x6e4>
 800813c:	4651      	mov	r1, sl
 800813e:	4620      	mov	r0, r4
 8008140:	f000 fc2e 	bl	80089a0 <_Bfree>
 8008144:	2300      	movs	r3, #0
 8008146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008148:	702b      	strb	r3, [r5, #0]
 800814a:	f10b 0301 	add.w	r3, fp, #1
 800814e:	6013      	str	r3, [r2, #0]
 8008150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008152:	2b00      	cmp	r3, #0
 8008154:	f43f ace2 	beq.w	8007b1c <_dtoa_r+0xa4>
 8008158:	601d      	str	r5, [r3, #0]
 800815a:	e4df      	b.n	8007b1c <_dtoa_r+0xa4>
 800815c:	465f      	mov	r7, fp
 800815e:	462b      	mov	r3, r5
 8008160:	461d      	mov	r5, r3
 8008162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008166:	2a39      	cmp	r2, #57	; 0x39
 8008168:	d106      	bne.n	8008178 <_dtoa_r+0x700>
 800816a:	9a00      	ldr	r2, [sp, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d1f7      	bne.n	8008160 <_dtoa_r+0x6e8>
 8008170:	9900      	ldr	r1, [sp, #0]
 8008172:	2230      	movs	r2, #48	; 0x30
 8008174:	3701      	adds	r7, #1
 8008176:	700a      	strb	r2, [r1, #0]
 8008178:	781a      	ldrb	r2, [r3, #0]
 800817a:	3201      	adds	r2, #1
 800817c:	701a      	strb	r2, [r3, #0]
 800817e:	e790      	b.n	80080a2 <_dtoa_r+0x62a>
 8008180:	4ba3      	ldr	r3, [pc, #652]	; (8008410 <_dtoa_r+0x998>)
 8008182:	2200      	movs	r2, #0
 8008184:	f7f8 fa78 	bl	8000678 <__aeabi_dmul>
 8008188:	2200      	movs	r2, #0
 800818a:	2300      	movs	r3, #0
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	f7f8 fcda 	bl	8000b48 <__aeabi_dcmpeq>
 8008194:	2800      	cmp	r0, #0
 8008196:	d09e      	beq.n	80080d6 <_dtoa_r+0x65e>
 8008198:	e7d0      	b.n	800813c <_dtoa_r+0x6c4>
 800819a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800819c:	2a00      	cmp	r2, #0
 800819e:	f000 80ca 	beq.w	8008336 <_dtoa_r+0x8be>
 80081a2:	9a07      	ldr	r2, [sp, #28]
 80081a4:	2a01      	cmp	r2, #1
 80081a6:	f300 80ad 	bgt.w	8008304 <_dtoa_r+0x88c>
 80081aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081ac:	2a00      	cmp	r2, #0
 80081ae:	f000 80a5 	beq.w	80082fc <_dtoa_r+0x884>
 80081b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081b6:	9e08      	ldr	r6, [sp, #32]
 80081b8:	9d05      	ldr	r5, [sp, #20]
 80081ba:	9a05      	ldr	r2, [sp, #20]
 80081bc:	441a      	add	r2, r3
 80081be:	9205      	str	r2, [sp, #20]
 80081c0:	9a06      	ldr	r2, [sp, #24]
 80081c2:	2101      	movs	r1, #1
 80081c4:	441a      	add	r2, r3
 80081c6:	4620      	mov	r0, r4
 80081c8:	9206      	str	r2, [sp, #24]
 80081ca:	f000 fc9f 	bl	8008b0c <__i2b>
 80081ce:	4607      	mov	r7, r0
 80081d0:	b165      	cbz	r5, 80081ec <_dtoa_r+0x774>
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dd09      	ble.n	80081ec <_dtoa_r+0x774>
 80081d8:	42ab      	cmp	r3, r5
 80081da:	9a05      	ldr	r2, [sp, #20]
 80081dc:	bfa8      	it	ge
 80081de:	462b      	movge	r3, r5
 80081e0:	1ad2      	subs	r2, r2, r3
 80081e2:	9205      	str	r2, [sp, #20]
 80081e4:	9a06      	ldr	r2, [sp, #24]
 80081e6:	1aed      	subs	r5, r5, r3
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	9306      	str	r3, [sp, #24]
 80081ec:	9b08      	ldr	r3, [sp, #32]
 80081ee:	b1f3      	cbz	r3, 800822e <_dtoa_r+0x7b6>
 80081f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f000 80a3 	beq.w	800833e <_dtoa_r+0x8c6>
 80081f8:	2e00      	cmp	r6, #0
 80081fa:	dd10      	ble.n	800821e <_dtoa_r+0x7a6>
 80081fc:	4639      	mov	r1, r7
 80081fe:	4632      	mov	r2, r6
 8008200:	4620      	mov	r0, r4
 8008202:	f000 fd43 	bl	8008c8c <__pow5mult>
 8008206:	4652      	mov	r2, sl
 8008208:	4601      	mov	r1, r0
 800820a:	4607      	mov	r7, r0
 800820c:	4620      	mov	r0, r4
 800820e:	f000 fc93 	bl	8008b38 <__multiply>
 8008212:	4651      	mov	r1, sl
 8008214:	4680      	mov	r8, r0
 8008216:	4620      	mov	r0, r4
 8008218:	f000 fbc2 	bl	80089a0 <_Bfree>
 800821c:	46c2      	mov	sl, r8
 800821e:	9b08      	ldr	r3, [sp, #32]
 8008220:	1b9a      	subs	r2, r3, r6
 8008222:	d004      	beq.n	800822e <_dtoa_r+0x7b6>
 8008224:	4651      	mov	r1, sl
 8008226:	4620      	mov	r0, r4
 8008228:	f000 fd30 	bl	8008c8c <__pow5mult>
 800822c:	4682      	mov	sl, r0
 800822e:	2101      	movs	r1, #1
 8008230:	4620      	mov	r0, r4
 8008232:	f000 fc6b 	bl	8008b0c <__i2b>
 8008236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008238:	2b00      	cmp	r3, #0
 800823a:	4606      	mov	r6, r0
 800823c:	f340 8081 	ble.w	8008342 <_dtoa_r+0x8ca>
 8008240:	461a      	mov	r2, r3
 8008242:	4601      	mov	r1, r0
 8008244:	4620      	mov	r0, r4
 8008246:	f000 fd21 	bl	8008c8c <__pow5mult>
 800824a:	9b07      	ldr	r3, [sp, #28]
 800824c:	2b01      	cmp	r3, #1
 800824e:	4606      	mov	r6, r0
 8008250:	dd7a      	ble.n	8008348 <_dtoa_r+0x8d0>
 8008252:	f04f 0800 	mov.w	r8, #0
 8008256:	6933      	ldr	r3, [r6, #16]
 8008258:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800825c:	6918      	ldr	r0, [r3, #16]
 800825e:	f000 fc07 	bl	8008a70 <__hi0bits>
 8008262:	f1c0 0020 	rsb	r0, r0, #32
 8008266:	9b06      	ldr	r3, [sp, #24]
 8008268:	4418      	add	r0, r3
 800826a:	f010 001f 	ands.w	r0, r0, #31
 800826e:	f000 8094 	beq.w	800839a <_dtoa_r+0x922>
 8008272:	f1c0 0320 	rsb	r3, r0, #32
 8008276:	2b04      	cmp	r3, #4
 8008278:	f340 8085 	ble.w	8008386 <_dtoa_r+0x90e>
 800827c:	9b05      	ldr	r3, [sp, #20]
 800827e:	f1c0 001c 	rsb	r0, r0, #28
 8008282:	4403      	add	r3, r0
 8008284:	9305      	str	r3, [sp, #20]
 8008286:	9b06      	ldr	r3, [sp, #24]
 8008288:	4403      	add	r3, r0
 800828a:	4405      	add	r5, r0
 800828c:	9306      	str	r3, [sp, #24]
 800828e:	9b05      	ldr	r3, [sp, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	dd05      	ble.n	80082a0 <_dtoa_r+0x828>
 8008294:	4651      	mov	r1, sl
 8008296:	461a      	mov	r2, r3
 8008298:	4620      	mov	r0, r4
 800829a:	f000 fd51 	bl	8008d40 <__lshift>
 800829e:	4682      	mov	sl, r0
 80082a0:	9b06      	ldr	r3, [sp, #24]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dd05      	ble.n	80082b2 <_dtoa_r+0x83a>
 80082a6:	4631      	mov	r1, r6
 80082a8:	461a      	mov	r2, r3
 80082aa:	4620      	mov	r0, r4
 80082ac:	f000 fd48 	bl	8008d40 <__lshift>
 80082b0:	4606      	mov	r6, r0
 80082b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d072      	beq.n	800839e <_dtoa_r+0x926>
 80082b8:	4631      	mov	r1, r6
 80082ba:	4650      	mov	r0, sl
 80082bc:	f000 fdac 	bl	8008e18 <__mcmp>
 80082c0:	2800      	cmp	r0, #0
 80082c2:	da6c      	bge.n	800839e <_dtoa_r+0x926>
 80082c4:	2300      	movs	r3, #0
 80082c6:	4651      	mov	r1, sl
 80082c8:	220a      	movs	r2, #10
 80082ca:	4620      	mov	r0, r4
 80082cc:	f000 fb8a 	bl	80089e4 <__multadd>
 80082d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80082d6:	4682      	mov	sl, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 81b0 	beq.w	800863e <_dtoa_r+0xbc6>
 80082de:	2300      	movs	r3, #0
 80082e0:	4639      	mov	r1, r7
 80082e2:	220a      	movs	r2, #10
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 fb7d 	bl	80089e4 <__multadd>
 80082ea:	9b01      	ldr	r3, [sp, #4]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	4607      	mov	r7, r0
 80082f0:	f300 8096 	bgt.w	8008420 <_dtoa_r+0x9a8>
 80082f4:	9b07      	ldr	r3, [sp, #28]
 80082f6:	2b02      	cmp	r3, #2
 80082f8:	dc59      	bgt.n	80083ae <_dtoa_r+0x936>
 80082fa:	e091      	b.n	8008420 <_dtoa_r+0x9a8>
 80082fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80082fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008302:	e758      	b.n	80081b6 <_dtoa_r+0x73e>
 8008304:	9b04      	ldr	r3, [sp, #16]
 8008306:	1e5e      	subs	r6, r3, #1
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	42b3      	cmp	r3, r6
 800830c:	bfbf      	itttt	lt
 800830e:	9b08      	ldrlt	r3, [sp, #32]
 8008310:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008312:	9608      	strlt	r6, [sp, #32]
 8008314:	1af3      	sublt	r3, r6, r3
 8008316:	bfb4      	ite	lt
 8008318:	18d2      	addlt	r2, r2, r3
 800831a:	1b9e      	subge	r6, r3, r6
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	bfbc      	itt	lt
 8008320:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008322:	2600      	movlt	r6, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	bfb7      	itett	lt
 8008328:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800832c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008330:	1a9d      	sublt	r5, r3, r2
 8008332:	2300      	movlt	r3, #0
 8008334:	e741      	b.n	80081ba <_dtoa_r+0x742>
 8008336:	9e08      	ldr	r6, [sp, #32]
 8008338:	9d05      	ldr	r5, [sp, #20]
 800833a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800833c:	e748      	b.n	80081d0 <_dtoa_r+0x758>
 800833e:	9a08      	ldr	r2, [sp, #32]
 8008340:	e770      	b.n	8008224 <_dtoa_r+0x7ac>
 8008342:	9b07      	ldr	r3, [sp, #28]
 8008344:	2b01      	cmp	r3, #1
 8008346:	dc19      	bgt.n	800837c <_dtoa_r+0x904>
 8008348:	9b02      	ldr	r3, [sp, #8]
 800834a:	b9bb      	cbnz	r3, 800837c <_dtoa_r+0x904>
 800834c:	9b03      	ldr	r3, [sp, #12]
 800834e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008352:	b99b      	cbnz	r3, 800837c <_dtoa_r+0x904>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800835a:	0d1b      	lsrs	r3, r3, #20
 800835c:	051b      	lsls	r3, r3, #20
 800835e:	b183      	cbz	r3, 8008382 <_dtoa_r+0x90a>
 8008360:	9b05      	ldr	r3, [sp, #20]
 8008362:	3301      	adds	r3, #1
 8008364:	9305      	str	r3, [sp, #20]
 8008366:	9b06      	ldr	r3, [sp, #24]
 8008368:	3301      	adds	r3, #1
 800836a:	9306      	str	r3, [sp, #24]
 800836c:	f04f 0801 	mov.w	r8, #1
 8008370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008372:	2b00      	cmp	r3, #0
 8008374:	f47f af6f 	bne.w	8008256 <_dtoa_r+0x7de>
 8008378:	2001      	movs	r0, #1
 800837a:	e774      	b.n	8008266 <_dtoa_r+0x7ee>
 800837c:	f04f 0800 	mov.w	r8, #0
 8008380:	e7f6      	b.n	8008370 <_dtoa_r+0x8f8>
 8008382:	4698      	mov	r8, r3
 8008384:	e7f4      	b.n	8008370 <_dtoa_r+0x8f8>
 8008386:	d082      	beq.n	800828e <_dtoa_r+0x816>
 8008388:	9a05      	ldr	r2, [sp, #20]
 800838a:	331c      	adds	r3, #28
 800838c:	441a      	add	r2, r3
 800838e:	9205      	str	r2, [sp, #20]
 8008390:	9a06      	ldr	r2, [sp, #24]
 8008392:	441a      	add	r2, r3
 8008394:	441d      	add	r5, r3
 8008396:	9206      	str	r2, [sp, #24]
 8008398:	e779      	b.n	800828e <_dtoa_r+0x816>
 800839a:	4603      	mov	r3, r0
 800839c:	e7f4      	b.n	8008388 <_dtoa_r+0x910>
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	dc37      	bgt.n	8008414 <_dtoa_r+0x99c>
 80083a4:	9b07      	ldr	r3, [sp, #28]
 80083a6:	2b02      	cmp	r3, #2
 80083a8:	dd34      	ble.n	8008414 <_dtoa_r+0x99c>
 80083aa:	9b04      	ldr	r3, [sp, #16]
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	b963      	cbnz	r3, 80083cc <_dtoa_r+0x954>
 80083b2:	4631      	mov	r1, r6
 80083b4:	2205      	movs	r2, #5
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 fb14 	bl	80089e4 <__multadd>
 80083bc:	4601      	mov	r1, r0
 80083be:	4606      	mov	r6, r0
 80083c0:	4650      	mov	r0, sl
 80083c2:	f000 fd29 	bl	8008e18 <__mcmp>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f73f adbb 	bgt.w	8007f42 <_dtoa_r+0x4ca>
 80083cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ce:	9d00      	ldr	r5, [sp, #0]
 80083d0:	ea6f 0b03 	mvn.w	fp, r3
 80083d4:	f04f 0800 	mov.w	r8, #0
 80083d8:	4631      	mov	r1, r6
 80083da:	4620      	mov	r0, r4
 80083dc:	f000 fae0 	bl	80089a0 <_Bfree>
 80083e0:	2f00      	cmp	r7, #0
 80083e2:	f43f aeab 	beq.w	800813c <_dtoa_r+0x6c4>
 80083e6:	f1b8 0f00 	cmp.w	r8, #0
 80083ea:	d005      	beq.n	80083f8 <_dtoa_r+0x980>
 80083ec:	45b8      	cmp	r8, r7
 80083ee:	d003      	beq.n	80083f8 <_dtoa_r+0x980>
 80083f0:	4641      	mov	r1, r8
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 fad4 	bl	80089a0 <_Bfree>
 80083f8:	4639      	mov	r1, r7
 80083fa:	4620      	mov	r0, r4
 80083fc:	f000 fad0 	bl	80089a0 <_Bfree>
 8008400:	e69c      	b.n	800813c <_dtoa_r+0x6c4>
 8008402:	2600      	movs	r6, #0
 8008404:	4637      	mov	r7, r6
 8008406:	e7e1      	b.n	80083cc <_dtoa_r+0x954>
 8008408:	46bb      	mov	fp, r7
 800840a:	4637      	mov	r7, r6
 800840c:	e599      	b.n	8007f42 <_dtoa_r+0x4ca>
 800840e:	bf00      	nop
 8008410:	40240000 	.word	0x40240000
 8008414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80c8 	beq.w	80085ac <_dtoa_r+0xb34>
 800841c:	9b04      	ldr	r3, [sp, #16]
 800841e:	9301      	str	r3, [sp, #4]
 8008420:	2d00      	cmp	r5, #0
 8008422:	dd05      	ble.n	8008430 <_dtoa_r+0x9b8>
 8008424:	4639      	mov	r1, r7
 8008426:	462a      	mov	r2, r5
 8008428:	4620      	mov	r0, r4
 800842a:	f000 fc89 	bl	8008d40 <__lshift>
 800842e:	4607      	mov	r7, r0
 8008430:	f1b8 0f00 	cmp.w	r8, #0
 8008434:	d05b      	beq.n	80084ee <_dtoa_r+0xa76>
 8008436:	6879      	ldr	r1, [r7, #4]
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fa71 	bl	8008920 <_Balloc>
 800843e:	4605      	mov	r5, r0
 8008440:	b928      	cbnz	r0, 800844e <_dtoa_r+0x9d6>
 8008442:	4b83      	ldr	r3, [pc, #524]	; (8008650 <_dtoa_r+0xbd8>)
 8008444:	4602      	mov	r2, r0
 8008446:	f240 21ef 	movw	r1, #751	; 0x2ef
 800844a:	f7ff bb2e 	b.w	8007aaa <_dtoa_r+0x32>
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	3202      	adds	r2, #2
 8008452:	0092      	lsls	r2, r2, #2
 8008454:	f107 010c 	add.w	r1, r7, #12
 8008458:	300c      	adds	r0, #12
 800845a:	f7ff fa76 	bl	800794a <memcpy>
 800845e:	2201      	movs	r2, #1
 8008460:	4629      	mov	r1, r5
 8008462:	4620      	mov	r0, r4
 8008464:	f000 fc6c 	bl	8008d40 <__lshift>
 8008468:	9b00      	ldr	r3, [sp, #0]
 800846a:	3301      	adds	r3, #1
 800846c:	9304      	str	r3, [sp, #16]
 800846e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008472:	4413      	add	r3, r2
 8008474:	9308      	str	r3, [sp, #32]
 8008476:	9b02      	ldr	r3, [sp, #8]
 8008478:	f003 0301 	and.w	r3, r3, #1
 800847c:	46b8      	mov	r8, r7
 800847e:	9306      	str	r3, [sp, #24]
 8008480:	4607      	mov	r7, r0
 8008482:	9b04      	ldr	r3, [sp, #16]
 8008484:	4631      	mov	r1, r6
 8008486:	3b01      	subs	r3, #1
 8008488:	4650      	mov	r0, sl
 800848a:	9301      	str	r3, [sp, #4]
 800848c:	f7ff fa6b 	bl	8007966 <quorem>
 8008490:	4641      	mov	r1, r8
 8008492:	9002      	str	r0, [sp, #8]
 8008494:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008498:	4650      	mov	r0, sl
 800849a:	f000 fcbd 	bl	8008e18 <__mcmp>
 800849e:	463a      	mov	r2, r7
 80084a0:	9005      	str	r0, [sp, #20]
 80084a2:	4631      	mov	r1, r6
 80084a4:	4620      	mov	r0, r4
 80084a6:	f000 fcd3 	bl	8008e50 <__mdiff>
 80084aa:	68c2      	ldr	r2, [r0, #12]
 80084ac:	4605      	mov	r5, r0
 80084ae:	bb02      	cbnz	r2, 80084f2 <_dtoa_r+0xa7a>
 80084b0:	4601      	mov	r1, r0
 80084b2:	4650      	mov	r0, sl
 80084b4:	f000 fcb0 	bl	8008e18 <__mcmp>
 80084b8:	4602      	mov	r2, r0
 80084ba:	4629      	mov	r1, r5
 80084bc:	4620      	mov	r0, r4
 80084be:	9209      	str	r2, [sp, #36]	; 0x24
 80084c0:	f000 fa6e 	bl	80089a0 <_Bfree>
 80084c4:	9b07      	ldr	r3, [sp, #28]
 80084c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c8:	9d04      	ldr	r5, [sp, #16]
 80084ca:	ea43 0102 	orr.w	r1, r3, r2
 80084ce:	9b06      	ldr	r3, [sp, #24]
 80084d0:	4319      	orrs	r1, r3
 80084d2:	d110      	bne.n	80084f6 <_dtoa_r+0xa7e>
 80084d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084d8:	d029      	beq.n	800852e <_dtoa_r+0xab6>
 80084da:	9b05      	ldr	r3, [sp, #20]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dd02      	ble.n	80084e6 <_dtoa_r+0xa6e>
 80084e0:	9b02      	ldr	r3, [sp, #8]
 80084e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084e6:	9b01      	ldr	r3, [sp, #4]
 80084e8:	f883 9000 	strb.w	r9, [r3]
 80084ec:	e774      	b.n	80083d8 <_dtoa_r+0x960>
 80084ee:	4638      	mov	r0, r7
 80084f0:	e7ba      	b.n	8008468 <_dtoa_r+0x9f0>
 80084f2:	2201      	movs	r2, #1
 80084f4:	e7e1      	b.n	80084ba <_dtoa_r+0xa42>
 80084f6:	9b05      	ldr	r3, [sp, #20]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	db04      	blt.n	8008506 <_dtoa_r+0xa8e>
 80084fc:	9907      	ldr	r1, [sp, #28]
 80084fe:	430b      	orrs	r3, r1
 8008500:	9906      	ldr	r1, [sp, #24]
 8008502:	430b      	orrs	r3, r1
 8008504:	d120      	bne.n	8008548 <_dtoa_r+0xad0>
 8008506:	2a00      	cmp	r2, #0
 8008508:	dded      	ble.n	80084e6 <_dtoa_r+0xa6e>
 800850a:	4651      	mov	r1, sl
 800850c:	2201      	movs	r2, #1
 800850e:	4620      	mov	r0, r4
 8008510:	f000 fc16 	bl	8008d40 <__lshift>
 8008514:	4631      	mov	r1, r6
 8008516:	4682      	mov	sl, r0
 8008518:	f000 fc7e 	bl	8008e18 <__mcmp>
 800851c:	2800      	cmp	r0, #0
 800851e:	dc03      	bgt.n	8008528 <_dtoa_r+0xab0>
 8008520:	d1e1      	bne.n	80084e6 <_dtoa_r+0xa6e>
 8008522:	f019 0f01 	tst.w	r9, #1
 8008526:	d0de      	beq.n	80084e6 <_dtoa_r+0xa6e>
 8008528:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800852c:	d1d8      	bne.n	80084e0 <_dtoa_r+0xa68>
 800852e:	9a01      	ldr	r2, [sp, #4]
 8008530:	2339      	movs	r3, #57	; 0x39
 8008532:	7013      	strb	r3, [r2, #0]
 8008534:	462b      	mov	r3, r5
 8008536:	461d      	mov	r5, r3
 8008538:	3b01      	subs	r3, #1
 800853a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800853e:	2a39      	cmp	r2, #57	; 0x39
 8008540:	d06c      	beq.n	800861c <_dtoa_r+0xba4>
 8008542:	3201      	adds	r2, #1
 8008544:	701a      	strb	r2, [r3, #0]
 8008546:	e747      	b.n	80083d8 <_dtoa_r+0x960>
 8008548:	2a00      	cmp	r2, #0
 800854a:	dd07      	ble.n	800855c <_dtoa_r+0xae4>
 800854c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008550:	d0ed      	beq.n	800852e <_dtoa_r+0xab6>
 8008552:	9a01      	ldr	r2, [sp, #4]
 8008554:	f109 0301 	add.w	r3, r9, #1
 8008558:	7013      	strb	r3, [r2, #0]
 800855a:	e73d      	b.n	80083d8 <_dtoa_r+0x960>
 800855c:	9b04      	ldr	r3, [sp, #16]
 800855e:	9a08      	ldr	r2, [sp, #32]
 8008560:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008564:	4293      	cmp	r3, r2
 8008566:	d043      	beq.n	80085f0 <_dtoa_r+0xb78>
 8008568:	4651      	mov	r1, sl
 800856a:	2300      	movs	r3, #0
 800856c:	220a      	movs	r2, #10
 800856e:	4620      	mov	r0, r4
 8008570:	f000 fa38 	bl	80089e4 <__multadd>
 8008574:	45b8      	cmp	r8, r7
 8008576:	4682      	mov	sl, r0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	f04f 020a 	mov.w	r2, #10
 8008580:	4641      	mov	r1, r8
 8008582:	4620      	mov	r0, r4
 8008584:	d107      	bne.n	8008596 <_dtoa_r+0xb1e>
 8008586:	f000 fa2d 	bl	80089e4 <__multadd>
 800858a:	4680      	mov	r8, r0
 800858c:	4607      	mov	r7, r0
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	e775      	b.n	8008482 <_dtoa_r+0xa0a>
 8008596:	f000 fa25 	bl	80089e4 <__multadd>
 800859a:	4639      	mov	r1, r7
 800859c:	4680      	mov	r8, r0
 800859e:	2300      	movs	r3, #0
 80085a0:	220a      	movs	r2, #10
 80085a2:	4620      	mov	r0, r4
 80085a4:	f000 fa1e 	bl	80089e4 <__multadd>
 80085a8:	4607      	mov	r7, r0
 80085aa:	e7f0      	b.n	800858e <_dtoa_r+0xb16>
 80085ac:	9b04      	ldr	r3, [sp, #16]
 80085ae:	9301      	str	r3, [sp, #4]
 80085b0:	9d00      	ldr	r5, [sp, #0]
 80085b2:	4631      	mov	r1, r6
 80085b4:	4650      	mov	r0, sl
 80085b6:	f7ff f9d6 	bl	8007966 <quorem>
 80085ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085be:	9b00      	ldr	r3, [sp, #0]
 80085c0:	f805 9b01 	strb.w	r9, [r5], #1
 80085c4:	1aea      	subs	r2, r5, r3
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	4293      	cmp	r3, r2
 80085ca:	dd07      	ble.n	80085dc <_dtoa_r+0xb64>
 80085cc:	4651      	mov	r1, sl
 80085ce:	2300      	movs	r3, #0
 80085d0:	220a      	movs	r2, #10
 80085d2:	4620      	mov	r0, r4
 80085d4:	f000 fa06 	bl	80089e4 <__multadd>
 80085d8:	4682      	mov	sl, r0
 80085da:	e7ea      	b.n	80085b2 <_dtoa_r+0xb3a>
 80085dc:	9b01      	ldr	r3, [sp, #4]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	bfc8      	it	gt
 80085e2:	461d      	movgt	r5, r3
 80085e4:	9b00      	ldr	r3, [sp, #0]
 80085e6:	bfd8      	it	le
 80085e8:	2501      	movle	r5, #1
 80085ea:	441d      	add	r5, r3
 80085ec:	f04f 0800 	mov.w	r8, #0
 80085f0:	4651      	mov	r1, sl
 80085f2:	2201      	movs	r2, #1
 80085f4:	4620      	mov	r0, r4
 80085f6:	f000 fba3 	bl	8008d40 <__lshift>
 80085fa:	4631      	mov	r1, r6
 80085fc:	4682      	mov	sl, r0
 80085fe:	f000 fc0b 	bl	8008e18 <__mcmp>
 8008602:	2800      	cmp	r0, #0
 8008604:	dc96      	bgt.n	8008534 <_dtoa_r+0xabc>
 8008606:	d102      	bne.n	800860e <_dtoa_r+0xb96>
 8008608:	f019 0f01 	tst.w	r9, #1
 800860c:	d192      	bne.n	8008534 <_dtoa_r+0xabc>
 800860e:	462b      	mov	r3, r5
 8008610:	461d      	mov	r5, r3
 8008612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008616:	2a30      	cmp	r2, #48	; 0x30
 8008618:	d0fa      	beq.n	8008610 <_dtoa_r+0xb98>
 800861a:	e6dd      	b.n	80083d8 <_dtoa_r+0x960>
 800861c:	9a00      	ldr	r2, [sp, #0]
 800861e:	429a      	cmp	r2, r3
 8008620:	d189      	bne.n	8008536 <_dtoa_r+0xabe>
 8008622:	f10b 0b01 	add.w	fp, fp, #1
 8008626:	2331      	movs	r3, #49	; 0x31
 8008628:	e796      	b.n	8008558 <_dtoa_r+0xae0>
 800862a:	4b0a      	ldr	r3, [pc, #40]	; (8008654 <_dtoa_r+0xbdc>)
 800862c:	f7ff ba99 	b.w	8007b62 <_dtoa_r+0xea>
 8008630:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008632:	2b00      	cmp	r3, #0
 8008634:	f47f aa6d 	bne.w	8007b12 <_dtoa_r+0x9a>
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <_dtoa_r+0xbe0>)
 800863a:	f7ff ba92 	b.w	8007b62 <_dtoa_r+0xea>
 800863e:	9b01      	ldr	r3, [sp, #4]
 8008640:	2b00      	cmp	r3, #0
 8008642:	dcb5      	bgt.n	80085b0 <_dtoa_r+0xb38>
 8008644:	9b07      	ldr	r3, [sp, #28]
 8008646:	2b02      	cmp	r3, #2
 8008648:	f73f aeb1 	bgt.w	80083ae <_dtoa_r+0x936>
 800864c:	e7b0      	b.n	80085b0 <_dtoa_r+0xb38>
 800864e:	bf00      	nop
 8008650:	08009af4 	.word	0x08009af4
 8008654:	08009a54 	.word	0x08009a54
 8008658:	08009a78 	.word	0x08009a78

0800865c <malloc>:
 800865c:	4b02      	ldr	r3, [pc, #8]	; (8008668 <malloc+0xc>)
 800865e:	4601      	mov	r1, r0
 8008660:	6818      	ldr	r0, [r3, #0]
 8008662:	f000 b823 	b.w	80086ac <_malloc_r>
 8008666:	bf00      	nop
 8008668:	20000064 	.word	0x20000064

0800866c <sbrk_aligned>:
 800866c:	b570      	push	{r4, r5, r6, lr}
 800866e:	4e0e      	ldr	r6, [pc, #56]	; (80086a8 <sbrk_aligned+0x3c>)
 8008670:	460c      	mov	r4, r1
 8008672:	6831      	ldr	r1, [r6, #0]
 8008674:	4605      	mov	r5, r0
 8008676:	b911      	cbnz	r1, 800867e <sbrk_aligned+0x12>
 8008678:	f000 fd46 	bl	8009108 <_sbrk_r>
 800867c:	6030      	str	r0, [r6, #0]
 800867e:	4621      	mov	r1, r4
 8008680:	4628      	mov	r0, r5
 8008682:	f000 fd41 	bl	8009108 <_sbrk_r>
 8008686:	1c43      	adds	r3, r0, #1
 8008688:	d00a      	beq.n	80086a0 <sbrk_aligned+0x34>
 800868a:	1cc4      	adds	r4, r0, #3
 800868c:	f024 0403 	bic.w	r4, r4, #3
 8008690:	42a0      	cmp	r0, r4
 8008692:	d007      	beq.n	80086a4 <sbrk_aligned+0x38>
 8008694:	1a21      	subs	r1, r4, r0
 8008696:	4628      	mov	r0, r5
 8008698:	f000 fd36 	bl	8009108 <_sbrk_r>
 800869c:	3001      	adds	r0, #1
 800869e:	d101      	bne.n	80086a4 <sbrk_aligned+0x38>
 80086a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086a4:	4620      	mov	r0, r4
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	20000814 	.word	0x20000814

080086ac <_malloc_r>:
 80086ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086b0:	1ccd      	adds	r5, r1, #3
 80086b2:	f025 0503 	bic.w	r5, r5, #3
 80086b6:	3508      	adds	r5, #8
 80086b8:	2d0c      	cmp	r5, #12
 80086ba:	bf38      	it	cc
 80086bc:	250c      	movcc	r5, #12
 80086be:	2d00      	cmp	r5, #0
 80086c0:	4607      	mov	r7, r0
 80086c2:	db01      	blt.n	80086c8 <_malloc_r+0x1c>
 80086c4:	42a9      	cmp	r1, r5
 80086c6:	d905      	bls.n	80086d4 <_malloc_r+0x28>
 80086c8:	230c      	movs	r3, #12
 80086ca:	603b      	str	r3, [r7, #0]
 80086cc:	2600      	movs	r6, #0
 80086ce:	4630      	mov	r0, r6
 80086d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087a8 <_malloc_r+0xfc>
 80086d8:	f000 f916 	bl	8008908 <__malloc_lock>
 80086dc:	f8d8 3000 	ldr.w	r3, [r8]
 80086e0:	461c      	mov	r4, r3
 80086e2:	bb5c      	cbnz	r4, 800873c <_malloc_r+0x90>
 80086e4:	4629      	mov	r1, r5
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7ff ffc0 	bl	800866c <sbrk_aligned>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	4604      	mov	r4, r0
 80086f0:	d155      	bne.n	800879e <_malloc_r+0xf2>
 80086f2:	f8d8 4000 	ldr.w	r4, [r8]
 80086f6:	4626      	mov	r6, r4
 80086f8:	2e00      	cmp	r6, #0
 80086fa:	d145      	bne.n	8008788 <_malloc_r+0xdc>
 80086fc:	2c00      	cmp	r4, #0
 80086fe:	d048      	beq.n	8008792 <_malloc_r+0xe6>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	4631      	mov	r1, r6
 8008704:	4638      	mov	r0, r7
 8008706:	eb04 0903 	add.w	r9, r4, r3
 800870a:	f000 fcfd 	bl	8009108 <_sbrk_r>
 800870e:	4581      	cmp	r9, r0
 8008710:	d13f      	bne.n	8008792 <_malloc_r+0xe6>
 8008712:	6821      	ldr	r1, [r4, #0]
 8008714:	1a6d      	subs	r5, r5, r1
 8008716:	4629      	mov	r1, r5
 8008718:	4638      	mov	r0, r7
 800871a:	f7ff ffa7 	bl	800866c <sbrk_aligned>
 800871e:	3001      	adds	r0, #1
 8008720:	d037      	beq.n	8008792 <_malloc_r+0xe6>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	442b      	add	r3, r5
 8008726:	6023      	str	r3, [r4, #0]
 8008728:	f8d8 3000 	ldr.w	r3, [r8]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d038      	beq.n	80087a2 <_malloc_r+0xf6>
 8008730:	685a      	ldr	r2, [r3, #4]
 8008732:	42a2      	cmp	r2, r4
 8008734:	d12b      	bne.n	800878e <_malloc_r+0xe2>
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
 800873a:	e00f      	b.n	800875c <_malloc_r+0xb0>
 800873c:	6822      	ldr	r2, [r4, #0]
 800873e:	1b52      	subs	r2, r2, r5
 8008740:	d41f      	bmi.n	8008782 <_malloc_r+0xd6>
 8008742:	2a0b      	cmp	r2, #11
 8008744:	d917      	bls.n	8008776 <_malloc_r+0xca>
 8008746:	1961      	adds	r1, r4, r5
 8008748:	42a3      	cmp	r3, r4
 800874a:	6025      	str	r5, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	6059      	strne	r1, [r3, #4]
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	bf08      	it	eq
 8008754:	f8c8 1000 	streq.w	r1, [r8]
 8008758:	5162      	str	r2, [r4, r5]
 800875a:	604b      	str	r3, [r1, #4]
 800875c:	4638      	mov	r0, r7
 800875e:	f104 060b 	add.w	r6, r4, #11
 8008762:	f000 f8d7 	bl	8008914 <__malloc_unlock>
 8008766:	f026 0607 	bic.w	r6, r6, #7
 800876a:	1d23      	adds	r3, r4, #4
 800876c:	1af2      	subs	r2, r6, r3
 800876e:	d0ae      	beq.n	80086ce <_malloc_r+0x22>
 8008770:	1b9b      	subs	r3, r3, r6
 8008772:	50a3      	str	r3, [r4, r2]
 8008774:	e7ab      	b.n	80086ce <_malloc_r+0x22>
 8008776:	42a3      	cmp	r3, r4
 8008778:	6862      	ldr	r2, [r4, #4]
 800877a:	d1dd      	bne.n	8008738 <_malloc_r+0x8c>
 800877c:	f8c8 2000 	str.w	r2, [r8]
 8008780:	e7ec      	b.n	800875c <_malloc_r+0xb0>
 8008782:	4623      	mov	r3, r4
 8008784:	6864      	ldr	r4, [r4, #4]
 8008786:	e7ac      	b.n	80086e2 <_malloc_r+0x36>
 8008788:	4634      	mov	r4, r6
 800878a:	6876      	ldr	r6, [r6, #4]
 800878c:	e7b4      	b.n	80086f8 <_malloc_r+0x4c>
 800878e:	4613      	mov	r3, r2
 8008790:	e7cc      	b.n	800872c <_malloc_r+0x80>
 8008792:	230c      	movs	r3, #12
 8008794:	603b      	str	r3, [r7, #0]
 8008796:	4638      	mov	r0, r7
 8008798:	f000 f8bc 	bl	8008914 <__malloc_unlock>
 800879c:	e797      	b.n	80086ce <_malloc_r+0x22>
 800879e:	6025      	str	r5, [r4, #0]
 80087a0:	e7dc      	b.n	800875c <_malloc_r+0xb0>
 80087a2:	605b      	str	r3, [r3, #4]
 80087a4:	deff      	udf	#255	; 0xff
 80087a6:	bf00      	nop
 80087a8:	20000810 	.word	0x20000810

080087ac <__sflush_r>:
 80087ac:	898a      	ldrh	r2, [r1, #12]
 80087ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087b2:	4605      	mov	r5, r0
 80087b4:	0710      	lsls	r0, r2, #28
 80087b6:	460c      	mov	r4, r1
 80087b8:	d458      	bmi.n	800886c <__sflush_r+0xc0>
 80087ba:	684b      	ldr	r3, [r1, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dc05      	bgt.n	80087cc <__sflush_r+0x20>
 80087c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	dc02      	bgt.n	80087cc <__sflush_r+0x20>
 80087c6:	2000      	movs	r0, #0
 80087c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087ce:	2e00      	cmp	r6, #0
 80087d0:	d0f9      	beq.n	80087c6 <__sflush_r+0x1a>
 80087d2:	2300      	movs	r3, #0
 80087d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087d8:	682f      	ldr	r7, [r5, #0]
 80087da:	6a21      	ldr	r1, [r4, #32]
 80087dc:	602b      	str	r3, [r5, #0]
 80087de:	d032      	beq.n	8008846 <__sflush_r+0x9a>
 80087e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087e2:	89a3      	ldrh	r3, [r4, #12]
 80087e4:	075a      	lsls	r2, r3, #29
 80087e6:	d505      	bpl.n	80087f4 <__sflush_r+0x48>
 80087e8:	6863      	ldr	r3, [r4, #4]
 80087ea:	1ac0      	subs	r0, r0, r3
 80087ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80087ee:	b10b      	cbz	r3, 80087f4 <__sflush_r+0x48>
 80087f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087f2:	1ac0      	subs	r0, r0, r3
 80087f4:	2300      	movs	r3, #0
 80087f6:	4602      	mov	r2, r0
 80087f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087fa:	6a21      	ldr	r1, [r4, #32]
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b0      	blx	r6
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	d106      	bne.n	8008814 <__sflush_r+0x68>
 8008806:	6829      	ldr	r1, [r5, #0]
 8008808:	291d      	cmp	r1, #29
 800880a:	d82b      	bhi.n	8008864 <__sflush_r+0xb8>
 800880c:	4a29      	ldr	r2, [pc, #164]	; (80088b4 <__sflush_r+0x108>)
 800880e:	410a      	asrs	r2, r1
 8008810:	07d6      	lsls	r6, r2, #31
 8008812:	d427      	bmi.n	8008864 <__sflush_r+0xb8>
 8008814:	2200      	movs	r2, #0
 8008816:	6062      	str	r2, [r4, #4]
 8008818:	04d9      	lsls	r1, r3, #19
 800881a:	6922      	ldr	r2, [r4, #16]
 800881c:	6022      	str	r2, [r4, #0]
 800881e:	d504      	bpl.n	800882a <__sflush_r+0x7e>
 8008820:	1c42      	adds	r2, r0, #1
 8008822:	d101      	bne.n	8008828 <__sflush_r+0x7c>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b903      	cbnz	r3, 800882a <__sflush_r+0x7e>
 8008828:	6560      	str	r0, [r4, #84]	; 0x54
 800882a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800882c:	602f      	str	r7, [r5, #0]
 800882e:	2900      	cmp	r1, #0
 8008830:	d0c9      	beq.n	80087c6 <__sflush_r+0x1a>
 8008832:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008836:	4299      	cmp	r1, r3
 8008838:	d002      	beq.n	8008840 <__sflush_r+0x94>
 800883a:	4628      	mov	r0, r5
 800883c:	f000 fcba 	bl	80091b4 <_free_r>
 8008840:	2000      	movs	r0, #0
 8008842:	6360      	str	r0, [r4, #52]	; 0x34
 8008844:	e7c0      	b.n	80087c8 <__sflush_r+0x1c>
 8008846:	2301      	movs	r3, #1
 8008848:	4628      	mov	r0, r5
 800884a:	47b0      	blx	r6
 800884c:	1c41      	adds	r1, r0, #1
 800884e:	d1c8      	bne.n	80087e2 <__sflush_r+0x36>
 8008850:	682b      	ldr	r3, [r5, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d0c5      	beq.n	80087e2 <__sflush_r+0x36>
 8008856:	2b1d      	cmp	r3, #29
 8008858:	d001      	beq.n	800885e <__sflush_r+0xb2>
 800885a:	2b16      	cmp	r3, #22
 800885c:	d101      	bne.n	8008862 <__sflush_r+0xb6>
 800885e:	602f      	str	r7, [r5, #0]
 8008860:	e7b1      	b.n	80087c6 <__sflush_r+0x1a>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008868:	81a3      	strh	r3, [r4, #12]
 800886a:	e7ad      	b.n	80087c8 <__sflush_r+0x1c>
 800886c:	690f      	ldr	r7, [r1, #16]
 800886e:	2f00      	cmp	r7, #0
 8008870:	d0a9      	beq.n	80087c6 <__sflush_r+0x1a>
 8008872:	0793      	lsls	r3, r2, #30
 8008874:	680e      	ldr	r6, [r1, #0]
 8008876:	bf08      	it	eq
 8008878:	694b      	ldreq	r3, [r1, #20]
 800887a:	600f      	str	r7, [r1, #0]
 800887c:	bf18      	it	ne
 800887e:	2300      	movne	r3, #0
 8008880:	eba6 0807 	sub.w	r8, r6, r7
 8008884:	608b      	str	r3, [r1, #8]
 8008886:	f1b8 0f00 	cmp.w	r8, #0
 800888a:	dd9c      	ble.n	80087c6 <__sflush_r+0x1a>
 800888c:	6a21      	ldr	r1, [r4, #32]
 800888e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008890:	4643      	mov	r3, r8
 8008892:	463a      	mov	r2, r7
 8008894:	4628      	mov	r0, r5
 8008896:	47b0      	blx	r6
 8008898:	2800      	cmp	r0, #0
 800889a:	dc06      	bgt.n	80088aa <__sflush_r+0xfe>
 800889c:	89a3      	ldrh	r3, [r4, #12]
 800889e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088a8:	e78e      	b.n	80087c8 <__sflush_r+0x1c>
 80088aa:	4407      	add	r7, r0
 80088ac:	eba8 0800 	sub.w	r8, r8, r0
 80088b0:	e7e9      	b.n	8008886 <__sflush_r+0xda>
 80088b2:	bf00      	nop
 80088b4:	dfbffffe 	.word	0xdfbffffe

080088b8 <_fflush_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	690b      	ldr	r3, [r1, #16]
 80088bc:	4605      	mov	r5, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	b913      	cbnz	r3, 80088c8 <_fflush_r+0x10>
 80088c2:	2500      	movs	r5, #0
 80088c4:	4628      	mov	r0, r5
 80088c6:	bd38      	pop	{r3, r4, r5, pc}
 80088c8:	b118      	cbz	r0, 80088d2 <_fflush_r+0x1a>
 80088ca:	6a03      	ldr	r3, [r0, #32]
 80088cc:	b90b      	cbnz	r3, 80088d2 <_fflush_r+0x1a>
 80088ce:	f7fe ffcd 	bl	800786c <__sinit>
 80088d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d0f3      	beq.n	80088c2 <_fflush_r+0xa>
 80088da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088dc:	07d0      	lsls	r0, r2, #31
 80088de:	d404      	bmi.n	80088ea <_fflush_r+0x32>
 80088e0:	0599      	lsls	r1, r3, #22
 80088e2:	d402      	bmi.n	80088ea <_fflush_r+0x32>
 80088e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088e6:	f7ff f82e 	bl	8007946 <__retarget_lock_acquire_recursive>
 80088ea:	4628      	mov	r0, r5
 80088ec:	4621      	mov	r1, r4
 80088ee:	f7ff ff5d 	bl	80087ac <__sflush_r>
 80088f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088f4:	07da      	lsls	r2, r3, #31
 80088f6:	4605      	mov	r5, r0
 80088f8:	d4e4      	bmi.n	80088c4 <_fflush_r+0xc>
 80088fa:	89a3      	ldrh	r3, [r4, #12]
 80088fc:	059b      	lsls	r3, r3, #22
 80088fe:	d4e1      	bmi.n	80088c4 <_fflush_r+0xc>
 8008900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008902:	f7ff f821 	bl	8007948 <__retarget_lock_release_recursive>
 8008906:	e7dd      	b.n	80088c4 <_fflush_r+0xc>

08008908 <__malloc_lock>:
 8008908:	4801      	ldr	r0, [pc, #4]	; (8008910 <__malloc_lock+0x8>)
 800890a:	f7ff b81c 	b.w	8007946 <__retarget_lock_acquire_recursive>
 800890e:	bf00      	nop
 8008910:	2000080c 	.word	0x2000080c

08008914 <__malloc_unlock>:
 8008914:	4801      	ldr	r0, [pc, #4]	; (800891c <__malloc_unlock+0x8>)
 8008916:	f7ff b817 	b.w	8007948 <__retarget_lock_release_recursive>
 800891a:	bf00      	nop
 800891c:	2000080c 	.word	0x2000080c

08008920 <_Balloc>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	69c6      	ldr	r6, [r0, #28]
 8008924:	4604      	mov	r4, r0
 8008926:	460d      	mov	r5, r1
 8008928:	b976      	cbnz	r6, 8008948 <_Balloc+0x28>
 800892a:	2010      	movs	r0, #16
 800892c:	f7ff fe96 	bl	800865c <malloc>
 8008930:	4602      	mov	r2, r0
 8008932:	61e0      	str	r0, [r4, #28]
 8008934:	b920      	cbnz	r0, 8008940 <_Balloc+0x20>
 8008936:	4b18      	ldr	r3, [pc, #96]	; (8008998 <_Balloc+0x78>)
 8008938:	4818      	ldr	r0, [pc, #96]	; (800899c <_Balloc+0x7c>)
 800893a:	216b      	movs	r1, #107	; 0x6b
 800893c:	f000 fc06 	bl	800914c <__assert_func>
 8008940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008944:	6006      	str	r6, [r0, #0]
 8008946:	60c6      	str	r6, [r0, #12]
 8008948:	69e6      	ldr	r6, [r4, #28]
 800894a:	68f3      	ldr	r3, [r6, #12]
 800894c:	b183      	cbz	r3, 8008970 <_Balloc+0x50>
 800894e:	69e3      	ldr	r3, [r4, #28]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008956:	b9b8      	cbnz	r0, 8008988 <_Balloc+0x68>
 8008958:	2101      	movs	r1, #1
 800895a:	fa01 f605 	lsl.w	r6, r1, r5
 800895e:	1d72      	adds	r2, r6, #5
 8008960:	0092      	lsls	r2, r2, #2
 8008962:	4620      	mov	r0, r4
 8008964:	f000 fc10 	bl	8009188 <_calloc_r>
 8008968:	b160      	cbz	r0, 8008984 <_Balloc+0x64>
 800896a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800896e:	e00e      	b.n	800898e <_Balloc+0x6e>
 8008970:	2221      	movs	r2, #33	; 0x21
 8008972:	2104      	movs	r1, #4
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fc07 	bl	8009188 <_calloc_r>
 800897a:	69e3      	ldr	r3, [r4, #28]
 800897c:	60f0      	str	r0, [r6, #12]
 800897e:	68db      	ldr	r3, [r3, #12]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d1e4      	bne.n	800894e <_Balloc+0x2e>
 8008984:	2000      	movs	r0, #0
 8008986:	bd70      	pop	{r4, r5, r6, pc}
 8008988:	6802      	ldr	r2, [r0, #0]
 800898a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800898e:	2300      	movs	r3, #0
 8008990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008994:	e7f7      	b.n	8008986 <_Balloc+0x66>
 8008996:	bf00      	nop
 8008998:	08009a85 	.word	0x08009a85
 800899c:	08009b05 	.word	0x08009b05

080089a0 <_Bfree>:
 80089a0:	b570      	push	{r4, r5, r6, lr}
 80089a2:	69c6      	ldr	r6, [r0, #28]
 80089a4:	4605      	mov	r5, r0
 80089a6:	460c      	mov	r4, r1
 80089a8:	b976      	cbnz	r6, 80089c8 <_Bfree+0x28>
 80089aa:	2010      	movs	r0, #16
 80089ac:	f7ff fe56 	bl	800865c <malloc>
 80089b0:	4602      	mov	r2, r0
 80089b2:	61e8      	str	r0, [r5, #28]
 80089b4:	b920      	cbnz	r0, 80089c0 <_Bfree+0x20>
 80089b6:	4b09      	ldr	r3, [pc, #36]	; (80089dc <_Bfree+0x3c>)
 80089b8:	4809      	ldr	r0, [pc, #36]	; (80089e0 <_Bfree+0x40>)
 80089ba:	218f      	movs	r1, #143	; 0x8f
 80089bc:	f000 fbc6 	bl	800914c <__assert_func>
 80089c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089c4:	6006      	str	r6, [r0, #0]
 80089c6:	60c6      	str	r6, [r0, #12]
 80089c8:	b13c      	cbz	r4, 80089da <_Bfree+0x3a>
 80089ca:	69eb      	ldr	r3, [r5, #28]
 80089cc:	6862      	ldr	r2, [r4, #4]
 80089ce:	68db      	ldr	r3, [r3, #12]
 80089d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089d4:	6021      	str	r1, [r4, #0]
 80089d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089da:	bd70      	pop	{r4, r5, r6, pc}
 80089dc:	08009a85 	.word	0x08009a85
 80089e0:	08009b05 	.word	0x08009b05

080089e4 <__multadd>:
 80089e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089e8:	690d      	ldr	r5, [r1, #16]
 80089ea:	4607      	mov	r7, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	461e      	mov	r6, r3
 80089f0:	f101 0c14 	add.w	ip, r1, #20
 80089f4:	2000      	movs	r0, #0
 80089f6:	f8dc 3000 	ldr.w	r3, [ip]
 80089fa:	b299      	uxth	r1, r3
 80089fc:	fb02 6101 	mla	r1, r2, r1, r6
 8008a00:	0c1e      	lsrs	r6, r3, #16
 8008a02:	0c0b      	lsrs	r3, r1, #16
 8008a04:	fb02 3306 	mla	r3, r2, r6, r3
 8008a08:	b289      	uxth	r1, r1
 8008a0a:	3001      	adds	r0, #1
 8008a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a10:	4285      	cmp	r5, r0
 8008a12:	f84c 1b04 	str.w	r1, [ip], #4
 8008a16:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a1a:	dcec      	bgt.n	80089f6 <__multadd+0x12>
 8008a1c:	b30e      	cbz	r6, 8008a62 <__multadd+0x7e>
 8008a1e:	68a3      	ldr	r3, [r4, #8]
 8008a20:	42ab      	cmp	r3, r5
 8008a22:	dc19      	bgt.n	8008a58 <__multadd+0x74>
 8008a24:	6861      	ldr	r1, [r4, #4]
 8008a26:	4638      	mov	r0, r7
 8008a28:	3101      	adds	r1, #1
 8008a2a:	f7ff ff79 	bl	8008920 <_Balloc>
 8008a2e:	4680      	mov	r8, r0
 8008a30:	b928      	cbnz	r0, 8008a3e <__multadd+0x5a>
 8008a32:	4602      	mov	r2, r0
 8008a34:	4b0c      	ldr	r3, [pc, #48]	; (8008a68 <__multadd+0x84>)
 8008a36:	480d      	ldr	r0, [pc, #52]	; (8008a6c <__multadd+0x88>)
 8008a38:	21ba      	movs	r1, #186	; 0xba
 8008a3a:	f000 fb87 	bl	800914c <__assert_func>
 8008a3e:	6922      	ldr	r2, [r4, #16]
 8008a40:	3202      	adds	r2, #2
 8008a42:	f104 010c 	add.w	r1, r4, #12
 8008a46:	0092      	lsls	r2, r2, #2
 8008a48:	300c      	adds	r0, #12
 8008a4a:	f7fe ff7e 	bl	800794a <memcpy>
 8008a4e:	4621      	mov	r1, r4
 8008a50:	4638      	mov	r0, r7
 8008a52:	f7ff ffa5 	bl	80089a0 <_Bfree>
 8008a56:	4644      	mov	r4, r8
 8008a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	615e      	str	r6, [r3, #20]
 8008a60:	6125      	str	r5, [r4, #16]
 8008a62:	4620      	mov	r0, r4
 8008a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a68:	08009af4 	.word	0x08009af4
 8008a6c:	08009b05 	.word	0x08009b05

08008a70 <__hi0bits>:
 8008a70:	0c03      	lsrs	r3, r0, #16
 8008a72:	041b      	lsls	r3, r3, #16
 8008a74:	b9d3      	cbnz	r3, 8008aac <__hi0bits+0x3c>
 8008a76:	0400      	lsls	r0, r0, #16
 8008a78:	2310      	movs	r3, #16
 8008a7a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a7e:	bf04      	itt	eq
 8008a80:	0200      	lsleq	r0, r0, #8
 8008a82:	3308      	addeq	r3, #8
 8008a84:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a88:	bf04      	itt	eq
 8008a8a:	0100      	lsleq	r0, r0, #4
 8008a8c:	3304      	addeq	r3, #4
 8008a8e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a92:	bf04      	itt	eq
 8008a94:	0080      	lsleq	r0, r0, #2
 8008a96:	3302      	addeq	r3, #2
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	db05      	blt.n	8008aa8 <__hi0bits+0x38>
 8008a9c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008aa0:	f103 0301 	add.w	r3, r3, #1
 8008aa4:	bf08      	it	eq
 8008aa6:	2320      	moveq	r3, #32
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	4770      	bx	lr
 8008aac:	2300      	movs	r3, #0
 8008aae:	e7e4      	b.n	8008a7a <__hi0bits+0xa>

08008ab0 <__lo0bits>:
 8008ab0:	6803      	ldr	r3, [r0, #0]
 8008ab2:	f013 0207 	ands.w	r2, r3, #7
 8008ab6:	d00c      	beq.n	8008ad2 <__lo0bits+0x22>
 8008ab8:	07d9      	lsls	r1, r3, #31
 8008aba:	d422      	bmi.n	8008b02 <__lo0bits+0x52>
 8008abc:	079a      	lsls	r2, r3, #30
 8008abe:	bf49      	itett	mi
 8008ac0:	085b      	lsrmi	r3, r3, #1
 8008ac2:	089b      	lsrpl	r3, r3, #2
 8008ac4:	6003      	strmi	r3, [r0, #0]
 8008ac6:	2201      	movmi	r2, #1
 8008ac8:	bf5c      	itt	pl
 8008aca:	6003      	strpl	r3, [r0, #0]
 8008acc:	2202      	movpl	r2, #2
 8008ace:	4610      	mov	r0, r2
 8008ad0:	4770      	bx	lr
 8008ad2:	b299      	uxth	r1, r3
 8008ad4:	b909      	cbnz	r1, 8008ada <__lo0bits+0x2a>
 8008ad6:	0c1b      	lsrs	r3, r3, #16
 8008ad8:	2210      	movs	r2, #16
 8008ada:	b2d9      	uxtb	r1, r3
 8008adc:	b909      	cbnz	r1, 8008ae2 <__lo0bits+0x32>
 8008ade:	3208      	adds	r2, #8
 8008ae0:	0a1b      	lsrs	r3, r3, #8
 8008ae2:	0719      	lsls	r1, r3, #28
 8008ae4:	bf04      	itt	eq
 8008ae6:	091b      	lsreq	r3, r3, #4
 8008ae8:	3204      	addeq	r2, #4
 8008aea:	0799      	lsls	r1, r3, #30
 8008aec:	bf04      	itt	eq
 8008aee:	089b      	lsreq	r3, r3, #2
 8008af0:	3202      	addeq	r2, #2
 8008af2:	07d9      	lsls	r1, r3, #31
 8008af4:	d403      	bmi.n	8008afe <__lo0bits+0x4e>
 8008af6:	085b      	lsrs	r3, r3, #1
 8008af8:	f102 0201 	add.w	r2, r2, #1
 8008afc:	d003      	beq.n	8008b06 <__lo0bits+0x56>
 8008afe:	6003      	str	r3, [r0, #0]
 8008b00:	e7e5      	b.n	8008ace <__lo0bits+0x1e>
 8008b02:	2200      	movs	r2, #0
 8008b04:	e7e3      	b.n	8008ace <__lo0bits+0x1e>
 8008b06:	2220      	movs	r2, #32
 8008b08:	e7e1      	b.n	8008ace <__lo0bits+0x1e>
	...

08008b0c <__i2b>:
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	460c      	mov	r4, r1
 8008b10:	2101      	movs	r1, #1
 8008b12:	f7ff ff05 	bl	8008920 <_Balloc>
 8008b16:	4602      	mov	r2, r0
 8008b18:	b928      	cbnz	r0, 8008b26 <__i2b+0x1a>
 8008b1a:	4b05      	ldr	r3, [pc, #20]	; (8008b30 <__i2b+0x24>)
 8008b1c:	4805      	ldr	r0, [pc, #20]	; (8008b34 <__i2b+0x28>)
 8008b1e:	f240 1145 	movw	r1, #325	; 0x145
 8008b22:	f000 fb13 	bl	800914c <__assert_func>
 8008b26:	2301      	movs	r3, #1
 8008b28:	6144      	str	r4, [r0, #20]
 8008b2a:	6103      	str	r3, [r0, #16]
 8008b2c:	bd10      	pop	{r4, pc}
 8008b2e:	bf00      	nop
 8008b30:	08009af4 	.word	0x08009af4
 8008b34:	08009b05 	.word	0x08009b05

08008b38 <__multiply>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	4691      	mov	r9, r2
 8008b3e:	690a      	ldr	r2, [r1, #16]
 8008b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b44:	429a      	cmp	r2, r3
 8008b46:	bfb8      	it	lt
 8008b48:	460b      	movlt	r3, r1
 8008b4a:	460c      	mov	r4, r1
 8008b4c:	bfbc      	itt	lt
 8008b4e:	464c      	movlt	r4, r9
 8008b50:	4699      	movlt	r9, r3
 8008b52:	6927      	ldr	r7, [r4, #16]
 8008b54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b58:	68a3      	ldr	r3, [r4, #8]
 8008b5a:	6861      	ldr	r1, [r4, #4]
 8008b5c:	eb07 060a 	add.w	r6, r7, sl
 8008b60:	42b3      	cmp	r3, r6
 8008b62:	b085      	sub	sp, #20
 8008b64:	bfb8      	it	lt
 8008b66:	3101      	addlt	r1, #1
 8008b68:	f7ff feda 	bl	8008920 <_Balloc>
 8008b6c:	b930      	cbnz	r0, 8008b7c <__multiply+0x44>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	4b44      	ldr	r3, [pc, #272]	; (8008c84 <__multiply+0x14c>)
 8008b72:	4845      	ldr	r0, [pc, #276]	; (8008c88 <__multiply+0x150>)
 8008b74:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b78:	f000 fae8 	bl	800914c <__assert_func>
 8008b7c:	f100 0514 	add.w	r5, r0, #20
 8008b80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b84:	462b      	mov	r3, r5
 8008b86:	2200      	movs	r2, #0
 8008b88:	4543      	cmp	r3, r8
 8008b8a:	d321      	bcc.n	8008bd0 <__multiply+0x98>
 8008b8c:	f104 0314 	add.w	r3, r4, #20
 8008b90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b94:	f109 0314 	add.w	r3, r9, #20
 8008b98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b9c:	9202      	str	r2, [sp, #8]
 8008b9e:	1b3a      	subs	r2, r7, r4
 8008ba0:	3a15      	subs	r2, #21
 8008ba2:	f022 0203 	bic.w	r2, r2, #3
 8008ba6:	3204      	adds	r2, #4
 8008ba8:	f104 0115 	add.w	r1, r4, #21
 8008bac:	428f      	cmp	r7, r1
 8008bae:	bf38      	it	cc
 8008bb0:	2204      	movcc	r2, #4
 8008bb2:	9201      	str	r2, [sp, #4]
 8008bb4:	9a02      	ldr	r2, [sp, #8]
 8008bb6:	9303      	str	r3, [sp, #12]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d80c      	bhi.n	8008bd6 <__multiply+0x9e>
 8008bbc:	2e00      	cmp	r6, #0
 8008bbe:	dd03      	ble.n	8008bc8 <__multiply+0x90>
 8008bc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d05b      	beq.n	8008c80 <__multiply+0x148>
 8008bc8:	6106      	str	r6, [r0, #16]
 8008bca:	b005      	add	sp, #20
 8008bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd0:	f843 2b04 	str.w	r2, [r3], #4
 8008bd4:	e7d8      	b.n	8008b88 <__multiply+0x50>
 8008bd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bda:	f1ba 0f00 	cmp.w	sl, #0
 8008bde:	d024      	beq.n	8008c2a <__multiply+0xf2>
 8008be0:	f104 0e14 	add.w	lr, r4, #20
 8008be4:	46a9      	mov	r9, r5
 8008be6:	f04f 0c00 	mov.w	ip, #0
 8008bea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008bee:	f8d9 1000 	ldr.w	r1, [r9]
 8008bf2:	fa1f fb82 	uxth.w	fp, r2
 8008bf6:	b289      	uxth	r1, r1
 8008bf8:	fb0a 110b 	mla	r1, sl, fp, r1
 8008bfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c00:	f8d9 2000 	ldr.w	r2, [r9]
 8008c04:	4461      	add	r1, ip
 8008c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c12:	b289      	uxth	r1, r1
 8008c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c18:	4577      	cmp	r7, lr
 8008c1a:	f849 1b04 	str.w	r1, [r9], #4
 8008c1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c22:	d8e2      	bhi.n	8008bea <__multiply+0xb2>
 8008c24:	9a01      	ldr	r2, [sp, #4]
 8008c26:	f845 c002 	str.w	ip, [r5, r2]
 8008c2a:	9a03      	ldr	r2, [sp, #12]
 8008c2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c30:	3304      	adds	r3, #4
 8008c32:	f1b9 0f00 	cmp.w	r9, #0
 8008c36:	d021      	beq.n	8008c7c <__multiply+0x144>
 8008c38:	6829      	ldr	r1, [r5, #0]
 8008c3a:	f104 0c14 	add.w	ip, r4, #20
 8008c3e:	46ae      	mov	lr, r5
 8008c40:	f04f 0a00 	mov.w	sl, #0
 8008c44:	f8bc b000 	ldrh.w	fp, [ip]
 8008c48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c4c:	fb09 220b 	mla	r2, r9, fp, r2
 8008c50:	4452      	add	r2, sl
 8008c52:	b289      	uxth	r1, r1
 8008c54:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c58:	f84e 1b04 	str.w	r1, [lr], #4
 8008c5c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c60:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c64:	f8be 1000 	ldrh.w	r1, [lr]
 8008c68:	fb09 110a 	mla	r1, r9, sl, r1
 8008c6c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008c70:	4567      	cmp	r7, ip
 8008c72:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c76:	d8e5      	bhi.n	8008c44 <__multiply+0x10c>
 8008c78:	9a01      	ldr	r2, [sp, #4]
 8008c7a:	50a9      	str	r1, [r5, r2]
 8008c7c:	3504      	adds	r5, #4
 8008c7e:	e799      	b.n	8008bb4 <__multiply+0x7c>
 8008c80:	3e01      	subs	r6, #1
 8008c82:	e79b      	b.n	8008bbc <__multiply+0x84>
 8008c84:	08009af4 	.word	0x08009af4
 8008c88:	08009b05 	.word	0x08009b05

08008c8c <__pow5mult>:
 8008c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c90:	4615      	mov	r5, r2
 8008c92:	f012 0203 	ands.w	r2, r2, #3
 8008c96:	4606      	mov	r6, r0
 8008c98:	460f      	mov	r7, r1
 8008c9a:	d007      	beq.n	8008cac <__pow5mult+0x20>
 8008c9c:	4c25      	ldr	r4, [pc, #148]	; (8008d34 <__pow5mult+0xa8>)
 8008c9e:	3a01      	subs	r2, #1
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ca6:	f7ff fe9d 	bl	80089e4 <__multadd>
 8008caa:	4607      	mov	r7, r0
 8008cac:	10ad      	asrs	r5, r5, #2
 8008cae:	d03d      	beq.n	8008d2c <__pow5mult+0xa0>
 8008cb0:	69f4      	ldr	r4, [r6, #28]
 8008cb2:	b97c      	cbnz	r4, 8008cd4 <__pow5mult+0x48>
 8008cb4:	2010      	movs	r0, #16
 8008cb6:	f7ff fcd1 	bl	800865c <malloc>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	61f0      	str	r0, [r6, #28]
 8008cbe:	b928      	cbnz	r0, 8008ccc <__pow5mult+0x40>
 8008cc0:	4b1d      	ldr	r3, [pc, #116]	; (8008d38 <__pow5mult+0xac>)
 8008cc2:	481e      	ldr	r0, [pc, #120]	; (8008d3c <__pow5mult+0xb0>)
 8008cc4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008cc8:	f000 fa40 	bl	800914c <__assert_func>
 8008ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008cd0:	6004      	str	r4, [r0, #0]
 8008cd2:	60c4      	str	r4, [r0, #12]
 8008cd4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cdc:	b94c      	cbnz	r4, 8008cf2 <__pow5mult+0x66>
 8008cde:	f240 2171 	movw	r1, #625	; 0x271
 8008ce2:	4630      	mov	r0, r6
 8008ce4:	f7ff ff12 	bl	8008b0c <__i2b>
 8008ce8:	2300      	movs	r3, #0
 8008cea:	f8c8 0008 	str.w	r0, [r8, #8]
 8008cee:	4604      	mov	r4, r0
 8008cf0:	6003      	str	r3, [r0, #0]
 8008cf2:	f04f 0900 	mov.w	r9, #0
 8008cf6:	07eb      	lsls	r3, r5, #31
 8008cf8:	d50a      	bpl.n	8008d10 <__pow5mult+0x84>
 8008cfa:	4639      	mov	r1, r7
 8008cfc:	4622      	mov	r2, r4
 8008cfe:	4630      	mov	r0, r6
 8008d00:	f7ff ff1a 	bl	8008b38 <__multiply>
 8008d04:	4639      	mov	r1, r7
 8008d06:	4680      	mov	r8, r0
 8008d08:	4630      	mov	r0, r6
 8008d0a:	f7ff fe49 	bl	80089a0 <_Bfree>
 8008d0e:	4647      	mov	r7, r8
 8008d10:	106d      	asrs	r5, r5, #1
 8008d12:	d00b      	beq.n	8008d2c <__pow5mult+0xa0>
 8008d14:	6820      	ldr	r0, [r4, #0]
 8008d16:	b938      	cbnz	r0, 8008d28 <__pow5mult+0x9c>
 8008d18:	4622      	mov	r2, r4
 8008d1a:	4621      	mov	r1, r4
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f7ff ff0b 	bl	8008b38 <__multiply>
 8008d22:	6020      	str	r0, [r4, #0]
 8008d24:	f8c0 9000 	str.w	r9, [r0]
 8008d28:	4604      	mov	r4, r0
 8008d2a:	e7e4      	b.n	8008cf6 <__pow5mult+0x6a>
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d32:	bf00      	nop
 8008d34:	08009c50 	.word	0x08009c50
 8008d38:	08009a85 	.word	0x08009a85
 8008d3c:	08009b05 	.word	0x08009b05

08008d40 <__lshift>:
 8008d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d44:	460c      	mov	r4, r1
 8008d46:	6849      	ldr	r1, [r1, #4]
 8008d48:	6923      	ldr	r3, [r4, #16]
 8008d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d4e:	68a3      	ldr	r3, [r4, #8]
 8008d50:	4607      	mov	r7, r0
 8008d52:	4691      	mov	r9, r2
 8008d54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d58:	f108 0601 	add.w	r6, r8, #1
 8008d5c:	42b3      	cmp	r3, r6
 8008d5e:	db0b      	blt.n	8008d78 <__lshift+0x38>
 8008d60:	4638      	mov	r0, r7
 8008d62:	f7ff fddd 	bl	8008920 <_Balloc>
 8008d66:	4605      	mov	r5, r0
 8008d68:	b948      	cbnz	r0, 8008d7e <__lshift+0x3e>
 8008d6a:	4602      	mov	r2, r0
 8008d6c:	4b28      	ldr	r3, [pc, #160]	; (8008e10 <__lshift+0xd0>)
 8008d6e:	4829      	ldr	r0, [pc, #164]	; (8008e14 <__lshift+0xd4>)
 8008d70:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d74:	f000 f9ea 	bl	800914c <__assert_func>
 8008d78:	3101      	adds	r1, #1
 8008d7a:	005b      	lsls	r3, r3, #1
 8008d7c:	e7ee      	b.n	8008d5c <__lshift+0x1c>
 8008d7e:	2300      	movs	r3, #0
 8008d80:	f100 0114 	add.w	r1, r0, #20
 8008d84:	f100 0210 	add.w	r2, r0, #16
 8008d88:	4618      	mov	r0, r3
 8008d8a:	4553      	cmp	r3, sl
 8008d8c:	db33      	blt.n	8008df6 <__lshift+0xb6>
 8008d8e:	6920      	ldr	r0, [r4, #16]
 8008d90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d94:	f104 0314 	add.w	r3, r4, #20
 8008d98:	f019 091f 	ands.w	r9, r9, #31
 8008d9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008da0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008da4:	d02b      	beq.n	8008dfe <__lshift+0xbe>
 8008da6:	f1c9 0e20 	rsb	lr, r9, #32
 8008daa:	468a      	mov	sl, r1
 8008dac:	2200      	movs	r2, #0
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	fa00 f009 	lsl.w	r0, r0, r9
 8008db4:	4310      	orrs	r0, r2
 8008db6:	f84a 0b04 	str.w	r0, [sl], #4
 8008dba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dbe:	459c      	cmp	ip, r3
 8008dc0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008dc4:	d8f3      	bhi.n	8008dae <__lshift+0x6e>
 8008dc6:	ebac 0304 	sub.w	r3, ip, r4
 8008dca:	3b15      	subs	r3, #21
 8008dcc:	f023 0303 	bic.w	r3, r3, #3
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	f104 0015 	add.w	r0, r4, #21
 8008dd6:	4584      	cmp	ip, r0
 8008dd8:	bf38      	it	cc
 8008dda:	2304      	movcc	r3, #4
 8008ddc:	50ca      	str	r2, [r1, r3]
 8008dde:	b10a      	cbz	r2, 8008de4 <__lshift+0xa4>
 8008de0:	f108 0602 	add.w	r6, r8, #2
 8008de4:	3e01      	subs	r6, #1
 8008de6:	4638      	mov	r0, r7
 8008de8:	612e      	str	r6, [r5, #16]
 8008dea:	4621      	mov	r1, r4
 8008dec:	f7ff fdd8 	bl	80089a0 <_Bfree>
 8008df0:	4628      	mov	r0, r5
 8008df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008df6:	f842 0f04 	str.w	r0, [r2, #4]!
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	e7c5      	b.n	8008d8a <__lshift+0x4a>
 8008dfe:	3904      	subs	r1, #4
 8008e00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e04:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e08:	459c      	cmp	ip, r3
 8008e0a:	d8f9      	bhi.n	8008e00 <__lshift+0xc0>
 8008e0c:	e7ea      	b.n	8008de4 <__lshift+0xa4>
 8008e0e:	bf00      	nop
 8008e10:	08009af4 	.word	0x08009af4
 8008e14:	08009b05 	.word	0x08009b05

08008e18 <__mcmp>:
 8008e18:	b530      	push	{r4, r5, lr}
 8008e1a:	6902      	ldr	r2, [r0, #16]
 8008e1c:	690c      	ldr	r4, [r1, #16]
 8008e1e:	1b12      	subs	r2, r2, r4
 8008e20:	d10e      	bne.n	8008e40 <__mcmp+0x28>
 8008e22:	f100 0314 	add.w	r3, r0, #20
 8008e26:	3114      	adds	r1, #20
 8008e28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e38:	42a5      	cmp	r5, r4
 8008e3a:	d003      	beq.n	8008e44 <__mcmp+0x2c>
 8008e3c:	d305      	bcc.n	8008e4a <__mcmp+0x32>
 8008e3e:	2201      	movs	r2, #1
 8008e40:	4610      	mov	r0, r2
 8008e42:	bd30      	pop	{r4, r5, pc}
 8008e44:	4283      	cmp	r3, r0
 8008e46:	d3f3      	bcc.n	8008e30 <__mcmp+0x18>
 8008e48:	e7fa      	b.n	8008e40 <__mcmp+0x28>
 8008e4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e4e:	e7f7      	b.n	8008e40 <__mcmp+0x28>

08008e50 <__mdiff>:
 8008e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	460c      	mov	r4, r1
 8008e56:	4606      	mov	r6, r0
 8008e58:	4611      	mov	r1, r2
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	4690      	mov	r8, r2
 8008e5e:	f7ff ffdb 	bl	8008e18 <__mcmp>
 8008e62:	1e05      	subs	r5, r0, #0
 8008e64:	d110      	bne.n	8008e88 <__mdiff+0x38>
 8008e66:	4629      	mov	r1, r5
 8008e68:	4630      	mov	r0, r6
 8008e6a:	f7ff fd59 	bl	8008920 <_Balloc>
 8008e6e:	b930      	cbnz	r0, 8008e7e <__mdiff+0x2e>
 8008e70:	4b3a      	ldr	r3, [pc, #232]	; (8008f5c <__mdiff+0x10c>)
 8008e72:	4602      	mov	r2, r0
 8008e74:	f240 2137 	movw	r1, #567	; 0x237
 8008e78:	4839      	ldr	r0, [pc, #228]	; (8008f60 <__mdiff+0x110>)
 8008e7a:	f000 f967 	bl	800914c <__assert_func>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e88:	bfa4      	itt	ge
 8008e8a:	4643      	movge	r3, r8
 8008e8c:	46a0      	movge	r8, r4
 8008e8e:	4630      	mov	r0, r6
 8008e90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e94:	bfa6      	itte	ge
 8008e96:	461c      	movge	r4, r3
 8008e98:	2500      	movge	r5, #0
 8008e9a:	2501      	movlt	r5, #1
 8008e9c:	f7ff fd40 	bl	8008920 <_Balloc>
 8008ea0:	b920      	cbnz	r0, 8008eac <__mdiff+0x5c>
 8008ea2:	4b2e      	ldr	r3, [pc, #184]	; (8008f5c <__mdiff+0x10c>)
 8008ea4:	4602      	mov	r2, r0
 8008ea6:	f240 2145 	movw	r1, #581	; 0x245
 8008eaa:	e7e5      	b.n	8008e78 <__mdiff+0x28>
 8008eac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008eb0:	6926      	ldr	r6, [r4, #16]
 8008eb2:	60c5      	str	r5, [r0, #12]
 8008eb4:	f104 0914 	add.w	r9, r4, #20
 8008eb8:	f108 0514 	add.w	r5, r8, #20
 8008ebc:	f100 0e14 	add.w	lr, r0, #20
 8008ec0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008ec4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ec8:	f108 0210 	add.w	r2, r8, #16
 8008ecc:	46f2      	mov	sl, lr
 8008ece:	2100      	movs	r1, #0
 8008ed0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ed4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ed8:	fa11 f88b 	uxtah	r8, r1, fp
 8008edc:	b299      	uxth	r1, r3
 8008ede:	0c1b      	lsrs	r3, r3, #16
 8008ee0:	eba8 0801 	sub.w	r8, r8, r1
 8008ee4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008ee8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008eec:	fa1f f888 	uxth.w	r8, r8
 8008ef0:	1419      	asrs	r1, r3, #16
 8008ef2:	454e      	cmp	r6, r9
 8008ef4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008ef8:	f84a 3b04 	str.w	r3, [sl], #4
 8008efc:	d8e8      	bhi.n	8008ed0 <__mdiff+0x80>
 8008efe:	1b33      	subs	r3, r6, r4
 8008f00:	3b15      	subs	r3, #21
 8008f02:	f023 0303 	bic.w	r3, r3, #3
 8008f06:	3304      	adds	r3, #4
 8008f08:	3415      	adds	r4, #21
 8008f0a:	42a6      	cmp	r6, r4
 8008f0c:	bf38      	it	cc
 8008f0e:	2304      	movcc	r3, #4
 8008f10:	441d      	add	r5, r3
 8008f12:	4473      	add	r3, lr
 8008f14:	469e      	mov	lr, r3
 8008f16:	462e      	mov	r6, r5
 8008f18:	4566      	cmp	r6, ip
 8008f1a:	d30e      	bcc.n	8008f3a <__mdiff+0xea>
 8008f1c:	f10c 0203 	add.w	r2, ip, #3
 8008f20:	1b52      	subs	r2, r2, r5
 8008f22:	f022 0203 	bic.w	r2, r2, #3
 8008f26:	3d03      	subs	r5, #3
 8008f28:	45ac      	cmp	ip, r5
 8008f2a:	bf38      	it	cc
 8008f2c:	2200      	movcc	r2, #0
 8008f2e:	4413      	add	r3, r2
 8008f30:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f34:	b17a      	cbz	r2, 8008f56 <__mdiff+0x106>
 8008f36:	6107      	str	r7, [r0, #16]
 8008f38:	e7a4      	b.n	8008e84 <__mdiff+0x34>
 8008f3a:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f3e:	fa11 f288 	uxtah	r2, r1, r8
 8008f42:	1414      	asrs	r4, r2, #16
 8008f44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f48:	b292      	uxth	r2, r2
 8008f4a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f4e:	f84e 2b04 	str.w	r2, [lr], #4
 8008f52:	1421      	asrs	r1, r4, #16
 8008f54:	e7e0      	b.n	8008f18 <__mdiff+0xc8>
 8008f56:	3f01      	subs	r7, #1
 8008f58:	e7ea      	b.n	8008f30 <__mdiff+0xe0>
 8008f5a:	bf00      	nop
 8008f5c:	08009af4 	.word	0x08009af4
 8008f60:	08009b05 	.word	0x08009b05

08008f64 <__d2b>:
 8008f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f68:	460f      	mov	r7, r1
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	ec59 8b10 	vmov	r8, r9, d0
 8008f70:	4616      	mov	r6, r2
 8008f72:	f7ff fcd5 	bl	8008920 <_Balloc>
 8008f76:	4604      	mov	r4, r0
 8008f78:	b930      	cbnz	r0, 8008f88 <__d2b+0x24>
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	4b24      	ldr	r3, [pc, #144]	; (8009010 <__d2b+0xac>)
 8008f7e:	4825      	ldr	r0, [pc, #148]	; (8009014 <__d2b+0xb0>)
 8008f80:	f240 310f 	movw	r1, #783	; 0x30f
 8008f84:	f000 f8e2 	bl	800914c <__assert_func>
 8008f88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f90:	bb2d      	cbnz	r5, 8008fde <__d2b+0x7a>
 8008f92:	9301      	str	r3, [sp, #4]
 8008f94:	f1b8 0300 	subs.w	r3, r8, #0
 8008f98:	d026      	beq.n	8008fe8 <__d2b+0x84>
 8008f9a:	4668      	mov	r0, sp
 8008f9c:	9300      	str	r3, [sp, #0]
 8008f9e:	f7ff fd87 	bl	8008ab0 <__lo0bits>
 8008fa2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fa6:	b1e8      	cbz	r0, 8008fe4 <__d2b+0x80>
 8008fa8:	f1c0 0320 	rsb	r3, r0, #32
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	40c2      	lsrs	r2, r0
 8008fb4:	6163      	str	r3, [r4, #20]
 8008fb6:	9201      	str	r2, [sp, #4]
 8008fb8:	9b01      	ldr	r3, [sp, #4]
 8008fba:	61a3      	str	r3, [r4, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	bf14      	ite	ne
 8008fc0:	2202      	movne	r2, #2
 8008fc2:	2201      	moveq	r2, #1
 8008fc4:	6122      	str	r2, [r4, #16]
 8008fc6:	b1bd      	cbz	r5, 8008ff8 <__d2b+0x94>
 8008fc8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fcc:	4405      	add	r5, r0
 8008fce:	603d      	str	r5, [r7, #0]
 8008fd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fd4:	6030      	str	r0, [r6, #0]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	b003      	add	sp, #12
 8008fda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008fe2:	e7d6      	b.n	8008f92 <__d2b+0x2e>
 8008fe4:	6161      	str	r1, [r4, #20]
 8008fe6:	e7e7      	b.n	8008fb8 <__d2b+0x54>
 8008fe8:	a801      	add	r0, sp, #4
 8008fea:	f7ff fd61 	bl	8008ab0 <__lo0bits>
 8008fee:	9b01      	ldr	r3, [sp, #4]
 8008ff0:	6163      	str	r3, [r4, #20]
 8008ff2:	3020      	adds	r0, #32
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	e7e5      	b.n	8008fc4 <__d2b+0x60>
 8008ff8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ffc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009000:	6038      	str	r0, [r7, #0]
 8009002:	6918      	ldr	r0, [r3, #16]
 8009004:	f7ff fd34 	bl	8008a70 <__hi0bits>
 8009008:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800900c:	e7e2      	b.n	8008fd4 <__d2b+0x70>
 800900e:	bf00      	nop
 8009010:	08009af4 	.word	0x08009af4
 8009014:	08009b05 	.word	0x08009b05

08009018 <__sread>:
 8009018:	b510      	push	{r4, lr}
 800901a:	460c      	mov	r4, r1
 800901c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009020:	f000 f860 	bl	80090e4 <_read_r>
 8009024:	2800      	cmp	r0, #0
 8009026:	bfab      	itete	ge
 8009028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800902a:	89a3      	ldrhlt	r3, [r4, #12]
 800902c:	181b      	addge	r3, r3, r0
 800902e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009032:	bfac      	ite	ge
 8009034:	6563      	strge	r3, [r4, #84]	; 0x54
 8009036:	81a3      	strhlt	r3, [r4, #12]
 8009038:	bd10      	pop	{r4, pc}

0800903a <__swrite>:
 800903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903e:	461f      	mov	r7, r3
 8009040:	898b      	ldrh	r3, [r1, #12]
 8009042:	05db      	lsls	r3, r3, #23
 8009044:	4605      	mov	r5, r0
 8009046:	460c      	mov	r4, r1
 8009048:	4616      	mov	r6, r2
 800904a:	d505      	bpl.n	8009058 <__swrite+0x1e>
 800904c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009050:	2302      	movs	r3, #2
 8009052:	2200      	movs	r2, #0
 8009054:	f000 f834 	bl	80090c0 <_lseek_r>
 8009058:	89a3      	ldrh	r3, [r4, #12]
 800905a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800905e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009062:	81a3      	strh	r3, [r4, #12]
 8009064:	4632      	mov	r2, r6
 8009066:	463b      	mov	r3, r7
 8009068:	4628      	mov	r0, r5
 800906a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800906e:	f000 b85b 	b.w	8009128 <_write_r>

08009072 <__sseek>:
 8009072:	b510      	push	{r4, lr}
 8009074:	460c      	mov	r4, r1
 8009076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800907a:	f000 f821 	bl	80090c0 <_lseek_r>
 800907e:	1c43      	adds	r3, r0, #1
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	bf15      	itete	ne
 8009084:	6560      	strne	r0, [r4, #84]	; 0x54
 8009086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800908a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800908e:	81a3      	strheq	r3, [r4, #12]
 8009090:	bf18      	it	ne
 8009092:	81a3      	strhne	r3, [r4, #12]
 8009094:	bd10      	pop	{r4, pc}

08009096 <__sclose>:
 8009096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800909a:	f000 b801 	b.w	80090a0 <_close_r>
	...

080090a0 <_close_r>:
 80090a0:	b538      	push	{r3, r4, r5, lr}
 80090a2:	4d06      	ldr	r5, [pc, #24]	; (80090bc <_close_r+0x1c>)
 80090a4:	2300      	movs	r3, #0
 80090a6:	4604      	mov	r4, r0
 80090a8:	4608      	mov	r0, r1
 80090aa:	602b      	str	r3, [r5, #0]
 80090ac:	f7f9 f91c 	bl	80022e8 <_close>
 80090b0:	1c43      	adds	r3, r0, #1
 80090b2:	d102      	bne.n	80090ba <_close_r+0x1a>
 80090b4:	682b      	ldr	r3, [r5, #0]
 80090b6:	b103      	cbz	r3, 80090ba <_close_r+0x1a>
 80090b8:	6023      	str	r3, [r4, #0]
 80090ba:	bd38      	pop	{r3, r4, r5, pc}
 80090bc:	20000818 	.word	0x20000818

080090c0 <_lseek_r>:
 80090c0:	b538      	push	{r3, r4, r5, lr}
 80090c2:	4d07      	ldr	r5, [pc, #28]	; (80090e0 <_lseek_r+0x20>)
 80090c4:	4604      	mov	r4, r0
 80090c6:	4608      	mov	r0, r1
 80090c8:	4611      	mov	r1, r2
 80090ca:	2200      	movs	r2, #0
 80090cc:	602a      	str	r2, [r5, #0]
 80090ce:	461a      	mov	r2, r3
 80090d0:	f7f9 f931 	bl	8002336 <_lseek>
 80090d4:	1c43      	adds	r3, r0, #1
 80090d6:	d102      	bne.n	80090de <_lseek_r+0x1e>
 80090d8:	682b      	ldr	r3, [r5, #0]
 80090da:	b103      	cbz	r3, 80090de <_lseek_r+0x1e>
 80090dc:	6023      	str	r3, [r4, #0]
 80090de:	bd38      	pop	{r3, r4, r5, pc}
 80090e0:	20000818 	.word	0x20000818

080090e4 <_read_r>:
 80090e4:	b538      	push	{r3, r4, r5, lr}
 80090e6:	4d07      	ldr	r5, [pc, #28]	; (8009104 <_read_r+0x20>)
 80090e8:	4604      	mov	r4, r0
 80090ea:	4608      	mov	r0, r1
 80090ec:	4611      	mov	r1, r2
 80090ee:	2200      	movs	r2, #0
 80090f0:	602a      	str	r2, [r5, #0]
 80090f2:	461a      	mov	r2, r3
 80090f4:	f7f9 f8bf 	bl	8002276 <_read>
 80090f8:	1c43      	adds	r3, r0, #1
 80090fa:	d102      	bne.n	8009102 <_read_r+0x1e>
 80090fc:	682b      	ldr	r3, [r5, #0]
 80090fe:	b103      	cbz	r3, 8009102 <_read_r+0x1e>
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	bd38      	pop	{r3, r4, r5, pc}
 8009104:	20000818 	.word	0x20000818

08009108 <_sbrk_r>:
 8009108:	b538      	push	{r3, r4, r5, lr}
 800910a:	4d06      	ldr	r5, [pc, #24]	; (8009124 <_sbrk_r+0x1c>)
 800910c:	2300      	movs	r3, #0
 800910e:	4604      	mov	r4, r0
 8009110:	4608      	mov	r0, r1
 8009112:	602b      	str	r3, [r5, #0]
 8009114:	f7f9 f91c 	bl	8002350 <_sbrk>
 8009118:	1c43      	adds	r3, r0, #1
 800911a:	d102      	bne.n	8009122 <_sbrk_r+0x1a>
 800911c:	682b      	ldr	r3, [r5, #0]
 800911e:	b103      	cbz	r3, 8009122 <_sbrk_r+0x1a>
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	bd38      	pop	{r3, r4, r5, pc}
 8009124:	20000818 	.word	0x20000818

08009128 <_write_r>:
 8009128:	b538      	push	{r3, r4, r5, lr}
 800912a:	4d07      	ldr	r5, [pc, #28]	; (8009148 <_write_r+0x20>)
 800912c:	4604      	mov	r4, r0
 800912e:	4608      	mov	r0, r1
 8009130:	4611      	mov	r1, r2
 8009132:	2200      	movs	r2, #0
 8009134:	602a      	str	r2, [r5, #0]
 8009136:	461a      	mov	r2, r3
 8009138:	f7f9 f8ba 	bl	80022b0 <_write>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_write_r+0x1e>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_write_r+0x1e>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	20000818 	.word	0x20000818

0800914c <__assert_func>:
 800914c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800914e:	4614      	mov	r4, r2
 8009150:	461a      	mov	r2, r3
 8009152:	4b09      	ldr	r3, [pc, #36]	; (8009178 <__assert_func+0x2c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	4605      	mov	r5, r0
 8009158:	68d8      	ldr	r0, [r3, #12]
 800915a:	b14c      	cbz	r4, 8009170 <__assert_func+0x24>
 800915c:	4b07      	ldr	r3, [pc, #28]	; (800917c <__assert_func+0x30>)
 800915e:	9100      	str	r1, [sp, #0]
 8009160:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009164:	4906      	ldr	r1, [pc, #24]	; (8009180 <__assert_func+0x34>)
 8009166:	462b      	mov	r3, r5
 8009168:	f000 f882 	bl	8009270 <fiprintf>
 800916c:	f000 f89f 	bl	80092ae <abort>
 8009170:	4b04      	ldr	r3, [pc, #16]	; (8009184 <__assert_func+0x38>)
 8009172:	461c      	mov	r4, r3
 8009174:	e7f3      	b.n	800915e <__assert_func+0x12>
 8009176:	bf00      	nop
 8009178:	20000064 	.word	0x20000064
 800917c:	08009d67 	.word	0x08009d67
 8009180:	08009d74 	.word	0x08009d74
 8009184:	08009da2 	.word	0x08009da2

08009188 <_calloc_r>:
 8009188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800918a:	fba1 2402 	umull	r2, r4, r1, r2
 800918e:	b94c      	cbnz	r4, 80091a4 <_calloc_r+0x1c>
 8009190:	4611      	mov	r1, r2
 8009192:	9201      	str	r2, [sp, #4]
 8009194:	f7ff fa8a 	bl	80086ac <_malloc_r>
 8009198:	9a01      	ldr	r2, [sp, #4]
 800919a:	4605      	mov	r5, r0
 800919c:	b930      	cbnz	r0, 80091ac <_calloc_r+0x24>
 800919e:	4628      	mov	r0, r5
 80091a0:	b003      	add	sp, #12
 80091a2:	bd30      	pop	{r4, r5, pc}
 80091a4:	220c      	movs	r2, #12
 80091a6:	6002      	str	r2, [r0, #0]
 80091a8:	2500      	movs	r5, #0
 80091aa:	e7f8      	b.n	800919e <_calloc_r+0x16>
 80091ac:	4621      	mov	r1, r4
 80091ae:	f7fe fb93 	bl	80078d8 <memset>
 80091b2:	e7f4      	b.n	800919e <_calloc_r+0x16>

080091b4 <_free_r>:
 80091b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091b6:	2900      	cmp	r1, #0
 80091b8:	d044      	beq.n	8009244 <_free_r+0x90>
 80091ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091be:	9001      	str	r0, [sp, #4]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	f1a1 0404 	sub.w	r4, r1, #4
 80091c6:	bfb8      	it	lt
 80091c8:	18e4      	addlt	r4, r4, r3
 80091ca:	f7ff fb9d 	bl	8008908 <__malloc_lock>
 80091ce:	4a1e      	ldr	r2, [pc, #120]	; (8009248 <_free_r+0x94>)
 80091d0:	9801      	ldr	r0, [sp, #4]
 80091d2:	6813      	ldr	r3, [r2, #0]
 80091d4:	b933      	cbnz	r3, 80091e4 <_free_r+0x30>
 80091d6:	6063      	str	r3, [r4, #4]
 80091d8:	6014      	str	r4, [r2, #0]
 80091da:	b003      	add	sp, #12
 80091dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091e0:	f7ff bb98 	b.w	8008914 <__malloc_unlock>
 80091e4:	42a3      	cmp	r3, r4
 80091e6:	d908      	bls.n	80091fa <_free_r+0x46>
 80091e8:	6825      	ldr	r5, [r4, #0]
 80091ea:	1961      	adds	r1, r4, r5
 80091ec:	428b      	cmp	r3, r1
 80091ee:	bf01      	itttt	eq
 80091f0:	6819      	ldreq	r1, [r3, #0]
 80091f2:	685b      	ldreq	r3, [r3, #4]
 80091f4:	1949      	addeq	r1, r1, r5
 80091f6:	6021      	streq	r1, [r4, #0]
 80091f8:	e7ed      	b.n	80091d6 <_free_r+0x22>
 80091fa:	461a      	mov	r2, r3
 80091fc:	685b      	ldr	r3, [r3, #4]
 80091fe:	b10b      	cbz	r3, 8009204 <_free_r+0x50>
 8009200:	42a3      	cmp	r3, r4
 8009202:	d9fa      	bls.n	80091fa <_free_r+0x46>
 8009204:	6811      	ldr	r1, [r2, #0]
 8009206:	1855      	adds	r5, r2, r1
 8009208:	42a5      	cmp	r5, r4
 800920a:	d10b      	bne.n	8009224 <_free_r+0x70>
 800920c:	6824      	ldr	r4, [r4, #0]
 800920e:	4421      	add	r1, r4
 8009210:	1854      	adds	r4, r2, r1
 8009212:	42a3      	cmp	r3, r4
 8009214:	6011      	str	r1, [r2, #0]
 8009216:	d1e0      	bne.n	80091da <_free_r+0x26>
 8009218:	681c      	ldr	r4, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	6053      	str	r3, [r2, #4]
 800921e:	440c      	add	r4, r1
 8009220:	6014      	str	r4, [r2, #0]
 8009222:	e7da      	b.n	80091da <_free_r+0x26>
 8009224:	d902      	bls.n	800922c <_free_r+0x78>
 8009226:	230c      	movs	r3, #12
 8009228:	6003      	str	r3, [r0, #0]
 800922a:	e7d6      	b.n	80091da <_free_r+0x26>
 800922c:	6825      	ldr	r5, [r4, #0]
 800922e:	1961      	adds	r1, r4, r5
 8009230:	428b      	cmp	r3, r1
 8009232:	bf04      	itt	eq
 8009234:	6819      	ldreq	r1, [r3, #0]
 8009236:	685b      	ldreq	r3, [r3, #4]
 8009238:	6063      	str	r3, [r4, #4]
 800923a:	bf04      	itt	eq
 800923c:	1949      	addeq	r1, r1, r5
 800923e:	6021      	streq	r1, [r4, #0]
 8009240:	6054      	str	r4, [r2, #4]
 8009242:	e7ca      	b.n	80091da <_free_r+0x26>
 8009244:	b003      	add	sp, #12
 8009246:	bd30      	pop	{r4, r5, pc}
 8009248:	20000810 	.word	0x20000810

0800924c <__ascii_mbtowc>:
 800924c:	b082      	sub	sp, #8
 800924e:	b901      	cbnz	r1, 8009252 <__ascii_mbtowc+0x6>
 8009250:	a901      	add	r1, sp, #4
 8009252:	b142      	cbz	r2, 8009266 <__ascii_mbtowc+0x1a>
 8009254:	b14b      	cbz	r3, 800926a <__ascii_mbtowc+0x1e>
 8009256:	7813      	ldrb	r3, [r2, #0]
 8009258:	600b      	str	r3, [r1, #0]
 800925a:	7812      	ldrb	r2, [r2, #0]
 800925c:	1e10      	subs	r0, r2, #0
 800925e:	bf18      	it	ne
 8009260:	2001      	movne	r0, #1
 8009262:	b002      	add	sp, #8
 8009264:	4770      	bx	lr
 8009266:	4610      	mov	r0, r2
 8009268:	e7fb      	b.n	8009262 <__ascii_mbtowc+0x16>
 800926a:	f06f 0001 	mvn.w	r0, #1
 800926e:	e7f8      	b.n	8009262 <__ascii_mbtowc+0x16>

08009270 <fiprintf>:
 8009270:	b40e      	push	{r1, r2, r3}
 8009272:	b503      	push	{r0, r1, lr}
 8009274:	4601      	mov	r1, r0
 8009276:	ab03      	add	r3, sp, #12
 8009278:	4805      	ldr	r0, [pc, #20]	; (8009290 <fiprintf+0x20>)
 800927a:	f853 2b04 	ldr.w	r2, [r3], #4
 800927e:	6800      	ldr	r0, [r0, #0]
 8009280:	9301      	str	r3, [sp, #4]
 8009282:	f000 f845 	bl	8009310 <_vfiprintf_r>
 8009286:	b002      	add	sp, #8
 8009288:	f85d eb04 	ldr.w	lr, [sp], #4
 800928c:	b003      	add	sp, #12
 800928e:	4770      	bx	lr
 8009290:	20000064 	.word	0x20000064

08009294 <__ascii_wctomb>:
 8009294:	b149      	cbz	r1, 80092aa <__ascii_wctomb+0x16>
 8009296:	2aff      	cmp	r2, #255	; 0xff
 8009298:	bf85      	ittet	hi
 800929a:	238a      	movhi	r3, #138	; 0x8a
 800929c:	6003      	strhi	r3, [r0, #0]
 800929e:	700a      	strbls	r2, [r1, #0]
 80092a0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80092a4:	bf98      	it	ls
 80092a6:	2001      	movls	r0, #1
 80092a8:	4770      	bx	lr
 80092aa:	4608      	mov	r0, r1
 80092ac:	4770      	bx	lr

080092ae <abort>:
 80092ae:	b508      	push	{r3, lr}
 80092b0:	2006      	movs	r0, #6
 80092b2:	f000 fa89 	bl	80097c8 <raise>
 80092b6:	2001      	movs	r0, #1
 80092b8:	f7f8 ffd3 	bl	8002262 <_exit>

080092bc <__sfputc_r>:
 80092bc:	6893      	ldr	r3, [r2, #8]
 80092be:	3b01      	subs	r3, #1
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	b410      	push	{r4}
 80092c4:	6093      	str	r3, [r2, #8]
 80092c6:	da08      	bge.n	80092da <__sfputc_r+0x1e>
 80092c8:	6994      	ldr	r4, [r2, #24]
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	db01      	blt.n	80092d2 <__sfputc_r+0x16>
 80092ce:	290a      	cmp	r1, #10
 80092d0:	d103      	bne.n	80092da <__sfputc_r+0x1e>
 80092d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092d6:	f000 b935 	b.w	8009544 <__swbuf_r>
 80092da:	6813      	ldr	r3, [r2, #0]
 80092dc:	1c58      	adds	r0, r3, #1
 80092de:	6010      	str	r0, [r2, #0]
 80092e0:	7019      	strb	r1, [r3, #0]
 80092e2:	4608      	mov	r0, r1
 80092e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <__sfputs_r>:
 80092ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ec:	4606      	mov	r6, r0
 80092ee:	460f      	mov	r7, r1
 80092f0:	4614      	mov	r4, r2
 80092f2:	18d5      	adds	r5, r2, r3
 80092f4:	42ac      	cmp	r4, r5
 80092f6:	d101      	bne.n	80092fc <__sfputs_r+0x12>
 80092f8:	2000      	movs	r0, #0
 80092fa:	e007      	b.n	800930c <__sfputs_r+0x22>
 80092fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009300:	463a      	mov	r2, r7
 8009302:	4630      	mov	r0, r6
 8009304:	f7ff ffda 	bl	80092bc <__sfputc_r>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d1f3      	bne.n	80092f4 <__sfputs_r+0xa>
 800930c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009310 <_vfiprintf_r>:
 8009310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009314:	460d      	mov	r5, r1
 8009316:	b09d      	sub	sp, #116	; 0x74
 8009318:	4614      	mov	r4, r2
 800931a:	4698      	mov	r8, r3
 800931c:	4606      	mov	r6, r0
 800931e:	b118      	cbz	r0, 8009328 <_vfiprintf_r+0x18>
 8009320:	6a03      	ldr	r3, [r0, #32]
 8009322:	b90b      	cbnz	r3, 8009328 <_vfiprintf_r+0x18>
 8009324:	f7fe faa2 	bl	800786c <__sinit>
 8009328:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800932a:	07d9      	lsls	r1, r3, #31
 800932c:	d405      	bmi.n	800933a <_vfiprintf_r+0x2a>
 800932e:	89ab      	ldrh	r3, [r5, #12]
 8009330:	059a      	lsls	r2, r3, #22
 8009332:	d402      	bmi.n	800933a <_vfiprintf_r+0x2a>
 8009334:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009336:	f7fe fb06 	bl	8007946 <__retarget_lock_acquire_recursive>
 800933a:	89ab      	ldrh	r3, [r5, #12]
 800933c:	071b      	lsls	r3, r3, #28
 800933e:	d501      	bpl.n	8009344 <_vfiprintf_r+0x34>
 8009340:	692b      	ldr	r3, [r5, #16]
 8009342:	b99b      	cbnz	r3, 800936c <_vfiprintf_r+0x5c>
 8009344:	4629      	mov	r1, r5
 8009346:	4630      	mov	r0, r6
 8009348:	f000 f93a 	bl	80095c0 <__swsetup_r>
 800934c:	b170      	cbz	r0, 800936c <_vfiprintf_r+0x5c>
 800934e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009350:	07dc      	lsls	r4, r3, #31
 8009352:	d504      	bpl.n	800935e <_vfiprintf_r+0x4e>
 8009354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009358:	b01d      	add	sp, #116	; 0x74
 800935a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800935e:	89ab      	ldrh	r3, [r5, #12]
 8009360:	0598      	lsls	r0, r3, #22
 8009362:	d4f7      	bmi.n	8009354 <_vfiprintf_r+0x44>
 8009364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009366:	f7fe faef 	bl	8007948 <__retarget_lock_release_recursive>
 800936a:	e7f3      	b.n	8009354 <_vfiprintf_r+0x44>
 800936c:	2300      	movs	r3, #0
 800936e:	9309      	str	r3, [sp, #36]	; 0x24
 8009370:	2320      	movs	r3, #32
 8009372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009376:	f8cd 800c 	str.w	r8, [sp, #12]
 800937a:	2330      	movs	r3, #48	; 0x30
 800937c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009530 <_vfiprintf_r+0x220>
 8009380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009384:	f04f 0901 	mov.w	r9, #1
 8009388:	4623      	mov	r3, r4
 800938a:	469a      	mov	sl, r3
 800938c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009390:	b10a      	cbz	r2, 8009396 <_vfiprintf_r+0x86>
 8009392:	2a25      	cmp	r2, #37	; 0x25
 8009394:	d1f9      	bne.n	800938a <_vfiprintf_r+0x7a>
 8009396:	ebba 0b04 	subs.w	fp, sl, r4
 800939a:	d00b      	beq.n	80093b4 <_vfiprintf_r+0xa4>
 800939c:	465b      	mov	r3, fp
 800939e:	4622      	mov	r2, r4
 80093a0:	4629      	mov	r1, r5
 80093a2:	4630      	mov	r0, r6
 80093a4:	f7ff ffa1 	bl	80092ea <__sfputs_r>
 80093a8:	3001      	adds	r0, #1
 80093aa:	f000 80a9 	beq.w	8009500 <_vfiprintf_r+0x1f0>
 80093ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093b0:	445a      	add	r2, fp
 80093b2:	9209      	str	r2, [sp, #36]	; 0x24
 80093b4:	f89a 3000 	ldrb.w	r3, [sl]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 80a1 	beq.w	8009500 <_vfiprintf_r+0x1f0>
 80093be:	2300      	movs	r3, #0
 80093c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093c8:	f10a 0a01 	add.w	sl, sl, #1
 80093cc:	9304      	str	r3, [sp, #16]
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093d4:	931a      	str	r3, [sp, #104]	; 0x68
 80093d6:	4654      	mov	r4, sl
 80093d8:	2205      	movs	r2, #5
 80093da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093de:	4854      	ldr	r0, [pc, #336]	; (8009530 <_vfiprintf_r+0x220>)
 80093e0:	f7f6 ff36 	bl	8000250 <memchr>
 80093e4:	9a04      	ldr	r2, [sp, #16]
 80093e6:	b9d8      	cbnz	r0, 8009420 <_vfiprintf_r+0x110>
 80093e8:	06d1      	lsls	r1, r2, #27
 80093ea:	bf44      	itt	mi
 80093ec:	2320      	movmi	r3, #32
 80093ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093f2:	0713      	lsls	r3, r2, #28
 80093f4:	bf44      	itt	mi
 80093f6:	232b      	movmi	r3, #43	; 0x2b
 80093f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80093fc:	f89a 3000 	ldrb.w	r3, [sl]
 8009400:	2b2a      	cmp	r3, #42	; 0x2a
 8009402:	d015      	beq.n	8009430 <_vfiprintf_r+0x120>
 8009404:	9a07      	ldr	r2, [sp, #28]
 8009406:	4654      	mov	r4, sl
 8009408:	2000      	movs	r0, #0
 800940a:	f04f 0c0a 	mov.w	ip, #10
 800940e:	4621      	mov	r1, r4
 8009410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009414:	3b30      	subs	r3, #48	; 0x30
 8009416:	2b09      	cmp	r3, #9
 8009418:	d94d      	bls.n	80094b6 <_vfiprintf_r+0x1a6>
 800941a:	b1b0      	cbz	r0, 800944a <_vfiprintf_r+0x13a>
 800941c:	9207      	str	r2, [sp, #28]
 800941e:	e014      	b.n	800944a <_vfiprintf_r+0x13a>
 8009420:	eba0 0308 	sub.w	r3, r0, r8
 8009424:	fa09 f303 	lsl.w	r3, r9, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	9304      	str	r3, [sp, #16]
 800942c:	46a2      	mov	sl, r4
 800942e:	e7d2      	b.n	80093d6 <_vfiprintf_r+0xc6>
 8009430:	9b03      	ldr	r3, [sp, #12]
 8009432:	1d19      	adds	r1, r3, #4
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	9103      	str	r1, [sp, #12]
 8009438:	2b00      	cmp	r3, #0
 800943a:	bfbb      	ittet	lt
 800943c:	425b      	neglt	r3, r3
 800943e:	f042 0202 	orrlt.w	r2, r2, #2
 8009442:	9307      	strge	r3, [sp, #28]
 8009444:	9307      	strlt	r3, [sp, #28]
 8009446:	bfb8      	it	lt
 8009448:	9204      	strlt	r2, [sp, #16]
 800944a:	7823      	ldrb	r3, [r4, #0]
 800944c:	2b2e      	cmp	r3, #46	; 0x2e
 800944e:	d10c      	bne.n	800946a <_vfiprintf_r+0x15a>
 8009450:	7863      	ldrb	r3, [r4, #1]
 8009452:	2b2a      	cmp	r3, #42	; 0x2a
 8009454:	d134      	bne.n	80094c0 <_vfiprintf_r+0x1b0>
 8009456:	9b03      	ldr	r3, [sp, #12]
 8009458:	1d1a      	adds	r2, r3, #4
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	9203      	str	r2, [sp, #12]
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009466:	3402      	adds	r4, #2
 8009468:	9305      	str	r3, [sp, #20]
 800946a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009540 <_vfiprintf_r+0x230>
 800946e:	7821      	ldrb	r1, [r4, #0]
 8009470:	2203      	movs	r2, #3
 8009472:	4650      	mov	r0, sl
 8009474:	f7f6 feec 	bl	8000250 <memchr>
 8009478:	b138      	cbz	r0, 800948a <_vfiprintf_r+0x17a>
 800947a:	9b04      	ldr	r3, [sp, #16]
 800947c:	eba0 000a 	sub.w	r0, r0, sl
 8009480:	2240      	movs	r2, #64	; 0x40
 8009482:	4082      	lsls	r2, r0
 8009484:	4313      	orrs	r3, r2
 8009486:	3401      	adds	r4, #1
 8009488:	9304      	str	r3, [sp, #16]
 800948a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800948e:	4829      	ldr	r0, [pc, #164]	; (8009534 <_vfiprintf_r+0x224>)
 8009490:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009494:	2206      	movs	r2, #6
 8009496:	f7f6 fedb 	bl	8000250 <memchr>
 800949a:	2800      	cmp	r0, #0
 800949c:	d03f      	beq.n	800951e <_vfiprintf_r+0x20e>
 800949e:	4b26      	ldr	r3, [pc, #152]	; (8009538 <_vfiprintf_r+0x228>)
 80094a0:	bb1b      	cbnz	r3, 80094ea <_vfiprintf_r+0x1da>
 80094a2:	9b03      	ldr	r3, [sp, #12]
 80094a4:	3307      	adds	r3, #7
 80094a6:	f023 0307 	bic.w	r3, r3, #7
 80094aa:	3308      	adds	r3, #8
 80094ac:	9303      	str	r3, [sp, #12]
 80094ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b0:	443b      	add	r3, r7
 80094b2:	9309      	str	r3, [sp, #36]	; 0x24
 80094b4:	e768      	b.n	8009388 <_vfiprintf_r+0x78>
 80094b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80094ba:	460c      	mov	r4, r1
 80094bc:	2001      	movs	r0, #1
 80094be:	e7a6      	b.n	800940e <_vfiprintf_r+0xfe>
 80094c0:	2300      	movs	r3, #0
 80094c2:	3401      	adds	r4, #1
 80094c4:	9305      	str	r3, [sp, #20]
 80094c6:	4619      	mov	r1, r3
 80094c8:	f04f 0c0a 	mov.w	ip, #10
 80094cc:	4620      	mov	r0, r4
 80094ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094d2:	3a30      	subs	r2, #48	; 0x30
 80094d4:	2a09      	cmp	r2, #9
 80094d6:	d903      	bls.n	80094e0 <_vfiprintf_r+0x1d0>
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0c6      	beq.n	800946a <_vfiprintf_r+0x15a>
 80094dc:	9105      	str	r1, [sp, #20]
 80094de:	e7c4      	b.n	800946a <_vfiprintf_r+0x15a>
 80094e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80094e4:	4604      	mov	r4, r0
 80094e6:	2301      	movs	r3, #1
 80094e8:	e7f0      	b.n	80094cc <_vfiprintf_r+0x1bc>
 80094ea:	ab03      	add	r3, sp, #12
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	462a      	mov	r2, r5
 80094f0:	4b12      	ldr	r3, [pc, #72]	; (800953c <_vfiprintf_r+0x22c>)
 80094f2:	a904      	add	r1, sp, #16
 80094f4:	4630      	mov	r0, r6
 80094f6:	f7fd fd67 	bl	8006fc8 <_printf_float>
 80094fa:	4607      	mov	r7, r0
 80094fc:	1c78      	adds	r0, r7, #1
 80094fe:	d1d6      	bne.n	80094ae <_vfiprintf_r+0x19e>
 8009500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009502:	07d9      	lsls	r1, r3, #31
 8009504:	d405      	bmi.n	8009512 <_vfiprintf_r+0x202>
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	059a      	lsls	r2, r3, #22
 800950a:	d402      	bmi.n	8009512 <_vfiprintf_r+0x202>
 800950c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800950e:	f7fe fa1b 	bl	8007948 <__retarget_lock_release_recursive>
 8009512:	89ab      	ldrh	r3, [r5, #12]
 8009514:	065b      	lsls	r3, r3, #25
 8009516:	f53f af1d 	bmi.w	8009354 <_vfiprintf_r+0x44>
 800951a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800951c:	e71c      	b.n	8009358 <_vfiprintf_r+0x48>
 800951e:	ab03      	add	r3, sp, #12
 8009520:	9300      	str	r3, [sp, #0]
 8009522:	462a      	mov	r2, r5
 8009524:	4b05      	ldr	r3, [pc, #20]	; (800953c <_vfiprintf_r+0x22c>)
 8009526:	a904      	add	r1, sp, #16
 8009528:	4630      	mov	r0, r6
 800952a:	f7fd fff1 	bl	8007510 <_printf_i>
 800952e:	e7e4      	b.n	80094fa <_vfiprintf_r+0x1ea>
 8009530:	08009da3 	.word	0x08009da3
 8009534:	08009dad 	.word	0x08009dad
 8009538:	08006fc9 	.word	0x08006fc9
 800953c:	080092eb 	.word	0x080092eb
 8009540:	08009da9 	.word	0x08009da9

08009544 <__swbuf_r>:
 8009544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009546:	460e      	mov	r6, r1
 8009548:	4614      	mov	r4, r2
 800954a:	4605      	mov	r5, r0
 800954c:	b118      	cbz	r0, 8009556 <__swbuf_r+0x12>
 800954e:	6a03      	ldr	r3, [r0, #32]
 8009550:	b90b      	cbnz	r3, 8009556 <__swbuf_r+0x12>
 8009552:	f7fe f98b 	bl	800786c <__sinit>
 8009556:	69a3      	ldr	r3, [r4, #24]
 8009558:	60a3      	str	r3, [r4, #8]
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	071a      	lsls	r2, r3, #28
 800955e:	d525      	bpl.n	80095ac <__swbuf_r+0x68>
 8009560:	6923      	ldr	r3, [r4, #16]
 8009562:	b31b      	cbz	r3, 80095ac <__swbuf_r+0x68>
 8009564:	6823      	ldr	r3, [r4, #0]
 8009566:	6922      	ldr	r2, [r4, #16]
 8009568:	1a98      	subs	r0, r3, r2
 800956a:	6963      	ldr	r3, [r4, #20]
 800956c:	b2f6      	uxtb	r6, r6
 800956e:	4283      	cmp	r3, r0
 8009570:	4637      	mov	r7, r6
 8009572:	dc04      	bgt.n	800957e <__swbuf_r+0x3a>
 8009574:	4621      	mov	r1, r4
 8009576:	4628      	mov	r0, r5
 8009578:	f7ff f99e 	bl	80088b8 <_fflush_r>
 800957c:	b9e0      	cbnz	r0, 80095b8 <__swbuf_r+0x74>
 800957e:	68a3      	ldr	r3, [r4, #8]
 8009580:	3b01      	subs	r3, #1
 8009582:	60a3      	str	r3, [r4, #8]
 8009584:	6823      	ldr	r3, [r4, #0]
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	6022      	str	r2, [r4, #0]
 800958a:	701e      	strb	r6, [r3, #0]
 800958c:	6962      	ldr	r2, [r4, #20]
 800958e:	1c43      	adds	r3, r0, #1
 8009590:	429a      	cmp	r2, r3
 8009592:	d004      	beq.n	800959e <__swbuf_r+0x5a>
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	07db      	lsls	r3, r3, #31
 8009598:	d506      	bpl.n	80095a8 <__swbuf_r+0x64>
 800959a:	2e0a      	cmp	r6, #10
 800959c:	d104      	bne.n	80095a8 <__swbuf_r+0x64>
 800959e:	4621      	mov	r1, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f7ff f989 	bl	80088b8 <_fflush_r>
 80095a6:	b938      	cbnz	r0, 80095b8 <__swbuf_r+0x74>
 80095a8:	4638      	mov	r0, r7
 80095aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f806 	bl	80095c0 <__swsetup_r>
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d0d5      	beq.n	8009564 <__swbuf_r+0x20>
 80095b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095bc:	e7f4      	b.n	80095a8 <__swbuf_r+0x64>
	...

080095c0 <__swsetup_r>:
 80095c0:	b538      	push	{r3, r4, r5, lr}
 80095c2:	4b2a      	ldr	r3, [pc, #168]	; (800966c <__swsetup_r+0xac>)
 80095c4:	4605      	mov	r5, r0
 80095c6:	6818      	ldr	r0, [r3, #0]
 80095c8:	460c      	mov	r4, r1
 80095ca:	b118      	cbz	r0, 80095d4 <__swsetup_r+0x14>
 80095cc:	6a03      	ldr	r3, [r0, #32]
 80095ce:	b90b      	cbnz	r3, 80095d4 <__swsetup_r+0x14>
 80095d0:	f7fe f94c 	bl	800786c <__sinit>
 80095d4:	89a3      	ldrh	r3, [r4, #12]
 80095d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095da:	0718      	lsls	r0, r3, #28
 80095dc:	d422      	bmi.n	8009624 <__swsetup_r+0x64>
 80095de:	06d9      	lsls	r1, r3, #27
 80095e0:	d407      	bmi.n	80095f2 <__swsetup_r+0x32>
 80095e2:	2309      	movs	r3, #9
 80095e4:	602b      	str	r3, [r5, #0]
 80095e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095ea:	81a3      	strh	r3, [r4, #12]
 80095ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80095f0:	e034      	b.n	800965c <__swsetup_r+0x9c>
 80095f2:	0758      	lsls	r0, r3, #29
 80095f4:	d512      	bpl.n	800961c <__swsetup_r+0x5c>
 80095f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095f8:	b141      	cbz	r1, 800960c <__swsetup_r+0x4c>
 80095fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095fe:	4299      	cmp	r1, r3
 8009600:	d002      	beq.n	8009608 <__swsetup_r+0x48>
 8009602:	4628      	mov	r0, r5
 8009604:	f7ff fdd6 	bl	80091b4 <_free_r>
 8009608:	2300      	movs	r3, #0
 800960a:	6363      	str	r3, [r4, #52]	; 0x34
 800960c:	89a3      	ldrh	r3, [r4, #12]
 800960e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009612:	81a3      	strh	r3, [r4, #12]
 8009614:	2300      	movs	r3, #0
 8009616:	6063      	str	r3, [r4, #4]
 8009618:	6923      	ldr	r3, [r4, #16]
 800961a:	6023      	str	r3, [r4, #0]
 800961c:	89a3      	ldrh	r3, [r4, #12]
 800961e:	f043 0308 	orr.w	r3, r3, #8
 8009622:	81a3      	strh	r3, [r4, #12]
 8009624:	6923      	ldr	r3, [r4, #16]
 8009626:	b94b      	cbnz	r3, 800963c <__swsetup_r+0x7c>
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800962e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009632:	d003      	beq.n	800963c <__swsetup_r+0x7c>
 8009634:	4621      	mov	r1, r4
 8009636:	4628      	mov	r0, r5
 8009638:	f000 f840 	bl	80096bc <__smakebuf_r>
 800963c:	89a0      	ldrh	r0, [r4, #12]
 800963e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009642:	f010 0301 	ands.w	r3, r0, #1
 8009646:	d00a      	beq.n	800965e <__swsetup_r+0x9e>
 8009648:	2300      	movs	r3, #0
 800964a:	60a3      	str	r3, [r4, #8]
 800964c:	6963      	ldr	r3, [r4, #20]
 800964e:	425b      	negs	r3, r3
 8009650:	61a3      	str	r3, [r4, #24]
 8009652:	6923      	ldr	r3, [r4, #16]
 8009654:	b943      	cbnz	r3, 8009668 <__swsetup_r+0xa8>
 8009656:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800965a:	d1c4      	bne.n	80095e6 <__swsetup_r+0x26>
 800965c:	bd38      	pop	{r3, r4, r5, pc}
 800965e:	0781      	lsls	r1, r0, #30
 8009660:	bf58      	it	pl
 8009662:	6963      	ldrpl	r3, [r4, #20]
 8009664:	60a3      	str	r3, [r4, #8]
 8009666:	e7f4      	b.n	8009652 <__swsetup_r+0x92>
 8009668:	2000      	movs	r0, #0
 800966a:	e7f7      	b.n	800965c <__swsetup_r+0x9c>
 800966c:	20000064 	.word	0x20000064

08009670 <__swhatbuf_r>:
 8009670:	b570      	push	{r4, r5, r6, lr}
 8009672:	460c      	mov	r4, r1
 8009674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009678:	2900      	cmp	r1, #0
 800967a:	b096      	sub	sp, #88	; 0x58
 800967c:	4615      	mov	r5, r2
 800967e:	461e      	mov	r6, r3
 8009680:	da0d      	bge.n	800969e <__swhatbuf_r+0x2e>
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009688:	f04f 0100 	mov.w	r1, #0
 800968c:	bf0c      	ite	eq
 800968e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009692:	2340      	movne	r3, #64	; 0x40
 8009694:	2000      	movs	r0, #0
 8009696:	6031      	str	r1, [r6, #0]
 8009698:	602b      	str	r3, [r5, #0]
 800969a:	b016      	add	sp, #88	; 0x58
 800969c:	bd70      	pop	{r4, r5, r6, pc}
 800969e:	466a      	mov	r2, sp
 80096a0:	f000 f848 	bl	8009734 <_fstat_r>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	dbec      	blt.n	8009682 <__swhatbuf_r+0x12>
 80096a8:	9901      	ldr	r1, [sp, #4]
 80096aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096b2:	4259      	negs	r1, r3
 80096b4:	4159      	adcs	r1, r3
 80096b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ba:	e7eb      	b.n	8009694 <__swhatbuf_r+0x24>

080096bc <__smakebuf_r>:
 80096bc:	898b      	ldrh	r3, [r1, #12]
 80096be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096c0:	079d      	lsls	r5, r3, #30
 80096c2:	4606      	mov	r6, r0
 80096c4:	460c      	mov	r4, r1
 80096c6:	d507      	bpl.n	80096d8 <__smakebuf_r+0x1c>
 80096c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096cc:	6023      	str	r3, [r4, #0]
 80096ce:	6123      	str	r3, [r4, #16]
 80096d0:	2301      	movs	r3, #1
 80096d2:	6163      	str	r3, [r4, #20]
 80096d4:	b002      	add	sp, #8
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	ab01      	add	r3, sp, #4
 80096da:	466a      	mov	r2, sp
 80096dc:	f7ff ffc8 	bl	8009670 <__swhatbuf_r>
 80096e0:	9900      	ldr	r1, [sp, #0]
 80096e2:	4605      	mov	r5, r0
 80096e4:	4630      	mov	r0, r6
 80096e6:	f7fe ffe1 	bl	80086ac <_malloc_r>
 80096ea:	b948      	cbnz	r0, 8009700 <__smakebuf_r+0x44>
 80096ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096f0:	059a      	lsls	r2, r3, #22
 80096f2:	d4ef      	bmi.n	80096d4 <__smakebuf_r+0x18>
 80096f4:	f023 0303 	bic.w	r3, r3, #3
 80096f8:	f043 0302 	orr.w	r3, r3, #2
 80096fc:	81a3      	strh	r3, [r4, #12]
 80096fe:	e7e3      	b.n	80096c8 <__smakebuf_r+0xc>
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	6020      	str	r0, [r4, #0]
 8009704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009708:	81a3      	strh	r3, [r4, #12]
 800970a:	9b00      	ldr	r3, [sp, #0]
 800970c:	6163      	str	r3, [r4, #20]
 800970e:	9b01      	ldr	r3, [sp, #4]
 8009710:	6120      	str	r0, [r4, #16]
 8009712:	b15b      	cbz	r3, 800972c <__smakebuf_r+0x70>
 8009714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009718:	4630      	mov	r0, r6
 800971a:	f000 f81d 	bl	8009758 <_isatty_r>
 800971e:	b128      	cbz	r0, 800972c <__smakebuf_r+0x70>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	f023 0303 	bic.w	r3, r3, #3
 8009726:	f043 0301 	orr.w	r3, r3, #1
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	431d      	orrs	r5, r3
 8009730:	81a5      	strh	r5, [r4, #12]
 8009732:	e7cf      	b.n	80096d4 <__smakebuf_r+0x18>

08009734 <_fstat_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4d07      	ldr	r5, [pc, #28]	; (8009754 <_fstat_r+0x20>)
 8009738:	2300      	movs	r3, #0
 800973a:	4604      	mov	r4, r0
 800973c:	4608      	mov	r0, r1
 800973e:	4611      	mov	r1, r2
 8009740:	602b      	str	r3, [r5, #0]
 8009742:	f7f8 fddd 	bl	8002300 <_fstat>
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	d102      	bne.n	8009750 <_fstat_r+0x1c>
 800974a:	682b      	ldr	r3, [r5, #0]
 800974c:	b103      	cbz	r3, 8009750 <_fstat_r+0x1c>
 800974e:	6023      	str	r3, [r4, #0]
 8009750:	bd38      	pop	{r3, r4, r5, pc}
 8009752:	bf00      	nop
 8009754:	20000818 	.word	0x20000818

08009758 <_isatty_r>:
 8009758:	b538      	push	{r3, r4, r5, lr}
 800975a:	4d06      	ldr	r5, [pc, #24]	; (8009774 <_isatty_r+0x1c>)
 800975c:	2300      	movs	r3, #0
 800975e:	4604      	mov	r4, r0
 8009760:	4608      	mov	r0, r1
 8009762:	602b      	str	r3, [r5, #0]
 8009764:	f7f8 fddc 	bl	8002320 <_isatty>
 8009768:	1c43      	adds	r3, r0, #1
 800976a:	d102      	bne.n	8009772 <_isatty_r+0x1a>
 800976c:	682b      	ldr	r3, [r5, #0]
 800976e:	b103      	cbz	r3, 8009772 <_isatty_r+0x1a>
 8009770:	6023      	str	r3, [r4, #0]
 8009772:	bd38      	pop	{r3, r4, r5, pc}
 8009774:	20000818 	.word	0x20000818

08009778 <_raise_r>:
 8009778:	291f      	cmp	r1, #31
 800977a:	b538      	push	{r3, r4, r5, lr}
 800977c:	4604      	mov	r4, r0
 800977e:	460d      	mov	r5, r1
 8009780:	d904      	bls.n	800978c <_raise_r+0x14>
 8009782:	2316      	movs	r3, #22
 8009784:	6003      	str	r3, [r0, #0]
 8009786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800978e:	b112      	cbz	r2, 8009796 <_raise_r+0x1e>
 8009790:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009794:	b94b      	cbnz	r3, 80097aa <_raise_r+0x32>
 8009796:	4620      	mov	r0, r4
 8009798:	f000 f830 	bl	80097fc <_getpid_r>
 800979c:	462a      	mov	r2, r5
 800979e:	4601      	mov	r1, r0
 80097a0:	4620      	mov	r0, r4
 80097a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097a6:	f000 b817 	b.w	80097d8 <_kill_r>
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d00a      	beq.n	80097c4 <_raise_r+0x4c>
 80097ae:	1c59      	adds	r1, r3, #1
 80097b0:	d103      	bne.n	80097ba <_raise_r+0x42>
 80097b2:	2316      	movs	r3, #22
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	2001      	movs	r0, #1
 80097b8:	e7e7      	b.n	800978a <_raise_r+0x12>
 80097ba:	2400      	movs	r4, #0
 80097bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097c0:	4628      	mov	r0, r5
 80097c2:	4798      	blx	r3
 80097c4:	2000      	movs	r0, #0
 80097c6:	e7e0      	b.n	800978a <_raise_r+0x12>

080097c8 <raise>:
 80097c8:	4b02      	ldr	r3, [pc, #8]	; (80097d4 <raise+0xc>)
 80097ca:	4601      	mov	r1, r0
 80097cc:	6818      	ldr	r0, [r3, #0]
 80097ce:	f7ff bfd3 	b.w	8009778 <_raise_r>
 80097d2:	bf00      	nop
 80097d4:	20000064 	.word	0x20000064

080097d8 <_kill_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d07      	ldr	r5, [pc, #28]	; (80097f8 <_kill_r+0x20>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	4611      	mov	r1, r2
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	f7f8 fd2c 	bl	8002242 <_kill>
 80097ea:	1c43      	adds	r3, r0, #1
 80097ec:	d102      	bne.n	80097f4 <_kill_r+0x1c>
 80097ee:	682b      	ldr	r3, [r5, #0]
 80097f0:	b103      	cbz	r3, 80097f4 <_kill_r+0x1c>
 80097f2:	6023      	str	r3, [r4, #0]
 80097f4:	bd38      	pop	{r3, r4, r5, pc}
 80097f6:	bf00      	nop
 80097f8:	20000818 	.word	0x20000818

080097fc <_getpid_r>:
 80097fc:	f7f8 bd19 	b.w	8002232 <_getpid>

08009800 <_init>:
 8009800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009802:	bf00      	nop
 8009804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009806:	bc08      	pop	{r3}
 8009808:	469e      	mov	lr, r3
 800980a:	4770      	bx	lr

0800980c <_fini>:
 800980c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800980e:	bf00      	nop
 8009810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009812:	bc08      	pop	{r3}
 8009814:	469e      	mov	lr, r3
 8009816:	4770      	bx	lr
