
KalmanLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009670  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08009830  08009830  00019830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dcc  08009dcc  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd4  08009dd4  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001d4  08009fb0  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08009fb0  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019c55  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f46  00000000  00000000  00039e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001698  00000000  00000000  0003cde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000118c  00000000  00000000  0003e480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e1ea  00000000  00000000  0003f60c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b2ab  00000000  00000000  0006d7f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011fb20  00000000  00000000  00088aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000707c  00000000  00000000  001a85c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001af640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009818 	.word	0x08009818

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08009818 	.word	0x08009818

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bec:	f000 b970 	b.w	8000ed0 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9e08      	ldr	r6, [sp, #32]
 8000c0e:	460d      	mov	r5, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	460f      	mov	r7, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4694      	mov	ip, r2
 8000c1c:	d965      	bls.n	8000cea <__udivmoddi4+0xe2>
 8000c1e:	fab2 f382 	clz	r3, r2
 8000c22:	b143      	cbz	r3, 8000c36 <__udivmoddi4+0x2e>
 8000c24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c28:	f1c3 0220 	rsb	r2, r3, #32
 8000c2c:	409f      	lsls	r7, r3
 8000c2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c32:	4317      	orrs	r7, r2
 8000c34:	409c      	lsls	r4, r3
 8000c36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c3a:	fa1f f58c 	uxth.w	r5, ip
 8000c3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c42:	0c22      	lsrs	r2, r4, #16
 8000c44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c4c:	fb01 f005 	mul.w	r0, r1, r5
 8000c50:	4290      	cmp	r0, r2
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c5c:	f080 811c 	bcs.w	8000e98 <__udivmoddi4+0x290>
 8000c60:	4290      	cmp	r0, r2
 8000c62:	f240 8119 	bls.w	8000e98 <__udivmoddi4+0x290>
 8000c66:	3902      	subs	r1, #2
 8000c68:	4462      	add	r2, ip
 8000c6a:	1a12      	subs	r2, r2, r0
 8000c6c:	b2a4      	uxth	r4, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c7a:	fb00 f505 	mul.w	r5, r0, r5
 8000c7e:	42a5      	cmp	r5, r4
 8000c80:	d90a      	bls.n	8000c98 <__udivmoddi4+0x90>
 8000c82:	eb1c 0404 	adds.w	r4, ip, r4
 8000c86:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x294>
 8000c8e:	42a5      	cmp	r5, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x294>
 8000c94:	4464      	add	r4, ip
 8000c96:	3802      	subs	r0, #2
 8000c98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9c:	1b64      	subs	r4, r4, r5
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11e      	cbz	r6, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40dc      	lsrs	r4, r3
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	e9c6 4300 	strd	r4, r3, [r6]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0xbc>
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	f000 80ed 	beq.w	8000e92 <__udivmoddi4+0x28a>
 8000cb8:	2100      	movs	r1, #0
 8000cba:	e9c6 0500 	strd	r0, r5, [r6]
 8000cbe:	4608      	mov	r0, r1
 8000cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc4:	fab3 f183 	clz	r1, r3
 8000cc8:	2900      	cmp	r1, #0
 8000cca:	d149      	bne.n	8000d60 <__udivmoddi4+0x158>
 8000ccc:	42ab      	cmp	r3, r5
 8000cce:	d302      	bcc.n	8000cd6 <__udivmoddi4+0xce>
 8000cd0:	4282      	cmp	r2, r0
 8000cd2:	f200 80f8 	bhi.w	8000ec6 <__udivmoddi4+0x2be>
 8000cd6:	1a84      	subs	r4, r0, r2
 8000cd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cdc:	2001      	movs	r0, #1
 8000cde:	4617      	mov	r7, r2
 8000ce0:	2e00      	cmp	r6, #0
 8000ce2:	d0e2      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	e9c6 4700 	strd	r4, r7, [r6]
 8000ce8:	e7df      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cea:	b902      	cbnz	r2, 8000cee <__udivmoddi4+0xe6>
 8000cec:	deff      	udf	#255	; 0xff
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8090 	bne.w	8000e18 <__udivmoddi4+0x210>
 8000cf8:	1a8a      	subs	r2, r1, r2
 8000cfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfe:	fa1f fe8c 	uxth.w	lr, ip
 8000d02:	2101      	movs	r1, #1
 8000d04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d08:	fb07 2015 	mls	r0, r7, r5, r2
 8000d0c:	0c22      	lsrs	r2, r4, #16
 8000d0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d12:	fb0e f005 	mul.w	r0, lr, r5
 8000d16:	4290      	cmp	r0, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x124>
 8000d1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d1e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x122>
 8000d24:	4290      	cmp	r0, r2
 8000d26:	f200 80cb 	bhi.w	8000ec0 <__udivmoddi4+0x2b8>
 8000d2a:	4645      	mov	r5, r8
 8000d2c:	1a12      	subs	r2, r2, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d34:	fb07 2210 	mls	r2, r7, r0, r2
 8000d38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d40:	45a6      	cmp	lr, r4
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x14e>
 8000d44:	eb1c 0404 	adds.w	r4, ip, r4
 8000d48:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d4c:	d202      	bcs.n	8000d54 <__udivmoddi4+0x14c>
 8000d4e:	45a6      	cmp	lr, r4
 8000d50:	f200 80bb 	bhi.w	8000eca <__udivmoddi4+0x2c2>
 8000d54:	4610      	mov	r0, r2
 8000d56:	eba4 040e 	sub.w	r4, r4, lr
 8000d5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d5e:	e79f      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d60:	f1c1 0720 	rsb	r7, r1, #32
 8000d64:	408b      	lsls	r3, r1
 8000d66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d72:	fa20 f307 	lsr.w	r3, r0, r7
 8000d76:	40fd      	lsrs	r5, r7
 8000d78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d7c:	4323      	orrs	r3, r4
 8000d7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d82:	fa1f fe8c 	uxth.w	lr, ip
 8000d86:	fb09 5518 	mls	r5, r9, r8, r5
 8000d8a:	0c1c      	lsrs	r4, r3, #16
 8000d8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d90:	fb08 f50e 	mul.w	r5, r8, lr
 8000d94:	42a5      	cmp	r5, r4
 8000d96:	fa02 f201 	lsl.w	r2, r2, r1
 8000d9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d9e:	d90b      	bls.n	8000db8 <__udivmoddi4+0x1b0>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da8:	f080 8088 	bcs.w	8000ebc <__udivmoddi4+0x2b4>
 8000dac:	42a5      	cmp	r5, r4
 8000dae:	f240 8085 	bls.w	8000ebc <__udivmoddi4+0x2b4>
 8000db2:	f1a8 0802 	sub.w	r8, r8, #2
 8000db6:	4464      	add	r4, ip
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	b29d      	uxth	r5, r3
 8000dbc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc0:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dcc:	45a6      	cmp	lr, r4
 8000dce:	d908      	bls.n	8000de2 <__udivmoddi4+0x1da>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000dd8:	d26c      	bcs.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dda:	45a6      	cmp	lr, r4
 8000ddc:	d96a      	bls.n	8000eb4 <__udivmoddi4+0x2ac>
 8000dde:	3b02      	subs	r3, #2
 8000de0:	4464      	add	r4, ip
 8000de2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000de6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dea:	eba4 040e 	sub.w	r4, r4, lr
 8000dee:	42ac      	cmp	r4, r5
 8000df0:	46c8      	mov	r8, r9
 8000df2:	46ae      	mov	lr, r5
 8000df4:	d356      	bcc.n	8000ea4 <__udivmoddi4+0x29c>
 8000df6:	d053      	beq.n	8000ea0 <__udivmoddi4+0x298>
 8000df8:	b156      	cbz	r6, 8000e10 <__udivmoddi4+0x208>
 8000dfa:	ebb0 0208 	subs.w	r2, r0, r8
 8000dfe:	eb64 040e 	sbc.w	r4, r4, lr
 8000e02:	fa04 f707 	lsl.w	r7, r4, r7
 8000e06:	40ca      	lsrs	r2, r1
 8000e08:	40cc      	lsrs	r4, r1
 8000e0a:	4317      	orrs	r7, r2
 8000e0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e10:	4618      	mov	r0, r3
 8000e12:	2100      	movs	r1, #0
 8000e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e18:	f1c3 0120 	rsb	r1, r3, #32
 8000e1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e20:	fa20 f201 	lsr.w	r2, r0, r1
 8000e24:	fa25 f101 	lsr.w	r1, r5, r1
 8000e28:	409d      	lsls	r5, r3
 8000e2a:	432a      	orrs	r2, r5
 8000e2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e30:	fa1f fe8c 	uxth.w	lr, ip
 8000e34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e38:	fb07 1510 	mls	r5, r7, r0, r1
 8000e3c:	0c11      	lsrs	r1, r2, #16
 8000e3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e42:	fb00 f50e 	mul.w	r5, r0, lr
 8000e46:	428d      	cmp	r5, r1
 8000e48:	fa04 f403 	lsl.w	r4, r4, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x258>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e56:	d22f      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e58:	428d      	cmp	r5, r1
 8000e5a:	d92d      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e5c:	3802      	subs	r0, #2
 8000e5e:	4461      	add	r1, ip
 8000e60:	1b49      	subs	r1, r1, r5
 8000e62:	b292      	uxth	r2, r2
 8000e64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e68:	fb07 1115 	mls	r1, r7, r5, r1
 8000e6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e70:	fb05 f10e 	mul.w	r1, r5, lr
 8000e74:	4291      	cmp	r1, r2
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x282>
 8000e78:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e80:	d216      	bcs.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e82:	4291      	cmp	r1, r2
 8000e84:	d914      	bls.n	8000eb0 <__udivmoddi4+0x2a8>
 8000e86:	3d02      	subs	r5, #2
 8000e88:	4462      	add	r2, ip
 8000e8a:	1a52      	subs	r2, r2, r1
 8000e8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e90:	e738      	b.n	8000d04 <__udivmoddi4+0xfc>
 8000e92:	4631      	mov	r1, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e98:	4639      	mov	r1, r7
 8000e9a:	e6e6      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e9c:	4610      	mov	r0, r2
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x90>
 8000ea0:	4548      	cmp	r0, r9
 8000ea2:	d2a9      	bcs.n	8000df8 <__udivmoddi4+0x1f0>
 8000ea4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eac:	3b01      	subs	r3, #1
 8000eae:	e7a3      	b.n	8000df8 <__udivmoddi4+0x1f0>
 8000eb0:	4645      	mov	r5, r8
 8000eb2:	e7ea      	b.n	8000e8a <__udivmoddi4+0x282>
 8000eb4:	462b      	mov	r3, r5
 8000eb6:	e794      	b.n	8000de2 <__udivmoddi4+0x1da>
 8000eb8:	4640      	mov	r0, r8
 8000eba:	e7d1      	b.n	8000e60 <__udivmoddi4+0x258>
 8000ebc:	46d0      	mov	r8, sl
 8000ebe:	e77b      	b.n	8000db8 <__udivmoddi4+0x1b0>
 8000ec0:	3d02      	subs	r5, #2
 8000ec2:	4462      	add	r2, ip
 8000ec4:	e732      	b.n	8000d2c <__udivmoddi4+0x124>
 8000ec6:	4608      	mov	r0, r1
 8000ec8:	e70a      	b.n	8000ce0 <__udivmoddi4+0xd8>
 8000eca:	4464      	add	r4, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e742      	b.n	8000d56 <__udivmoddi4+0x14e>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <KalmanFilterC>:
#include "main.h"


//C
  int KalmanFilterC(float* InputArray, float* OutputArray, struct kalman_state * kstate, int length){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b087      	sub	sp, #28
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
    	for (int i = 0; i<length; i++){
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e04b      	b.n	8000f80 <KalmanFilterC+0xac>

    		kstate->p = kstate->p + kstate->q;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	ed93 7a03 	vldr	s14, [r3, #12]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	edd3 7a00 	vldr	s15, [r3]
 8000ef4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	edc3 7a03 	vstr	s15, [r3, #12]
    		kstate->k = kstate->p/(kstate->p + kstate->r);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	edd3 6a03 	vldr	s13, [r3, #12]
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	ed93 7a03 	vldr	s14, [r3, #12]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000f14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	edc3 7a04 	vstr	s15, [r3, #16]
    		kstate->x = kstate->x + (kstate->k)*(InputArray[i]-kstate->x);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	ed93 7a02 	vldr	s14, [r3, #8]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	edd3 6a04 	vldr	s13, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	68fa      	ldr	r2, [r7, #12]
 8000f30:	4413      	add	r3, r2
 8000f32:	ed93 6a00 	vldr	s12, [r3]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	edd3 7a02 	vldr	s15, [r3, #8]
 8000f3c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f40:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	edc3 7a02 	vstr	s15, [r3, #8]
    		kstate->p = (1-kstate->k)*kstate->p;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	edd3 7a04 	vldr	s15, [r3, #16]
 8000f54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000f58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8000f62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	edc3 7a03 	vstr	s15, [r3, #12]
    		OutputArray[i] = kstate->x;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	687a      	ldr	r2, [r7, #4]
 8000f76:	6892      	ldr	r2, [r2, #8]
 8000f78:	601a      	str	r2, [r3, #0]
    	for (int i = 0; i<length; i++){
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbaf      	blt.n	8000ee8 <KalmanFilterC+0x14>
    	}
    	return 0;
 8000f88:	2300      	movs	r3, #0
    }
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	371c      	adds	r7, #28
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
	...

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f9c:	b0f2      	sub	sp, #456	; 0x1c8
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f001 fa51 	bl	8002446 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f880 	bl	80010a8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000fa8:	f000 f8e0 	bl	800116c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fac:	f000 fc36 	bl	800181c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000fb0:	f000 f90c 	bl	80011cc <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000fb4:	f000 f96e 	bl	8001294 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000fb8:	f000 f9a4 	bl	8001304 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000fbc:	f000 f9e2 	bl	8001384 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000fc0:	f000 fa20 	bl	8001404 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000fc4:	f000 fa74 	bl	80014b0 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000fc8:	f000 fab0 	bl	800152c <MX_SPI3_Init>
  MX_UART4_Init();
 8000fcc:	f000 faec 	bl	80015a8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000fd0:	f000 fb36 	bl	8001640 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000fd4:	f000 fb80 	bl	80016d8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000fd8:	f000 fbcc 	bl	8001774 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000fdc:	f000 fc16 	bl	800180c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8000fe0:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000fe4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	; (800109c <main+0x104>)
 8000fea:	4618      	mov	r0, r3
 8000fec:	4611      	mov	r1, r2
 8000fee:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	f006 fcb3 	bl	800795e <memcpy>
  					9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087,
  					9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
  					10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
  					9.5799256668};

  float measurement[] = {0,1,2,3,4};
 8000ff8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000ffc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001000:	4a27      	ldr	r2, [pc, #156]	; (80010a0 <main+0x108>)
 8001002:	461c      	mov	r4, r3
 8001004:	4615      	mov	r5, r2
 8001006:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001008:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800100a:	682b      	ldr	r3, [r5, #0]
 800100c:	6023      	str	r3, [r4, #0]
  struct kalman_state SValue = {0.1,0.1,5,0.1,0};
 800100e:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8001012:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <main+0x10c>)
 8001018:	461c      	mov	r4, r3
 800101a:	4615      	mov	r5, r2
 800101c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	6023      	str	r3, [r4, #0]
  int Length = sizeof(measurement)/sizeof(measurement[0]);
 8001024:	2305      	movs	r3, #5
 8001026:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  float OutputArray[Length];
 800102a:	f8d7 11c4 	ldr.w	r1, [r7, #452]	; 0x1c4
 800102e:	1e4b      	subs	r3, r1, #1
 8001030:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001034:	460a      	mov	r2, r1
 8001036:	2300      	movs	r3, #0
 8001038:	4692      	mov	sl, r2
 800103a:	469b      	mov	fp, r3
 800103c:	f04f 0200 	mov.w	r2, #0
 8001040:	f04f 0300 	mov.w	r3, #0
 8001044:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8001048:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 800104c:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8001050:	460a      	mov	r2, r1
 8001052:	2300      	movs	r3, #0
 8001054:	4690      	mov	r8, r2
 8001056:	4699      	mov	r9, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	f04f 0300 	mov.w	r3, #0
 8001060:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001064:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001068:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800106c:	460b      	mov	r3, r1
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	3307      	adds	r3, #7
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	ebad 0d03 	sub.w	sp, sp, r3
 800107a:	466b      	mov	r3, sp
 800107c:	3303      	adds	r3, #3
 800107e:	089b      	lsrs	r3, r3, #2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  {
//	int ArraySize = sizeof(TEST_ARRAY)/sizeof(TEST_ARRAY[0]);
//    int MeasurementSize = sizeof(measurement)/sizeof(measurement[0]);
//	for (int i = 0; i<MeasurementSize;i++){
//		kalman(&SValue, measurement[i]);
	KalmanFilterC(&measurement,&OutputArray,&SValue, Length);
 8001086:	463a      	mov	r2, r7
 8001088:	f107 0014 	add.w	r0, r7, #20
 800108c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001090:	f8d7 11bc 	ldr.w	r1, [r7, #444]	; 0x1bc
 8001094:	f7ff ff1e 	bl	8000ed4 <KalmanFilterC>
 8001098:	e7f5      	b.n	8001086 <main+0xee>
 800109a:	bf00      	nop
 800109c:	08009830 	.word	0x08009830
 80010a0:	080099c4 	.word	0x080099c4
 80010a4:	080099d8 	.word	0x080099d8

080010a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b096      	sub	sp, #88	; 0x58
 80010ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	2244      	movs	r2, #68	; 0x44
 80010b4:	2100      	movs	r1, #0
 80010b6:	4618      	mov	r0, r3
 80010b8:	f006 fc18 	bl	80078ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010bc:	463b      	mov	r3, r7
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f003 fb36 	bl	800473c <HAL_PWREx_ControlVoltageScaling>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0x32>
  {
    Error_Handler();
 80010d6:	f000 fce3 	bl	8001aa0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80010da:	f003 faff 	bl	80046dc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <SystemClock_Config+0xc0>)
 80010e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <SystemClock_Config+0xc0>)
 80010e6:	f023 0318 	bic.w	r3, r3, #24
 80010ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80010ee:	2314      	movs	r3, #20
 80010f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010f2:	2301      	movs	r3, #1
 80010f4:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80010f6:	2301      	movs	r3, #1
 80010f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80010fe:	2360      	movs	r3, #96	; 0x60
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001106:	2301      	movs	r3, #1
 8001108:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800110a:	2301      	movs	r3, #1
 800110c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800110e:	233c      	movs	r3, #60	; 0x3c
 8001110:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800111a:	2302      	movs	r3, #2
 800111c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4618      	mov	r0, r3
 8001124:	f003 fbae 	bl	8004884 <HAL_RCC_OscConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800112e:	f000 fcb7 	bl	8001aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001132:	230f      	movs	r3, #15
 8001134:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001136:	2303      	movs	r3, #3
 8001138:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001146:	463b      	mov	r3, r7
 8001148:	2105      	movs	r1, #5
 800114a:	4618      	mov	r0, r3
 800114c:	f003 ffb4 	bl	80050b8 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001156:	f000 fca3 	bl	8001aa0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800115a:	f004 fd9b 	bl	8005c94 <HAL_RCCEx_EnableMSIPLLMode>
}
 800115e:	bf00      	nop
 8001160:	3758      	adds	r7, #88	; 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40021000 	.word	0x40021000

0800116c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b0a6      	sub	sp, #152	; 0x98
 8001170:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	2294      	movs	r2, #148	; 0x94
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f006 fbb7 	bl	80078ec <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 800117e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001182:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001188:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800118c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001190:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001192:	2301      	movs	r3, #1
 8001194:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001196:	2301      	movs	r3, #1
 8001198:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800119a:	2318      	movs	r3, #24
 800119c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800119e:	2302      	movs	r3, #2
 80011a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011a2:	2302      	movs	r3, #2
 80011a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80011aa:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80011ae:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	4618      	mov	r0, r3
 80011b4:	f004 fa3e 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80011be:	f000 fc6f 	bl	8001aa0 <Error_Handler>
  }
}
 80011c2:	bf00      	nop
 80011c4:	3798      	adds	r7, #152	; 0x98
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011d2:	463b      	mov	r3, r7
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
 80011e0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011e2:	4b29      	ldr	r3, [pc, #164]	; (8001288 <MX_ADC1_Init+0xbc>)
 80011e4:	4a29      	ldr	r2, [pc, #164]	; (800128c <MX_ADC1_Init+0xc0>)
 80011e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <MX_ADC1_Init+0xbc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011ee:	4b26      	ldr	r3, [pc, #152]	; (8001288 <MX_ADC1_Init+0xbc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011f4:	4b24      	ldr	r3, [pc, #144]	; (8001288 <MX_ADC1_Init+0xbc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011fa:	4b23      	ldr	r3, [pc, #140]	; (8001288 <MX_ADC1_Init+0xbc>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001200:	4b21      	ldr	r3, [pc, #132]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001202:	2204      	movs	r2, #4
 8001204:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001208:	2200      	movs	r2, #0
 800120a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800120c:	4b1e      	ldr	r3, [pc, #120]	; (8001288 <MX_ADC1_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001214:	2201      	movs	r2, #1
 8001216:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001218:	4b1b      	ldr	r3, [pc, #108]	; (8001288 <MX_ADC1_Init+0xbc>)
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001220:	4b19      	ldr	r3, [pc, #100]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001222:	2200      	movs	r2, #0
 8001224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001228:	2200      	movs	r2, #0
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800122c:	4b16      	ldr	r3, [pc, #88]	; (8001288 <MX_ADC1_Init+0xbc>)
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001236:	2200      	movs	r2, #0
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800123a:	4b13      	ldr	r3, [pc, #76]	; (8001288 <MX_ADC1_Init+0xbc>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001242:	4811      	ldr	r0, [pc, #68]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001244:	f001 fb14 	bl	8002870 <HAL_ADC_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800124e:	f000 fc27 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001252:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_ADC1_Init+0xc4>)
 8001254:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001256:	2306      	movs	r3, #6
 8001258:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800125a:	2300      	movs	r3, #0
 800125c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800125e:	237f      	movs	r3, #127	; 0x7f
 8001260:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001262:	2304      	movs	r3, #4
 8001264:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800126a:	463b      	mov	r3, r7
 800126c:	4619      	mov	r1, r3
 800126e:	4806      	ldr	r0, [pc, #24]	; (8001288 <MX_ADC1_Init+0xbc>)
 8001270:	f001 fc44 	bl	8002afc <HAL_ADC_ConfigChannel>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800127a:	f000 fc11 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001f0 	.word	0x200001f0
 800128c:	50040000 	.word	0x50040000
 8001290:	04300002 	.word	0x04300002

08001294 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001298:	4b18      	ldr	r3, [pc, #96]	; (80012fc <MX_DFSDM1_Init+0x68>)
 800129a:	4a19      	ldr	r2, [pc, #100]	; (8001300 <MX_DFSDM1_Init+0x6c>)
 800129c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800129e:	4b17      	ldr	r3, [pc, #92]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012a0:	2201      	movs	r2, #1
 80012a2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80012aa:	4b14      	ldr	r3, [pc, #80]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012ac:	2202      	movs	r2, #2
 80012ae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80012b0:	4b12      	ldr	r3, [pc, #72]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80012b6:	4b11      	ldr	r3, [pc, #68]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80012bc:	4b0f      	ldr	r3, [pc, #60]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012be:	2200      	movs	r2, #0
 80012c0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80012c2:	4b0e      	ldr	r3, [pc, #56]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012ca:	2204      	movs	r2, #4
 80012cc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80012da:	4b08      	ldr	r3, [pc, #32]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80012e6:	4805      	ldr	r0, [pc, #20]	; (80012fc <MX_DFSDM1_Init+0x68>)
 80012e8:	f002 f916 	bl	8003518 <HAL_DFSDM_ChannelInit>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80012f2:	f000 fbd5 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000258 	.word	0x20000258
 8001300:	40016040 	.word	0x40016040

08001304 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <MX_I2C1_Init+0x74>)
 800130a:	4a1c      	ldr	r2, [pc, #112]	; (800137c <MX_I2C1_Init+0x78>)
 800130c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <MX_I2C1_Init+0x74>)
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <MX_I2C1_Init+0x7c>)
 8001312:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800131a:	4b17      	ldr	r3, [pc, #92]	; (8001378 <MX_I2C1_Init+0x74>)
 800131c:	2201      	movs	r2, #1
 800131e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_I2C1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_I2C1_Init+0x74>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <MX_I2C1_Init+0x74>)
 8001340:	f002 fbc3 	bl	8003aca <HAL_I2C_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800134a:	f000 fba9 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800134e:	2100      	movs	r1, #0
 8001350:	4809      	ldr	r0, [pc, #36]	; (8001378 <MX_I2C1_Init+0x74>)
 8001352:	f002 fc55 	bl	8003c00 <HAL_I2CEx_ConfigAnalogFilter>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800135c:	f000 fba0 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001360:	2100      	movs	r1, #0
 8001362:	4805      	ldr	r0, [pc, #20]	; (8001378 <MX_I2C1_Init+0x74>)
 8001364:	f002 fc97 	bl	8003c96 <HAL_I2CEx_ConfigDigitalFilter>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800136e:	f000 fb97 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000290 	.word	0x20000290
 800137c:	40005400 	.word	0x40005400
 8001380:	307075b1 	.word	0x307075b1

08001384 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001388:	4b1b      	ldr	r3, [pc, #108]	; (80013f8 <MX_I2C2_Init+0x74>)
 800138a:	4a1c      	ldr	r2, [pc, #112]	; (80013fc <MX_I2C2_Init+0x78>)
 800138c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 800138e:	4b1a      	ldr	r3, [pc, #104]	; (80013f8 <MX_I2C2_Init+0x74>)
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <MX_I2C2_Init+0x7c>)
 8001392:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001394:	4b18      	ldr	r3, [pc, #96]	; (80013f8 <MX_I2C2_Init+0x74>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800139a:	4b17      	ldr	r3, [pc, #92]	; (80013f8 <MX_I2C2_Init+0x74>)
 800139c:	2201      	movs	r2, #1
 800139e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013a0:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013a6:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013ac:	4b12      	ldr	r3, [pc, #72]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013be:	480e      	ldr	r0, [pc, #56]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013c0:	f002 fb83 	bl	8003aca <HAL_I2C_Init>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80013ca:	f000 fb69 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ce:	2100      	movs	r1, #0
 80013d0:	4809      	ldr	r0, [pc, #36]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013d2:	f002 fc15 	bl	8003c00 <HAL_I2CEx_ConfigAnalogFilter>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80013dc:	f000 fb60 	bl	8001aa0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4805      	ldr	r0, [pc, #20]	; (80013f8 <MX_I2C2_Init+0x74>)
 80013e4:	f002 fc57 	bl	8003c96 <HAL_I2CEx_ConfigDigitalFilter>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80013ee:	f000 fb57 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200002e4 	.word	0x200002e4
 80013fc:	40005800 	.word	0x40005800
 8001400:	307075b1 	.word	0x307075b1

08001404 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001418:	4b23      	ldr	r3, [pc, #140]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <MX_OCTOSPI1_Init+0xa8>)
 800141c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800141e:	4b22      	ldr	r3, [pc, #136]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001420:	2201      	movs	r2, #1
 8001422:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001424:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800142a:	4b1f      	ldr	r3, [pc, #124]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 800142c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001430:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001434:	2220      	movs	r2, #32
 8001436:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 800143a:	2201      	movs	r2, #1
 800143c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 800144c:	2201      	movs	r2, #1
 800144e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001458:	2200      	movs	r2, #0
 800145a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800145c:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 800145e:	2200      	movs	r2, #0
 8001460:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001464:	2208      	movs	r2, #8
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001468:	480f      	ldr	r0, [pc, #60]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 800146a:	f002 fc61 	bl	8003d30 <HAL_OSPI_Init>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001474:	f000 fb14 	bl	8001aa0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001478:	2301      	movs	r3, #1
 800147a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800147c:	2301      	movs	r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001480:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001484:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	f241 3288 	movw	r2, #5000	; 0x1388
 800148c:	4619      	mov	r1, r3
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <MX_OCTOSPI1_Init+0xa4>)
 8001490:	f002 fd08 	bl	8003ea4 <HAL_OSPIM_Config>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800149a:	f000 fb01 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000338 	.word	0x20000338
 80014ac:	a0001000 	.word	0xa0001000

080014b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_SPI1_Init+0x74>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_SPI1_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_SPI1_Init+0x74>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_SPI1_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_SPI1_Init+0x74>)
 80014ca:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014ce:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_SPI1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_SPI1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_SPI1_Init+0x74>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_SPI1_Init+0x74>)
 80014e6:	2208      	movs	r2, #8
 80014e8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_SPI1_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_SPI1_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_SPI1_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_SPI1_Init+0x74>)
 80014fe:	2207      	movs	r2, #7
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_SPI1_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_SPI1_Init+0x74>)
 800150a:	2208      	movs	r2, #8
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_SPI1_Init+0x74>)
 8001510:	f004 fdb8 	bl	8006084 <HAL_SPI_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800151a:	f000 fac1 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000388 	.word	0x20000388
 8001528:	40013000 	.word	0x40013000

0800152c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_SPI3_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800153c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001546:	f44f 7240 	mov.w	r2, #768	; 0x300
 800154a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_SPI3_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_SPI3_Init+0x74>)
 800155a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001562:	2208      	movs	r2, #8
 8001564:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_SPI3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_SPI3_Init+0x74>)
 800157a:	2207      	movs	r2, #7
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001586:	2208      	movs	r2, #8
 8001588:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_SPI3_Init+0x74>)
 800158c:	f004 fd7a 	bl	8006084 <HAL_SPI_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 fa83 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200003ec 	.word	0x200003ec
 80015a4:	40003c00 	.word	0x40003c00

080015a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80015ac:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_UART4_Init+0x90>)
 80015ae:	4a23      	ldr	r2, [pc, #140]	; (800163c <MX_UART4_Init+0x94>)
 80015b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <MX_UART4_Init+0x90>)
 80015b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	; (8001638 <MX_UART4_Init+0x90>)
 80015bc:	2200      	movs	r2, #0
 80015be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_UART4_Init+0x90>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <MX_UART4_Init+0x90>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	; (8001638 <MX_UART4_Init+0x90>)
 80015ce:	220c      	movs	r2, #12
 80015d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	; (8001638 <MX_UART4_Init+0x90>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d8:	4b17      	ldr	r3, [pc, #92]	; (8001638 <MX_UART4_Init+0x90>)
 80015da:	2200      	movs	r2, #0
 80015dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015de:	4b16      	ldr	r3, [pc, #88]	; (8001638 <MX_UART4_Init+0x90>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_UART4_Init+0x90>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_UART4_Init+0x90>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80015f0:	4811      	ldr	r0, [pc, #68]	; (8001638 <MX_UART4_Init+0x90>)
 80015f2:	f004 fdea 	bl	80061ca <HAL_UART_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80015fc:	f000 fa50 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_UART4_Init+0x90>)
 8001604:	f005 fb80 	bl	8006d08 <HAL_UARTEx_SetTxFifoThreshold>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800160e:	f000 fa47 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001612:	2100      	movs	r1, #0
 8001614:	4808      	ldr	r0, [pc, #32]	; (8001638 <MX_UART4_Init+0x90>)
 8001616:	f005 fbb5 	bl	8006d84 <HAL_UARTEx_SetRxFifoThreshold>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001620:	f000 fa3e 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001624:	4804      	ldr	r0, [pc, #16]	; (8001638 <MX_UART4_Init+0x90>)
 8001626:	f005 fb36 	bl	8006c96 <HAL_UARTEx_DisableFifoMode>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001630:	f000 fa36 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20000450 	.word	0x20000450
 800163c:	40004c00 	.word	0x40004c00

08001640 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001644:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001646:	4a23      	ldr	r2, [pc, #140]	; (80016d4 <MX_USART1_UART_Init+0x94>)
 8001648:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164a:	4b21      	ldr	r3, [pc, #132]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 800164c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001650:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	4b1f      	ldr	r3, [pc, #124]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001658:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165e:	4b1c      	ldr	r3, [pc, #112]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001660:	2200      	movs	r2, #0
 8001662:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001666:	220c      	movs	r2, #12
 8001668:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001670:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001672:	2200      	movs	r2, #0
 8001674:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001678:	2200      	movs	r2, #0
 800167a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 800167e:	2200      	movs	r2, #0
 8001680:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 8001684:	2200      	movs	r2, #0
 8001686:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001688:	4811      	ldr	r0, [pc, #68]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 800168a:	f004 fd9e 	bl	80061ca <HAL_UART_Init>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001694:	f000 fa04 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001698:	2100      	movs	r1, #0
 800169a:	480d      	ldr	r0, [pc, #52]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 800169c:	f005 fb34 	bl	8006d08 <HAL_UARTEx_SetTxFifoThreshold>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016a6:	f000 f9fb 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4808      	ldr	r0, [pc, #32]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 80016ae:	f005 fb69 	bl	8006d84 <HAL_UARTEx_SetRxFifoThreshold>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016b8:	f000 f9f2 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <MX_USART1_UART_Init+0x90>)
 80016be:	f005 faea 	bl	8006c96 <HAL_UARTEx_DisableFifoMode>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016c8:	f000 f9ea 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	200004e4 	.word	0x200004e4
 80016d4:	40013800 	.word	0x40013800

080016d8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016dc:	4b23      	ldr	r3, [pc, #140]	; (800176c <MX_USART2_UART_Init+0x94>)
 80016de:	4a24      	ldr	r2, [pc, #144]	; (8001770 <MX_USART2_UART_Init+0x98>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016e2:	4b22      	ldr	r3, [pc, #136]	; (800176c <MX_USART2_UART_Init+0x94>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <MX_USART2_UART_Init+0x94>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <MX_USART2_UART_Init+0x94>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016f6:	4b1d      	ldr	r3, [pc, #116]	; (800176c <MX_USART2_UART_Init+0x94>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <MX_USART2_UART_Init+0x94>)
 80016fe:	220c      	movs	r2, #12
 8001700:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001702:	4b1a      	ldr	r3, [pc, #104]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001704:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001708:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800170a:	4b18      	ldr	r3, [pc, #96]	; (800176c <MX_USART2_UART_Init+0x94>)
 800170c:	2200      	movs	r2, #0
 800170e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001710:	4b16      	ldr	r3, [pc, #88]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001718:	2200      	movs	r2, #0
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800171c:	4b13      	ldr	r3, [pc, #76]	; (800176c <MX_USART2_UART_Init+0x94>)
 800171e:	2200      	movs	r2, #0
 8001720:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001722:	4812      	ldr	r0, [pc, #72]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001724:	f004 fd51 	bl	80061ca <HAL_UART_Init>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800172e:	f000 f9b7 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001732:	2100      	movs	r1, #0
 8001734:	480d      	ldr	r0, [pc, #52]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001736:	f005 fae7 	bl	8006d08 <HAL_UARTEx_SetTxFifoThreshold>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001740:	f000 f9ae 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	4809      	ldr	r0, [pc, #36]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001748:	f005 fb1c 	bl	8006d84 <HAL_UARTEx_SetRxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001752:	f000 f9a5 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	; (800176c <MX_USART2_UART_Init+0x94>)
 8001758:	f005 fa9d 	bl	8006c96 <HAL_UARTEx_DisableFifoMode>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001762:	f000 f99d 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000578 	.word	0x20000578
 8001770:	40004400 	.word	0x40004400

08001774 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <MX_USART3_UART_Init+0x90>)
 800177a:	4a23      	ldr	r2, [pc, #140]	; (8001808 <MX_USART3_UART_Init+0x94>)
 800177c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177e:	4b21      	ldr	r3, [pc, #132]	; (8001804 <MX_USART3_UART_Init+0x90>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <MX_USART3_UART_Init+0x90>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <MX_USART3_UART_Init+0x90>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001792:	4b1c      	ldr	r3, [pc, #112]	; (8001804 <MX_USART3_UART_Init+0x90>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_USART3_UART_Init+0x90>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b19      	ldr	r3, [pc, #100]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b17      	ldr	r3, [pc, #92]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017bc:	4811      	ldr	r0, [pc, #68]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017be:	f004 fd04 	bl	80061ca <HAL_UART_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80017c8:	f000 f96a 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017cc:	2100      	movs	r1, #0
 80017ce:	480d      	ldr	r0, [pc, #52]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017d0:	f005 fa9a 	bl	8006d08 <HAL_UARTEx_SetTxFifoThreshold>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80017da:	f000 f961 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017de:	2100      	movs	r1, #0
 80017e0:	4808      	ldr	r0, [pc, #32]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017e2:	f005 facf 	bl	8006d84 <HAL_UARTEx_SetRxFifoThreshold>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80017ec:	f000 f958 	bl	8001aa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	; (8001804 <MX_USART3_UART_Init+0x90>)
 80017f2:	f005 fa50 	bl	8006c96 <HAL_UARTEx_DisableFifoMode>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80017fc:	f000 f950 	bl	8001aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	2000060c 	.word	0x2000060c
 8001808:	40004800 	.word	0x40004800

0800180c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001832:	4b96      	ldr	r3, [pc, #600]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001836:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001838:	f043 0310 	orr.w	r3, r3, #16
 800183c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800183e:	4b93      	ldr	r3, [pc, #588]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	61bb      	str	r3, [r7, #24]
 8001848:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800184a:	4b90      	ldr	r3, [pc, #576]	; (8001a8c <MX_GPIO_Init+0x270>)
 800184c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800184e:	4a8f      	ldr	r2, [pc, #572]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001856:	4b8d      	ldr	r3, [pc, #564]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	617b      	str	r3, [r7, #20]
 8001860:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001862:	4b8a      	ldr	r3, [pc, #552]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	4a89      	ldr	r2, [pc, #548]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800186c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800186e:	4b87      	ldr	r3, [pc, #540]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	613b      	str	r3, [r7, #16]
 8001878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187a:	4b84      	ldr	r3, [pc, #528]	; (8001a8c <MX_GPIO_Init+0x270>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	4a83      	ldr	r2, [pc, #524]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001886:	4b81      	ldr	r3, [pc, #516]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	60fb      	str	r3, [r7, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001892:	4b7e      	ldr	r3, [pc, #504]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001896:	4a7d      	ldr	r2, [pc, #500]	; (8001a8c <MX_GPIO_Init+0x270>)
 8001898:	f043 0302 	orr.w	r3, r3, #2
 800189c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189e:	4b7b      	ldr	r3, [pc, #492]	; (8001a8c <MX_GPIO_Init+0x270>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	60bb      	str	r3, [r7, #8]
 80018a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018aa:	4b78      	ldr	r3, [pc, #480]	; (8001a8c <MX_GPIO_Init+0x270>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ae:	4a77      	ldr	r2, [pc, #476]	; (8001a8c <MX_GPIO_Init+0x270>)
 80018b0:	f043 0308 	orr.w	r3, r3, #8
 80018b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018b6:	4b75      	ldr	r3, [pc, #468]	; (8001a8c <MX_GPIO_Init+0x270>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 80018c2:	2200      	movs	r2, #0
 80018c4:	f240 1105 	movw	r1, #261	; 0x105
 80018c8:	4871      	ldr	r0, [pc, #452]	; (8001a90 <MX_GPIO_Init+0x274>)
 80018ca:	f002 f8c3 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80018ce:	2200      	movs	r2, #0
 80018d0:	f248 111c 	movw	r1, #33052	; 0x811c
 80018d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d8:	f002 f8bc 	bl	8003a54 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80018dc:	2200      	movs	r2, #0
 80018de:	f24f 0134 	movw	r1, #61492	; 0xf034
 80018e2:	486c      	ldr	r0, [pc, #432]	; (8001a94 <MX_GPIO_Init+0x278>)
 80018e4:	f002 f8b6 	bl	8003a54 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 80018e8:	2200      	movs	r2, #0
 80018ea:	f242 0183 	movw	r1, #8323	; 0x2083
 80018ee:	486a      	ldr	r0, [pc, #424]	; (8001a98 <MX_GPIO_Init+0x27c>)
 80018f0:	f002 f8b0 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80018f4:	2200      	movs	r2, #0
 80018f6:	f44f 7110 	mov.w	r1, #576	; 0x240
 80018fa:	4868      	ldr	r0, [pc, #416]	; (8001a9c <MX_GPIO_Init+0x280>)
 80018fc:	f002 f8aa 	bl	8003a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001900:	f240 1305 	movw	r3, #261	; 0x105
 8001904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	485d      	ldr	r0, [pc, #372]	; (8001a90 <MX_GPIO_Init+0x274>)
 800191a:	f001 ff09 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800191e:	237a      	movs	r3, #122	; 0x7a
 8001920:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800192c:	f107 031c 	add.w	r3, r7, #28
 8001930:	4619      	mov	r1, r3
 8001932:	4857      	ldr	r0, [pc, #348]	; (8001a90 <MX_GPIO_Init+0x274>)
 8001934:	f001 fefc 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001938:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 800193c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800193e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	4619      	mov	r1, r3
 800194e:	4853      	ldr	r0, [pc, #332]	; (8001a9c <MX_GPIO_Init+0x280>)
 8001950:	f001 feee 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8001954:	f248 131c 	movw	r3, #33052	; 0x811c
 8001958:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195a:	2301      	movs	r3, #1
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001962:	2300      	movs	r3, #0
 8001964:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001970:	f001 fede 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001974:	2301      	movs	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001978:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 031c 	add.w	r3, r7, #28
 8001986:	4619      	mov	r1, r3
 8001988:	4842      	ldr	r0, [pc, #264]	; (8001a94 <MX_GPIO_Init+0x278>)
 800198a:	f001 fed1 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800198e:	2302      	movs	r3, #2
 8001990:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	2302      	movs	r3, #2
 8001994:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199a:	2300      	movs	r3, #0
 800199c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800199e:	2302      	movs	r3, #2
 80019a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	483a      	ldr	r0, [pc, #232]	; (8001a94 <MX_GPIO_Init+0x278>)
 80019aa:	f001 fec1 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80019ae:	f24f 0334 	movw	r3, #61492	; 0xf034
 80019b2:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b4:	2301      	movs	r3, #1
 80019b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4833      	ldr	r0, [pc, #204]	; (8001a94 <MX_GPIO_Init+0x278>)
 80019c8:	f001 feb2 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 80019cc:	f64d 4304 	movw	r3, #56324	; 0xdc04
 80019d0:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019dc:	f107 031c 	add.w	r3, r7, #28
 80019e0:	4619      	mov	r1, r3
 80019e2:	482d      	ldr	r0, [pc, #180]	; (8001a98 <MX_GPIO_Init+0x27c>)
 80019e4:	f001 fea4 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 80019e8:	f242 0383 	movw	r3, #8323	; 0x2083
 80019ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ee:	2301      	movs	r3, #1
 80019f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f2:	2300      	movs	r3, #0
 80019f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f6:	2300      	movs	r3, #0
 80019f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fa:	f107 031c 	add.w	r3, r7, #28
 80019fe:	4619      	mov	r1, r3
 8001a00:	4825      	ldr	r0, [pc, #148]	; (8001a98 <MX_GPIO_Init+0x27c>)
 8001a02:	f001 fe95 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001a06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	481f      	ldr	r0, [pc, #124]	; (8001a9c <MX_GPIO_Init+0x280>)
 8001a20:	f001 fe86 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 031c 	add.w	r3, r7, #28
 8001a36:	4619      	mov	r1, r3
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f001 fe78 	bl	8003730 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001a40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001a44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a52:	230a      	movs	r3, #10
 8001a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 031c 	add.w	r3, r7, #28
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a60:	f001 fe66 	bl	8003730 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2100      	movs	r1, #0
 8001a68:	2017      	movs	r0, #23
 8001a6a:	f001 fd1e 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001a6e:	2017      	movs	r0, #23
 8001a70:	f001 fd37 	bl	80034e2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2028      	movs	r0, #40	; 0x28
 8001a7a:	f001 fd16 	bl	80034aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a7e:	2028      	movs	r0, #40	; 0x28
 8001a80:	f001 fd2f 	bl	80034e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a84:	bf00      	nop
 8001a86:	3730      	adds	r7, #48	; 0x30
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	48001000 	.word	0x48001000
 8001a94:	48000400 	.word	0x48000400
 8001a98:	48000c00 	.word	0x48000c00
 8001a9c:	48000800 	.word	0x48000800

08001aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aa4:	b672      	cpsid	i
}
 8001aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001aa8:	e7fe      	b.n	8001aa8 <Error_Handler+0x8>
	...

08001aac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab2:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab6:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <HAL_MspInit+0x44>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6613      	str	r3, [r2, #96]	; 0x60
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <HAL_MspInit+0x44>)
 8001ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aca:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <HAL_MspInit+0x44>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ace:	4a08      	ldr	r2, [pc, #32]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ad6:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <HAL_MspInit+0x44>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000

08001af4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08a      	sub	sp, #40	; 0x28
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001afc:	f107 0314 	add.w	r3, r7, #20
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
 8001b04:	605a      	str	r2, [r3, #4]
 8001b06:	609a      	str	r2, [r3, #8]
 8001b08:	60da      	str	r2, [r3, #12]
 8001b0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a15      	ldr	r2, [pc, #84]	; (8001b68 <HAL_ADC_MspInit+0x74>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d123      	bne.n	8001b5e <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_ADC_MspInit+0x78>)
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_ADC_MspInit+0x78>)
 8001b1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_ADC_MspInit+0x78>)
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_ADC_MspInit+0x78>)
 8001b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_ADC_MspInit+0x78>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b3a:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_ADC_MspInit+0x78>)
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001b46:	233f      	movs	r3, #63	; 0x3f
 8001b48:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b4a:	230b      	movs	r3, #11
 8001b4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <HAL_ADC_MspInit+0x7c>)
 8001b5a:	f001 fde9 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	50040000 	.word	0x50040000
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	48000800 	.word	0x48000800

08001b74 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b0ae      	sub	sp, #184	; 0xb8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b8c:	f107 0310 	add.w	r3, r7, #16
 8001b90:	2294      	movs	r2, #148	; 0x94
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f005 fea9 	bl	80078ec <memset>
  if(DFSDM1_Init == 0)
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d142      	bne.n	8001c28 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001ba2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f003 fd3e 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001bbe:	f7ff ff6f 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001bc2:	4b1c      	ldr	r3, [pc, #112]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc6:	4a1b      	ldr	r2, [pc, #108]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bcc:	6613      	str	r3, [r2, #96]	; 0x60
 8001bce:	4b19      	ldr	r3, [pc, #100]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001be0:	f043 0310 	orr.w	r3, r3, #16
 8001be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	60bb      	str	r3, [r7, #8]
 8001bf0:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001bf2:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001bf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c0c:	2306      	movs	r3, #6
 8001c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c12:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001c1a:	f001 fd89 	bl	8003730 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001c1e:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	3301      	adds	r3, #1
 8001c24:	4a02      	ldr	r2, [pc, #8]	; (8001c30 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001c26:	6013      	str	r3, [r2, #0]
  }

}
 8001c28:	bf00      	nop
 8001c2a:	37b8      	adds	r7, #184	; 0xb8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200006a0 	.word	0x200006a0
 8001c34:	40021000 	.word	0x40021000
 8001c38:	48001000 	.word	0x48001000

08001c3c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0b0      	sub	sp, #192	; 0xc0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	2294      	movs	r2, #148	; 0x94
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f005 fe45 	bl	80078ec <memset>
  if(hi2c->Instance==I2C1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a42      	ldr	r2, [pc, #264]	; (8001d70 <HAL_I2C_MspInit+0x134>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d13c      	bne.n	8001ce6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001c6c:	2340      	movs	r3, #64	; 0x40
 8001c6e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fcdb 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001c84:	f7ff ff0c 	bl	8001aa0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c88:	4b3a      	ldr	r3, [pc, #232]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	4a39      	ldr	r2, [pc, #228]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001c8e:	f043 0302 	orr.w	r3, r3, #2
 8001c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c94:	4b37      	ldr	r3, [pc, #220]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c98:	f003 0302 	and.w	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001ca0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ca8:	2312      	movs	r3, #18
 8001caa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cba:	2304      	movs	r3, #4
 8001cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	482c      	ldr	r0, [pc, #176]	; (8001d78 <HAL_I2C_MspInit+0x13c>)
 8001cc8:	f001 fd32 	bl	8003730 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	4a28      	ldr	r2, [pc, #160]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001cd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ce4:	e040      	b.n	8001d68 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a24      	ldr	r2, [pc, #144]	; (8001d7c <HAL_I2C_MspInit+0x140>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d13b      	bne.n	8001d68 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cf8:	f107 0318 	add.w	r3, r7, #24
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f003 fc99 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001d08:	f7ff feca 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	4a18      	ldr	r2, [pc, #96]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d18:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001d24:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d2c:	2312      	movs	r3, #18
 8001d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001d3e:	2304      	movs	r3, #4
 8001d40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d44:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d48:	4619      	mov	r1, r3
 8001d4a:	480b      	ldr	r0, [pc, #44]	; (8001d78 <HAL_I2C_MspInit+0x13c>)
 8001d4c:	f001 fcf0 	bl	8003730 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001d50:	4b08      	ldr	r3, [pc, #32]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d54:	4a07      	ldr	r2, [pc, #28]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001d56:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d5a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_I2C_MspInit+0x138>)
 8001d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d64:	60bb      	str	r3, [r7, #8]
 8001d66:	68bb      	ldr	r3, [r7, #8]
}
 8001d68:	bf00      	nop
 8001d6a:	37c0      	adds	r7, #192	; 0xc0
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	40005400 	.word	0x40005400
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000400 	.word	0x48000400
 8001d7c:	40005800 	.word	0x40005800

08001d80 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b0b0      	sub	sp, #192	; 0xc0
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d88:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	605a      	str	r2, [r3, #4]
 8001d92:	609a      	str	r2, [r3, #8]
 8001d94:	60da      	str	r2, [r3, #12]
 8001d96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d98:	f107 0318 	add.w	r3, r7, #24
 8001d9c:	2294      	movs	r2, #148	; 0x94
 8001d9e:	2100      	movs	r1, #0
 8001da0:	4618      	mov	r0, r3
 8001da2:	f005 fda3 	bl	80078ec <memset>
  if(hospi->Instance==OCTOSPI1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a28      	ldr	r2, [pc, #160]	; (8001e4c <HAL_OSPI_MspInit+0xcc>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d149      	bne.n	8001e44 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001db0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001db4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001dbc:	f107 0318 	add.w	r3, r7, #24
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f003 fc37 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001dcc:	f7ff fe68 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	4a1e      	ldr	r2, [pc, #120]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001dd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001de0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001de8:	4b19      	ldr	r3, [pc, #100]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dec:	4a18      	ldr	r2, [pc, #96]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001dee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df2:	6513      	str	r3, [r2, #80]	; 0x50
 8001df4:	4b16      	ldr	r3, [pc, #88]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dfc:	613b      	str	r3, [r7, #16]
 8001dfe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e00:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e04:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001e06:	f043 0310 	orr.w	r3, r3, #16
 8001e0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0c:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <HAL_OSPI_MspInit+0xd0>)
 8001e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	60fb      	str	r3, [r7, #12]
 8001e16:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e18:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001e32:	230a      	movs	r3, #10
 8001e34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e38:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <HAL_OSPI_MspInit+0xd4>)
 8001e40:	f001 fc76 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001e44:	bf00      	nop
 8001e46:	37c0      	adds	r7, #192	; 0xc0
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	a0001000 	.word	0xa0001000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	48001000 	.word	0x48001000

08001e58 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <HAL_SPI_MspInit+0xdc>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d129      	bne.n	8001ece <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	4a2e      	ldr	r2, [pc, #184]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001e80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e84:	6613      	str	r3, [r2, #96]	; 0x60
 8001e86:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e92:	4b29      	ldr	r3, [pc, #164]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e96:	4a28      	ldr	r2, [pc, #160]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e9e:	4b26      	ldr	r3, [pc, #152]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001eaa:	23e0      	movs	r3, #224	; 0xe0
 8001eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001eba:	2305      	movs	r3, #5
 8001ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ebe:	f107 031c 	add.w	r3, r7, #28
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec8:	f001 fc32 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001ecc:	e02d      	b.n	8001f2a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a1a      	ldr	r2, [pc, #104]	; (8001f3c <HAL_SPI_MspInit+0xe4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d128      	bne.n	8001f2a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001edc:	4a16      	ldr	r2, [pc, #88]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ef4:	4a10      	ldr	r2, [pc, #64]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001efc:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <HAL_SPI_MspInit+0xe0>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f1a:	2306      	movs	r3, #6
 8001f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f1e:	f107 031c 	add.w	r3, r7, #28
 8001f22:	4619      	mov	r1, r3
 8001f24:	4806      	ldr	r0, [pc, #24]	; (8001f40 <HAL_SPI_MspInit+0xe8>)
 8001f26:	f001 fc03 	bl	8003730 <HAL_GPIO_Init>
}
 8001f2a:	bf00      	nop
 8001f2c:	3730      	adds	r7, #48	; 0x30
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40013000 	.word	0x40013000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40003c00 	.word	0x40003c00
 8001f40:	48000800 	.word	0x48000800

08001f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0b4      	sub	sp, #208	; 0xd0
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
 8001f5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f60:	2294      	movs	r2, #148	; 0x94
 8001f62:	2100      	movs	r1, #0
 8001f64:	4618      	mov	r0, r3
 8001f66:	f005 fcc1 	bl	80078ec <memset>
  if(huart->Instance==UART4)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a83      	ldr	r2, [pc, #524]	; (800217c <HAL_UART_MspInit+0x238>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d13c      	bne.n	8001fee <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001f74:	2308      	movs	r3, #8
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f7c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fb57 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f8c:	f7ff fd88 	bl	8001aa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f90:	4b7b      	ldr	r3, [pc, #492]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8001f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f94:	4a7a      	ldr	r2, [pc, #488]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8001f96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f9c:	4b78      	ldr	r3, [pc, #480]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8001f9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa8:	4b75      	ldr	r3, [pc, #468]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	4a74      	ldr	r2, [pc, #464]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb4:	4b72      	ldr	r3, [pc, #456]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	623b      	str	r3, [r7, #32]
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fe8:	f001 fba2 	bl	8003730 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fec:	e0c2      	b.n	8002174 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a64      	ldr	r2, [pc, #400]	; (8002184 <HAL_UART_MspInit+0x240>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d13b      	bne.n	8002070 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002000:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002004:	4618      	mov	r0, r3
 8002006:	f003 fb15 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8002010:	f7ff fd46 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002014:	4b5a      	ldr	r3, [pc, #360]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002018:	4a59      	ldr	r2, [pc, #356]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800201a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201e:	6613      	str	r3, [r2, #96]	; 0x60
 8002020:	4b57      	ldr	r3, [pc, #348]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b54      	ldr	r3, [pc, #336]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800202e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002030:	4a53      	ldr	r2, [pc, #332]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002032:	f043 0302 	orr.w	r3, r3, #2
 8002036:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002038:	4b51      	ldr	r3, [pc, #324]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800203a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	61bb      	str	r3, [r7, #24]
 8002042:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002044:	23c0      	movs	r3, #192	; 0xc0
 8002046:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002056:	2303      	movs	r3, #3
 8002058:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800205c:	2307      	movs	r3, #7
 800205e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002062:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002066:	4619      	mov	r1, r3
 8002068:	4847      	ldr	r0, [pc, #284]	; (8002188 <HAL_UART_MspInit+0x244>)
 800206a:	f001 fb61 	bl	8003730 <HAL_GPIO_Init>
}
 800206e:	e081      	b.n	8002174 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a45      	ldr	r2, [pc, #276]	; (800218c <HAL_UART_MspInit+0x248>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d13b      	bne.n	80020f2 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800207a:	2302      	movs	r3, #2
 800207c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800207e:	2300      	movs	r3, #0
 8002080:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002086:	4618      	mov	r0, r3
 8002088:	f003 fad4 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002092:	f7ff fd05 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002096:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800209a:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800209c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a0:	6593      	str	r3, [r2, #88]	; 0x58
 80020a2:	4b37      	ldr	r3, [pc, #220]	; (8002180 <HAL_UART_MspInit+0x23c>)
 80020a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_UART_MspInit+0x23c>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	4a33      	ldr	r2, [pc, #204]	; (8002180 <HAL_UART_MspInit+0x23c>)
 80020b4:	f043 0308 	orr.w	r3, r3, #8
 80020b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ba:	4b31      	ldr	r3, [pc, #196]	; (8002180 <HAL_UART_MspInit+0x23c>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020be:	f003 0308 	and.w	r3, r3, #8
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80020c6:	2378      	movs	r3, #120	; 0x78
 80020c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d2:	2300      	movs	r3, #0
 80020d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020de:	2307      	movs	r3, #7
 80020e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020e8:	4619      	mov	r1, r3
 80020ea:	4829      	ldr	r0, [pc, #164]	; (8002190 <HAL_UART_MspInit+0x24c>)
 80020ec:	f001 fb20 	bl	8003730 <HAL_GPIO_Init>
}
 80020f0:	e040      	b.n	8002174 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a27      	ldr	r2, [pc, #156]	; (8002194 <HAL_UART_MspInit+0x250>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d13b      	bne.n	8002174 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020fc:	2304      	movs	r3, #4
 80020fe:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002100:	2300      	movs	r3, #0
 8002102:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002108:	4618      	mov	r0, r3
 800210a:	f003 fa93 	bl	8005634 <HAL_RCCEx_PeriphCLKConfig>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d001      	beq.n	8002118 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002114:	f7ff fcc4 	bl	8001aa0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800211a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211c:	4a18      	ldr	r2, [pc, #96]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800211e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002122:	6593      	str	r3, [r2, #88]	; 0x58
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002130:	4b13      	ldr	r3, [pc, #76]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002134:	4a12      	ldr	r2, [pc, #72]	; (8002180 <HAL_UART_MspInit+0x23c>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800213c:	4b10      	ldr	r3, [pc, #64]	; (8002180 <HAL_UART_MspInit+0x23c>)
 800213e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8002148:	f44f 7340 	mov.w	r3, #768	; 0x300
 800214c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800215c:	2303      	movs	r3, #3
 800215e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002162:	2307      	movs	r3, #7
 8002164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002168:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800216c:	4619      	mov	r1, r3
 800216e:	4808      	ldr	r0, [pc, #32]	; (8002190 <HAL_UART_MspInit+0x24c>)
 8002170:	f001 fade 	bl	8003730 <HAL_GPIO_Init>
}
 8002174:	bf00      	nop
 8002176:	37d0      	adds	r7, #208	; 0xd0
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40004c00 	.word	0x40004c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40013800 	.word	0x40013800
 8002188:	48000400 	.word	0x48000400
 800218c:	40004400 	.word	0x40004400
 8002190:	48000c00 	.word	0x48000c00
 8002194:	40004800 	.word	0x40004800

08002198 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800219c:	e7fe      	b.n	800219c <NMI_Handler+0x4>

0800219e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <HardFault_Handler+0x4>

080021a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <MemManage_Handler+0x4>

080021aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ae:	e7fe      	b.n	80021ae <BusFault_Handler+0x4>

080021b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <UsageFault_Handler+0x4>

080021b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c8:	bf00      	nop
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021d2:	b480      	push	{r7}
 80021d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021e4:	f000 f984 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80021f0:	2020      	movs	r0, #32
 80021f2:	f001 fc47 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80021f6:	2040      	movs	r0, #64	; 0x40
 80021f8:	f001 fc44 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80021fc:	2080      	movs	r0, #128	; 0x80
 80021fe:	f001 fc41 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002202:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002206:	f001 fc3d 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}

0800220e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002212:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002216:	f001 fc35 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800221a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800221e:	f001 fc31 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002222:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002226:	f001 fc2d 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800222a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800222e:	f001 fc29 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8002232:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002236:	f001 fc25 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800223a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800223e:	f001 fc21 	bl	8003a84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}

08002246 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0
  return 1;
 800224a:	2301      	movs	r3, #1
}
 800224c:	4618      	mov	r0, r3
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <_kill>:

int _kill(int pid, int sig)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b082      	sub	sp, #8
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002260:	f005 fb50 	bl	8007904 <__errno>
 8002264:	4603      	mov	r3, r0
 8002266:	2216      	movs	r2, #22
 8002268:	601a      	str	r2, [r3, #0]
  return -1;
 800226a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <_exit>:

void _exit (int status)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800227e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ffe7 	bl	8002256 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002288:	e7fe      	b.n	8002288 <_exit+0x12>

0800228a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e00a      	b.n	80022b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800229c:	f3af 8000 	nop.w
 80022a0:	4601      	mov	r1, r0
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	1c5a      	adds	r2, r3, #1
 80022a6:	60ba      	str	r2, [r7, #8]
 80022a8:	b2ca      	uxtb	r2, r1
 80022aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	3301      	adds	r3, #1
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	dbf0      	blt.n	800229c <_read+0x12>
  }

  return len;
 80022ba:	687b      	ldr	r3, [r7, #4]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022d0:	2300      	movs	r3, #0
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	e009      	b.n	80022ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	60ba      	str	r2, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	4618      	mov	r0, r3
 80022e0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	3301      	adds	r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	dbf1      	blt.n	80022d6 <_write+0x12>
  }
  return len;
 80022f2:	687b      	ldr	r3, [r7, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <_close>:

int _close(int file)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002304:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002324:	605a      	str	r2, [r3, #4]
  return 0;
 8002326:	2300      	movs	r3, #0
}
 8002328:	4618      	mov	r0, r3
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <_isatty>:

int _isatty(int file)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800233c:	2301      	movs	r3, #1
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002356:	2300      	movs	r3, #0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr

08002364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <_sbrk+0x5c>)
 800236e:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <_sbrk+0x60>)
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <_sbrk+0x64>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d102      	bne.n	8002386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002380:	4b11      	ldr	r3, [pc, #68]	; (80023c8 <_sbrk+0x64>)
 8002382:	4a12      	ldr	r2, [pc, #72]	; (80023cc <_sbrk+0x68>)
 8002384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002386:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <_sbrk+0x64>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	429a      	cmp	r2, r3
 8002392:	d207      	bcs.n	80023a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002394:	f005 fab6 	bl	8007904 <__errno>
 8002398:	4603      	mov	r3, r0
 800239a:	220c      	movs	r2, #12
 800239c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a2:	e009      	b.n	80023b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a4:	4b08      	ldr	r3, [pc, #32]	; (80023c8 <_sbrk+0x64>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <_sbrk+0x64>)
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4413      	add	r3, r2
 80023b2:	4a05      	ldr	r2, [pc, #20]	; (80023c8 <_sbrk+0x64>)
 80023b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b6:	68fb      	ldr	r3, [r7, #12]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	200a0000 	.word	0x200a0000
 80023c4:	00000400 	.word	0x00000400
 80023c8:	200006a4 	.word	0x200006a4
 80023cc:	20000820 	.word	0x20000820

080023d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80023d4:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <SystemInit+0x20>)
 80023d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023da:	4a05      	ldr	r2, [pc, #20]	; (80023f0 <SystemInit+0x20>)
 80023dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80023e4:	bf00      	nop
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80023f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800242c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023f8:	f7ff ffea 	bl	80023d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023fc:	480c      	ldr	r0, [pc, #48]	; (8002430 <LoopForever+0x6>)
  ldr r1, =_edata
 80023fe:	490d      	ldr	r1, [pc, #52]	; (8002434 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002400:	4a0d      	ldr	r2, [pc, #52]	; (8002438 <LoopForever+0xe>)
  movs r3, #0
 8002402:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002404:	e002      	b.n	800240c <LoopCopyDataInit>

08002406 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002406:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002408:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800240a:	3304      	adds	r3, #4

0800240c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800240c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002410:	d3f9      	bcc.n	8002406 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002412:	4a0a      	ldr	r2, [pc, #40]	; (800243c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002414:	4c0a      	ldr	r4, [pc, #40]	; (8002440 <LoopForever+0x16>)
  movs r3, #0
 8002416:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002418:	e001      	b.n	800241e <LoopFillZerobss>

0800241a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800241a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800241c:	3204      	adds	r2, #4

0800241e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002420:	d3fb      	bcc.n	800241a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002422:	f005 fa75 	bl	8007910 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002426:	f7fe fdb7 	bl	8000f98 <main>

0800242a <LoopForever>:

LoopForever:
    b LoopForever
 800242a:	e7fe      	b.n	800242a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800242c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002430:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002434:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002438:	08009ddc 	.word	0x08009ddc
  ldr r2, =_sbss
 800243c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002440:	2000081c 	.word	0x2000081c

08002444 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002444:	e7fe      	b.n	8002444 <ADC1_IRQHandler>

08002446 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b082      	sub	sp, #8
 800244a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002450:	2003      	movs	r0, #3
 8002452:	f001 f81f 	bl	8003494 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002456:	2000      	movs	r0, #0
 8002458:	f000 f80e 	bl	8002478 <HAL_InitTick>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	71fb      	strb	r3, [r7, #7]
 8002466:	e001      	b.n	800246c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002468:	f7ff fb20 	bl	8001aac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800246c:	79fb      	ldrb	r3, [r7, #7]
}
 800246e:	4618      	mov	r0, r3
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
	...

08002478 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002480:	2300      	movs	r3, #0
 8002482:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002484:	4b17      	ldr	r3, [pc, #92]	; (80024e4 <HAL_InitTick+0x6c>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d023      	beq.n	80024d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800248c:	4b16      	ldr	r3, [pc, #88]	; (80024e8 <HAL_InitTick+0x70>)
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_InitTick+0x6c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800249a:	fbb3 f3f1 	udiv	r3, r3, r1
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f001 f82b 	bl	80034fe <HAL_SYSTICK_Config>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d10f      	bne.n	80024ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0f      	cmp	r3, #15
 80024b2:	d809      	bhi.n	80024c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024b4:	2200      	movs	r2, #0
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024bc:	f000 fff5 	bl	80034aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80024c0:	4a0a      	ldr	r2, [pc, #40]	; (80024ec <HAL_InitTick+0x74>)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e007      	b.n	80024d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	73fb      	strb	r3, [r7, #15]
 80024cc:	e004      	b.n	80024d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
 80024d2:	e001      	b.n	80024d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3710      	adds	r7, #16
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	20000008 	.word	0x20000008
 80024e8:	20000000 	.word	0x20000000
 80024ec:	20000004 	.word	0x20000004

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008
 8002514:	200006a8 	.word	0x200006a8

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	200006a8 	.word	0x200006a8

08002530 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	431a      	orrs	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	609a      	str	r2, [r3, #8]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3360      	adds	r3, #96	; 0x60
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	4b08      	ldr	r3, [pc, #32]	; (80025dc <LL_ADC_SetOffset+0x44>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	4313      	orrs	r3, r2
 80025c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	03fff000 	.word	0x03fff000

080025e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b085      	sub	sp, #20
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3360      	adds	r3, #96	; 0x60
 80025ee:	461a      	mov	r2, r3
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002600:	4618      	mov	r0, r3
 8002602:	3714      	adds	r7, #20
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800260c:	b480      	push	{r7}
 800260e:	b087      	sub	sp, #28
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	3360      	adds	r3, #96	; 0x60
 800261c:	461a      	mov	r2, r3
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	431a      	orrs	r2, r3
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002636:	bf00      	nop
 8002638:	371c      	adds	r7, #28
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr

08002642 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002642:	b480      	push	{r7}
 8002644:	b083      	sub	sp, #12
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
 800264a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	695b      	ldr	r3, [r3, #20]
 8002650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	615a      	str	r2, [r3, #20]
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002668:	b480      	push	{r7}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	3330      	adds	r3, #48	; 0x30
 8002678:	461a      	mov	r2, r3
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	4413      	add	r3, r2
 8002686:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	211f      	movs	r1, #31
 8002694:	fa01 f303 	lsl.w	r3, r1, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	401a      	ands	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	0e9b      	lsrs	r3, r3, #26
 80026a0:	f003 011f 	and.w	r1, r3, #31
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 031f 	and.w	r3, r3, #31
 80026aa:	fa01 f303 	lsl.w	r3, r1, r3
 80026ae:	431a      	orrs	r2, r3
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026b4:	bf00      	nop
 80026b6:	371c      	adds	r7, #28
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b087      	sub	sp, #28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3314      	adds	r3, #20
 80026d0:	461a      	mov	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	0e5b      	lsrs	r3, r3, #25
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	f003 0304 	and.w	r3, r3, #4
 80026dc:	4413      	add	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	0d1b      	lsrs	r3, r3, #20
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2107      	movs	r1, #7
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	0d1b      	lsrs	r3, r3, #20
 80026fa:	f003 031f 	and.w	r3, r3, #31
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	fa01 f303 	lsl.w	r3, r1, r3
 8002704:	431a      	orrs	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800270a:	bf00      	nop
 800270c:	371c      	adds	r7, #28
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002718:	b480      	push	{r7}
 800271a:	b085      	sub	sp, #20
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002730:	43db      	mvns	r3, r3
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f003 0318 	and.w	r3, r3, #24
 800273a:	4908      	ldr	r1, [pc, #32]	; (800275c <LL_ADC_SetChannelSingleDiff+0x44>)
 800273c:	40d9      	lsrs	r1, r3
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	400b      	ands	r3, r1
 8002742:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002746:	431a      	orrs	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	0007ffff 	.word	0x0007ffff

08002760 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002770:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	6093      	str	r3, [r2, #8]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002794:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002798:	d101      	bne.n	800279e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e8:	d101      	bne.n	80027ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr

080027fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b01      	cmp	r3, #1
 800280e:	d101      	bne.n	8002814 <LL_ADC_IsEnabled+0x18>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <LL_ADC_IsEnabled+0x1a>
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	370c      	adds	r7, #12
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr

08002822 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 0304 	and.w	r3, r3, #4
 8002832:	2b04      	cmp	r3, #4
 8002834:	d101      	bne.n	800283a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d101      	bne.n	8002860 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800285c:	2301      	movs	r3, #1
 800285e:	e000      	b.n	8002862 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b088      	sub	sp, #32
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e129      	b.n	8002ade <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	2b00      	cmp	r3, #0
 8002896:	d109      	bne.n	80028ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff f92b 	bl	8001af4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff67 	bl	8002784 <LL_ADC_IsDeepPowerDownEnabled>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d004      	beq.n	80028c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff4d 	bl	8002760 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ff82 	bl	80027d4 <LL_ADC_IsInternalRegulatorEnabled>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d115      	bne.n	8002902 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4618      	mov	r0, r3
 80028dc:	f7ff ff66 	bl	80027ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028e0:	4b81      	ldr	r3, [pc, #516]	; (8002ae8 <HAL_ADC_Init+0x278>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	099b      	lsrs	r3, r3, #6
 80028e6:	4a81      	ldr	r2, [pc, #516]	; (8002aec <HAL_ADC_Init+0x27c>)
 80028e8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ec:	099b      	lsrs	r3, r3, #6
 80028ee:	3301      	adds	r3, #1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028f4:	e002      	b.n	80028fc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	3b01      	subs	r3, #1
 80028fa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f9      	bne.n	80028f6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff64 	bl	80027d4 <LL_ADC_IsInternalRegulatorEnabled>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d10d      	bne.n	800292e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f043 0210 	orr.w	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002922:	f043 0201 	orr.w	r2, r3, #1
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff75 	bl	8002822 <LL_ADC_REG_IsConversionOngoing>
 8002938:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b00      	cmp	r3, #0
 8002944:	f040 80c2 	bne.w	8002acc <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 80be 	bne.w	8002acc <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002954:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002958:	f043 0202 	orr.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ff49 	bl	80027fc <LL_ADC_IsEnabled>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002970:	485f      	ldr	r0, [pc, #380]	; (8002af0 <HAL_ADC_Init+0x280>)
 8002972:	f7ff ff43 	bl	80027fc <LL_ADC_IsEnabled>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d105      	bne.n	8002988 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4619      	mov	r1, r3
 8002982:	485c      	ldr	r0, [pc, #368]	; (8002af4 <HAL_ADC_Init+0x284>)
 8002984:	f7ff fdd4 	bl	8002530 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	7e5b      	ldrb	r3, [r3, #25]
 800298c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002992:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002998:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800299e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029a6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80029a8:	4313      	orrs	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d106      	bne.n	80029c4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	3b01      	subs	r3, #1
 80029bc:	045b      	lsls	r3, r3, #17
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4313      	orrs	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	4313      	orrs	r3, r2
 80029de:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	68da      	ldr	r2, [r3, #12]
 80029e6:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_ADC_Init+0x288>)
 80029e8:	4013      	ands	r3, r2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6812      	ldr	r2, [r2, #0]
 80029ee:	69b9      	ldr	r1, [r7, #24]
 80029f0:	430b      	orrs	r3, r1
 80029f2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7ff ff25 	bl	8002848 <LL_ADC_INJ_IsConversionOngoing>
 80029fe:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d140      	bne.n	8002a88 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d13d      	bne.n	8002a88 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	7e1b      	ldrb	r3, [r3, #24]
 8002a14:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a16:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002a20:	4313      	orrs	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a2e:	f023 0306 	bic.w	r3, r3, #6
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	6812      	ldr	r2, [r2, #0]
 8002a36:	69b9      	ldr	r1, [r7, #24]
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d118      	bne.n	8002a78 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002a50:	f023 0304 	bic.w	r3, r3, #4
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a5c:	4311      	orrs	r1, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002a62:	4311      	orrs	r1, r2
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f042 0201 	orr.w	r2, r2, #1
 8002a74:	611a      	str	r2, [r3, #16]
 8002a76:	e007      	b.n	8002a88 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0201 	bic.w	r2, r2, #1
 8002a86:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d10c      	bne.n	8002aaa <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f023 010f 	bic.w	r1, r3, #15
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	1e5a      	subs	r2, r3, #1
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa8:	e007      	b.n	8002aba <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 020f 	bic.w	r2, r2, #15
 8002ab8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	659a      	str	r2, [r3, #88]	; 0x58
 8002aca:	e007      	b.n	8002adc <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	f043 0210 	orr.w	r2, r3, #16
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002adc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3720      	adds	r7, #32
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	20000000 	.word	0x20000000
 8002aec:	053e2d63 	.word	0x053e2d63
 8002af0:	50040000 	.word	0x50040000
 8002af4:	50040300 	.word	0x50040300
 8002af8:	fff0c007 	.word	0xfff0c007

08002afc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b0b6      	sub	sp, #216	; 0xd8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x22>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e3d5      	b.n	80032ca <HAL_ADC_ConfigChannel+0x7ce>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f7ff fe79 	bl	8002822 <LL_ADC_REG_IsConversionOngoing>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f040 83ba 	bne.w	80032ac <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2b05      	cmp	r3, #5
 8002b46:	d824      	bhi.n	8002b92 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	3b02      	subs	r3, #2
 8002b4e:	2b03      	cmp	r3, #3
 8002b50:	d81b      	bhi.n	8002b8a <HAL_ADC_ConfigChannel+0x8e>
 8002b52:	a201      	add	r2, pc, #4	; (adr r2, 8002b58 <HAL_ADC_ConfigChannel+0x5c>)
 8002b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b58:	08002b69 	.word	0x08002b69
 8002b5c:	08002b71 	.word	0x08002b71
 8002b60:	08002b79 	.word	0x08002b79
 8002b64:	08002b81 	.word	0x08002b81
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002b68:	230c      	movs	r3, #12
 8002b6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b6e:	e010      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002b70:	2312      	movs	r3, #18
 8002b72:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b76:	e00c      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002b78:	2318      	movs	r3, #24
 8002b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b7e:	e008      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002b80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b84:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b88:	e003      	b.n	8002b92 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002b8a:	2306      	movs	r3, #6
 8002b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b90:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002ba0:	f7ff fd62 	bl	8002668 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fe3a 	bl	8002822 <LL_ADC_REG_IsConversionOngoing>
 8002bae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f7ff fe46 	bl	8002848 <LL_ADC_INJ_IsConversionOngoing>
 8002bbc:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f040 81bf 	bne.w	8002f48 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f040 81ba 	bne.w	8002f48 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bdc:	d10f      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2200      	movs	r2, #0
 8002be8:	4619      	mov	r1, r3
 8002bea:	f7ff fd69 	bl	80026c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fd23 	bl	8002642 <LL_ADC_SetSamplingTimeCommonConfig>
 8002bfc:	e00e      	b.n	8002c1c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6818      	ldr	r0, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6819      	ldr	r1, [r3, #0]
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	f7ff fd58 	bl	80026c0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fd13 	bl	8002642 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	695a      	ldr	r2, [r3, #20]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	08db      	lsrs	r3, r3, #3
 8002c28:	f003 0303 	and.w	r3, r3, #3
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d00a      	beq.n	8002c54 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6919      	ldr	r1, [r3, #16]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002c4e:	f7ff fca3 	bl	8002598 <LL_ADC_SetOffset>
 8002c52:	e179      	b.n	8002f48 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2100      	movs	r1, #0
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f7ff fcc0 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002c60:	4603      	mov	r3, r0
 8002c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <HAL_ADC_ConfigChannel+0x184>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fcb5 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002c76:	4603      	mov	r3, r0
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	f003 021f 	and.w	r2, r3, #31
 8002c7e:	e01e      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x1c2>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7ff fcaa 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ca2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002ca6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d101      	bne.n	8002cb2 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	e004      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002cb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cb6:	fab3 f383 	clz	r3, r3
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d105      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x1da>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	f003 031f 	and.w	r3, r3, #31
 8002cd4:	e018      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x20c>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002cf2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d101      	bne.n	8002cfe <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002cfa:	2320      	movs	r3, #32
 8002cfc:	e004      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002cfe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d02:	fab3 f383 	clz	r3, r3
 8002d06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d106      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff fc79 	bl	800260c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2101      	movs	r1, #1
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff fc5d 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002d26:	4603      	mov	r3, r0
 8002d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <HAL_ADC_ConfigChannel+0x24a>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2101      	movs	r1, #1
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff fc52 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	0e9b      	lsrs	r3, r3, #26
 8002d40:	f003 021f 	and.w	r2, r3, #31
 8002d44:	e01e      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x288>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fc47 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002d52:	4603      	mov	r3, r0
 8002d54:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d5c:	fa93 f3a3 	rbit	r3, r3
 8002d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002d64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002d6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002d74:	2320      	movs	r3, #32
 8002d76:	e004      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002d78:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002d7c:	fab3 f383 	clz	r3, r3
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x2a0>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	e018      	b.n	8002dce <HAL_ADC_ConfigChannel+0x2d2>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002da8:	fa93 f3a3 	rbit	r3, r3
 8002dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002db0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002dc0:	2320      	movs	r3, #32
 8002dc2:	e004      	b.n	8002dce <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2101      	movs	r1, #1
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fc16 	bl	800260c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2102      	movs	r1, #2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7ff fbfa 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x310>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2102      	movs	r1, #2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f7ff fbef 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002e02:	4603      	mov	r3, r0
 8002e04:	0e9b      	lsrs	r3, r3, #26
 8002e06:	f003 021f 	and.w	r2, r3, #31
 8002e0a:	e01e      	b.n	8002e4a <HAL_ADC_ConfigChannel+0x34e>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2102      	movs	r1, #2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff fbe4 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	e004      	b.n	8002e48 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002e3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e42:	fab3 f383 	clz	r3, r3
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d105      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x366>
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	0e9b      	lsrs	r3, r3, #26
 8002e5c:	f003 031f 	and.w	r3, r3, #31
 8002e60:	e014      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x390>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e68:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e6a:	fa93 f3a3 	rbit	r3, r3
 8002e6e:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e72:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002e76:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002e7e:	2320      	movs	r3, #32
 8002e80:	e004      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002e82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d106      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2200      	movs	r2, #0
 8002e96:	2102      	movs	r1, #2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff fbb7 	bl	800260c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2103      	movs	r1, #3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff fb9b 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x3ce>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2103      	movs	r1, #3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f7ff fb90 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	0e9b      	lsrs	r3, r3, #26
 8002ec4:	f003 021f 	and.w	r2, r3, #31
 8002ec8:	e017      	b.n	8002efa <HAL_ADC_ConfigChannel+0x3fe>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2103      	movs	r1, #3
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f7ff fb85 	bl	80025e0 <LL_ADC_GetOffsetChannel>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eda:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002edc:	fa93 f3a3 	rbit	r3, r3
 8002ee0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ee4:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002eec:	2320      	movs	r3, #32
 8002eee:	e003      	b.n	8002ef8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002ef0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ef2:	fab3 f383 	clz	r3, r3
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d105      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x416>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	e011      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x43a>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f1a:	fa93 f3a3 	rbit	r3, r3
 8002f1e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002f20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f22:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002f24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002f2a:	2320      	movs	r3, #32
 8002f2c:	e003      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002f2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f30:	fab3 f383 	clz	r3, r3
 8002f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d106      	bne.n	8002f48 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	2103      	movs	r1, #3
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7ff fb62 	bl	800260c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff fc55 	bl	80027fc <LL_ADC_IsEnabled>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	f040 813f 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6819      	ldr	r1, [r3, #0]
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	461a      	mov	r2, r3
 8002f68:	f7ff fbd6 	bl	8002718 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	4a8e      	ldr	r2, [pc, #568]	; (80031ac <HAL_ADC_ConfigChannel+0x6b0>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	f040 8130 	bne.w	80031d8 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10b      	bne.n	8002fa0 <HAL_ADC_ConfigChannel+0x4a4>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	0e9b      	lsrs	r3, r3, #26
 8002f8e:	3301      	adds	r3, #1
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	2b09      	cmp	r3, #9
 8002f96:	bf94      	ite	ls
 8002f98:	2301      	movls	r3, #1
 8002f9a:	2300      	movhi	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	e019      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x4d8>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa8:	fa93 f3a3 	rbit	r3, r3
 8002fac:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fb0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002fb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002fb8:	2320      	movs	r3, #32
 8002fba:	e003      	b.n	8002fc4 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbe:	fab3 f383 	clz	r3, r3
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	2b09      	cmp	r3, #9
 8002fcc:	bf94      	ite	ls
 8002fce:	2301      	movls	r3, #1
 8002fd0:	2300      	movhi	r3, #0
 8002fd2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d079      	beq.n	80030cc <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d107      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x4f8>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	0e9b      	lsrs	r3, r3, #26
 8002fea:	3301      	adds	r3, #1
 8002fec:	069b      	lsls	r3, r3, #26
 8002fee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002ff2:	e015      	b.n	8003020 <HAL_ADC_ConfigChannel+0x524>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003004:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8003006:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 800300c:	2320      	movs	r3, #32
 800300e:	e003      	b.n	8003018 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8003010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003012:	fab3 f383 	clz	r3, r3
 8003016:	b2db      	uxtb	r3, r3
 8003018:	3301      	adds	r3, #1
 800301a:	069b      	lsls	r3, r3, #26
 800301c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_ADC_ConfigChannel+0x544>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	0e9b      	lsrs	r3, r3, #26
 8003032:	3301      	adds	r3, #1
 8003034:	f003 031f 	and.w	r3, r3, #31
 8003038:	2101      	movs	r1, #1
 800303a:	fa01 f303 	lsl.w	r3, r1, r3
 800303e:	e017      	b.n	8003070 <HAL_ADC_ConfigChannel+0x574>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003046:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800304e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003058:	2320      	movs	r3, #32
 800305a:	e003      	b.n	8003064 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800305c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800305e:	fab3 f383 	clz	r3, r3
 8003062:	b2db      	uxtb	r3, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f003 031f 	and.w	r3, r3, #31
 800306a:	2101      	movs	r1, #1
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	ea42 0103 	orr.w	r1, r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x59a>
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0e9b      	lsrs	r3, r3, #26
 8003086:	3301      	adds	r3, #1
 8003088:	f003 021f 	and.w	r2, r3, #31
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	051b      	lsls	r3, r3, #20
 8003094:	e018      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x5cc>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800309e:	fa93 f3a3 	rbit	r3, r3
 80030a2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80030a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80030ae:	2320      	movs	r3, #32
 80030b0:	e003      	b.n	80030ba <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	fab3 f383 	clz	r3, r3
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 021f 	and.w	r2, r3, #31
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030c8:	430b      	orrs	r3, r1
 80030ca:	e080      	b.n	80031ce <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d107      	bne.n	80030e8 <HAL_ADC_ConfigChannel+0x5ec>
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	0e9b      	lsrs	r3, r3, #26
 80030de:	3301      	adds	r3, #1
 80030e0:	069b      	lsls	r3, r3, #26
 80030e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030e6:	e015      	b.n	8003114 <HAL_ADC_ConfigChannel+0x618>
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030f0:	fa93 f3a3 	rbit	r3, r3
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80030f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80030fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d101      	bne.n	8003104 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	e003      	b.n	800310c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003106:	fab3 f383 	clz	r3, r3
 800310a:	b2db      	uxtb	r3, r3
 800310c:	3301      	adds	r3, #1
 800310e:	069b      	lsls	r3, r3, #26
 8003110:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800311c:	2b00      	cmp	r3, #0
 800311e:	d109      	bne.n	8003134 <HAL_ADC_ConfigChannel+0x638>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	0e9b      	lsrs	r3, r3, #26
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2101      	movs	r1, #1
 800312e:	fa01 f303 	lsl.w	r3, r1, r3
 8003132:	e017      	b.n	8003164 <HAL_ADC_ConfigChannel+0x668>
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	fa93 f3a3 	rbit	r3, r3
 8003140:	61bb      	str	r3, [r7, #24]
  return result;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003146:	6a3b      	ldr	r3, [r7, #32]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 800314c:	2320      	movs	r3, #32
 800314e:	e003      	b.n	8003158 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	3301      	adds	r3, #1
 800315a:	f003 031f 	and.w	r3, r3, #31
 800315e:	2101      	movs	r1, #1
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	ea42 0103 	orr.w	r1, r2, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003170:	2b00      	cmp	r3, #0
 8003172:	d10d      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x694>
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	0e9b      	lsrs	r3, r3, #26
 800317a:	3301      	adds	r3, #1
 800317c:	f003 021f 	and.w	r2, r3, #31
 8003180:	4613      	mov	r3, r2
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	4413      	add	r3, r2
 8003186:	3b1e      	subs	r3, #30
 8003188:	051b      	lsls	r3, r3, #20
 800318a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800318e:	e01d      	b.n	80031cc <HAL_ADC_ConfigChannel+0x6d0>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	fa93 f3a3 	rbit	r3, r3
 800319c:	60fb      	str	r3, [r7, #12]
  return result;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d103      	bne.n	80031b0 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80031a8:	2320      	movs	r3, #32
 80031aa:	e005      	b.n	80031b8 <HAL_ADC_ConfigChannel+0x6bc>
 80031ac:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	fab3 f383 	clz	r3, r3
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	3301      	adds	r3, #1
 80031ba:	f003 021f 	and.w	r2, r3, #31
 80031be:	4613      	mov	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	4413      	add	r3, r2
 80031c4:	3b1e      	subs	r3, #30
 80031c6:	051b      	lsls	r3, r3, #20
 80031c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031cc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80031d2:	4619      	mov	r1, r3
 80031d4:	f7ff fa74 	bl	80026c0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	4b3d      	ldr	r3, [pc, #244]	; (80032d4 <HAL_ADC_ConfigChannel+0x7d8>)
 80031de:	4013      	ands	r3, r2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d06c      	beq.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031e4:	483c      	ldr	r0, [pc, #240]	; (80032d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80031e6:	f7ff f9c9 	bl	800257c <LL_ADC_GetCommonPathInternalCh>
 80031ea:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3a      	ldr	r2, [pc, #232]	; (80032dc <HAL_ADC_ConfigChannel+0x7e0>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d127      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80031f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d121      	bne.n	8003248 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a35      	ldr	r2, [pc, #212]	; (80032e0 <HAL_ADC_ConfigChannel+0x7e4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d157      	bne.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800320e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003212:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003216:	4619      	mov	r1, r3
 8003218:	482f      	ldr	r0, [pc, #188]	; (80032d8 <HAL_ADC_ConfigChannel+0x7dc>)
 800321a:	f7ff f99c 	bl	8002556 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800321e:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_ADC_ConfigChannel+0x7e8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	4a30      	ldr	r2, [pc, #192]	; (80032e8 <HAL_ADC_ConfigChannel+0x7ec>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	4613      	mov	r3, r2
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003238:	e002      	b.n	8003240 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	3b01      	subs	r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f9      	bne.n	800323a <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003246:	e03a      	b.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a27      	ldr	r2, [pc, #156]	; (80032ec <HAL_ADC_ConfigChannel+0x7f0>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d113      	bne.n	800327a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003252:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d10d      	bne.n	800327a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d12a      	bne.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003268:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800326c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003270:	4619      	mov	r1, r3
 8003272:	4819      	ldr	r0, [pc, #100]	; (80032d8 <HAL_ADC_ConfigChannel+0x7dc>)
 8003274:	f7ff f96f 	bl	8002556 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003278:	e021      	b.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a1c      	ldr	r2, [pc, #112]	; (80032f0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d11c      	bne.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003284:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d116      	bne.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a12      	ldr	r2, [pc, #72]	; (80032e0 <HAL_ADC_ConfigChannel+0x7e4>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d111      	bne.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800329a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800329e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032a2:	4619      	mov	r1, r3
 80032a4:	480c      	ldr	r0, [pc, #48]	; (80032d8 <HAL_ADC_ConfigChannel+0x7dc>)
 80032a6:	f7ff f956 	bl	8002556 <LL_ADC_SetCommonPathInternalCh>
 80032aa:	e008      	b.n	80032be <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032b0:	f043 0220 	orr.w	r2, r3, #32
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 80032c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	37d8      	adds	r7, #216	; 0xd8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	80080000 	.word	0x80080000
 80032d8:	50040300 	.word	0x50040300
 80032dc:	c7520000 	.word	0xc7520000
 80032e0:	50040000 	.word	0x50040000
 80032e4:	20000000 	.word	0x20000000
 80032e8:	053e2d63 	.word	0x053e2d63
 80032ec:	cb840000 	.word	0xcb840000
 80032f0:	80000001 	.word	0x80000001

080032f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b085      	sub	sp, #20
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003310:	4013      	ands	r3, r2
 8003312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800331c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003326:	4a04      	ldr	r2, [pc, #16]	; (8003338 <__NVIC_SetPriorityGrouping+0x44>)
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	60d3      	str	r3, [r2, #12]
}
 800332c:	bf00      	nop
 800332e:	3714      	adds	r7, #20
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr
 8003338:	e000ed00 	.word	0xe000ed00

0800333c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003340:	4b04      	ldr	r3, [pc, #16]	; (8003354 <__NVIC_GetPriorityGrouping+0x18>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	0a1b      	lsrs	r3, r3, #8
 8003346:	f003 0307 	and.w	r3, r3, #7
}
 800334a:	4618      	mov	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003366:	2b00      	cmp	r3, #0
 8003368:	db0b      	blt.n	8003382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 021f 	and.w	r2, r3, #31
 8003370:	4907      	ldr	r1, [pc, #28]	; (8003390 <__NVIC_EnableIRQ+0x38>)
 8003372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2001      	movs	r0, #1
 800337a:	fa00 f202 	lsl.w	r2, r0, r2
 800337e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003382:	bf00      	nop
 8003384:	370c      	adds	r7, #12
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	e000e100 	.word	0xe000e100

08003394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	6039      	str	r1, [r7, #0]
 800339e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	db0a      	blt.n	80033be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	b2da      	uxtb	r2, r3
 80033ac:	490c      	ldr	r1, [pc, #48]	; (80033e0 <__NVIC_SetPriority+0x4c>)
 80033ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b2:	0112      	lsls	r2, r2, #4
 80033b4:	b2d2      	uxtb	r2, r2
 80033b6:	440b      	add	r3, r1
 80033b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033bc:	e00a      	b.n	80033d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	4908      	ldr	r1, [pc, #32]	; (80033e4 <__NVIC_SetPriority+0x50>)
 80033c4:	79fb      	ldrb	r3, [r7, #7]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	3b04      	subs	r3, #4
 80033cc:	0112      	lsls	r2, r2, #4
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	440b      	add	r3, r1
 80033d2:	761a      	strb	r2, [r3, #24]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	e000e100 	.word	0xe000e100
 80033e4:	e000ed00 	.word	0xe000ed00

080033e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 0307 	and.w	r3, r3, #7
 80033fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	f1c3 0307 	rsb	r3, r3, #7
 8003402:	2b04      	cmp	r3, #4
 8003404:	bf28      	it	cs
 8003406:	2304      	movcs	r3, #4
 8003408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3304      	adds	r3, #4
 800340e:	2b06      	cmp	r3, #6
 8003410:	d902      	bls.n	8003418 <NVIC_EncodePriority+0x30>
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3b03      	subs	r3, #3
 8003416:	e000      	b.n	800341a <NVIC_EncodePriority+0x32>
 8003418:	2300      	movs	r3, #0
 800341a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800341c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	401a      	ands	r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	43d9      	mvns	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003440:	4313      	orrs	r3, r2
         );
}
 8003442:	4618      	mov	r0, r3
 8003444:	3724      	adds	r7, #36	; 0x24
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	3b01      	subs	r3, #1
 800345c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003460:	d301      	bcc.n	8003466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003462:	2301      	movs	r3, #1
 8003464:	e00f      	b.n	8003486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003466:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <SysTick_Config+0x40>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3b01      	subs	r3, #1
 800346c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800346e:	210f      	movs	r1, #15
 8003470:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003474:	f7ff ff8e 	bl	8003394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <SysTick_Config+0x40>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800347e:	4b04      	ldr	r3, [pc, #16]	; (8003490 <SysTick_Config+0x40>)
 8003480:	2207      	movs	r2, #7
 8003482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3708      	adds	r7, #8
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	e000e010 	.word	0xe000e010

08003494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7ff ff29 	bl	80032f4 <__NVIC_SetPriorityGrouping>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b086      	sub	sp, #24
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034bc:	f7ff ff3e 	bl	800333c <__NVIC_GetPriorityGrouping>
 80034c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	6978      	ldr	r0, [r7, #20]
 80034c8:	f7ff ff8e 	bl	80033e8 <NVIC_EncodePriority>
 80034cc:	4602      	mov	r2, r0
 80034ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff ff5d 	bl	8003394 <__NVIC_SetPriority>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b082      	sub	sp, #8
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	4603      	mov	r3, r0
 80034ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff ff31 	bl	8003358 <__NVIC_EnableIRQ>
}
 80034f6:	bf00      	nop
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b082      	sub	sp, #8
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ffa2 	bl	8003450 <SysTick_Config>
 800350c:	4603      	mov	r3, r0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
	...

08003518 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e0ac      	b.n	8003684 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f8b2 	bl	8003698 <DFSDM_GetChannelFromInstance>
 8003534:	4603      	mov	r3, r0
 8003536:	4a55      	ldr	r2, [pc, #340]	; (800368c <HAL_DFSDM_ChannelInit+0x174>)
 8003538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e09f      	b.n	8003684 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fe fb15 	bl	8001b74 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800354a:	4b51      	ldr	r3, [pc, #324]	; (8003690 <HAL_DFSDM_ChannelInit+0x178>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	4a4f      	ldr	r2, [pc, #316]	; (8003690 <HAL_DFSDM_ChannelInit+0x178>)
 8003552:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003554:	4b4e      	ldr	r3, [pc, #312]	; (8003690 <HAL_DFSDM_ChannelInit+0x178>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d125      	bne.n	80035a8 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800355c:	4b4d      	ldr	r3, [pc, #308]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a4c      	ldr	r2, [pc, #304]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 8003562:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003566:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003568:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	4948      	ldr	r1, [pc, #288]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 8003572:	4313      	orrs	r3, r2
 8003574:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a46      	ldr	r2, [pc, #280]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 800357c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003580:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d108      	bne.n	800359c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800358a:	4b42      	ldr	r3, [pc, #264]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	3b01      	subs	r3, #1
 8003594:	041b      	lsls	r3, r3, #16
 8003596:	493f      	ldr	r1, [pc, #252]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800359c:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a3c      	ldr	r2, [pc, #240]	; (8003694 <HAL_DFSDM_ChannelInit+0x17c>)
 80035a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80035a6:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80035b6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6819      	ldr	r1, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035c6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80035cc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 020f 	bic.w	r2, r2, #15
 80035e4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6819      	ldr	r1, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800360c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6899      	ldr	r1, [r3, #8]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	3b01      	subs	r3, #1
 800361e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003620:	431a      	orrs	r2, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685a      	ldr	r2, [r3, #4]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f002 0207 	and.w	r2, r2, #7
 8003638:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6859      	ldr	r1, [r3, #4]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	430a      	orrs	r2, r1
 8003654:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003664:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2201      	movs	r2, #1
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 f810 	bl	8003698 <DFSDM_GetChannelFromInstance>
 8003678:	4602      	mov	r2, r0
 800367a:	4904      	ldr	r1, [pc, #16]	; (800368c <HAL_DFSDM_ChannelInit+0x174>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	200006b0 	.word	0x200006b0
 8003690:	200006ac 	.word	0x200006ac
 8003694:	40016000 	.word	0x40016000

08003698 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4a1c      	ldr	r2, [pc, #112]	; (8003714 <DFSDM_GetChannelFromInstance+0x7c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d102      	bne.n	80036ae <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	e02b      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <DFSDM_GetChannelFromInstance+0x80>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d102      	bne.n	80036bc <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80036b6:	2301      	movs	r3, #1
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e024      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <DFSDM_GetChannelFromInstance+0x84>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80036c4:	2302      	movs	r3, #2
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e01d      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a14      	ldr	r2, [pc, #80]	; (8003720 <DFSDM_GetChannelFromInstance+0x88>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d102      	bne.n	80036d8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80036d2:	2304      	movs	r3, #4
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	e016      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <DFSDM_GetChannelFromInstance+0x8c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d102      	bne.n	80036e6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80036e0:	2305      	movs	r3, #5
 80036e2:	60fb      	str	r3, [r7, #12]
 80036e4:	e00f      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a0f      	ldr	r2, [pc, #60]	; (8003728 <DFSDM_GetChannelFromInstance+0x90>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d102      	bne.n	80036f4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80036ee:	2306      	movs	r3, #6
 80036f0:	60fb      	str	r3, [r7, #12]
 80036f2:	e008      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a0d      	ldr	r2, [pc, #52]	; (800372c <DFSDM_GetChannelFromInstance+0x94>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d102      	bne.n	8003702 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80036fc:	2307      	movs	r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]
 8003700:	e001      	b.n	8003706 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003702:	2303      	movs	r3, #3
 8003704:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003706:	68fb      	ldr	r3, [r7, #12]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	40016000 	.word	0x40016000
 8003718:	40016020 	.word	0x40016020
 800371c:	40016040 	.word	0x40016040
 8003720:	40016080 	.word	0x40016080
 8003724:	400160a0 	.word	0x400160a0
 8003728:	400160c0 	.word	0x400160c0
 800372c:	400160e0 	.word	0x400160e0

08003730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003730:	b480      	push	{r7}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373e:	e166      	b.n	8003a0e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	2101      	movs	r1, #1
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	fa01 f303 	lsl.w	r3, r1, r3
 800374c:	4013      	ands	r3, r2
 800374e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8158 	beq.w	8003a08 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
 8003760:	2b01      	cmp	r3, #1
 8003762:	d005      	beq.n	8003770 <HAL_GPIO_Init+0x40>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f003 0303 	and.w	r3, r3, #3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d130      	bne.n	80037d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037a6:	2201      	movs	r2, #1
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4013      	ands	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	091b      	lsrs	r3, r3, #4
 80037bc:	f003 0201 	and.w	r2, r3, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	693a      	ldr	r2, [r7, #16]
 80037d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d017      	beq.n	800380e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	005b      	lsls	r3, r3, #1
 80037e8:	2203      	movs	r2, #3
 80037ea:	fa02 f303 	lsl.w	r3, r2, r3
 80037ee:	43db      	mvns	r3, r3
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689a      	ldr	r2, [r3, #8]
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d123      	bne.n	8003862 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003826:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	220f      	movs	r2, #15
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4013      	ands	r3, r2
 800383c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	691a      	ldr	r2, [r3, #16]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	08da      	lsrs	r2, r3, #3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3208      	adds	r2, #8
 800385c:	6939      	ldr	r1, [r7, #16]
 800385e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	2203      	movs	r2, #3
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	43db      	mvns	r3, r3
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0203 	and.w	r2, r3, #3
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	005b      	lsls	r3, r3, #1
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 80b2 	beq.w	8003a08 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a4:	4b61      	ldr	r3, [pc, #388]	; (8003a2c <HAL_GPIO_Init+0x2fc>)
 80038a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a8:	4a60      	ldr	r2, [pc, #384]	; (8003a2c <HAL_GPIO_Init+0x2fc>)
 80038aa:	f043 0301 	orr.w	r3, r3, #1
 80038ae:	6613      	str	r3, [r2, #96]	; 0x60
 80038b0:	4b5e      	ldr	r3, [pc, #376]	; (8003a2c <HAL_GPIO_Init+0x2fc>)
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	60bb      	str	r3, [r7, #8]
 80038ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038bc:	4a5c      	ldr	r2, [pc, #368]	; (8003a30 <HAL_GPIO_Init+0x300>)
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	089b      	lsrs	r3, r3, #2
 80038c2:	3302      	adds	r3, #2
 80038c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f003 0303 	and.w	r3, r3, #3
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	220f      	movs	r2, #15
 80038d4:	fa02 f303 	lsl.w	r3, r2, r3
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038e6:	d02b      	beq.n	8003940 <HAL_GPIO_Init+0x210>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a52      	ldr	r2, [pc, #328]	; (8003a34 <HAL_GPIO_Init+0x304>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d025      	beq.n	800393c <HAL_GPIO_Init+0x20c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a51      	ldr	r2, [pc, #324]	; (8003a38 <HAL_GPIO_Init+0x308>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d01f      	beq.n	8003938 <HAL_GPIO_Init+0x208>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a50      	ldr	r2, [pc, #320]	; (8003a3c <HAL_GPIO_Init+0x30c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d019      	beq.n	8003934 <HAL_GPIO_Init+0x204>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a4f      	ldr	r2, [pc, #316]	; (8003a40 <HAL_GPIO_Init+0x310>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d013      	beq.n	8003930 <HAL_GPIO_Init+0x200>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a4e      	ldr	r2, [pc, #312]	; (8003a44 <HAL_GPIO_Init+0x314>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00d      	beq.n	800392c <HAL_GPIO_Init+0x1fc>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a4d      	ldr	r2, [pc, #308]	; (8003a48 <HAL_GPIO_Init+0x318>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <HAL_GPIO_Init+0x1f8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a4c      	ldr	r2, [pc, #304]	; (8003a4c <HAL_GPIO_Init+0x31c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d101      	bne.n	8003924 <HAL_GPIO_Init+0x1f4>
 8003920:	2307      	movs	r3, #7
 8003922:	e00e      	b.n	8003942 <HAL_GPIO_Init+0x212>
 8003924:	2308      	movs	r3, #8
 8003926:	e00c      	b.n	8003942 <HAL_GPIO_Init+0x212>
 8003928:	2306      	movs	r3, #6
 800392a:	e00a      	b.n	8003942 <HAL_GPIO_Init+0x212>
 800392c:	2305      	movs	r3, #5
 800392e:	e008      	b.n	8003942 <HAL_GPIO_Init+0x212>
 8003930:	2304      	movs	r3, #4
 8003932:	e006      	b.n	8003942 <HAL_GPIO_Init+0x212>
 8003934:	2303      	movs	r3, #3
 8003936:	e004      	b.n	8003942 <HAL_GPIO_Init+0x212>
 8003938:	2302      	movs	r3, #2
 800393a:	e002      	b.n	8003942 <HAL_GPIO_Init+0x212>
 800393c:	2301      	movs	r3, #1
 800393e:	e000      	b.n	8003942 <HAL_GPIO_Init+0x212>
 8003940:	2300      	movs	r3, #0
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	f002 0203 	and.w	r2, r2, #3
 8003948:	0092      	lsls	r2, r2, #2
 800394a:	4093      	lsls	r3, r2
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003952:	4937      	ldr	r1, [pc, #220]	; (8003a30 <HAL_GPIO_Init+0x300>)
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	089b      	lsrs	r3, r3, #2
 8003958:	3302      	adds	r3, #2
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003960:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <HAL_GPIO_Init+0x320>)
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	43db      	mvns	r3, r3
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4013      	ands	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003984:	4a32      	ldr	r2, [pc, #200]	; (8003a50 <HAL_GPIO_Init+0x320>)
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800398a:	4b31      	ldr	r3, [pc, #196]	; (8003a50 <HAL_GPIO_Init+0x320>)
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039ae:	4a28      	ldr	r2, [pc, #160]	; (8003a50 <HAL_GPIO_Init+0x320>)
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039b4:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <HAL_GPIO_Init+0x320>)
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80039d8:	4a1d      	ldr	r2, [pc, #116]	; (8003a50 <HAL_GPIO_Init+0x320>)
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80039de:	4b1c      	ldr	r3, [pc, #112]	; (8003a50 <HAL_GPIO_Init+0x320>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43db      	mvns	r3, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <HAL_GPIO_Init+0x320>)
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	fa22 f303 	lsr.w	r3, r2, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	f47f ae91 	bne.w	8003740 <HAL_GPIO_Init+0x10>
  }
}
 8003a1e:	bf00      	nop
 8003a20:	bf00      	nop
 8003a22:	371c      	adds	r7, #28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	40021000 	.word	0x40021000
 8003a30:	40010000 	.word	0x40010000
 8003a34:	48000400 	.word	0x48000400
 8003a38:	48000800 	.word	0x48000800
 8003a3c:	48000c00 	.word	0x48000c00
 8003a40:	48001000 	.word	0x48001000
 8003a44:	48001400 	.word	0x48001400
 8003a48:	48001800 	.word	0x48001800
 8003a4c:	48001c00 	.word	0x48001c00
 8003a50:	40010400 	.word	0x40010400

08003a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
 8003a60:	4613      	mov	r3, r2
 8003a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a64:	787b      	ldrb	r3, [r7, #1]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a6a:	887a      	ldrh	r2, [r7, #2]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a70:	e002      	b.n	8003a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	4013      	ands	r3, r2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d006      	beq.n	8003aa8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a9a:	4a05      	ldr	r2, [pc, #20]	; (8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa0:	88fb      	ldrh	r3, [r7, #6]
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 f806 	bl	8003ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa8:	bf00      	nop
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40010400 	.word	0x40010400

08003ab4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b082      	sub	sp, #8
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e08d      	b.n	8003bf8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d106      	bne.n	8003af6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7fe f8a3 	bl	8001c3c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2224      	movs	r2, #36	; 0x24
 8003afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f022 0201 	bic.w	r2, r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685a      	ldr	r2, [r3, #4]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b1a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d107      	bne.n	8003b44 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	e006      	b.n	8003b52 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689a      	ldr	r2, [r3, #8]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b50:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d108      	bne.n	8003b6c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685a      	ldr	r2, [r3, #4]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b68:	605a      	str	r2, [r3, #4]
 8003b6a:	e007      	b.n	8003b7c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6812      	ldr	r2, [r2, #0]
 8003b86:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b8e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	68da      	ldr	r2, [r3, #12]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b9e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	695b      	ldr	r3, [r3, #20]
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	699b      	ldr	r3, [r3, #24]
 8003bb0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	69d9      	ldr	r1, [r3, #28]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3708      	adds	r7, #8
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d138      	bne.n	8003c88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e032      	b.n	8003c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2224      	movs	r2, #36	; 0x24
 8003c30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0201 	bic.w	r2, r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f042 0201 	orr.w	r2, r2, #1
 8003c72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2220      	movs	r2, #32
 8003c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c84:	2300      	movs	r3, #0
 8003c86:	e000      	b.n	8003c8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
  }
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
 8003c9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b20      	cmp	r3, #32
 8003caa:	d139      	bne.n	8003d20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e033      	b.n	8003d22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2224      	movs	r2, #36	; 0x24
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0201 	bic.w	r2, r2, #1
 8003cd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ce8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	e000      	b.n	8003d22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d20:	2302      	movs	r3, #2
  }
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af02      	add	r7, sp, #8
 8003d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7fe fbec 	bl	8002518 <HAL_GetTick>
 8003d40:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e092      	b.n	8003e74 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f040 808b 	bne.w	8003e74 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f7fe f80e 	bl	8001d80 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003d64:	f241 3188 	movw	r1, #5000	; 0x1388
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 f88b 	bl	8003e84 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	4b42      	ldr	r3, [pc, #264]	; (8003e80 <HAL_OSPI_Init+0x150>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	68d1      	ldr	r1, [r2, #12]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6912      	ldr	r2, [r2, #16]
 8003d80:	3a01      	subs	r2, #1
 8003d82:	0412      	lsls	r2, r2, #16
 8003d84:	4311      	orrs	r1, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6952      	ldr	r2, [r2, #20]
 8003d8a:	3a01      	subs	r2, #1
 8003d8c:	0212      	lsls	r2, r2, #8
 8003d8e:	4311      	orrs	r1, r2
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d94:	4311      	orrs	r1, r2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	69d2      	ldr	r2, [r2, #28]
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6812      	ldr	r2, [r2, #0]
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	0412      	lsls	r2, r2, #16
 8003dae:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	021a      	lsls	r2, r3, #8
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2120      	movs	r1, #32
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f000 fb98 	bl	800450c <OSPI_WaitFlagStateUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d146      	bne.n	8003e74 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	1e5a      	subs	r2, r3, #1
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003e1c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d107      	bne.n	8003e5c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689a      	ldr	r2, [r3, #8]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f042 0202 	orr.w	r2, r2, #2
 8003e5a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e64:	d103      	bne.n	8003e6e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	645a      	str	r2, [r3, #68]	; 0x44
 8003e6c:	e002      	b.n	8003e74 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	f8e0f8f4 	.word	0xf8e0f8f4

08003e84 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr
	...

08003ea4 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b092      	sub	sp, #72	; 0x48
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <HAL_OSPIM_Config+0x40>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d105      	bne.n	8003ed2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003ed0:	e004      	b.n	8003edc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003edc:	2300      	movs	r3, #0
 8003ede:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003ee2:	e01f      	b.n	8003f24 <HAL_OSPIM_Config+0x80>
 8003ee4:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003ee8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003eec:	3301      	adds	r3, #1
 8003eee:	b2d8      	uxtb	r0, r3
 8003ef0:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003ef4:	f107 0114 	add.w	r1, r7, #20
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	4619      	mov	r1, r3
 8003f04:	f000 fb3a 	bl	800457c <OSPIM_GetConfig>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d005      	beq.n	8003f1a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2208      	movs	r2, #8
 8003f18:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003f1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f1e:	3301      	adds	r3, #1
 8003f20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003f24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d9dd      	bls.n	8003ee8 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003f2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f040 82de 	bne.w	80044f2 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003f36:	4bc6      	ldr	r3, [pc, #792]	; (8004250 <HAL_OSPIM_Config+0x3ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003f42:	4bc3      	ldr	r3, [pc, #780]	; (8004250 <HAL_OSPIM_Config+0x3ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4ac2      	ldr	r2, [pc, #776]	; (8004250 <HAL_OSPIM_Config+0x3ac>)
 8003f48:	f023 0301 	bic.w	r3, r3, #1
 8003f4c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003f4e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003f5a:	4bbe      	ldr	r3, [pc, #760]	; (8004254 <HAL_OSPIM_Config+0x3b0>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00b      	beq.n	8003f7e <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003f66:	4bbb      	ldr	r3, [pc, #748]	; (8004254 <HAL_OSPIM_Config+0x3b0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4aba      	ldr	r2, [pc, #744]	; (8004254 <HAL_OSPIM_Config+0x3b0>)
 8003f6c:	f023 0301 	bic.w	r3, r3, #1
 8003f70:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003f72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003f7e:	49b6      	ldr	r1, [pc, #728]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8003f80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	3348      	adds	r3, #72	; 0x48
 8003f8c:	443b      	add	r3, r7
 8003f8e:	3b2c      	subs	r3, #44	; 0x2c
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3b01      	subs	r3, #1
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	6859      	ldr	r1, [r3, #4]
 8003f9a:	48af      	ldr	r0, [pc, #700]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8003f9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4413      	add	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	3348      	adds	r3, #72	; 0x48
 8003fa8:	443b      	add	r3, r7
 8003faa:	3b2c      	subs	r3, #44	; 0x2c
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003fba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	3348      	adds	r3, #72	; 0x48
 8003fc6:	443b      	add	r3, r7
 8003fc8:	3b34      	subs	r3, #52	; 0x34
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80a1 	beq.w	8004114 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003fd2:	49a1      	ldr	r1, [pc, #644]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8003fd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	4413      	add	r3, r2
 8003fdc:	009b      	lsls	r3, r3, #2
 8003fde:	3348      	adds	r3, #72	; 0x48
 8003fe0:	443b      	add	r3, r7
 8003fe2:	3b34      	subs	r3, #52	; 0x34
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	6859      	ldr	r1, [r3, #4]
 8003fee:	489a      	ldr	r0, [pc, #616]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8003ff0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	3348      	adds	r3, #72	; 0x48
 8003ffc:	443b      	add	r3, r7
 8003ffe:	3b34      	subs	r3, #52	; 0x34
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3b01      	subs	r3, #1
 8004004:	f021 0201 	bic.w	r2, r1, #1
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	4403      	add	r3, r0
 800400c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800400e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004010:	4613      	mov	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	3348      	adds	r3, #72	; 0x48
 800401a:	443b      	add	r3, r7
 800401c:	3b30      	subs	r3, #48	; 0x30
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01d      	beq.n	8004060 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004024:	498c      	ldr	r1, [pc, #560]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8004026:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004028:	4613      	mov	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	3348      	adds	r3, #72	; 0x48
 8004032:	443b      	add	r3, r7
 8004034:	3b30      	subs	r3, #48	; 0x30
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3b01      	subs	r3, #1
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	4885      	ldr	r0, [pc, #532]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8004042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3348      	adds	r3, #72	; 0x48
 800404e:	443b      	add	r3, r7
 8004050:	3b30      	subs	r3, #48	; 0x30
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	f021 0210 	bic.w	r2, r1, #16
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4403      	add	r3, r0
 800405e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004062:	4613      	mov	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4413      	add	r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3348      	adds	r3, #72	; 0x48
 800406c:	443b      	add	r3, r7
 800406e:	3b28      	subs	r3, #40	; 0x28
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d021      	beq.n	80040ba <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8004076:	4978      	ldr	r1, [pc, #480]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8004078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407a:	4613      	mov	r3, r2
 800407c:	009b      	lsls	r3, r3, #2
 800407e:	4413      	add	r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	3348      	adds	r3, #72	; 0x48
 8004084:	443b      	add	r3, r7
 8004086:	3b28      	subs	r3, #40	; 0x28
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3b01      	subs	r3, #1
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	4870      	ldr	r0, [pc, #448]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 8004098:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800409a:	4613      	mov	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	3348      	adds	r3, #72	; 0x48
 80040a4:	443b      	add	r3, r7
 80040a6:	3b28      	subs	r3, #40	; 0x28
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4403      	add	r3, r0
 80040b8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80040ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040bc:	4613      	mov	r3, r2
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	3348      	adds	r3, #72	; 0x48
 80040c6:	443b      	add	r3, r7
 80040c8:	3b24      	subs	r3, #36	; 0x24
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d021      	beq.n	8004114 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80040d0:	4961      	ldr	r1, [pc, #388]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 80040d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040d4:	4613      	mov	r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	3348      	adds	r3, #72	; 0x48
 80040de:	443b      	add	r3, r7
 80040e0:	3b24      	subs	r3, #36	; 0x24
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	3b01      	subs	r3, #1
 80040e6:	f003 0301 	and.w	r3, r3, #1
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	440b      	add	r3, r1
 80040ee:	6859      	ldr	r1, [r3, #4]
 80040f0:	4859      	ldr	r0, [pc, #356]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 80040f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f4:	4613      	mov	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	3348      	adds	r3, #72	; 0x48
 80040fe:	443b      	add	r3, r7
 8004100:	3b24      	subs	r3, #36	; 0x24
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3b01      	subs	r3, #1
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4403      	add	r3, r0
 8004112:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	6819      	ldr	r1, [r3, #0]
 8004118:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800411c:	4613      	mov	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	3348      	adds	r3, #72	; 0x48
 8004126:	443b      	add	r3, r7
 8004128:	3b34      	subs	r3, #52	; 0x34
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4299      	cmp	r1, r3
 800412e:	d038      	beq.n	80041a2 <HAL_OSPIM_Config+0x2fe>
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	3348      	adds	r3, #72	; 0x48
 8004142:	443b      	add	r3, r7
 8004144:	3b30      	subs	r3, #48	; 0x30
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4299      	cmp	r1, r3
 800414a:	d02a      	beq.n	80041a2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	6899      	ldr	r1, [r3, #8]
 8004150:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004154:	4613      	mov	r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	3348      	adds	r3, #72	; 0x48
 800415e:	443b      	add	r3, r7
 8004160:	3b2c      	subs	r3, #44	; 0x2c
 8004162:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004164:	4299      	cmp	r1, r3
 8004166:	d01c      	beq.n	80041a2 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	68d9      	ldr	r1, [r3, #12]
 800416c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	3348      	adds	r3, #72	; 0x48
 800417a:	443b      	add	r3, r7
 800417c:	3b28      	subs	r3, #40	; 0x28
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4299      	cmp	r1, r3
 8004182:	d00e      	beq.n	80041a2 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	6919      	ldr	r1, [r3, #16]
 8004188:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800418c:	4613      	mov	r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	4413      	add	r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	3348      	adds	r3, #72	; 0x48
 8004196:	443b      	add	r3, r7
 8004198:	3b24      	subs	r3, #36	; 0x24
 800419a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800419c:	4299      	cmp	r1, r3
 800419e:	f040 80d3 	bne.w	8004348 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80041a2:	492d      	ldr	r1, [pc, #180]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 80041a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041a8:	4613      	mov	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	3348      	adds	r3, #72	; 0x48
 80041b2:	443b      	add	r3, r7
 80041b4:	3b34      	subs	r3, #52	; 0x34
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	009b      	lsls	r3, r3, #2
 80041bc:	440b      	add	r3, r1
 80041be:	6859      	ldr	r1, [r3, #4]
 80041c0:	4825      	ldr	r0, [pc, #148]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 80041c2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	3348      	adds	r3, #72	; 0x48
 80041d0:	443b      	add	r3, r7
 80041d2:	3b34      	subs	r3, #52	; 0x34
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	f021 0201 	bic.w	r2, r1, #1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4403      	add	r3, r0
 80041e0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80041e2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041e6:	4613      	mov	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	3348      	adds	r3, #72	; 0x48
 80041f0:	443b      	add	r3, r7
 80041f2:	3b30      	subs	r3, #48	; 0x30
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d01f      	beq.n	800423a <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80041fa:	4917      	ldr	r1, [pc, #92]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 80041fc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	3348      	adds	r3, #72	; 0x48
 800420a:	443b      	add	r3, r7
 800420c:	3b30      	subs	r3, #48	; 0x30
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	3b01      	subs	r3, #1
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	6859      	ldr	r1, [r3, #4]
 8004218:	480f      	ldr	r0, [pc, #60]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 800421a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	3348      	adds	r3, #72	; 0x48
 8004228:	443b      	add	r3, r7
 800422a:	3b30      	subs	r3, #48	; 0x30
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3b01      	subs	r3, #1
 8004230:	f021 0210 	bic.w	r2, r1, #16
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4403      	add	r3, r0
 8004238:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800423a:	4907      	ldr	r1, [pc, #28]	; (8004258 <HAL_OSPIM_Config+0x3b4>)
 800423c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004240:	4613      	mov	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	3348      	adds	r3, #72	; 0x48
 800424a:	443b      	add	r3, r7
 800424c:	3b2c      	subs	r3, #44	; 0x2c
 800424e:	e005      	b.n	800425c <HAL_OSPIM_Config+0x3b8>
 8004250:	a0001000 	.word	0xa0001000
 8004254:	a0001400 	.word	0xa0001400
 8004258:	50061c00 	.word	0x50061c00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	3b01      	subs	r3, #1
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	440b      	add	r3, r1
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	48a6      	ldr	r0, [pc, #664]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004268:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800426c:	4613      	mov	r3, r2
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	4413      	add	r3, r2
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	3348      	adds	r3, #72	; 0x48
 8004276:	443b      	add	r3, r7
 8004278:	3b2c      	subs	r3, #44	; 0x2c
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4403      	add	r3, r0
 8004286:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004288:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800428c:	4613      	mov	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4413      	add	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	3348      	adds	r3, #72	; 0x48
 8004296:	443b      	add	r3, r7
 8004298:	3b28      	subs	r3, #40	; 0x28
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d023      	beq.n	80042e8 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80042a0:	4997      	ldr	r1, [pc, #604]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80042a2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	3348      	adds	r3, #72	; 0x48
 80042b0:	443b      	add	r3, r7
 80042b2:	3b28      	subs	r3, #40	; 0x28
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	f003 0301 	and.w	r3, r3, #1
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	488f      	ldr	r0, [pc, #572]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80042c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042c8:	4613      	mov	r3, r2
 80042ca:	009b      	lsls	r3, r3, #2
 80042cc:	4413      	add	r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	3348      	adds	r3, #72	; 0x48
 80042d2:	443b      	add	r3, r7
 80042d4:	3b28      	subs	r3, #40	; 0x28
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	3b01      	subs	r3, #1
 80042da:	f003 0301 	and.w	r3, r3, #1
 80042de:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4403      	add	r3, r0
 80042e6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80042ec:	4613      	mov	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	4413      	add	r3, r2
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	3348      	adds	r3, #72	; 0x48
 80042f6:	443b      	add	r3, r7
 80042f8:	3b24      	subs	r3, #36	; 0x24
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d023      	beq.n	8004348 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004300:	497f      	ldr	r1, [pc, #508]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004302:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004306:	4613      	mov	r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	4413      	add	r3, r2
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	3348      	adds	r3, #72	; 0x48
 8004310:	443b      	add	r3, r7
 8004312:	3b24      	subs	r3, #36	; 0x24
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	3b01      	subs	r3, #1
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	6859      	ldr	r1, [r3, #4]
 8004322:	4877      	ldr	r0, [pc, #476]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004324:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	3348      	adds	r3, #72	; 0x48
 8004332:	443b      	add	r3, r7
 8004334:	3b24      	subs	r3, #36	; 0x24
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4403      	add	r3, r0
 8004346:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004348:	4a6d      	ldr	r2, [pc, #436]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	3b01      	subs	r3, #1
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	4413      	add	r3, r2
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800435a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435c:	025b      	lsls	r3, r3, #9
 800435e:	431a      	orrs	r2, r3
 8004360:	4967      	ldr	r1, [pc, #412]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	3b01      	subs	r3, #1
 8004368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	440b      	add	r3, r1
 8004370:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004372:	4a63      	ldr	r2, [pc, #396]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	3b01      	subs	r3, #1
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	f023 0203 	bic.w	r2, r3, #3
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	431a      	orrs	r2, r3
 800438a:	495d      	ldr	r1, [pc, #372]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3b01      	subs	r3, #1
 8004392:	f042 0201 	orr.w	r2, r2, #1
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d014      	beq.n	80043ce <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80043a4:	4a56      	ldr	r2, [pc, #344]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	3b01      	subs	r3, #1
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b8:	015b      	lsls	r3, r3, #5
 80043ba:	431a      	orrs	r2, r3
 80043bc:	4950      	ldr	r1, [pc, #320]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f042 0210 	orr.w	r2, r2, #16
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	440b      	add	r3, r1
 80043cc:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d019      	beq.n	800440e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043da:	4a49      	ldr	r2, [pc, #292]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043f2:	049b      	lsls	r3, r3, #18
 80043f4:	431a      	orrs	r2, r3
 80043f6:	4942      	ldr	r1, [pc, #264]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	605a      	str	r2, [r3, #4]
 800440c:	e01c      	b.n	8004448 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d018      	beq.n	8004448 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004416:	4a3a      	ldr	r2, [pc, #232]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	3b01      	subs	r3, #1
 800441e:	f003 0301 	and.w	r3, r3, #1
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800442c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800442e:	069b      	lsls	r3, r3, #26
 8004430:	431a      	orrs	r2, r3
 8004432:	4933      	ldr	r1, [pc, #204]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	3b01      	subs	r3, #1
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d019      	beq.n	8004488 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004454:	4a2a      	ldr	r2, [pc, #168]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	3b01      	subs	r3, #1
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800446a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800446c:	049b      	lsls	r3, r3, #18
 800446e:	431a      	orrs	r2, r3
 8004470:	4923      	ldr	r1, [pc, #140]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	3b01      	subs	r3, #1
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	605a      	str	r2, [r3, #4]
 8004486:	e01c      	b.n	80044c2 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	691b      	ldr	r3, [r3, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d018      	beq.n	80044c2 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	3b01      	subs	r3, #1
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044a8:	069b      	lsls	r3, r3, #26
 80044aa:	431a      	orrs	r2, r3
 80044ac:	4914      	ldr	r1, [pc, #80]	; (8004500 <HAL_OSPIM_Config+0x65c>)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80044c2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <HAL_OSPIM_Config+0x660>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <HAL_OSPIM_Config+0x660>)
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80044da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d005      	beq.n	80044f2 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80044e6:	4b08      	ldr	r3, [pc, #32]	; (8004508 <HAL_OSPIM_Config+0x664>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a07      	ldr	r2, [pc, #28]	; (8004508 <HAL_OSPIM_Config+0x664>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80044f2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3748      	adds	r7, #72	; 0x48
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	50061c00 	.word	0x50061c00
 8004504:	a0001000 	.word	0xa0001000
 8004508:	a0001400 	.word	0xa0001400

0800450c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800451c:	e01a      	b.n	8004554 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451e:	69bb      	ldr	r3, [r7, #24]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004524:	d016      	beq.n	8004554 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004526:	f7fd fff7 	bl	8002518 <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	69ba      	ldr	r2, [r7, #24]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d10b      	bne.n	8004554 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	f043 0201 	orr.w	r2, r3, #1
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	e00e      	b.n	8004572 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6a1a      	ldr	r2, [r3, #32]
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	461a      	mov	r2, r3
 800456a:	79fb      	ldrb	r3, [r7, #7]
 800456c:	429a      	cmp	r2, r3
 800456e:	d1d6      	bne.n	800451e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004570:	2300      	movs	r3, #0
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 800457c:	b480      	push	{r7}
 800457e:	b087      	sub	sp, #28
 8004580:	af00      	add	r7, sp, #0
 8004582:	4603      	mov	r3, r0
 8004584:	6039      	str	r1, [r7, #0]
 8004586:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004588:	2300      	movs	r3, #0
 800458a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d005      	beq.n	80045a2 <OSPIM_GetConfig+0x26>
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d802      	bhi.n	80045a2 <OSPIM_GetConfig+0x26>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d102      	bne.n	80045a8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
 80045a6:	e08e      	b.n	80046c6 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2200      	movs	r2, #0
 80045be:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2200      	movs	r2, #0
 80045c4:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 80045c6:	79fb      	ldrb	r3, [r7, #7]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d101      	bne.n	80045d0 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 80045cc:	4b41      	ldr	r3, [pc, #260]	; (80046d4 <OSPIM_GetConfig+0x158>)
 80045ce:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e074      	b.n	80046c0 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 80045d6:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <OSPIM_GetConfig+0x15c>)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4413      	add	r3, r2
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	f003 0301 	and.w	r3, r3, #1
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d00a      	beq.n	8004602 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	4053      	eors	r3, r2
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b00      	cmp	r3, #0
 800460a:	d00a      	beq.n	8004622 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800460c:	68ba      	ldr	r2, [r7, #8]
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	4053      	eors	r3, r2
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4053      	eors	r3, r2
 8004632:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004636:	2b00      	cmp	r3, #0
 8004638:	d103      	bne.n	8004642 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d018      	beq.n	800467e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	693b      	ldr	r3, [r7, #16]
 8004650:	4053      	eors	r3, r2
 8004652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d111      	bne.n	800467e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004660:	2b00      	cmp	r3, #0
 8004662:	d106      	bne.n	8004672 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	3301      	adds	r3, #1
 8004668:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	60da      	str	r2, [r3, #12]
 8004670:	e005      	b.n	800467e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3301      	adds	r3, #1
 8004676:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d018      	beq.n	80046ba <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4053      	eors	r3, r2
 800468e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d111      	bne.n	80046ba <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	3301      	adds	r3, #1
 80046a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	611a      	str	r2, [r3, #16]
 80046ac:	e005      	b.n	80046ba <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	3301      	adds	r3, #1
 80046be:	60fb      	str	r3, [r7, #12]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d987      	bls.n	80045d6 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	04040222 	.word	0x04040222
 80046d8:	50061c00 	.word	0x50061c00

080046dc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a04      	ldr	r2, [pc, #16]	; (80046f8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80046e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ea:	6013      	str	r3, [r2, #0]
}
 80046ec:	bf00      	nop
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40007000 	.word	0x40007000

080046fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004700:	4b0d      	ldr	r3, [pc, #52]	; (8004738 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800470c:	d102      	bne.n	8004714 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800470e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004712:	e00b      	b.n	800472c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004716:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800471a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004722:	d102      	bne.n	800472a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004728:	e000      	b.n	800472c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800472a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800472c:	4618      	mov	r0, r3
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40007000 	.word	0x40007000

0800473c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d141      	bne.n	80047ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800474a:	4b4b      	ldr	r3, [pc, #300]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004752:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004756:	d131      	bne.n	80047bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004758:	4b47      	ldr	r3, [pc, #284]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475e:	4a46      	ldr	r2, [pc, #280]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004760:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004764:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004768:	4b43      	ldr	r3, [pc, #268]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004770:	4a41      	ldr	r2, [pc, #260]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004772:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004776:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004778:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2232      	movs	r2, #50	; 0x32
 800477e:	fb02 f303 	mul.w	r3, r2, r3
 8004782:	4a3f      	ldr	r2, [pc, #252]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004784:	fba2 2303 	umull	r2, r3, r2, r3
 8004788:	0c9b      	lsrs	r3, r3, #18
 800478a:	3301      	adds	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478e:	e002      	b.n	8004796 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3b01      	subs	r3, #1
 8004794:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047a2:	d102      	bne.n	80047aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f2      	bne.n	8004790 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047aa:	4b33      	ldr	r3, [pc, #204]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ac:	695b      	ldr	r3, [r3, #20]
 80047ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b6:	d158      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e057      	b.n	800486c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047bc:	4b2e      	ldr	r3, [pc, #184]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047c2:	4a2d      	ldr	r2, [pc, #180]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047cc:	e04d      	b.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047d4:	d141      	bne.n	800485a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80047d6:	4b28      	ldr	r3, [pc, #160]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047e2:	d131      	bne.n	8004848 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047e4:	4b24      	ldr	r3, [pc, #144]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047ea:	4a23      	ldr	r2, [pc, #140]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80047f4:	4b20      	ldr	r3, [pc, #128]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047fc:	4a1e      	ldr	r2, [pc, #120]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004802:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2232      	movs	r2, #50	; 0x32
 800480a:	fb02 f303 	mul.w	r3, r2, r3
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9b      	lsrs	r3, r3, #18
 8004816:	3301      	adds	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800481a:	e002      	b.n	8004822 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3b01      	subs	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800482e:	d102      	bne.n	8004836 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1f2      	bne.n	800481c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004836:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004838:	695b      	ldr	r3, [r3, #20]
 800483a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800483e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004842:	d112      	bne.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e011      	b.n	800486c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004848:	4b0b      	ldr	r3, [pc, #44]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800484a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800484e:	4a0a      	ldr	r2, [pc, #40]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004858:	e007      	b.n	800486a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004862:	4a05      	ldr	r2, [pc, #20]	; (8004878 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004864:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004868:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3714      	adds	r7, #20
 8004870:	46bd      	mov	sp, r7
 8004872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004876:	4770      	bx	lr
 8004878:	40007000 	.word	0x40007000
 800487c:	20000000 	.word	0x20000000
 8004880:	431bde83 	.word	0x431bde83

08004884 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	f000 bc08 	b.w	80050a8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004898:	4b96      	ldr	r3, [pc, #600]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a2:	4b94      	ldr	r3, [pc, #592]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80e4 	beq.w	8004a82 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d007      	beq.n	80048d0 <HAL_RCC_OscConfig+0x4c>
 80048c0:	69bb      	ldr	r3, [r7, #24]
 80048c2:	2b0c      	cmp	r3, #12
 80048c4:	f040 808b 	bne.w	80049de <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	f040 8087 	bne.w	80049de <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048d0:	4b88      	ldr	r3, [pc, #544]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0302 	and.w	r3, r3, #2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d005      	beq.n	80048e8 <HAL_RCC_OscConfig+0x64>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d101      	bne.n	80048e8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e3df      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	4b81      	ldr	r3, [pc, #516]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <HAL_RCC_OscConfig+0x7e>
 80048f8:	4b7e      	ldr	r3, [pc, #504]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004900:	e005      	b.n	800490e <HAL_RCC_OscConfig+0x8a>
 8004902:	4b7c      	ldr	r3, [pc, #496]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004908:	091b      	lsrs	r3, r3, #4
 800490a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800490e:	4293      	cmp	r3, r2
 8004910:	d223      	bcs.n	800495a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	4618      	mov	r0, r3
 8004918:	f000 fdcc 	bl	80054b4 <RCC_SetFlashLatencyFromMSIRange>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e3c0      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004926:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a72      	ldr	r2, [pc, #456]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800492c:	f043 0308 	orr.w	r3, r3, #8
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	4b70      	ldr	r3, [pc, #448]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	496d      	ldr	r1, [pc, #436]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004940:	4313      	orrs	r3, r2
 8004942:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004944:	4b6b      	ldr	r3, [pc, #428]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69db      	ldr	r3, [r3, #28]
 8004950:	021b      	lsls	r3, r3, #8
 8004952:	4968      	ldr	r1, [pc, #416]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]
 8004958:	e025      	b.n	80049a6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800495a:	4b66      	ldr	r3, [pc, #408]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a65      	ldr	r2, [pc, #404]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004960:	f043 0308 	orr.w	r3, r3, #8
 8004964:	6013      	str	r3, [r2, #0]
 8004966:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	4960      	ldr	r1, [pc, #384]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004974:	4313      	orrs	r3, r2
 8004976:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004978:	4b5e      	ldr	r3, [pc, #376]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	021b      	lsls	r3, r3, #8
 8004986:	495b      	ldr	r1, [pc, #364]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004988:	4313      	orrs	r3, r2
 800498a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fd8c 	bl	80054b4 <RCC_SetFlashLatencyFromMSIRange>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e380      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80049a6:	f000 fcc1 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80049aa:	4602      	mov	r2, r0
 80049ac:	4b51      	ldr	r3, [pc, #324]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	091b      	lsrs	r3, r3, #4
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	4950      	ldr	r1, [pc, #320]	; (8004af8 <HAL_RCC_OscConfig+0x274>)
 80049b8:	5ccb      	ldrb	r3, [r1, r3]
 80049ba:	f003 031f 	and.w	r3, r3, #31
 80049be:	fa22 f303 	lsr.w	r3, r2, r3
 80049c2:	4a4e      	ldr	r2, [pc, #312]	; (8004afc <HAL_RCC_OscConfig+0x278>)
 80049c4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80049c6:	4b4e      	ldr	r3, [pc, #312]	; (8004b00 <HAL_RCC_OscConfig+0x27c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7fd fd54 	bl	8002478 <HAL_InitTick>
 80049d0:	4603      	mov	r3, r0
 80049d2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d052      	beq.n	8004a80 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80049da:	7bfb      	ldrb	r3, [r7, #15]
 80049dc:	e364      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d032      	beq.n	8004a4c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80049e6:	4b43      	ldr	r3, [pc, #268]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a42      	ldr	r2, [pc, #264]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 80049ec:	f043 0301 	orr.w	r3, r3, #1
 80049f0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049f2:	f7fd fd91 	bl	8002518 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049fa:	f7fd fd8d 	bl	8002518 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e34d      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a0c:	4b39      	ldr	r3, [pc, #228]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0302 	and.w	r3, r3, #2
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0f0      	beq.n	80049fa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a18:	4b36      	ldr	r3, [pc, #216]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a35      	ldr	r2, [pc, #212]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b33      	ldr	r3, [pc, #204]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	4930      	ldr	r1, [pc, #192]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a36:	4b2f      	ldr	r3, [pc, #188]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	492b      	ldr	r1, [pc, #172]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
 8004a4a:	e01a      	b.n	8004a82 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004a4c:	4b29      	ldr	r3, [pc, #164]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a28      	ldr	r2, [pc, #160]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a52:	f023 0301 	bic.w	r3, r3, #1
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004a58:	f7fd fd5e 	bl	8002518 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004a60:	f7fd fd5a 	bl	8002518 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e31a      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x1dc>
 8004a7e:	e000      	b.n	8004a82 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004a80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d073      	beq.n	8004b76 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	2b08      	cmp	r3, #8
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x21c>
 8004a94:	69bb      	ldr	r3, [r7, #24]
 8004a96:	2b0c      	cmp	r3, #12
 8004a98:	d10e      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	d10b      	bne.n	8004ab8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aa0:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d063      	beq.n	8004b74 <HAL_RCC_OscConfig+0x2f0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d15f      	bne.n	8004b74 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e2f7      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x24c>
 8004ac2:	4b0c      	ldr	r3, [pc, #48]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a0b      	ldr	r2, [pc, #44]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e025      	b.n	8004b1c <HAL_RCC_OscConfig+0x298>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ad8:	d114      	bne.n	8004b04 <HAL_RCC_OscConfig+0x280>
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a05      	ldr	r2, [pc, #20]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004ae0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4b03      	ldr	r3, [pc, #12]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a02      	ldr	r2, [pc, #8]	; (8004af4 <HAL_RCC_OscConfig+0x270>)
 8004aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e013      	b.n	8004b1c <HAL_RCC_OscConfig+0x298>
 8004af4:	40021000 	.word	0x40021000
 8004af8:	080099ec 	.word	0x080099ec
 8004afc:	20000000 	.word	0x20000000
 8004b00:	20000004 	.word	0x20000004
 8004b04:	4ba0      	ldr	r3, [pc, #640]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a9f      	ldr	r2, [pc, #636]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0e:	6013      	str	r3, [r2, #0]
 8004b10:	4b9d      	ldr	r3, [pc, #628]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a9c      	ldr	r2, [pc, #624]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b24:	f7fd fcf8 	bl	8002518 <HAL_GetTick>
 8004b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b2c:	f7fd fcf4 	bl	8002518 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b64      	cmp	r3, #100	; 0x64
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e2b4      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b3e:	4b92      	ldr	r3, [pc, #584]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x2a8>
 8004b4a:	e014      	b.n	8004b76 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fd fce4 	bl	8002518 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b54:	f7fd fce0 	bl	8002518 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b64      	cmp	r3, #100	; 0x64
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e2a0      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b66:	4b88      	ldr	r3, [pc, #544]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x2d0>
 8004b72:	e000      	b.n	8004b76 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d060      	beq.n	8004c44 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d005      	beq.n	8004b94 <HAL_RCC_OscConfig+0x310>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b0c      	cmp	r3, #12
 8004b8c:	d119      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	2b02      	cmp	r3, #2
 8004b92:	d116      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b94:	4b7c      	ldr	r3, [pc, #496]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_RCC_OscConfig+0x328>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e27d      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bac:	4b76      	ldr	r3, [pc, #472]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	061b      	lsls	r3, r3, #24
 8004bba:	4973      	ldr	r1, [pc, #460]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bc0:	e040      	b.n	8004c44 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d023      	beq.n	8004c12 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bca:	4b6f      	ldr	r3, [pc, #444]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a6e      	ldr	r2, [pc, #440]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bd6:	f7fd fc9f 	bl	8002518 <HAL_GetTick>
 8004bda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bdc:	e008      	b.n	8004bf0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bde:	f7fd fc9b 	bl	8002518 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e25b      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bf0:	4b65      	ldr	r3, [pc, #404]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0f0      	beq.n	8004bde <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bfc:	4b62      	ldr	r3, [pc, #392]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	691b      	ldr	r3, [r3, #16]
 8004c08:	061b      	lsls	r3, r3, #24
 8004c0a:	495f      	ldr	r1, [pc, #380]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	604b      	str	r3, [r1, #4]
 8004c10:	e018      	b.n	8004c44 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c12:	4b5d      	ldr	r3, [pc, #372]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a5c      	ldr	r2, [pc, #368]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c1e:	f7fd fc7b 	bl	8002518 <HAL_GetTick>
 8004c22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c24:	e008      	b.n	8004c38 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c26:	f7fd fc77 	bl	8002518 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e237      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004c38:	4b53      	ldr	r3, [pc, #332]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1f0      	bne.n	8004c26 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0308 	and.w	r3, r3, #8
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d03c      	beq.n	8004cca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	695b      	ldr	r3, [r3, #20]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d01c      	beq.n	8004c92 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c58:	4b4b      	ldr	r3, [pc, #300]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	4a4a      	ldr	r2, [pc, #296]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fd fc56 	bl	8002518 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c70:	f7fd fc52 	bl	8002518 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e212      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c82:	4b41      	ldr	r3, [pc, #260]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c88:	f003 0302 	and.w	r3, r3, #2
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0ef      	beq.n	8004c70 <HAL_RCC_OscConfig+0x3ec>
 8004c90:	e01b      	b.n	8004cca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c92:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c98:	4a3b      	ldr	r2, [pc, #236]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004c9a:	f023 0301 	bic.w	r3, r3, #1
 8004c9e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ca2:	f7fd fc39 	bl	8002518 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004caa:	f7fd fc35 	bl	8002518 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e1f5      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004cbc:	4b32      	ldr	r3, [pc, #200]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004cbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1ef      	bne.n	8004caa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0304 	and.w	r3, r3, #4
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	f000 80a6 	beq.w	8004e24 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004cdc:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10d      	bne.n	8004d04 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	4a26      	ldr	r2, [pc, #152]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004cee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf4:	4b24      	ldr	r3, [pc, #144]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004cf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	60bb      	str	r3, [r7, #8]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d00:	2301      	movs	r3, #1
 8004d02:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d04:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_RCC_OscConfig+0x508>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d118      	bne.n	8004d42 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d10:	4b1e      	ldr	r3, [pc, #120]	; (8004d8c <HAL_RCC_OscConfig+0x508>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a1d      	ldr	r2, [pc, #116]	; (8004d8c <HAL_RCC_OscConfig+0x508>)
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d1c:	f7fd fbfc 	bl	8002518 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d24:	f7fd fbf8 	bl	8002518 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e1b8      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <HAL_RCC_OscConfig+0x508>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d108      	bne.n	8004d5c <HAL_RCC_OscConfig+0x4d8>
 8004d4a:	4b0f      	ldr	r3, [pc, #60]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	4a0d      	ldr	r2, [pc, #52]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d5a:	e029      	b.n	8004db0 <HAL_RCC_OscConfig+0x52c>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	2b05      	cmp	r3, #5
 8004d62:	d115      	bne.n	8004d90 <HAL_RCC_OscConfig+0x50c>
 8004d64:	4b08      	ldr	r3, [pc, #32]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d6a:	4a07      	ldr	r2, [pc, #28]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d74:	4b04      	ldr	r3, [pc, #16]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	4a03      	ldr	r2, [pc, #12]	; (8004d88 <HAL_RCC_OscConfig+0x504>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d84:	e014      	b.n	8004db0 <HAL_RCC_OscConfig+0x52c>
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40007000 	.word	0x40007000
 8004d90:	4b9d      	ldr	r3, [pc, #628]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d96:	4a9c      	ldr	r2, [pc, #624]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004d98:	f023 0301 	bic.w	r3, r3, #1
 8004d9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004da0:	4b99      	ldr	r3, [pc, #612]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da6:	4a98      	ldr	r2, [pc, #608]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d016      	beq.n	8004de6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd fbae 	bl	8002518 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dbe:	e00a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc0:	f7fd fbaa 	bl	8002518 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d901      	bls.n	8004dd6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e168      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004dd6:	4b8c      	ldr	r3, [pc, #560]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d0ed      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x53c>
 8004de4:	e015      	b.n	8004e12 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de6:	f7fd fb97 	bl	8002518 <HAL_GetTick>
 8004dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dec:	e00a      	b.n	8004e04 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dee:	f7fd fb93 	bl	8002518 <HAL_GetTick>
 8004df2:	4602      	mov	r2, r0
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e151      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e04:	4b80      	ldr	r3, [pc, #512]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1ed      	bne.n	8004dee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e12:	7ffb      	ldrb	r3, [r7, #31]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d105      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e18:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	4a7a      	ldr	r2, [pc, #488]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e22:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f003 0320 	and.w	r3, r3, #32
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d03c      	beq.n	8004eaa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01c      	beq.n	8004e72 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e38:	4b73      	ldr	r3, [pc, #460]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e3a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e3e:	4a72      	ldr	r2, [pc, #456]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e48:	f7fd fb66 	bl	8002518 <HAL_GetTick>
 8004e4c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e4e:	e008      	b.n	8004e62 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e50:	f7fd fb62 	bl	8002518 <HAL_GetTick>
 8004e54:	4602      	mov	r2, r0
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d901      	bls.n	8004e62 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	e122      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e62:	4b69      	ldr	r3, [pc, #420]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e64:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0ef      	beq.n	8004e50 <HAL_RCC_OscConfig+0x5cc>
 8004e70:	e01b      	b.n	8004eaa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e72:	4b65      	ldr	r3, [pc, #404]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e78:	4a63      	ldr	r2, [pc, #396]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e82:	f7fd fb49 	bl	8002518 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e8a:	f7fd fb45 	bl	8002518 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e105      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e9c:	4b5a      	ldr	r3, [pc, #360]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1ef      	bne.n	8004e8a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80f9 	beq.w	80050a6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	f040 80cf 	bne.w	800505c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004ebe:	4b52      	ldr	r3, [pc, #328]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f003 0203 	and.w	r2, r3, #3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d12c      	bne.n	8004f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	3b01      	subs	r3, #1
 8004ede:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d123      	bne.n	8004f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eee:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d11b      	bne.n	8004f2c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d113      	bne.n	8004f2c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0e:	085b      	lsrs	r3, r3, #1
 8004f10:	3b01      	subs	r3, #1
 8004f12:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d109      	bne.n	8004f2c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	085b      	lsrs	r3, r3, #1
 8004f24:	3b01      	subs	r3, #1
 8004f26:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d071      	beq.n	8005010 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	2b0c      	cmp	r3, #12
 8004f30:	d068      	beq.n	8005004 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004f32:	4b35      	ldr	r3, [pc, #212]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d105      	bne.n	8004f4a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004f3e:	4b32      	ldr	r3, [pc, #200]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e0ac      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b2e      	ldr	r3, [pc, #184]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a2d      	ldr	r2, [pc, #180]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004f54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f58:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f5a:	f7fd fadd 	bl	8002518 <HAL_GetTick>
 8004f5e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f60:	e008      	b.n	8004f74 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f62:	f7fd fad9 	bl	8002518 <HAL_GetTick>
 8004f66:	4602      	mov	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	2b02      	cmp	r3, #2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e099      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f74:	4b24      	ldr	r3, [pc, #144]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1f0      	bne.n	8004f62 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f80:	4b21      	ldr	r3, [pc, #132]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004f82:	68da      	ldr	r2, [r3, #12]
 8004f84:	4b21      	ldr	r3, [pc, #132]	; (800500c <HAL_RCC_OscConfig+0x788>)
 8004f86:	4013      	ands	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f90:	3a01      	subs	r2, #1
 8004f92:	0112      	lsls	r2, r2, #4
 8004f94:	4311      	orrs	r1, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f9a:	0212      	lsls	r2, r2, #8
 8004f9c:	4311      	orrs	r1, r2
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fa2:	0852      	lsrs	r2, r2, #1
 8004fa4:	3a01      	subs	r2, #1
 8004fa6:	0552      	lsls	r2, r2, #21
 8004fa8:	4311      	orrs	r1, r2
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004fae:	0852      	lsrs	r2, r2, #1
 8004fb0:	3a01      	subs	r2, #1
 8004fb2:	0652      	lsls	r2, r2, #25
 8004fb4:	4311      	orrs	r1, r2
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004fba:	06d2      	lsls	r2, r2, #27
 8004fbc:	430a      	orrs	r2, r1
 8004fbe:	4912      	ldr	r1, [pc, #72]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b10      	ldr	r3, [pc, #64]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004fd0:	4b0d      	ldr	r3, [pc, #52]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	4a0c      	ldr	r2, [pc, #48]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fdc:	f7fd fa9c 	bl	8002518 <HAL_GetTick>
 8004fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe4:	f7fd fa98 	bl	8002518 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e058      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ff6:	4b04      	ldr	r3, [pc, #16]	; (8005008 <HAL_RCC_OscConfig+0x784>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005002:	e050      	b.n	80050a6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e04f      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
 8005008:	40021000 	.word	0x40021000
 800500c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d144      	bne.n	80050a6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800501c:	4b24      	ldr	r3, [pc, #144]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a23      	ldr	r2, [pc, #140]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 8005022:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005026:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005028:	4b21      	ldr	r3, [pc, #132]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4a20      	ldr	r2, [pc, #128]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 800502e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005032:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005034:	f7fd fa70 	bl	8002518 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800503c:	f7fd fa6c 	bl	8002518 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e02c      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x7b8>
 800505a:	e024      	b.n	80050a6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800505c:	69bb      	ldr	r3, [r7, #24]
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d01f      	beq.n	80050a2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005062:	4b13      	ldr	r3, [pc, #76]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 8005068:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800506c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800506e:	f7fd fa53 	bl	8002518 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005074:	e008      	b.n	8005088 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005076:	f7fd fa4f 	bl	8002518 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e00f      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005088:	4b09      	ldr	r3, [pc, #36]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005094:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 8005096:	68da      	ldr	r2, [r3, #12]
 8005098:	4905      	ldr	r1, [pc, #20]	; (80050b0 <HAL_RCC_OscConfig+0x82c>)
 800509a:	4b06      	ldr	r3, [pc, #24]	; (80050b4 <HAL_RCC_OscConfig+0x830>)
 800509c:	4013      	ands	r3, r2
 800509e:	60cb      	str	r3, [r1, #12]
 80050a0:	e001      	b.n	80050a6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	40021000 	.word	0x40021000
 80050b4:	feeefffc 	.word	0xfeeefffc

080050b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b086      	sub	sp, #24
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80050c2:	2300      	movs	r3, #0
 80050c4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d101      	bne.n	80050d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e11d      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050d0:	4b90      	ldr	r3, [pc, #576]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	683a      	ldr	r2, [r7, #0]
 80050da:	429a      	cmp	r2, r3
 80050dc:	d910      	bls.n	8005100 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050de:	4b8d      	ldr	r3, [pc, #564]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 020f 	bic.w	r2, r3, #15
 80050e6:	498b      	ldr	r1, [pc, #556]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	4b89      	ldr	r3, [pc, #548]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d001      	beq.n	8005100 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e105      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0302 	and.w	r3, r3, #2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689a      	ldr	r2, [r3, #8]
 8005110:	4b81      	ldr	r3, [pc, #516]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005118:	429a      	cmp	r2, r3
 800511a:	d908      	bls.n	800512e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800511c:	4b7e      	ldr	r3, [pc, #504]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	497b      	ldr	r1, [pc, #492]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800512a:	4313      	orrs	r3, r2
 800512c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d079      	beq.n	800522e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b03      	cmp	r3, #3
 8005140:	d11e      	bne.n	8005180 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005142:	4b75      	ldr	r3, [pc, #468]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d101      	bne.n	8005152 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0dc      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005152:	f000 fa09 	bl	8005568 <RCC_GetSysClockFreqFromPLLSource>
 8005156:	4603      	mov	r3, r0
 8005158:	4a70      	ldr	r2, [pc, #448]	; (800531c <HAL_RCC_ClockConfig+0x264>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d946      	bls.n	80051ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800515e:	4b6e      	ldr	r3, [pc, #440]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d140      	bne.n	80051ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800516a:	4b6b      	ldr	r3, [pc, #428]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005172:	4a69      	ldr	r2, [pc, #420]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005178:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800517a:	2380      	movs	r3, #128	; 0x80
 800517c:	617b      	str	r3, [r7, #20]
 800517e:	e035      	b.n	80051ec <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d107      	bne.n	8005198 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005188:	4b63      	ldr	r3, [pc, #396]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d115      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e0b9      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051a0:	4b5d      	ldr	r3, [pc, #372]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 0302 	and.w	r3, r3, #2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d109      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e0ad      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051b0:	4b59      	ldr	r3, [pc, #356]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e0a5      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80051c0:	f000 f8b4 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4a55      	ldr	r2, [pc, #340]	; (800531c <HAL_RCC_ClockConfig+0x264>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d90f      	bls.n	80051ec <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80051cc:	4b52      	ldr	r3, [pc, #328]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80051d8:	4b4f      	ldr	r3, [pc, #316]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051e0:	4a4d      	ldr	r2, [pc, #308]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051e6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80051e8:	2380      	movs	r3, #128	; 0x80
 80051ea:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051ec:	4b4a      	ldr	r3, [pc, #296]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 0203 	bic.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4947      	ldr	r1, [pc, #284]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fe:	f7fd f98b 	bl	8002518 <HAL_GetTick>
 8005202:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005204:	e00a      	b.n	800521c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005206:	f7fd f987 	bl	8002518 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	; 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e077      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521c:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 020c 	and.w	r2, r3, #12
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	429a      	cmp	r2, r3
 800522c:	d1eb      	bne.n	8005206 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	2b80      	cmp	r3, #128	; 0x80
 8005232:	d105      	bne.n	8005240 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005234:	4b38      	ldr	r3, [pc, #224]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a37      	ldr	r2, [pc, #220]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800523a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d010      	beq.n	800526e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	4b31      	ldr	r3, [pc, #196]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005258:	429a      	cmp	r2, r3
 800525a:	d208      	bcs.n	800526e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525c:	4b2e      	ldr	r3, [pc, #184]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	492b      	ldr	r1, [pc, #172]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800526e:	4b29      	ldr	r3, [pc, #164]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 030f 	and.w	r3, r3, #15
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d210      	bcs.n	800529e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f023 020f 	bic.w	r2, r3, #15
 8005284:	4923      	ldr	r1, [pc, #140]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	4313      	orrs	r3, r2
 800528a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800528c:	4b21      	ldr	r3, [pc, #132]	; (8005314 <HAL_RCC_ClockConfig+0x25c>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	683a      	ldr	r2, [r7, #0]
 8005296:	429a      	cmp	r2, r3
 8005298:	d001      	beq.n	800529e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e036      	b.n	800530c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052aa:	4b1b      	ldr	r3, [pc, #108]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	4918      	ldr	r1, [pc, #96]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d009      	beq.n	80052dc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052c8:	4b13      	ldr	r3, [pc, #76]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691b      	ldr	r3, [r3, #16]
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	4910      	ldr	r1, [pc, #64]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052dc:	f000 f826 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80052e0:	4602      	mov	r2, r0
 80052e2:	4b0d      	ldr	r3, [pc, #52]	; (8005318 <HAL_RCC_ClockConfig+0x260>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	091b      	lsrs	r3, r3, #4
 80052e8:	f003 030f 	and.w	r3, r3, #15
 80052ec:	490c      	ldr	r1, [pc, #48]	; (8005320 <HAL_RCC_ClockConfig+0x268>)
 80052ee:	5ccb      	ldrb	r3, [r1, r3]
 80052f0:	f003 031f 	and.w	r3, r3, #31
 80052f4:	fa22 f303 	lsr.w	r3, r2, r3
 80052f8:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <HAL_RCC_ClockConfig+0x26c>)
 80052fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052fc:	4b0a      	ldr	r3, [pc, #40]	; (8005328 <HAL_RCC_ClockConfig+0x270>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4618      	mov	r0, r3
 8005302:	f7fd f8b9 	bl	8002478 <HAL_InitTick>
 8005306:	4603      	mov	r3, r0
 8005308:	73fb      	strb	r3, [r7, #15]

  return status;
 800530a:	7bfb      	ldrb	r3, [r7, #15]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40022000 	.word	0x40022000
 8005318:	40021000 	.word	0x40021000
 800531c:	04c4b400 	.word	0x04c4b400
 8005320:	080099ec 	.word	0x080099ec
 8005324:	20000000 	.word	0x20000000
 8005328:	20000004 	.word	0x20000004

0800532c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800532c:	b480      	push	{r7}
 800532e:	b089      	sub	sp, #36	; 0x24
 8005330:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	61fb      	str	r3, [r7, #28]
 8005336:	2300      	movs	r3, #0
 8005338:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800533a:	4b3e      	ldr	r3, [pc, #248]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	f003 030c 	and.w	r3, r3, #12
 8005342:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005344:	4b3b      	ldr	r3, [pc, #236]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f003 0303 	and.w	r3, r3, #3
 800534c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d005      	beq.n	8005360 <HAL_RCC_GetSysClockFreq+0x34>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b0c      	cmp	r3, #12
 8005358:	d121      	bne.n	800539e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2b01      	cmp	r3, #1
 800535e:	d11e      	bne.n	800539e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d107      	bne.n	800537c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800536c:	4b31      	ldr	r3, [pc, #196]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 800536e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005372:	0a1b      	lsrs	r3, r3, #8
 8005374:	f003 030f 	and.w	r3, r3, #15
 8005378:	61fb      	str	r3, [r7, #28]
 800537a:	e005      	b.n	8005388 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800537c:	4b2d      	ldr	r3, [pc, #180]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	091b      	lsrs	r3, r3, #4
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005388:	4a2b      	ldr	r2, [pc, #172]	; (8005438 <HAL_RCC_GetSysClockFreq+0x10c>)
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005390:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10d      	bne.n	80053b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800539c:	e00a      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b04      	cmp	r3, #4
 80053a2:	d102      	bne.n	80053aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053a4:	4b25      	ldr	r3, [pc, #148]	; (800543c <HAL_RCC_GetSysClockFreq+0x110>)
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	e004      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d101      	bne.n	80053b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <HAL_RCC_GetSysClockFreq+0x114>)
 80053b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b0c      	cmp	r3, #12
 80053b8:	d134      	bne.n	8005424 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ba:	4b1e      	ldr	r3, [pc, #120]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d003      	beq.n	80053d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	2b03      	cmp	r3, #3
 80053ce:	d003      	beq.n	80053d8 <HAL_RCC_GetSysClockFreq+0xac>
 80053d0:	e005      	b.n	80053de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053d2:	4b1a      	ldr	r3, [pc, #104]	; (800543c <HAL_RCC_GetSysClockFreq+0x110>)
 80053d4:	617b      	str	r3, [r7, #20]
      break;
 80053d6:	e005      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053d8:	4b19      	ldr	r3, [pc, #100]	; (8005440 <HAL_RCC_GetSysClockFreq+0x114>)
 80053da:	617b      	str	r3, [r7, #20]
      break;
 80053dc:	e002      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	617b      	str	r3, [r7, #20]
      break;
 80053e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053e4:	4b13      	ldr	r3, [pc, #76]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	091b      	lsrs	r3, r3, #4
 80053ea:	f003 030f 	and.w	r3, r3, #15
 80053ee:	3301      	adds	r3, #1
 80053f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053f2:	4b10      	ldr	r3, [pc, #64]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053fc:	697a      	ldr	r2, [r7, #20]
 80053fe:	fb03 f202 	mul.w	r2, r3, r2
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	fbb2 f3f3 	udiv	r3, r2, r3
 8005408:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800540a:	4b0a      	ldr	r3, [pc, #40]	; (8005434 <HAL_RCC_GetSysClockFreq+0x108>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	0e5b      	lsrs	r3, r3, #25
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	3301      	adds	r3, #1
 8005416:	005b      	lsls	r3, r3, #1
 8005418:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005422:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005424:	69bb      	ldr	r3, [r7, #24]
}
 8005426:	4618      	mov	r0, r3
 8005428:	3724      	adds	r7, #36	; 0x24
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40021000 	.word	0x40021000
 8005438:	08009a04 	.word	0x08009a04
 800543c:	00f42400 	.word	0x00f42400
 8005440:	007a1200 	.word	0x007a1200

08005444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_RCC_GetHCLKFreq+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000000 	.word	0x20000000

0800545c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005460:	f7ff fff0 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005464:	4602      	mov	r2, r0
 8005466:	4b06      	ldr	r3, [pc, #24]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4904      	ldr	r1, [pc, #16]	; (8005484 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005472:	5ccb      	ldrb	r3, [r1, r3]
 8005474:	f003 031f 	and.w	r3, r3, #31
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40021000 	.word	0x40021000
 8005484:	080099fc 	.word	0x080099fc

08005488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800548c:	f7ff ffda 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005490:	4602      	mov	r2, r0
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	0adb      	lsrs	r3, r3, #11
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	4904      	ldr	r1, [pc, #16]	; (80054b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800549e:	5ccb      	ldrb	r3, [r1, r3]
 80054a0:	f003 031f 	and.w	r3, r3, #31
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	40021000 	.word	0x40021000
 80054b0:	080099fc 	.word	0x080099fc

080054b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054bc:	2300      	movs	r3, #0
 80054be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054c0:	4b27      	ldr	r3, [pc, #156]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d003      	beq.n	80054d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054cc:	f7ff f916 	bl	80046fc <HAL_PWREx_GetVoltageRange>
 80054d0:	6178      	str	r0, [r7, #20]
 80054d2:	e014      	b.n	80054fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d8:	4a21      	ldr	r2, [pc, #132]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054de:	6593      	str	r3, [r2, #88]	; 0x58
 80054e0:	4b1f      	ldr	r3, [pc, #124]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e8:	60fb      	str	r3, [r7, #12]
 80054ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054ec:	f7ff f906 	bl	80046fc <HAL_PWREx_GetVoltageRange>
 80054f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054f2:	4b1b      	ldr	r3, [pc, #108]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f6:	4a1a      	ldr	r2, [pc, #104]	; (8005560 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80054f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005504:	d10b      	bne.n	800551e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b80      	cmp	r3, #128	; 0x80
 800550a:	d913      	bls.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2ba0      	cmp	r3, #160	; 0xa0
 8005510:	d902      	bls.n	8005518 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005512:	2302      	movs	r3, #2
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	e00d      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005518:	2301      	movs	r3, #1
 800551a:	613b      	str	r3, [r7, #16]
 800551c:	e00a      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b7f      	cmp	r3, #127	; 0x7f
 8005522:	d902      	bls.n	800552a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005524:	2302      	movs	r3, #2
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	e004      	b.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2b70      	cmp	r3, #112	; 0x70
 800552e:	d101      	bne.n	8005534 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005530:	2301      	movs	r3, #1
 8005532:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005534:	4b0b      	ldr	r3, [pc, #44]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f023 020f 	bic.w	r2, r3, #15
 800553c:	4909      	ldr	r1, [pc, #36]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005544:	4b07      	ldr	r3, [pc, #28]	; (8005564 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 030f 	and.w	r3, r3, #15
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40021000 	.word	0x40021000
 8005564:	40022000 	.word	0x40022000

08005568 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800556e:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	2b03      	cmp	r3, #3
 800557c:	d00b      	beq.n	8005596 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2b03      	cmp	r3, #3
 8005582:	d825      	bhi.n	80055d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d008      	beq.n	800559c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2b02      	cmp	r3, #2
 800558e:	d11f      	bne.n	80055d0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005590:	4b25      	ldr	r3, [pc, #148]	; (8005628 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005592:	613b      	str	r3, [r7, #16]
    break;
 8005594:	e01f      	b.n	80055d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005596:	4b25      	ldr	r3, [pc, #148]	; (800562c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005598:	613b      	str	r3, [r7, #16]
    break;
 800559a:	e01c      	b.n	80055d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800559c:	4b21      	ldr	r3, [pc, #132]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0308 	and.w	r3, r3, #8
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d107      	bne.n	80055b8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055a8:	4b1e      	ldr	r3, [pc, #120]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ae:	0a1b      	lsrs	r3, r3, #8
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	617b      	str	r3, [r7, #20]
 80055b6:	e005      	b.n	80055c4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055b8:	4b1a      	ldr	r3, [pc, #104]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	091b      	lsrs	r3, r3, #4
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80055c4:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055cc:	613b      	str	r3, [r7, #16]
    break;
 80055ce:	e002      	b.n	80055d6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
    break;
 80055d4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055d6:	4b13      	ldr	r3, [pc, #76]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	091b      	lsrs	r3, r3, #4
 80055dc:	f003 030f 	and.w	r3, r3, #15
 80055e0:	3301      	adds	r3, #1
 80055e2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80055e4:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	0a1b      	lsrs	r3, r3, #8
 80055ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	fb03 f202 	mul.w	r2, r3, r2
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fa:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055fc:	4b09      	ldr	r3, [pc, #36]	; (8005624 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	0e5b      	lsrs	r3, r3, #25
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	3301      	adds	r3, #1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005616:	683b      	ldr	r3, [r7, #0]
}
 8005618:	4618      	mov	r0, r3
 800561a:	371c      	adds	r7, #28
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	40021000 	.word	0x40021000
 8005628:	00f42400 	.word	0x00f42400
 800562c:	007a1200 	.word	0x007a1200
 8005630:	08009a04 	.word	0x08009a04

08005634 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b086      	sub	sp, #24
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800563c:	2300      	movs	r3, #0
 800563e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005640:	2300      	movs	r3, #0
 8005642:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800564c:	2b00      	cmp	r3, #0
 800564e:	d040      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005654:	2b80      	cmp	r3, #128	; 0x80
 8005656:	d02a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005658:	2b80      	cmp	r3, #128	; 0x80
 800565a:	d825      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800565c:	2b60      	cmp	r3, #96	; 0x60
 800565e:	d026      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005660:	2b60      	cmp	r3, #96	; 0x60
 8005662:	d821      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005664:	2b40      	cmp	r3, #64	; 0x40
 8005666:	d006      	beq.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005668:	2b40      	cmp	r3, #64	; 0x40
 800566a:	d81d      	bhi.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005670:	2b20      	cmp	r3, #32
 8005672:	d010      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005674:	e018      	b.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005676:	4b89      	ldr	r3, [pc, #548]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	4a88      	ldr	r2, [pc, #544]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800567c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005680:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005682:	e015      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3304      	adds	r3, #4
 8005688:	2100      	movs	r1, #0
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fb12 	bl	8005cb4 <RCCEx_PLLSAI1_Config>
 8005690:	4603      	mov	r3, r0
 8005692:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005694:	e00c      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3320      	adds	r3, #32
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fbfd 	bl	8005e9c <RCCEx_PLLSAI2_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	74fb      	strb	r3, [r7, #19]
      break;
 80056ac:	e000      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80056ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056b0:	7cfb      	ldrb	r3, [r7, #19]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80056b6:	4b79      	ldr	r3, [pc, #484]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056bc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c4:	4975      	ldr	r1, [pc, #468]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056cc:	e001      	b.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ce:	7cfb      	ldrb	r3, [r7, #19]
 80056d0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d047      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e6:	d030      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d82a      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f2:	d02a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80056f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80056f8:	d824      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80056fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056fe:	d008      	beq.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005700:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005704:	d81e      	bhi.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d00a      	beq.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800570a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800570e:	d010      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005710:	e018      	b.n	8005744 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005712:	4b62      	ldr	r3, [pc, #392]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	4a61      	ldr	r2, [pc, #388]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005718:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800571c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800571e:	e015      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	3304      	adds	r3, #4
 8005724:	2100      	movs	r1, #0
 8005726:	4618      	mov	r0, r3
 8005728:	f000 fac4 	bl	8005cb4 <RCCEx_PLLSAI1_Config>
 800572c:	4603      	mov	r3, r0
 800572e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005730:	e00c      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	3320      	adds	r3, #32
 8005736:	2100      	movs	r1, #0
 8005738:	4618      	mov	r0, r3
 800573a:	f000 fbaf 	bl	8005e9c <RCCEx_PLLSAI2_Config>
 800573e:	4603      	mov	r3, r0
 8005740:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005742:	e003      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005744:	2301      	movs	r3, #1
 8005746:	74fb      	strb	r3, [r7, #19]
      break;
 8005748:	e000      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800574a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800574c:	7cfb      	ldrb	r3, [r7, #19]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10b      	bne.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005752:	4b52      	ldr	r3, [pc, #328]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005754:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005758:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	494e      	ldr	r1, [pc, #312]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005768:	e001      	b.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800576a:	7cfb      	ldrb	r3, [r7, #19]
 800576c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 809f 	beq.w	80058ba <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577c:	2300      	movs	r3, #0
 800577e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005780:	4b46      	ldr	r3, [pc, #280]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005782:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d101      	bne.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800578c:	2301      	movs	r3, #1
 800578e:	e000      	b.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005790:	2300      	movs	r3, #0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00d      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005796:	4b41      	ldr	r3, [pc, #260]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579a:	4a40      	ldr	r2, [pc, #256]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a0:	6593      	str	r3, [r2, #88]	; 0x58
 80057a2:	4b3e      	ldr	r3, [pc, #248]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057aa:	60bb      	str	r3, [r7, #8]
 80057ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057ae:	2301      	movs	r3, #1
 80057b0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057b2:	4b3b      	ldr	r3, [pc, #236]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057be:	f7fc feab 	bl	8002518 <HAL_GetTick>
 80057c2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057c4:	e009      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057c6:	f7fc fea7 	bl	8002518 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	2b02      	cmp	r3, #2
 80057d2:	d902      	bls.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	74fb      	strb	r3, [r7, #19]
        break;
 80057d8:	e005      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80057da:	4b31      	ldr	r3, [pc, #196]	; (80058a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0ef      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d15b      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80057ec:	4b2b      	ldr	r3, [pc, #172]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f6:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d01f      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	429a      	cmp	r2, r3
 8005808:	d019      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005814:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581c:	4a1f      	ldr	r2, [pc, #124]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800581e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005822:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005826:	4b1d      	ldr	r3, [pc, #116]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800582c:	4a1b      	ldr	r2, [pc, #108]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800582e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005836:	4a19      	ldr	r2, [pc, #100]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d016      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005848:	f7fc fe66 	bl	8002518 <HAL_GetTick>
 800584c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800584e:	e00b      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005850:	f7fc fe62 	bl	8002518 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	f241 3288 	movw	r2, #5000	; 0x1388
 800585e:	4293      	cmp	r3, r2
 8005860:	d902      	bls.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	74fb      	strb	r3, [r7, #19]
            break;
 8005866:	e006      	b.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005868:	4b0c      	ldr	r3, [pc, #48]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800586a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0ec      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005876:	7cfb      	ldrb	r3, [r7, #19]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10c      	bne.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800587c:	4b07      	ldr	r3, [pc, #28]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800587e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005882:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588c:	4903      	ldr	r1, [pc, #12]	; (800589c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005894:	e008      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005896:	7cfb      	ldrb	r3, [r7, #19]
 8005898:	74bb      	strb	r3, [r7, #18]
 800589a:	e005      	b.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800589c:	40021000 	.word	0x40021000
 80058a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058a4:	7cfb      	ldrb	r3, [r7, #19]
 80058a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058a8:	7c7b      	ldrb	r3, [r7, #17]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d105      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058ae:	4ba0      	ldr	r3, [pc, #640]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b2:	4a9f      	ldr	r2, [pc, #636]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058c6:	4b9a      	ldr	r3, [pc, #616]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058cc:	f023 0203 	bic.w	r2, r3, #3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d4:	4996      	ldr	r1, [pc, #600]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0302 	and.w	r3, r3, #2
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058e8:	4b91      	ldr	r3, [pc, #580]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ee:	f023 020c 	bic.w	r2, r3, #12
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	498e      	ldr	r1, [pc, #568]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800590a:	4b89      	ldr	r3, [pc, #548]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005910:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	4985      	ldr	r1, [pc, #532]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800592c:	4b80      	ldr	r3, [pc, #512]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005932:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800593a:	497d      	ldr	r1, [pc, #500]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800594e:	4b78      	ldr	r3, [pc, #480]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800595c:	4974      	ldr	r1, [pc, #464]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005970:	4b6f      	ldr	r3, [pc, #444]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800597e:	496c      	ldr	r1, [pc, #432]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005992:	4b67      	ldr	r3, [pc, #412]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005998:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059a0:	4963      	ldr	r1, [pc, #396]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80059b4:	4b5e      	ldr	r3, [pc, #376]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059c2:	495b      	ldr	r1, [pc, #364]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d00a      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059d6:	4b56      	ldr	r3, [pc, #344]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059e4:	4952      	ldr	r1, [pc, #328]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d00a      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059f8:	4b4d      	ldr	r3, [pc, #308]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a06:	494a      	ldr	r1, [pc, #296]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00a      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a1a:	4b45      	ldr	r3, [pc, #276]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a28:	4941      	ldr	r1, [pc, #260]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d00a      	beq.n	8005a52 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a3c:	4b3c      	ldr	r3, [pc, #240]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a42:	f023 0203 	bic.w	r2, r3, #3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a4a:	4939      	ldr	r1, [pc, #228]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d028      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a5e:	4b34      	ldr	r3, [pc, #208]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a6c:	4930      	ldr	r1, [pc, #192]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a7c:	d106      	bne.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a7e:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	4a2b      	ldr	r2, [pc, #172]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a88:	60d3      	str	r3, [r2, #12]
 8005a8a:	e011      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a94:	d10c      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f909 	bl	8005cb4 <RCCEx_PLLSAI1_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005aa6:	7cfb      	ldrb	r3, [r7, #19]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d04d      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac4:	d108      	bne.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005ac6:	4b1a      	ldr	r3, [pc, #104]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005acc:	4a18      	ldr	r2, [pc, #96]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ace:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ad2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005ad6:	e012      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005ad8:	4b15      	ldr	r3, [pc, #84]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ade:	4a14      	ldr	r2, [pc, #80]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ae0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005ae8:	4b11      	ldr	r3, [pc, #68]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af6:	490e      	ldr	r1, [pc, #56]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005af8:	4313      	orrs	r3, r2
 8005afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b08:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	4a08      	ldr	r2, [pc, #32]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b12:	60d3      	str	r3, [r2, #12]
 8005b14:	e020      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b1e:	d109      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005b20:	4b03      	ldr	r3, [pc, #12]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	4a02      	ldr	r2, [pc, #8]	; (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005b26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b2a:	60d3      	str	r3, [r2, #12]
 8005b2c:	e014      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005b2e:	bf00      	nop
 8005b30:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b3c:	d10c      	bne.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	3304      	adds	r3, #4
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f8b5 	bl	8005cb4 <RCCEx_PLLSAI1_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b4e:	7cfb      	ldrb	r3, [r7, #19]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005b54:	7cfb      	ldrb	r3, [r7, #19]
 8005b56:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d028      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b64:	4b4a      	ldr	r3, [pc, #296]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b72:	4947      	ldr	r1, [pc, #284]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b82:	d106      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b84:	4b42      	ldr	r3, [pc, #264]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4a41      	ldr	r2, [pc, #260]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b8e:	60d3      	str	r3, [r2, #12]
 8005b90:	e011      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b9a:	d10c      	bne.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	3304      	adds	r3, #4
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 f886 	bl	8005cb4 <RCCEx_PLLSAI1_Config>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bac:	7cfb      	ldrb	r3, [r7, #19]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d001      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01e      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bc2:	4b33      	ldr	r3, [pc, #204]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd2:	492f      	ldr	r1, [pc, #188]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005be4:	d10c      	bne.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
 8005bea:	2102      	movs	r1, #2
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f861 	bl	8005cb4 <RCCEx_PLLSAI1_Config>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bf6:	7cfb      	ldrb	r3, [r7, #19]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005bfc:	7cfb      	ldrb	r3, [r7, #19]
 8005bfe:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00b      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005c0c:	4b20      	ldr	r3, [pc, #128]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c12:	f023 0204 	bic.w	r2, r3, #4
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1c:	491c      	ldr	r1, [pc, #112]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005c30:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c36:	f023 0218 	bic.w	r2, r3, #24
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c40:	4913      	ldr	r1, [pc, #76]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c42:	4313      	orrs	r3, r2
 8005c44:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005c54:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c64:	490a      	ldr	r1, [pc, #40]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c72:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c76:	d105      	bne.n	8005c84 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c78:	4b05      	ldr	r3, [pc, #20]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c82:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005c84:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3718      	adds	r7, #24
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000

08005c94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a04      	ldr	r2, [pc, #16]	; (8005cb0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c9e:	f043 0304 	orr.w	r3, r3, #4
 8005ca2:	6013      	str	r3, [r2, #0]
}
 8005ca4:	bf00      	nop
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40021000 	.word	0x40021000

08005cb4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b084      	sub	sp, #16
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005cc2:	4b72      	ldr	r3, [pc, #456]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00e      	beq.n	8005cec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005cce:	4b6f      	ldr	r3, [pc, #444]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	f003 0203 	and.w	r2, r3, #3
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d103      	bne.n	8005ce6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
       ||
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d142      	bne.n	8005d6c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	73fb      	strb	r3, [r7, #15]
 8005cea:	e03f      	b.n	8005d6c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b03      	cmp	r3, #3
 8005cf2:	d018      	beq.n	8005d26 <RCCEx_PLLSAI1_Config+0x72>
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d825      	bhi.n	8005d44 <RCCEx_PLLSAI1_Config+0x90>
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d002      	beq.n	8005d02 <RCCEx_PLLSAI1_Config+0x4e>
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d009      	beq.n	8005d14 <RCCEx_PLLSAI1_Config+0x60>
 8005d00:	e020      	b.n	8005d44 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d02:	4b62      	ldr	r3, [pc, #392]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0302 	and.w	r3, r3, #2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d11d      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d12:	e01a      	b.n	8005d4a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d14:	4b5d      	ldr	r3, [pc, #372]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d116      	bne.n	8005d4e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d24:	e013      	b.n	8005d4e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d26:	4b59      	ldr	r3, [pc, #356]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10f      	bne.n	8005d52 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d32:	4b56      	ldr	r3, [pc, #344]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d109      	bne.n	8005d52 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005d42:	e006      	b.n	8005d52 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	73fb      	strb	r3, [r7, #15]
      break;
 8005d48:	e004      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d4a:	bf00      	nop
 8005d4c:	e002      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d4e:	bf00      	nop
 8005d50:	e000      	b.n	8005d54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005d52:	bf00      	nop
    }

    if(status == HAL_OK)
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d108      	bne.n	8005d6c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005d5a:	4b4c      	ldr	r3, [pc, #304]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f023 0203 	bic.w	r2, r3, #3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4949      	ldr	r1, [pc, #292]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	f040 8086 	bne.w	8005e80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005d74:	4b45      	ldr	r3, [pc, #276]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4a44      	ldr	r2, [pc, #272]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d80:	f7fc fbca 	bl	8002518 <HAL_GetTick>
 8005d84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d86:	e009      	b.n	8005d9c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d88:	f7fc fbc6 	bl	8002518 <HAL_GetTick>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	1ad3      	subs	r3, r2, r3
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d902      	bls.n	8005d9c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	73fb      	strb	r3, [r7, #15]
        break;
 8005d9a:	e005      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d9c:	4b3b      	ldr	r3, [pc, #236]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ef      	bne.n	8005d88 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005da8:	7bfb      	ldrb	r3, [r7, #15]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d168      	bne.n	8005e80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d113      	bne.n	8005ddc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	4b35      	ldr	r3, [pc, #212]	; (8005e90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005dba:	4013      	ands	r3, r2
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6892      	ldr	r2, [r2, #8]
 8005dc0:	0211      	lsls	r1, r2, #8
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	68d2      	ldr	r2, [r2, #12]
 8005dc6:	06d2      	lsls	r2, r2, #27
 8005dc8:	4311      	orrs	r1, r2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6852      	ldr	r2, [r2, #4]
 8005dce:	3a01      	subs	r2, #1
 8005dd0:	0112      	lsls	r2, r2, #4
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	492d      	ldr	r1, [pc, #180]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	610b      	str	r3, [r1, #16]
 8005dda:	e02d      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d115      	bne.n	8005e0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005de2:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	4b2b      	ldr	r3, [pc, #172]	; (8005e94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	6892      	ldr	r2, [r2, #8]
 8005dee:	0211      	lsls	r1, r2, #8
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6912      	ldr	r2, [r2, #16]
 8005df4:	0852      	lsrs	r2, r2, #1
 8005df6:	3a01      	subs	r2, #1
 8005df8:	0552      	lsls	r2, r2, #21
 8005dfa:	4311      	orrs	r1, r2
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	6852      	ldr	r2, [r2, #4]
 8005e00:	3a01      	subs	r2, #1
 8005e02:	0112      	lsls	r2, r2, #4
 8005e04:	430a      	orrs	r2, r1
 8005e06:	4921      	ldr	r1, [pc, #132]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	610b      	str	r3, [r1, #16]
 8005e0c:	e014      	b.n	8005e38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e0e:	4b1f      	ldr	r3, [pc, #124]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e10:	691a      	ldr	r2, [r3, #16]
 8005e12:	4b21      	ldr	r3, [pc, #132]	; (8005e98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6892      	ldr	r2, [r2, #8]
 8005e1a:	0211      	lsls	r1, r2, #8
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	6952      	ldr	r2, [r2, #20]
 8005e20:	0852      	lsrs	r2, r2, #1
 8005e22:	3a01      	subs	r2, #1
 8005e24:	0652      	lsls	r2, r2, #25
 8005e26:	4311      	orrs	r1, r2
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6852      	ldr	r2, [r2, #4]
 8005e2c:	3a01      	subs	r2, #1
 8005e2e:	0112      	lsls	r2, r2, #4
 8005e30:	430a      	orrs	r2, r1
 8005e32:	4916      	ldr	r1, [pc, #88]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e34:	4313      	orrs	r3, r2
 8005e36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e38:	4b14      	ldr	r3, [pc, #80]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a13      	ldr	r2, [pc, #76]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e44:	f7fc fb68 	bl	8002518 <HAL_GetTick>
 8005e48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e4a:	e009      	b.n	8005e60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e4c:	f7fc fb64 	bl	8002518 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b02      	cmp	r3, #2
 8005e58:	d902      	bls.n	8005e60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	73fb      	strb	r3, [r7, #15]
          break;
 8005e5e:	e005      	b.n	8005e6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005e60:	4b0a      	ldr	r3, [pc, #40]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0ef      	beq.n	8005e4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005e6c:	7bfb      	ldrb	r3, [r7, #15]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005e72:	4b06      	ldr	r3, [pc, #24]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	4904      	ldr	r1, [pc, #16]	; (8005e8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	07ff800f 	.word	0x07ff800f
 8005e94:	ff9f800f 	.word	0xff9f800f
 8005e98:	f9ff800f 	.word	0xf9ff800f

08005e9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005eaa:	4b72      	ldr	r3, [pc, #456]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00e      	beq.n	8005ed4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005eb6:	4b6f      	ldr	r3, [pc, #444]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eb8:	68db      	ldr	r3, [r3, #12]
 8005eba:	f003 0203 	and.w	r2, r3, #3
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d103      	bne.n	8005ece <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
       ||
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d142      	bne.n	8005f54 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	73fb      	strb	r3, [r7, #15]
 8005ed2:	e03f      	b.n	8005f54 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2b03      	cmp	r3, #3
 8005eda:	d018      	beq.n	8005f0e <RCCEx_PLLSAI2_Config+0x72>
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d825      	bhi.n	8005f2c <RCCEx_PLLSAI2_Config+0x90>
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d002      	beq.n	8005eea <RCCEx_PLLSAI2_Config+0x4e>
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d009      	beq.n	8005efc <RCCEx_PLLSAI2_Config+0x60>
 8005ee8:	e020      	b.n	8005f2c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005eea:	4b62      	ldr	r3, [pc, #392]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0302 	and.w	r3, r3, #2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d11d      	bne.n	8005f32 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005efa:	e01a      	b.n	8005f32 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005efc:	4b5d      	ldr	r3, [pc, #372]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d116      	bne.n	8005f36 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005f08:	2301      	movs	r3, #1
 8005f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f0c:	e013      	b.n	8005f36 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f0e:	4b59      	ldr	r3, [pc, #356]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f1a:	4b56      	ldr	r3, [pc, #344]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d109      	bne.n	8005f3a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f2a:	e006      	b.n	8005f3a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f30:	e004      	b.n	8005f3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f32:	bf00      	nop
 8005f34:	e002      	b.n	8005f3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f36:	bf00      	nop
 8005f38:	e000      	b.n	8005f3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005f3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d108      	bne.n	8005f54 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005f42:	4b4c      	ldr	r3, [pc, #304]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	f023 0203 	bic.w	r2, r3, #3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4949      	ldr	r1, [pc, #292]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f50:	4313      	orrs	r3, r2
 8005f52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f040 8086 	bne.w	8006068 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005f5c:	4b45      	ldr	r3, [pc, #276]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a44      	ldr	r2, [pc, #272]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f68:	f7fc fad6 	bl	8002518 <HAL_GetTick>
 8005f6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f6e:	e009      	b.n	8005f84 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005f70:	f7fc fad2 	bl	8002518 <HAL_GetTick>
 8005f74:	4602      	mov	r2, r0
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	1ad3      	subs	r3, r2, r3
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d902      	bls.n	8005f84 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005f7e:	2303      	movs	r3, #3
 8005f80:	73fb      	strb	r3, [r7, #15]
        break;
 8005f82:	e005      	b.n	8005f90 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005f84:	4b3b      	ldr	r3, [pc, #236]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1ef      	bne.n	8005f70 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d168      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d113      	bne.n	8005fc4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f9c:	4b35      	ldr	r3, [pc, #212]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f9e:	695a      	ldr	r2, [r3, #20]
 8005fa0:	4b35      	ldr	r3, [pc, #212]	; (8006078 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	6892      	ldr	r2, [r2, #8]
 8005fa8:	0211      	lsls	r1, r2, #8
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	68d2      	ldr	r2, [r2, #12]
 8005fae:	06d2      	lsls	r2, r2, #27
 8005fb0:	4311      	orrs	r1, r2
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	6852      	ldr	r2, [r2, #4]
 8005fb6:	3a01      	subs	r2, #1
 8005fb8:	0112      	lsls	r2, r2, #4
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	492d      	ldr	r1, [pc, #180]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fbe:	4313      	orrs	r3, r2
 8005fc0:	614b      	str	r3, [r1, #20]
 8005fc2:	e02d      	b.n	8006020 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d115      	bne.n	8005ff6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005fca:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	4b2b      	ldr	r3, [pc, #172]	; (800607c <RCCEx_PLLSAI2_Config+0x1e0>)
 8005fd0:	4013      	ands	r3, r2
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	6892      	ldr	r2, [r2, #8]
 8005fd6:	0211      	lsls	r1, r2, #8
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6912      	ldr	r2, [r2, #16]
 8005fdc:	0852      	lsrs	r2, r2, #1
 8005fde:	3a01      	subs	r2, #1
 8005fe0:	0552      	lsls	r2, r2, #21
 8005fe2:	4311      	orrs	r1, r2
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	6852      	ldr	r2, [r2, #4]
 8005fe8:	3a01      	subs	r2, #1
 8005fea:	0112      	lsls	r2, r2, #4
 8005fec:	430a      	orrs	r2, r1
 8005fee:	4921      	ldr	r1, [pc, #132]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	614b      	str	r3, [r1, #20]
 8005ff4:	e014      	b.n	8006020 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ff6:	4b1f      	ldr	r3, [pc, #124]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ff8:	695a      	ldr	r2, [r3, #20]
 8005ffa:	4b21      	ldr	r3, [pc, #132]	; (8006080 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6892      	ldr	r2, [r2, #8]
 8006002:	0211      	lsls	r1, r2, #8
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6952      	ldr	r2, [r2, #20]
 8006008:	0852      	lsrs	r2, r2, #1
 800600a:	3a01      	subs	r2, #1
 800600c:	0652      	lsls	r2, r2, #25
 800600e:	4311      	orrs	r1, r2
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	6852      	ldr	r2, [r2, #4]
 8006014:	3a01      	subs	r2, #1
 8006016:	0112      	lsls	r2, r2, #4
 8006018:	430a      	orrs	r2, r1
 800601a:	4916      	ldr	r1, [pc, #88]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800601c:	4313      	orrs	r3, r2
 800601e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006020:	4b14      	ldr	r3, [pc, #80]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a13      	ldr	r2, [pc, #76]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800602a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800602c:	f7fc fa74 	bl	8002518 <HAL_GetTick>
 8006030:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006032:	e009      	b.n	8006048 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006034:	f7fc fa70 	bl	8002518 <HAL_GetTick>
 8006038:	4602      	mov	r2, r0
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	2b02      	cmp	r3, #2
 8006040:	d902      	bls.n	8006048 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8006042:	2303      	movs	r3, #3
 8006044:	73fb      	strb	r3, [r7, #15]
          break;
 8006046:	e005      	b.n	8006054 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006048:	4b0a      	ldr	r3, [pc, #40]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0ef      	beq.n	8006034 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d106      	bne.n	8006068 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800605a:	4b06      	ldr	r3, [pc, #24]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 800605c:	695a      	ldr	r2, [r3, #20]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	4904      	ldr	r1, [pc, #16]	; (8006074 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006064:	4313      	orrs	r3, r2
 8006066:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006068:	7bfb      	ldrb	r3, [r7, #15]
}
 800606a:	4618      	mov	r0, r3
 800606c:	3710      	adds	r7, #16
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	40021000 	.word	0x40021000
 8006078:	07ff800f 	.word	0x07ff800f
 800607c:	ff9f800f 	.word	0xff9f800f
 8006080:	f9ff800f 	.word	0xf9ff800f

08006084 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e095      	b.n	80061c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	2b00      	cmp	r3, #0
 800609c:	d108      	bne.n	80060b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a6:	d009      	beq.n	80060bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	61da      	str	r2, [r3, #28]
 80060ae:	e005      	b.n	80060bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2200      	movs	r2, #0
 80060b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2200      	movs	r2, #0
 80060c0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fb febe 	bl	8001e58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060fc:	d902      	bls.n	8006104 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80060fe:	2300      	movs	r3, #0
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	e002      	b.n	800610a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006108:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006112:	d007      	beq.n	8006124 <HAL_SPI_Init+0xa0>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	695b      	ldr	r3, [r3, #20]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	431a      	orrs	r2, r3
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006152:	431a      	orrs	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006166:	ea42 0103 	orr.w	r1, r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	699b      	ldr	r3, [r3, #24]
 800617e:	0c1b      	lsrs	r3, r3, #16
 8006180:	f003 0204 	and.w	r2, r3, #4
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006188:	f003 0310 	and.w	r3, r3, #16
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	f003 0308 	and.w	r3, r3, #8
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68db      	ldr	r3, [r3, #12]
 800619c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061a0:	ea42 0103 	orr.w	r1, r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}

080061ca <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b082      	sub	sp, #8
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d101      	bne.n	80061dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e042      	b.n	8006262 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d106      	bne.n	80061f4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7fb fea8 	bl	8001f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2224      	movs	r2, #36	; 0x24
 80061f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f022 0201 	bic.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fb25 	bl	8006864 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f826 	bl	800626c <UART_SetConfig>
 8006220:	4603      	mov	r3, r0
 8006222:	2b01      	cmp	r3, #1
 8006224:	d101      	bne.n	800622a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e01b      	b.n	8006262 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006238:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006248:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f042 0201 	orr.w	r2, r2, #1
 8006258:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fba4 	bl	80069a8 <UART_CheckIdleState>
 8006260:	4603      	mov	r3, r0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800626c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006270:	b08c      	sub	sp, #48	; 0x30
 8006272:	af00      	add	r7, sp, #0
 8006274:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	689a      	ldr	r2, [r3, #8]
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	431a      	orrs	r2, r3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	695b      	ldr	r3, [r3, #20]
 800628a:	431a      	orrs	r2, r3
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	69db      	ldr	r3, [r3, #28]
 8006290:	4313      	orrs	r3, r2
 8006292:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681a      	ldr	r2, [r3, #0]
 800629a:	4baa      	ldr	r3, [pc, #680]	; (8006544 <UART_SetConfig+0x2d8>)
 800629c:	4013      	ands	r3, r2
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a4:	430b      	orrs	r3, r1
 80062a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	68da      	ldr	r2, [r3, #12]
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a9f      	ldr	r2, [pc, #636]	; (8006548 <UART_SetConfig+0x2dc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d004      	beq.n	80062d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062d4:	4313      	orrs	r3, r2
 80062d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80062e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80062e6:	697a      	ldr	r2, [r7, #20]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ec:	430b      	orrs	r3, r1
 80062ee:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f6:	f023 010f 	bic.w	r1, r3, #15
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a90      	ldr	r2, [pc, #576]	; (800654c <UART_SetConfig+0x2e0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d125      	bne.n	800635c <UART_SetConfig+0xf0>
 8006310:	4b8f      	ldr	r3, [pc, #572]	; (8006550 <UART_SetConfig+0x2e4>)
 8006312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b03      	cmp	r3, #3
 800631c:	d81a      	bhi.n	8006354 <UART_SetConfig+0xe8>
 800631e:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <UART_SetConfig+0xb8>)
 8006320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006324:	08006335 	.word	0x08006335
 8006328:	08006345 	.word	0x08006345
 800632c:	0800633d 	.word	0x0800633d
 8006330:	0800634d 	.word	0x0800634d
 8006334:	2301      	movs	r3, #1
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633a:	e116      	b.n	800656a <UART_SetConfig+0x2fe>
 800633c:	2302      	movs	r3, #2
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006342:	e112      	b.n	800656a <UART_SetConfig+0x2fe>
 8006344:	2304      	movs	r3, #4
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800634a:	e10e      	b.n	800656a <UART_SetConfig+0x2fe>
 800634c:	2308      	movs	r3, #8
 800634e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006352:	e10a      	b.n	800656a <UART_SetConfig+0x2fe>
 8006354:	2310      	movs	r3, #16
 8006356:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800635a:	e106      	b.n	800656a <UART_SetConfig+0x2fe>
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a7c      	ldr	r2, [pc, #496]	; (8006554 <UART_SetConfig+0x2e8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d138      	bne.n	80063d8 <UART_SetConfig+0x16c>
 8006366:	4b7a      	ldr	r3, [pc, #488]	; (8006550 <UART_SetConfig+0x2e4>)
 8006368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636c:	f003 030c 	and.w	r3, r3, #12
 8006370:	2b0c      	cmp	r3, #12
 8006372:	d82d      	bhi.n	80063d0 <UART_SetConfig+0x164>
 8006374:	a201      	add	r2, pc, #4	; (adr r2, 800637c <UART_SetConfig+0x110>)
 8006376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637a:	bf00      	nop
 800637c:	080063b1 	.word	0x080063b1
 8006380:	080063d1 	.word	0x080063d1
 8006384:	080063d1 	.word	0x080063d1
 8006388:	080063d1 	.word	0x080063d1
 800638c:	080063c1 	.word	0x080063c1
 8006390:	080063d1 	.word	0x080063d1
 8006394:	080063d1 	.word	0x080063d1
 8006398:	080063d1 	.word	0x080063d1
 800639c:	080063b9 	.word	0x080063b9
 80063a0:	080063d1 	.word	0x080063d1
 80063a4:	080063d1 	.word	0x080063d1
 80063a8:	080063d1 	.word	0x080063d1
 80063ac:	080063c9 	.word	0x080063c9
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063b6:	e0d8      	b.n	800656a <UART_SetConfig+0x2fe>
 80063b8:	2302      	movs	r3, #2
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063be:	e0d4      	b.n	800656a <UART_SetConfig+0x2fe>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063c6:	e0d0      	b.n	800656a <UART_SetConfig+0x2fe>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ce:	e0cc      	b.n	800656a <UART_SetConfig+0x2fe>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d6:	e0c8      	b.n	800656a <UART_SetConfig+0x2fe>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a5e      	ldr	r2, [pc, #376]	; (8006558 <UART_SetConfig+0x2ec>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d125      	bne.n	800642e <UART_SetConfig+0x1c2>
 80063e2:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <UART_SetConfig+0x2e4>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ec:	2b30      	cmp	r3, #48	; 0x30
 80063ee:	d016      	beq.n	800641e <UART_SetConfig+0x1b2>
 80063f0:	2b30      	cmp	r3, #48	; 0x30
 80063f2:	d818      	bhi.n	8006426 <UART_SetConfig+0x1ba>
 80063f4:	2b20      	cmp	r3, #32
 80063f6:	d00a      	beq.n	800640e <UART_SetConfig+0x1a2>
 80063f8:	2b20      	cmp	r3, #32
 80063fa:	d814      	bhi.n	8006426 <UART_SetConfig+0x1ba>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <UART_SetConfig+0x19a>
 8006400:	2b10      	cmp	r3, #16
 8006402:	d008      	beq.n	8006416 <UART_SetConfig+0x1aa>
 8006404:	e00f      	b.n	8006426 <UART_SetConfig+0x1ba>
 8006406:	2300      	movs	r3, #0
 8006408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800640c:	e0ad      	b.n	800656a <UART_SetConfig+0x2fe>
 800640e:	2302      	movs	r3, #2
 8006410:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006414:	e0a9      	b.n	800656a <UART_SetConfig+0x2fe>
 8006416:	2304      	movs	r3, #4
 8006418:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800641c:	e0a5      	b.n	800656a <UART_SetConfig+0x2fe>
 800641e:	2308      	movs	r3, #8
 8006420:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006424:	e0a1      	b.n	800656a <UART_SetConfig+0x2fe>
 8006426:	2310      	movs	r3, #16
 8006428:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800642c:	e09d      	b.n	800656a <UART_SetConfig+0x2fe>
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a4a      	ldr	r2, [pc, #296]	; (800655c <UART_SetConfig+0x2f0>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d125      	bne.n	8006484 <UART_SetConfig+0x218>
 8006438:	4b45      	ldr	r3, [pc, #276]	; (8006550 <UART_SetConfig+0x2e4>)
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006442:	2bc0      	cmp	r3, #192	; 0xc0
 8006444:	d016      	beq.n	8006474 <UART_SetConfig+0x208>
 8006446:	2bc0      	cmp	r3, #192	; 0xc0
 8006448:	d818      	bhi.n	800647c <UART_SetConfig+0x210>
 800644a:	2b80      	cmp	r3, #128	; 0x80
 800644c:	d00a      	beq.n	8006464 <UART_SetConfig+0x1f8>
 800644e:	2b80      	cmp	r3, #128	; 0x80
 8006450:	d814      	bhi.n	800647c <UART_SetConfig+0x210>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <UART_SetConfig+0x1f0>
 8006456:	2b40      	cmp	r3, #64	; 0x40
 8006458:	d008      	beq.n	800646c <UART_SetConfig+0x200>
 800645a:	e00f      	b.n	800647c <UART_SetConfig+0x210>
 800645c:	2300      	movs	r3, #0
 800645e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006462:	e082      	b.n	800656a <UART_SetConfig+0x2fe>
 8006464:	2302      	movs	r3, #2
 8006466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646a:	e07e      	b.n	800656a <UART_SetConfig+0x2fe>
 800646c:	2304      	movs	r3, #4
 800646e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006472:	e07a      	b.n	800656a <UART_SetConfig+0x2fe>
 8006474:	2308      	movs	r3, #8
 8006476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800647a:	e076      	b.n	800656a <UART_SetConfig+0x2fe>
 800647c:	2310      	movs	r3, #16
 800647e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006482:	e072      	b.n	800656a <UART_SetConfig+0x2fe>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a35      	ldr	r2, [pc, #212]	; (8006560 <UART_SetConfig+0x2f4>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d12a      	bne.n	80064e4 <UART_SetConfig+0x278>
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <UART_SetConfig+0x2e4>)
 8006490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006494:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006498:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800649c:	d01a      	beq.n	80064d4 <UART_SetConfig+0x268>
 800649e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80064a2:	d81b      	bhi.n	80064dc <UART_SetConfig+0x270>
 80064a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064a8:	d00c      	beq.n	80064c4 <UART_SetConfig+0x258>
 80064aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80064ae:	d815      	bhi.n	80064dc <UART_SetConfig+0x270>
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <UART_SetConfig+0x250>
 80064b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064b8:	d008      	beq.n	80064cc <UART_SetConfig+0x260>
 80064ba:	e00f      	b.n	80064dc <UART_SetConfig+0x270>
 80064bc:	2300      	movs	r3, #0
 80064be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c2:	e052      	b.n	800656a <UART_SetConfig+0x2fe>
 80064c4:	2302      	movs	r3, #2
 80064c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ca:	e04e      	b.n	800656a <UART_SetConfig+0x2fe>
 80064cc:	2304      	movs	r3, #4
 80064ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064d2:	e04a      	b.n	800656a <UART_SetConfig+0x2fe>
 80064d4:	2308      	movs	r3, #8
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064da:	e046      	b.n	800656a <UART_SetConfig+0x2fe>
 80064dc:	2310      	movs	r3, #16
 80064de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064e2:	e042      	b.n	800656a <UART_SetConfig+0x2fe>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a17      	ldr	r2, [pc, #92]	; (8006548 <UART_SetConfig+0x2dc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d13a      	bne.n	8006564 <UART_SetConfig+0x2f8>
 80064ee:	4b18      	ldr	r3, [pc, #96]	; (8006550 <UART_SetConfig+0x2e4>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064fc:	d01a      	beq.n	8006534 <UART_SetConfig+0x2c8>
 80064fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006502:	d81b      	bhi.n	800653c <UART_SetConfig+0x2d0>
 8006504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006508:	d00c      	beq.n	8006524 <UART_SetConfig+0x2b8>
 800650a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800650e:	d815      	bhi.n	800653c <UART_SetConfig+0x2d0>
 8006510:	2b00      	cmp	r3, #0
 8006512:	d003      	beq.n	800651c <UART_SetConfig+0x2b0>
 8006514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006518:	d008      	beq.n	800652c <UART_SetConfig+0x2c0>
 800651a:	e00f      	b.n	800653c <UART_SetConfig+0x2d0>
 800651c:	2300      	movs	r3, #0
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e022      	b.n	800656a <UART_SetConfig+0x2fe>
 8006524:	2302      	movs	r3, #2
 8006526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800652a:	e01e      	b.n	800656a <UART_SetConfig+0x2fe>
 800652c:	2304      	movs	r3, #4
 800652e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006532:	e01a      	b.n	800656a <UART_SetConfig+0x2fe>
 8006534:	2308      	movs	r3, #8
 8006536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800653a:	e016      	b.n	800656a <UART_SetConfig+0x2fe>
 800653c:	2310      	movs	r3, #16
 800653e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006542:	e012      	b.n	800656a <UART_SetConfig+0x2fe>
 8006544:	cfff69f3 	.word	0xcfff69f3
 8006548:	40008000 	.word	0x40008000
 800654c:	40013800 	.word	0x40013800
 8006550:	40021000 	.word	0x40021000
 8006554:	40004400 	.word	0x40004400
 8006558:	40004800 	.word	0x40004800
 800655c:	40004c00 	.word	0x40004c00
 8006560:	40005000 	.word	0x40005000
 8006564:	2310      	movs	r3, #16
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4aae      	ldr	r2, [pc, #696]	; (8006828 <UART_SetConfig+0x5bc>)
 8006570:	4293      	cmp	r3, r2
 8006572:	f040 8097 	bne.w	80066a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006576:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800657a:	2b08      	cmp	r3, #8
 800657c:	d823      	bhi.n	80065c6 <UART_SetConfig+0x35a>
 800657e:	a201      	add	r2, pc, #4	; (adr r2, 8006584 <UART_SetConfig+0x318>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	080065a9 	.word	0x080065a9
 8006588:	080065c7 	.word	0x080065c7
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065c7 	.word	0x080065c7
 8006594:	080065b7 	.word	0x080065b7
 8006598:	080065c7 	.word	0x080065c7
 800659c:	080065c7 	.word	0x080065c7
 80065a0:	080065c7 	.word	0x080065c7
 80065a4:	080065bf 	.word	0x080065bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7fe ff58 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 80065ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ae:	e010      	b.n	80065d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065b0:	4b9e      	ldr	r3, [pc, #632]	; (800682c <UART_SetConfig+0x5c0>)
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b4:	e00d      	b.n	80065d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b6:	f7fe feb9 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80065ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065bc:	e009      	b.n	80065d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065c4:	e005      	b.n	80065d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8130 	beq.w	800683a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	4a94      	ldr	r2, [pc, #592]	; (8006830 <UART_SetConfig+0x5c4>)
 80065e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	4613      	mov	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	4413      	add	r3, r2
 80065f8:	69ba      	ldr	r2, [r7, #24]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d305      	bcc.n	800660a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	429a      	cmp	r2, r3
 8006608:	d903      	bls.n	8006612 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006610:	e113      	b.n	800683a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006614:	2200      	movs	r2, #0
 8006616:	60bb      	str	r3, [r7, #8]
 8006618:	60fa      	str	r2, [r7, #12]
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661e:	4a84      	ldr	r2, [pc, #528]	; (8006830 <UART_SetConfig+0x5c4>)
 8006620:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006624:	b29b      	uxth	r3, r3
 8006626:	2200      	movs	r2, #0
 8006628:	603b      	str	r3, [r7, #0]
 800662a:	607a      	str	r2, [r7, #4]
 800662c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006630:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006634:	f7fa fad0 	bl	8000bd8 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4610      	mov	r0, r2
 800663e:	4619      	mov	r1, r3
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	020b      	lsls	r3, r1, #8
 800664a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800664e:	0202      	lsls	r2, r0, #8
 8006650:	6979      	ldr	r1, [r7, #20]
 8006652:	6849      	ldr	r1, [r1, #4]
 8006654:	0849      	lsrs	r1, r1, #1
 8006656:	2000      	movs	r0, #0
 8006658:	460c      	mov	r4, r1
 800665a:	4605      	mov	r5, r0
 800665c:	eb12 0804 	adds.w	r8, r2, r4
 8006660:	eb43 0905 	adc.w	r9, r3, r5
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	469a      	mov	sl, r3
 800666c:	4693      	mov	fp, r2
 800666e:	4652      	mov	r2, sl
 8006670:	465b      	mov	r3, fp
 8006672:	4640      	mov	r0, r8
 8006674:	4649      	mov	r1, r9
 8006676:	f7fa faaf 	bl	8000bd8 <__aeabi_uldivmod>
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	4613      	mov	r3, r2
 8006680:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006688:	d308      	bcc.n	800669c <UART_SetConfig+0x430>
 800668a:	6a3b      	ldr	r3, [r7, #32]
 800668c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006690:	d204      	bcs.n	800669c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	6a3a      	ldr	r2, [r7, #32]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	e0ce      	b.n	800683a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066a2:	e0ca      	b.n	800683a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	69db      	ldr	r3, [r3, #28]
 80066a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066ac:	d166      	bne.n	800677c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80066ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066b2:	2b08      	cmp	r3, #8
 80066b4:	d827      	bhi.n	8006706 <UART_SetConfig+0x49a>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <UART_SetConfig+0x450>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066e1 	.word	0x080066e1
 80066c0:	080066e9 	.word	0x080066e9
 80066c4:	080066f1 	.word	0x080066f1
 80066c8:	08006707 	.word	0x08006707
 80066cc:	080066f7 	.word	0x080066f7
 80066d0:	08006707 	.word	0x08006707
 80066d4:	08006707 	.word	0x08006707
 80066d8:	08006707 	.word	0x08006707
 80066dc:	080066ff 	.word	0x080066ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e0:	f7fe febc 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 80066e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066e6:	e014      	b.n	8006712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066e8:	f7fe fece 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 80066ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066ee:	e010      	b.n	8006712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066f0:	4b4e      	ldr	r3, [pc, #312]	; (800682c <UART_SetConfig+0x5c0>)
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80066f4:	e00d      	b.n	8006712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066f6:	f7fe fe19 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80066fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80066fc:	e009      	b.n	8006712 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006704:	e005      	b.n	8006712 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006710:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8090 	beq.w	800683a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	4a44      	ldr	r2, [pc, #272]	; (8006830 <UART_SetConfig+0x5c4>)
 8006720:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006724:	461a      	mov	r2, r3
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	fbb3 f3f2 	udiv	r3, r3, r2
 800672c:	005a      	lsls	r2, r3, #1
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	085b      	lsrs	r3, r3, #1
 8006734:	441a      	add	r2, r3
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	fbb2 f3f3 	udiv	r3, r2, r3
 800673e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006740:	6a3b      	ldr	r3, [r7, #32]
 8006742:	2b0f      	cmp	r3, #15
 8006744:	d916      	bls.n	8006774 <UART_SetConfig+0x508>
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800674c:	d212      	bcs.n	8006774 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800674e:	6a3b      	ldr	r3, [r7, #32]
 8006750:	b29b      	uxth	r3, r3
 8006752:	f023 030f 	bic.w	r3, r3, #15
 8006756:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	b29b      	uxth	r3, r3
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	b29a      	uxth	r2, r3
 8006764:	8bfb      	ldrh	r3, [r7, #30]
 8006766:	4313      	orrs	r3, r2
 8006768:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	8bfa      	ldrh	r2, [r7, #30]
 8006770:	60da      	str	r2, [r3, #12]
 8006772:	e062      	b.n	800683a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800677a:	e05e      	b.n	800683a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800677c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006780:	2b08      	cmp	r3, #8
 8006782:	d828      	bhi.n	80067d6 <UART_SetConfig+0x56a>
 8006784:	a201      	add	r2, pc, #4	; (adr r2, 800678c <UART_SetConfig+0x520>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067b1 	.word	0x080067b1
 8006790:	080067b9 	.word	0x080067b9
 8006794:	080067c1 	.word	0x080067c1
 8006798:	080067d7 	.word	0x080067d7
 800679c:	080067c7 	.word	0x080067c7
 80067a0:	080067d7 	.word	0x080067d7
 80067a4:	080067d7 	.word	0x080067d7
 80067a8:	080067d7 	.word	0x080067d7
 80067ac:	080067cf 	.word	0x080067cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b0:	f7fe fe54 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 80067b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067b6:	e014      	b.n	80067e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067b8:	f7fe fe66 	bl	8005488 <HAL_RCC_GetPCLK2Freq>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067be:	e010      	b.n	80067e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c0:	4b1a      	ldr	r3, [pc, #104]	; (800682c <UART_SetConfig+0x5c0>)
 80067c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067c4:	e00d      	b.n	80067e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067c6:	f7fe fdb1 	bl	800532c <HAL_RCC_GetSysClockFreq>
 80067ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067cc:	e009      	b.n	80067e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067d4:	e005      	b.n	80067e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80067d6:	2300      	movs	r3, #0
 80067d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067e0:	bf00      	nop
    }

    if (pclk != 0U)
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d028      	beq.n	800683a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	4a10      	ldr	r2, [pc, #64]	; (8006830 <UART_SetConfig+0x5c4>)
 80067ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	085b      	lsrs	r3, r3, #1
 8006800:	441a      	add	r2, r3
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	fbb2 f3f3 	udiv	r3, r2, r3
 800680a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800680c:	6a3b      	ldr	r3, [r7, #32]
 800680e:	2b0f      	cmp	r3, #15
 8006810:	d910      	bls.n	8006834 <UART_SetConfig+0x5c8>
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006818:	d20c      	bcs.n	8006834 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800681a:	6a3b      	ldr	r3, [r7, #32]
 800681c:	b29a      	uxth	r2, r3
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	60da      	str	r2, [r3, #12]
 8006824:	e009      	b.n	800683a <UART_SetConfig+0x5ce>
 8006826:	bf00      	nop
 8006828:	40008000 	.word	0x40008000
 800682c:	00f42400 	.word	0x00f42400
 8006830:	08009a34 	.word	0x08009a34
      }
      else
      {
        ret = HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2201      	movs	r2, #1
 800683e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2201      	movs	r2, #1
 8006846:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2200      	movs	r2, #0
 800684e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006850:	697b      	ldr	r3, [r7, #20]
 8006852:	2200      	movs	r2, #0
 8006854:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006856:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800685a:	4618      	mov	r0, r3
 800685c:	3730      	adds	r7, #48	; 0x30
 800685e:	46bd      	mov	sp, r7
 8006860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006864 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006870:	f003 0308 	and.w	r3, r3, #8
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00a      	beq.n	800688e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006892:	f003 0301 	and.w	r3, r3, #1
 8006896:	2b00      	cmp	r3, #0
 8006898:	d00a      	beq.n	80068b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	430a      	orrs	r2, r1
 80068ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	f003 0302 	and.w	r3, r3, #2
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d00a      	beq.n	80068d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068d6:	f003 0304 	and.w	r3, r3, #4
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d00a      	beq.n	80068f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	430a      	orrs	r2, r1
 80068f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d00a      	beq.n	8006916 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	430a      	orrs	r2, r1
 8006914:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00a      	beq.n	8006938 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006940:	2b00      	cmp	r3, #0
 8006942:	d01a      	beq.n	800697a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	430a      	orrs	r2, r1
 8006958:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006962:	d10a      	bne.n	800697a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00a      	beq.n	800699c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b098      	sub	sp, #96	; 0x60
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b8:	f7fb fdae 	bl	8002518 <HAL_GetTick>
 80069bc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f003 0308 	and.w	r3, r3, #8
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	d12f      	bne.n	8006a2c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d4:	2200      	movs	r2, #0
 80069d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f88e 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d022      	beq.n	8006a2c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069fa:	653b      	str	r3, [r7, #80]	; 0x50
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a04:	647b      	str	r3, [r7, #68]	; 0x44
 8006a06:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a28:	2303      	movs	r3, #3
 8006a2a:	e063      	b.n	8006af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0304 	and.w	r3, r3, #4
 8006a36:	2b04      	cmp	r3, #4
 8006a38:	d149      	bne.n	8006ace <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a3a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a42:	2200      	movs	r2, #0
 8006a44:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f857 	bl	8006afc <UART_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d03c      	beq.n	8006ace <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	623b      	str	r3, [r7, #32]
   return(result);
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
 8006a74:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e6      	bne.n	8006a54 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3308      	adds	r3, #8
 8006a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3308      	adds	r3, #8
 8006aa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aa6:	61fa      	str	r2, [r7, #28]
 8006aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	69b9      	ldr	r1, [r7, #24]
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aca:	2303      	movs	r3, #3
 8006acc:	e012      	b.n	8006af4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3758      	adds	r7, #88	; 0x58
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	4613      	mov	r3, r2
 8006b0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0c:	e049      	b.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b14:	d045      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b16:	f7fb fcff 	bl	8002518 <HAL_GetTick>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d302      	bcc.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x30>
 8006b26:	69bb      	ldr	r3, [r7, #24]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d101      	bne.n	8006b30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e048      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0304 	and.w	r3, r3, #4
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d031      	beq.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	69db      	ldr	r3, [r3, #28]
 8006b44:	f003 0308 	and.w	r3, r3, #8
 8006b48:	2b08      	cmp	r3, #8
 8006b4a:	d110      	bne.n	8006b6e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2208      	movs	r2, #8
 8006b52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f838 	bl	8006bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2208      	movs	r2, #8
 8006b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e029      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	69db      	ldr	r3, [r3, #28]
 8006b74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b7c:	d111      	bne.n	8006ba2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b88:	68f8      	ldr	r0, [r7, #12]
 8006b8a:	f000 f81e 	bl	8006bca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e00f      	b.n	8006bc2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4013      	ands	r3, r2
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	bf0c      	ite	eq
 8006bb2:	2301      	moveq	r3, #1
 8006bb4:	2300      	movne	r3, #0
 8006bb6:	b2db      	uxtb	r3, r3
 8006bb8:	461a      	mov	r2, r3
 8006bba:	79fb      	ldrb	r3, [r7, #7]
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d0a6      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006bc0:	2300      	movs	r3, #0
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3710      	adds	r7, #16
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}

08006bca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b095      	sub	sp, #84	; 0x54
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bda:	e853 3f00 	ldrex	r3, [r3]
 8006bde:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006be6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	461a      	mov	r2, r3
 8006bee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf0:	643b      	str	r3, [r7, #64]	; 0x40
 8006bf2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bf6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bf8:	e841 2300 	strex	r3, r2, [r1]
 8006bfc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d1e6      	bne.n	8006bd2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	3308      	adds	r3, #8
 8006c0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c14:	69fb      	ldr	r3, [r7, #28]
 8006c16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
 8006c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3308      	adds	r3, #8
 8006c26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e3      	bne.n	8006c04 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d118      	bne.n	8006c76 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	e853 3f00 	ldrex	r3, [r3]
 8006c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	f023 0310 	bic.w	r3, r3, #16
 8006c58:	647b      	str	r3, [r7, #68]	; 0x44
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c62:	61bb      	str	r3, [r7, #24]
 8006c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c66:	6979      	ldr	r1, [r7, #20]
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	e841 2300 	strex	r3, r2, [r1]
 8006c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1e6      	bne.n	8006c44 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006c8a:	bf00      	nop
 8006c8c:	3754      	adds	r7, #84	; 0x54
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b085      	sub	sp, #20
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006ca4:	2b01      	cmp	r3, #1
 8006ca6:	d101      	bne.n	8006cac <HAL_UARTEx_DisableFifoMode+0x16>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e027      	b.n	8006cfc <HAL_UARTEx_DisableFifoMode+0x66>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2201      	movs	r2, #1
 8006cb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2224      	movs	r2, #36	; 0x24
 8006cb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0201 	bic.w	r2, r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006cda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr

08006d08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d101      	bne.n	8006d20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	e02d      	b.n	8006d7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2224      	movs	r2, #36	; 0x24
 8006d2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0201 	bic.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	430a      	orrs	r2, r1
 8006d5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 f84f 	bl	8006e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	68fa      	ldr	r2, [r7, #12]
 8006d68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2220      	movs	r2, #32
 8006d6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d101      	bne.n	8006d9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	e02d      	b.n	8006df8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2224      	movs	r2, #36	; 0x24
 8006da8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 0201 	bic.w	r2, r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	683a      	ldr	r2, [r7, #0]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 f811 	bl	8006e00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d108      	bne.n	8006e22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e20:	e031      	b.n	8006e86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e22:	2308      	movs	r3, #8
 8006e24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e26:	2308      	movs	r3, #8
 8006e28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689b      	ldr	r3, [r3, #8]
 8006e30:	0e5b      	lsrs	r3, r3, #25
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	f003 0307 	and.w	r3, r3, #7
 8006e38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	0f5b      	lsrs	r3, r3, #29
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	f003 0307 	and.w	r3, r3, #7
 8006e48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e4a:	7bbb      	ldrb	r3, [r7, #14]
 8006e4c:	7b3a      	ldrb	r2, [r7, #12]
 8006e4e:	4911      	ldr	r1, [pc, #68]	; (8006e94 <UARTEx_SetNbDataToProcess+0x94>)
 8006e50:	5c8a      	ldrb	r2, [r1, r2]
 8006e52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e56:	7b3a      	ldrb	r2, [r7, #12]
 8006e58:	490f      	ldr	r1, [pc, #60]	; (8006e98 <UARTEx_SetNbDataToProcess+0x98>)
 8006e5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	7b7a      	ldrb	r2, [r7, #13]
 8006e6c:	4909      	ldr	r1, [pc, #36]	; (8006e94 <UARTEx_SetNbDataToProcess+0x94>)
 8006e6e:	5c8a      	ldrb	r2, [r1, r2]
 8006e70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e74:	7b7a      	ldrb	r2, [r7, #13]
 8006e76:	4908      	ldr	r1, [pc, #32]	; (8006e98 <UARTEx_SetNbDataToProcess+0x98>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e7a:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e86:	bf00      	nop
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
 8006e92:	bf00      	nop
 8006e94:	08009a4c 	.word	0x08009a4c
 8006e98:	08009a54 	.word	0x08009a54

08006e9c <__cvt>:
 8006e9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ea0:	ec55 4b10 	vmov	r4, r5, d0
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	460e      	mov	r6, r1
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	462b      	mov	r3, r5
 8006eac:	bfbb      	ittet	lt
 8006eae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006eb2:	461d      	movlt	r5, r3
 8006eb4:	2300      	movge	r3, #0
 8006eb6:	232d      	movlt	r3, #45	; 0x2d
 8006eb8:	700b      	strb	r3, [r1, #0]
 8006eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ebc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006ec0:	4691      	mov	r9, r2
 8006ec2:	f023 0820 	bic.w	r8, r3, #32
 8006ec6:	bfbc      	itt	lt
 8006ec8:	4622      	movlt	r2, r4
 8006eca:	4614      	movlt	r4, r2
 8006ecc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006ed0:	d005      	beq.n	8006ede <__cvt+0x42>
 8006ed2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006ed6:	d100      	bne.n	8006eda <__cvt+0x3e>
 8006ed8:	3601      	adds	r6, #1
 8006eda:	2102      	movs	r1, #2
 8006edc:	e000      	b.n	8006ee0 <__cvt+0x44>
 8006ede:	2103      	movs	r1, #3
 8006ee0:	ab03      	add	r3, sp, #12
 8006ee2:	9301      	str	r3, [sp, #4]
 8006ee4:	ab02      	add	r3, sp, #8
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	ec45 4b10 	vmov	d0, r4, r5
 8006eec:	4653      	mov	r3, sl
 8006eee:	4632      	mov	r2, r6
 8006ef0:	f000 fdce 	bl	8007a90 <_dtoa_r>
 8006ef4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006ef8:	4607      	mov	r7, r0
 8006efa:	d102      	bne.n	8006f02 <__cvt+0x66>
 8006efc:	f019 0f01 	tst.w	r9, #1
 8006f00:	d022      	beq.n	8006f48 <__cvt+0xac>
 8006f02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f06:	eb07 0906 	add.w	r9, r7, r6
 8006f0a:	d110      	bne.n	8006f2e <__cvt+0x92>
 8006f0c:	783b      	ldrb	r3, [r7, #0]
 8006f0e:	2b30      	cmp	r3, #48	; 0x30
 8006f10:	d10a      	bne.n	8006f28 <__cvt+0x8c>
 8006f12:	2200      	movs	r2, #0
 8006f14:	2300      	movs	r3, #0
 8006f16:	4620      	mov	r0, r4
 8006f18:	4629      	mov	r1, r5
 8006f1a:	f7f9 fded 	bl	8000af8 <__aeabi_dcmpeq>
 8006f1e:	b918      	cbnz	r0, 8006f28 <__cvt+0x8c>
 8006f20:	f1c6 0601 	rsb	r6, r6, #1
 8006f24:	f8ca 6000 	str.w	r6, [sl]
 8006f28:	f8da 3000 	ldr.w	r3, [sl]
 8006f2c:	4499      	add	r9, r3
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2300      	movs	r3, #0
 8006f32:	4620      	mov	r0, r4
 8006f34:	4629      	mov	r1, r5
 8006f36:	f7f9 fddf 	bl	8000af8 <__aeabi_dcmpeq>
 8006f3a:	b108      	cbz	r0, 8006f40 <__cvt+0xa4>
 8006f3c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006f40:	2230      	movs	r2, #48	; 0x30
 8006f42:	9b03      	ldr	r3, [sp, #12]
 8006f44:	454b      	cmp	r3, r9
 8006f46:	d307      	bcc.n	8006f58 <__cvt+0xbc>
 8006f48:	9b03      	ldr	r3, [sp, #12]
 8006f4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006f4c:	1bdb      	subs	r3, r3, r7
 8006f4e:	4638      	mov	r0, r7
 8006f50:	6013      	str	r3, [r2, #0]
 8006f52:	b004      	add	sp, #16
 8006f54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f58:	1c59      	adds	r1, r3, #1
 8006f5a:	9103      	str	r1, [sp, #12]
 8006f5c:	701a      	strb	r2, [r3, #0]
 8006f5e:	e7f0      	b.n	8006f42 <__cvt+0xa6>

08006f60 <__exponent>:
 8006f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f62:	4603      	mov	r3, r0
 8006f64:	2900      	cmp	r1, #0
 8006f66:	bfb8      	it	lt
 8006f68:	4249      	neglt	r1, r1
 8006f6a:	f803 2b02 	strb.w	r2, [r3], #2
 8006f6e:	bfb4      	ite	lt
 8006f70:	222d      	movlt	r2, #45	; 0x2d
 8006f72:	222b      	movge	r2, #43	; 0x2b
 8006f74:	2909      	cmp	r1, #9
 8006f76:	7042      	strb	r2, [r0, #1]
 8006f78:	dd2a      	ble.n	8006fd0 <__exponent+0x70>
 8006f7a:	f10d 0207 	add.w	r2, sp, #7
 8006f7e:	4617      	mov	r7, r2
 8006f80:	260a      	movs	r6, #10
 8006f82:	4694      	mov	ip, r2
 8006f84:	fb91 f5f6 	sdiv	r5, r1, r6
 8006f88:	fb06 1415 	mls	r4, r6, r5, r1
 8006f8c:	3430      	adds	r4, #48	; 0x30
 8006f8e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f92:	460c      	mov	r4, r1
 8006f94:	2c63      	cmp	r4, #99	; 0x63
 8006f96:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	dcf1      	bgt.n	8006f82 <__exponent+0x22>
 8006f9e:	3130      	adds	r1, #48	; 0x30
 8006fa0:	f1ac 0402 	sub.w	r4, ip, #2
 8006fa4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006fa8:	1c41      	adds	r1, r0, #1
 8006faa:	4622      	mov	r2, r4
 8006fac:	42ba      	cmp	r2, r7
 8006fae:	d30a      	bcc.n	8006fc6 <__exponent+0x66>
 8006fb0:	f10d 0209 	add.w	r2, sp, #9
 8006fb4:	eba2 020c 	sub.w	r2, r2, ip
 8006fb8:	42bc      	cmp	r4, r7
 8006fba:	bf88      	it	hi
 8006fbc:	2200      	movhi	r2, #0
 8006fbe:	4413      	add	r3, r2
 8006fc0:	1a18      	subs	r0, r3, r0
 8006fc2:	b003      	add	sp, #12
 8006fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fc6:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006fca:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006fce:	e7ed      	b.n	8006fac <__exponent+0x4c>
 8006fd0:	2330      	movs	r3, #48	; 0x30
 8006fd2:	3130      	adds	r1, #48	; 0x30
 8006fd4:	7083      	strb	r3, [r0, #2]
 8006fd6:	70c1      	strb	r1, [r0, #3]
 8006fd8:	1d03      	adds	r3, r0, #4
 8006fda:	e7f1      	b.n	8006fc0 <__exponent+0x60>

08006fdc <_printf_float>:
 8006fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe0:	ed2d 8b02 	vpush	{d8}
 8006fe4:	b08d      	sub	sp, #52	; 0x34
 8006fe6:	460c      	mov	r4, r1
 8006fe8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006fec:	4616      	mov	r6, r2
 8006fee:	461f      	mov	r7, r3
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	f000 fc83 	bl	80078fc <_localeconv_r>
 8006ff6:	f8d0 a000 	ldr.w	sl, [r0]
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	f7f9 f950 	bl	80002a0 <strlen>
 8007000:	2300      	movs	r3, #0
 8007002:	930a      	str	r3, [sp, #40]	; 0x28
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	9305      	str	r3, [sp, #20]
 8007008:	f8d8 3000 	ldr.w	r3, [r8]
 800700c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007010:	3307      	adds	r3, #7
 8007012:	f023 0307 	bic.w	r3, r3, #7
 8007016:	f103 0208 	add.w	r2, r3, #8
 800701a:	f8c8 2000 	str.w	r2, [r8]
 800701e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007022:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007026:	9307      	str	r3, [sp, #28]
 8007028:	f8cd 8018 	str.w	r8, [sp, #24]
 800702c:	ee08 0a10 	vmov	s16, r0
 8007030:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007038:	4b9e      	ldr	r3, [pc, #632]	; (80072b4 <_printf_float+0x2d8>)
 800703a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800703e:	f7f9 fd8d 	bl	8000b5c <__aeabi_dcmpun>
 8007042:	bb88      	cbnz	r0, 80070a8 <_printf_float+0xcc>
 8007044:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007048:	4b9a      	ldr	r3, [pc, #616]	; (80072b4 <_printf_float+0x2d8>)
 800704a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800704e:	f7f9 fd67 	bl	8000b20 <__aeabi_dcmple>
 8007052:	bb48      	cbnz	r0, 80070a8 <_printf_float+0xcc>
 8007054:	2200      	movs	r2, #0
 8007056:	2300      	movs	r3, #0
 8007058:	4640      	mov	r0, r8
 800705a:	4649      	mov	r1, r9
 800705c:	f7f9 fd56 	bl	8000b0c <__aeabi_dcmplt>
 8007060:	b110      	cbz	r0, 8007068 <_printf_float+0x8c>
 8007062:	232d      	movs	r3, #45	; 0x2d
 8007064:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007068:	4a93      	ldr	r2, [pc, #588]	; (80072b8 <_printf_float+0x2dc>)
 800706a:	4b94      	ldr	r3, [pc, #592]	; (80072bc <_printf_float+0x2e0>)
 800706c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007070:	bf94      	ite	ls
 8007072:	4690      	movls	r8, r2
 8007074:	4698      	movhi	r8, r3
 8007076:	2303      	movs	r3, #3
 8007078:	6123      	str	r3, [r4, #16]
 800707a:	9b05      	ldr	r3, [sp, #20]
 800707c:	f023 0304 	bic.w	r3, r3, #4
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	f04f 0900 	mov.w	r9, #0
 8007086:	9700      	str	r7, [sp, #0]
 8007088:	4633      	mov	r3, r6
 800708a:	aa0b      	add	r2, sp, #44	; 0x2c
 800708c:	4621      	mov	r1, r4
 800708e:	4628      	mov	r0, r5
 8007090:	f000 f9da 	bl	8007448 <_printf_common>
 8007094:	3001      	adds	r0, #1
 8007096:	f040 8090 	bne.w	80071ba <_printf_float+0x1de>
 800709a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800709e:	b00d      	add	sp, #52	; 0x34
 80070a0:	ecbd 8b02 	vpop	{d8}
 80070a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a8:	4642      	mov	r2, r8
 80070aa:	464b      	mov	r3, r9
 80070ac:	4640      	mov	r0, r8
 80070ae:	4649      	mov	r1, r9
 80070b0:	f7f9 fd54 	bl	8000b5c <__aeabi_dcmpun>
 80070b4:	b140      	cbz	r0, 80070c8 <_printf_float+0xec>
 80070b6:	464b      	mov	r3, r9
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	bfbc      	itt	lt
 80070bc:	232d      	movlt	r3, #45	; 0x2d
 80070be:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80070c2:	4a7f      	ldr	r2, [pc, #508]	; (80072c0 <_printf_float+0x2e4>)
 80070c4:	4b7f      	ldr	r3, [pc, #508]	; (80072c4 <_printf_float+0x2e8>)
 80070c6:	e7d1      	b.n	800706c <_printf_float+0x90>
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80070ce:	9206      	str	r2, [sp, #24]
 80070d0:	1c5a      	adds	r2, r3, #1
 80070d2:	d13f      	bne.n	8007154 <_printf_float+0x178>
 80070d4:	2306      	movs	r3, #6
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	9b05      	ldr	r3, [sp, #20]
 80070da:	6861      	ldr	r1, [r4, #4]
 80070dc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80070e0:	2300      	movs	r3, #0
 80070e2:	9303      	str	r3, [sp, #12]
 80070e4:	ab0a      	add	r3, sp, #40	; 0x28
 80070e6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80070ea:	ab09      	add	r3, sp, #36	; 0x24
 80070ec:	ec49 8b10 	vmov	d0, r8, r9
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	6022      	str	r2, [r4, #0]
 80070f4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80070f8:	4628      	mov	r0, r5
 80070fa:	f7ff fecf 	bl	8006e9c <__cvt>
 80070fe:	9b06      	ldr	r3, [sp, #24]
 8007100:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007102:	2b47      	cmp	r3, #71	; 0x47
 8007104:	4680      	mov	r8, r0
 8007106:	d108      	bne.n	800711a <_printf_float+0x13e>
 8007108:	1cc8      	adds	r0, r1, #3
 800710a:	db02      	blt.n	8007112 <_printf_float+0x136>
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	4299      	cmp	r1, r3
 8007110:	dd41      	ble.n	8007196 <_printf_float+0x1ba>
 8007112:	f1ab 0302 	sub.w	r3, fp, #2
 8007116:	fa5f fb83 	uxtb.w	fp, r3
 800711a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800711e:	d820      	bhi.n	8007162 <_printf_float+0x186>
 8007120:	3901      	subs	r1, #1
 8007122:	465a      	mov	r2, fp
 8007124:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007128:	9109      	str	r1, [sp, #36]	; 0x24
 800712a:	f7ff ff19 	bl	8006f60 <__exponent>
 800712e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007130:	1813      	adds	r3, r2, r0
 8007132:	2a01      	cmp	r2, #1
 8007134:	4681      	mov	r9, r0
 8007136:	6123      	str	r3, [r4, #16]
 8007138:	dc02      	bgt.n	8007140 <_printf_float+0x164>
 800713a:	6822      	ldr	r2, [r4, #0]
 800713c:	07d2      	lsls	r2, r2, #31
 800713e:	d501      	bpl.n	8007144 <_printf_float+0x168>
 8007140:	3301      	adds	r3, #1
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007148:	2b00      	cmp	r3, #0
 800714a:	d09c      	beq.n	8007086 <_printf_float+0xaa>
 800714c:	232d      	movs	r3, #45	; 0x2d
 800714e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007152:	e798      	b.n	8007086 <_printf_float+0xaa>
 8007154:	9a06      	ldr	r2, [sp, #24]
 8007156:	2a47      	cmp	r2, #71	; 0x47
 8007158:	d1be      	bne.n	80070d8 <_printf_float+0xfc>
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1bc      	bne.n	80070d8 <_printf_float+0xfc>
 800715e:	2301      	movs	r3, #1
 8007160:	e7b9      	b.n	80070d6 <_printf_float+0xfa>
 8007162:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007166:	d118      	bne.n	800719a <_printf_float+0x1be>
 8007168:	2900      	cmp	r1, #0
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	dd0b      	ble.n	8007186 <_printf_float+0x1aa>
 800716e:	6121      	str	r1, [r4, #16]
 8007170:	b913      	cbnz	r3, 8007178 <_printf_float+0x19c>
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	07d0      	lsls	r0, r2, #31
 8007176:	d502      	bpl.n	800717e <_printf_float+0x1a2>
 8007178:	3301      	adds	r3, #1
 800717a:	440b      	add	r3, r1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	65a1      	str	r1, [r4, #88]	; 0x58
 8007180:	f04f 0900 	mov.w	r9, #0
 8007184:	e7de      	b.n	8007144 <_printf_float+0x168>
 8007186:	b913      	cbnz	r3, 800718e <_printf_float+0x1b2>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	07d2      	lsls	r2, r2, #31
 800718c:	d501      	bpl.n	8007192 <_printf_float+0x1b6>
 800718e:	3302      	adds	r3, #2
 8007190:	e7f4      	b.n	800717c <_printf_float+0x1a0>
 8007192:	2301      	movs	r3, #1
 8007194:	e7f2      	b.n	800717c <_printf_float+0x1a0>
 8007196:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800719a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719c:	4299      	cmp	r1, r3
 800719e:	db05      	blt.n	80071ac <_printf_float+0x1d0>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	6121      	str	r1, [r4, #16]
 80071a4:	07d8      	lsls	r0, r3, #31
 80071a6:	d5ea      	bpl.n	800717e <_printf_float+0x1a2>
 80071a8:	1c4b      	adds	r3, r1, #1
 80071aa:	e7e7      	b.n	800717c <_printf_float+0x1a0>
 80071ac:	2900      	cmp	r1, #0
 80071ae:	bfd4      	ite	le
 80071b0:	f1c1 0202 	rsble	r2, r1, #2
 80071b4:	2201      	movgt	r2, #1
 80071b6:	4413      	add	r3, r2
 80071b8:	e7e0      	b.n	800717c <_printf_float+0x1a0>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	055a      	lsls	r2, r3, #21
 80071be:	d407      	bmi.n	80071d0 <_printf_float+0x1f4>
 80071c0:	6923      	ldr	r3, [r4, #16]
 80071c2:	4642      	mov	r2, r8
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	d12c      	bne.n	8007228 <_printf_float+0x24c>
 80071ce:	e764      	b.n	800709a <_printf_float+0xbe>
 80071d0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071d4:	f240 80e0 	bls.w	8007398 <_printf_float+0x3bc>
 80071d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	f7f9 fc8a 	bl	8000af8 <__aeabi_dcmpeq>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d034      	beq.n	8007252 <_printf_float+0x276>
 80071e8:	4a37      	ldr	r2, [pc, #220]	; (80072c8 <_printf_float+0x2ec>)
 80071ea:	2301      	movs	r3, #1
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f af51 	beq.w	800709a <_printf_float+0xbe>
 80071f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80071fc:	429a      	cmp	r2, r3
 80071fe:	db02      	blt.n	8007206 <_printf_float+0x22a>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07d8      	lsls	r0, r3, #31
 8007204:	d510      	bpl.n	8007228 <_printf_float+0x24c>
 8007206:	ee18 3a10 	vmov	r3, s16
 800720a:	4652      	mov	r2, sl
 800720c:	4631      	mov	r1, r6
 800720e:	4628      	mov	r0, r5
 8007210:	47b8      	blx	r7
 8007212:	3001      	adds	r0, #1
 8007214:	f43f af41 	beq.w	800709a <_printf_float+0xbe>
 8007218:	f04f 0800 	mov.w	r8, #0
 800721c:	f104 091a 	add.w	r9, r4, #26
 8007220:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007222:	3b01      	subs	r3, #1
 8007224:	4543      	cmp	r3, r8
 8007226:	dc09      	bgt.n	800723c <_printf_float+0x260>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	079b      	lsls	r3, r3, #30
 800722c:	f100 8107 	bmi.w	800743e <_printf_float+0x462>
 8007230:	68e0      	ldr	r0, [r4, #12]
 8007232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007234:	4298      	cmp	r0, r3
 8007236:	bfb8      	it	lt
 8007238:	4618      	movlt	r0, r3
 800723a:	e730      	b.n	800709e <_printf_float+0xc2>
 800723c:	2301      	movs	r3, #1
 800723e:	464a      	mov	r2, r9
 8007240:	4631      	mov	r1, r6
 8007242:	4628      	mov	r0, r5
 8007244:	47b8      	blx	r7
 8007246:	3001      	adds	r0, #1
 8007248:	f43f af27 	beq.w	800709a <_printf_float+0xbe>
 800724c:	f108 0801 	add.w	r8, r8, #1
 8007250:	e7e6      	b.n	8007220 <_printf_float+0x244>
 8007252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007254:	2b00      	cmp	r3, #0
 8007256:	dc39      	bgt.n	80072cc <_printf_float+0x2f0>
 8007258:	4a1b      	ldr	r2, [pc, #108]	; (80072c8 <_printf_float+0x2ec>)
 800725a:	2301      	movs	r3, #1
 800725c:	4631      	mov	r1, r6
 800725e:	4628      	mov	r0, r5
 8007260:	47b8      	blx	r7
 8007262:	3001      	adds	r0, #1
 8007264:	f43f af19 	beq.w	800709a <_printf_float+0xbe>
 8007268:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800726c:	4313      	orrs	r3, r2
 800726e:	d102      	bne.n	8007276 <_printf_float+0x29a>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	d5d8      	bpl.n	8007228 <_printf_float+0x24c>
 8007276:	ee18 3a10 	vmov	r3, s16
 800727a:	4652      	mov	r2, sl
 800727c:	4631      	mov	r1, r6
 800727e:	4628      	mov	r0, r5
 8007280:	47b8      	blx	r7
 8007282:	3001      	adds	r0, #1
 8007284:	f43f af09 	beq.w	800709a <_printf_float+0xbe>
 8007288:	f04f 0900 	mov.w	r9, #0
 800728c:	f104 0a1a 	add.w	sl, r4, #26
 8007290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007292:	425b      	negs	r3, r3
 8007294:	454b      	cmp	r3, r9
 8007296:	dc01      	bgt.n	800729c <_printf_float+0x2c0>
 8007298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800729a:	e792      	b.n	80071c2 <_printf_float+0x1e6>
 800729c:	2301      	movs	r3, #1
 800729e:	4652      	mov	r2, sl
 80072a0:	4631      	mov	r1, r6
 80072a2:	4628      	mov	r0, r5
 80072a4:	47b8      	blx	r7
 80072a6:	3001      	adds	r0, #1
 80072a8:	f43f aef7 	beq.w	800709a <_printf_float+0xbe>
 80072ac:	f109 0901 	add.w	r9, r9, #1
 80072b0:	e7ee      	b.n	8007290 <_printf_float+0x2b4>
 80072b2:	bf00      	nop
 80072b4:	7fefffff 	.word	0x7fefffff
 80072b8:	08009a5c 	.word	0x08009a5c
 80072bc:	08009a60 	.word	0x08009a60
 80072c0:	08009a64 	.word	0x08009a64
 80072c4:	08009a68 	.word	0x08009a68
 80072c8:	08009a6c 	.word	0x08009a6c
 80072cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072d0:	429a      	cmp	r2, r3
 80072d2:	bfa8      	it	ge
 80072d4:	461a      	movge	r2, r3
 80072d6:	2a00      	cmp	r2, #0
 80072d8:	4691      	mov	r9, r2
 80072da:	dc37      	bgt.n	800734c <_printf_float+0x370>
 80072dc:	f04f 0b00 	mov.w	fp, #0
 80072e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e4:	f104 021a 	add.w	r2, r4, #26
 80072e8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80072ea:	9305      	str	r3, [sp, #20]
 80072ec:	eba3 0309 	sub.w	r3, r3, r9
 80072f0:	455b      	cmp	r3, fp
 80072f2:	dc33      	bgt.n	800735c <_printf_float+0x380>
 80072f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072f8:	429a      	cmp	r2, r3
 80072fa:	db3b      	blt.n	8007374 <_printf_float+0x398>
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	07da      	lsls	r2, r3, #31
 8007300:	d438      	bmi.n	8007374 <_printf_float+0x398>
 8007302:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007306:	eba2 0903 	sub.w	r9, r2, r3
 800730a:	9b05      	ldr	r3, [sp, #20]
 800730c:	1ad2      	subs	r2, r2, r3
 800730e:	4591      	cmp	r9, r2
 8007310:	bfa8      	it	ge
 8007312:	4691      	movge	r9, r2
 8007314:	f1b9 0f00 	cmp.w	r9, #0
 8007318:	dc35      	bgt.n	8007386 <_printf_float+0x3aa>
 800731a:	f04f 0800 	mov.w	r8, #0
 800731e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007322:	f104 0a1a 	add.w	sl, r4, #26
 8007326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800732a:	1a9b      	subs	r3, r3, r2
 800732c:	eba3 0309 	sub.w	r3, r3, r9
 8007330:	4543      	cmp	r3, r8
 8007332:	f77f af79 	ble.w	8007228 <_printf_float+0x24c>
 8007336:	2301      	movs	r3, #1
 8007338:	4652      	mov	r2, sl
 800733a:	4631      	mov	r1, r6
 800733c:	4628      	mov	r0, r5
 800733e:	47b8      	blx	r7
 8007340:	3001      	adds	r0, #1
 8007342:	f43f aeaa 	beq.w	800709a <_printf_float+0xbe>
 8007346:	f108 0801 	add.w	r8, r8, #1
 800734a:	e7ec      	b.n	8007326 <_printf_float+0x34a>
 800734c:	4613      	mov	r3, r2
 800734e:	4631      	mov	r1, r6
 8007350:	4642      	mov	r2, r8
 8007352:	4628      	mov	r0, r5
 8007354:	47b8      	blx	r7
 8007356:	3001      	adds	r0, #1
 8007358:	d1c0      	bne.n	80072dc <_printf_float+0x300>
 800735a:	e69e      	b.n	800709a <_printf_float+0xbe>
 800735c:	2301      	movs	r3, #1
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	9205      	str	r2, [sp, #20]
 8007364:	47b8      	blx	r7
 8007366:	3001      	adds	r0, #1
 8007368:	f43f ae97 	beq.w	800709a <_printf_float+0xbe>
 800736c:	9a05      	ldr	r2, [sp, #20]
 800736e:	f10b 0b01 	add.w	fp, fp, #1
 8007372:	e7b9      	b.n	80072e8 <_printf_float+0x30c>
 8007374:	ee18 3a10 	vmov	r3, s16
 8007378:	4652      	mov	r2, sl
 800737a:	4631      	mov	r1, r6
 800737c:	4628      	mov	r0, r5
 800737e:	47b8      	blx	r7
 8007380:	3001      	adds	r0, #1
 8007382:	d1be      	bne.n	8007302 <_printf_float+0x326>
 8007384:	e689      	b.n	800709a <_printf_float+0xbe>
 8007386:	9a05      	ldr	r2, [sp, #20]
 8007388:	464b      	mov	r3, r9
 800738a:	4442      	add	r2, r8
 800738c:	4631      	mov	r1, r6
 800738e:	4628      	mov	r0, r5
 8007390:	47b8      	blx	r7
 8007392:	3001      	adds	r0, #1
 8007394:	d1c1      	bne.n	800731a <_printf_float+0x33e>
 8007396:	e680      	b.n	800709a <_printf_float+0xbe>
 8007398:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800739a:	2a01      	cmp	r2, #1
 800739c:	dc01      	bgt.n	80073a2 <_printf_float+0x3c6>
 800739e:	07db      	lsls	r3, r3, #31
 80073a0:	d53a      	bpl.n	8007418 <_printf_float+0x43c>
 80073a2:	2301      	movs	r3, #1
 80073a4:	4642      	mov	r2, r8
 80073a6:	4631      	mov	r1, r6
 80073a8:	4628      	mov	r0, r5
 80073aa:	47b8      	blx	r7
 80073ac:	3001      	adds	r0, #1
 80073ae:	f43f ae74 	beq.w	800709a <_printf_float+0xbe>
 80073b2:	ee18 3a10 	vmov	r3, s16
 80073b6:	4652      	mov	r2, sl
 80073b8:	4631      	mov	r1, r6
 80073ba:	4628      	mov	r0, r5
 80073bc:	47b8      	blx	r7
 80073be:	3001      	adds	r0, #1
 80073c0:	f43f ae6b 	beq.w	800709a <_printf_float+0xbe>
 80073c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80073c8:	2200      	movs	r2, #0
 80073ca:	2300      	movs	r3, #0
 80073cc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80073d0:	f7f9 fb92 	bl	8000af8 <__aeabi_dcmpeq>
 80073d4:	b9d8      	cbnz	r0, 800740e <_printf_float+0x432>
 80073d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80073da:	f108 0201 	add.w	r2, r8, #1
 80073de:	4631      	mov	r1, r6
 80073e0:	4628      	mov	r0, r5
 80073e2:	47b8      	blx	r7
 80073e4:	3001      	adds	r0, #1
 80073e6:	d10e      	bne.n	8007406 <_printf_float+0x42a>
 80073e8:	e657      	b.n	800709a <_printf_float+0xbe>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4652      	mov	r2, sl
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	f43f ae50 	beq.w	800709a <_printf_float+0xbe>
 80073fa:	f108 0801 	add.w	r8, r8, #1
 80073fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007400:	3b01      	subs	r3, #1
 8007402:	4543      	cmp	r3, r8
 8007404:	dcf1      	bgt.n	80073ea <_printf_float+0x40e>
 8007406:	464b      	mov	r3, r9
 8007408:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800740c:	e6da      	b.n	80071c4 <_printf_float+0x1e8>
 800740e:	f04f 0800 	mov.w	r8, #0
 8007412:	f104 0a1a 	add.w	sl, r4, #26
 8007416:	e7f2      	b.n	80073fe <_printf_float+0x422>
 8007418:	2301      	movs	r3, #1
 800741a:	4642      	mov	r2, r8
 800741c:	e7df      	b.n	80073de <_printf_float+0x402>
 800741e:	2301      	movs	r3, #1
 8007420:	464a      	mov	r2, r9
 8007422:	4631      	mov	r1, r6
 8007424:	4628      	mov	r0, r5
 8007426:	47b8      	blx	r7
 8007428:	3001      	adds	r0, #1
 800742a:	f43f ae36 	beq.w	800709a <_printf_float+0xbe>
 800742e:	f108 0801 	add.w	r8, r8, #1
 8007432:	68e3      	ldr	r3, [r4, #12]
 8007434:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007436:	1a5b      	subs	r3, r3, r1
 8007438:	4543      	cmp	r3, r8
 800743a:	dcf0      	bgt.n	800741e <_printf_float+0x442>
 800743c:	e6f8      	b.n	8007230 <_printf_float+0x254>
 800743e:	f04f 0800 	mov.w	r8, #0
 8007442:	f104 0919 	add.w	r9, r4, #25
 8007446:	e7f4      	b.n	8007432 <_printf_float+0x456>

08007448 <_printf_common>:
 8007448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800744c:	4616      	mov	r6, r2
 800744e:	4699      	mov	r9, r3
 8007450:	688a      	ldr	r2, [r1, #8]
 8007452:	690b      	ldr	r3, [r1, #16]
 8007454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007458:	4293      	cmp	r3, r2
 800745a:	bfb8      	it	lt
 800745c:	4613      	movlt	r3, r2
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007464:	4607      	mov	r7, r0
 8007466:	460c      	mov	r4, r1
 8007468:	b10a      	cbz	r2, 800746e <_printf_common+0x26>
 800746a:	3301      	adds	r3, #1
 800746c:	6033      	str	r3, [r6, #0]
 800746e:	6823      	ldr	r3, [r4, #0]
 8007470:	0699      	lsls	r1, r3, #26
 8007472:	bf42      	ittt	mi
 8007474:	6833      	ldrmi	r3, [r6, #0]
 8007476:	3302      	addmi	r3, #2
 8007478:	6033      	strmi	r3, [r6, #0]
 800747a:	6825      	ldr	r5, [r4, #0]
 800747c:	f015 0506 	ands.w	r5, r5, #6
 8007480:	d106      	bne.n	8007490 <_printf_common+0x48>
 8007482:	f104 0a19 	add.w	sl, r4, #25
 8007486:	68e3      	ldr	r3, [r4, #12]
 8007488:	6832      	ldr	r2, [r6, #0]
 800748a:	1a9b      	subs	r3, r3, r2
 800748c:	42ab      	cmp	r3, r5
 800748e:	dc26      	bgt.n	80074de <_printf_common+0x96>
 8007490:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007494:	1e13      	subs	r3, r2, #0
 8007496:	6822      	ldr	r2, [r4, #0]
 8007498:	bf18      	it	ne
 800749a:	2301      	movne	r3, #1
 800749c:	0692      	lsls	r2, r2, #26
 800749e:	d42b      	bmi.n	80074f8 <_printf_common+0xb0>
 80074a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074a4:	4649      	mov	r1, r9
 80074a6:	4638      	mov	r0, r7
 80074a8:	47c0      	blx	r8
 80074aa:	3001      	adds	r0, #1
 80074ac:	d01e      	beq.n	80074ec <_printf_common+0xa4>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	6922      	ldr	r2, [r4, #16]
 80074b2:	f003 0306 	and.w	r3, r3, #6
 80074b6:	2b04      	cmp	r3, #4
 80074b8:	bf02      	ittt	eq
 80074ba:	68e5      	ldreq	r5, [r4, #12]
 80074bc:	6833      	ldreq	r3, [r6, #0]
 80074be:	1aed      	subeq	r5, r5, r3
 80074c0:	68a3      	ldr	r3, [r4, #8]
 80074c2:	bf0c      	ite	eq
 80074c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074c8:	2500      	movne	r5, #0
 80074ca:	4293      	cmp	r3, r2
 80074cc:	bfc4      	itt	gt
 80074ce:	1a9b      	subgt	r3, r3, r2
 80074d0:	18ed      	addgt	r5, r5, r3
 80074d2:	2600      	movs	r6, #0
 80074d4:	341a      	adds	r4, #26
 80074d6:	42b5      	cmp	r5, r6
 80074d8:	d11a      	bne.n	8007510 <_printf_common+0xc8>
 80074da:	2000      	movs	r0, #0
 80074dc:	e008      	b.n	80074f0 <_printf_common+0xa8>
 80074de:	2301      	movs	r3, #1
 80074e0:	4652      	mov	r2, sl
 80074e2:	4649      	mov	r1, r9
 80074e4:	4638      	mov	r0, r7
 80074e6:	47c0      	blx	r8
 80074e8:	3001      	adds	r0, #1
 80074ea:	d103      	bne.n	80074f4 <_printf_common+0xac>
 80074ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074f4:	3501      	adds	r5, #1
 80074f6:	e7c6      	b.n	8007486 <_printf_common+0x3e>
 80074f8:	18e1      	adds	r1, r4, r3
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	2030      	movs	r0, #48	; 0x30
 80074fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007502:	4422      	add	r2, r4
 8007504:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007508:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800750c:	3302      	adds	r3, #2
 800750e:	e7c7      	b.n	80074a0 <_printf_common+0x58>
 8007510:	2301      	movs	r3, #1
 8007512:	4622      	mov	r2, r4
 8007514:	4649      	mov	r1, r9
 8007516:	4638      	mov	r0, r7
 8007518:	47c0      	blx	r8
 800751a:	3001      	adds	r0, #1
 800751c:	d0e6      	beq.n	80074ec <_printf_common+0xa4>
 800751e:	3601      	adds	r6, #1
 8007520:	e7d9      	b.n	80074d6 <_printf_common+0x8e>
	...

08007524 <_printf_i>:
 8007524:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007528:	7e0f      	ldrb	r7, [r1, #24]
 800752a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800752c:	2f78      	cmp	r7, #120	; 0x78
 800752e:	4691      	mov	r9, r2
 8007530:	4680      	mov	r8, r0
 8007532:	460c      	mov	r4, r1
 8007534:	469a      	mov	sl, r3
 8007536:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800753a:	d807      	bhi.n	800754c <_printf_i+0x28>
 800753c:	2f62      	cmp	r7, #98	; 0x62
 800753e:	d80a      	bhi.n	8007556 <_printf_i+0x32>
 8007540:	2f00      	cmp	r7, #0
 8007542:	f000 80d4 	beq.w	80076ee <_printf_i+0x1ca>
 8007546:	2f58      	cmp	r7, #88	; 0x58
 8007548:	f000 80c0 	beq.w	80076cc <_printf_i+0x1a8>
 800754c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007550:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007554:	e03a      	b.n	80075cc <_printf_i+0xa8>
 8007556:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800755a:	2b15      	cmp	r3, #21
 800755c:	d8f6      	bhi.n	800754c <_printf_i+0x28>
 800755e:	a101      	add	r1, pc, #4	; (adr r1, 8007564 <_printf_i+0x40>)
 8007560:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007564:	080075bd 	.word	0x080075bd
 8007568:	080075d1 	.word	0x080075d1
 800756c:	0800754d 	.word	0x0800754d
 8007570:	0800754d 	.word	0x0800754d
 8007574:	0800754d 	.word	0x0800754d
 8007578:	0800754d 	.word	0x0800754d
 800757c:	080075d1 	.word	0x080075d1
 8007580:	0800754d 	.word	0x0800754d
 8007584:	0800754d 	.word	0x0800754d
 8007588:	0800754d 	.word	0x0800754d
 800758c:	0800754d 	.word	0x0800754d
 8007590:	080076d5 	.word	0x080076d5
 8007594:	080075fd 	.word	0x080075fd
 8007598:	0800768f 	.word	0x0800768f
 800759c:	0800754d 	.word	0x0800754d
 80075a0:	0800754d 	.word	0x0800754d
 80075a4:	080076f7 	.word	0x080076f7
 80075a8:	0800754d 	.word	0x0800754d
 80075ac:	080075fd 	.word	0x080075fd
 80075b0:	0800754d 	.word	0x0800754d
 80075b4:	0800754d 	.word	0x0800754d
 80075b8:	08007697 	.word	0x08007697
 80075bc:	682b      	ldr	r3, [r5, #0]
 80075be:	1d1a      	adds	r2, r3, #4
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	602a      	str	r2, [r5, #0]
 80075c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075cc:	2301      	movs	r3, #1
 80075ce:	e09f      	b.n	8007710 <_printf_i+0x1ec>
 80075d0:	6820      	ldr	r0, [r4, #0]
 80075d2:	682b      	ldr	r3, [r5, #0]
 80075d4:	0607      	lsls	r7, r0, #24
 80075d6:	f103 0104 	add.w	r1, r3, #4
 80075da:	6029      	str	r1, [r5, #0]
 80075dc:	d501      	bpl.n	80075e2 <_printf_i+0xbe>
 80075de:	681e      	ldr	r6, [r3, #0]
 80075e0:	e003      	b.n	80075ea <_printf_i+0xc6>
 80075e2:	0646      	lsls	r6, r0, #25
 80075e4:	d5fb      	bpl.n	80075de <_printf_i+0xba>
 80075e6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075ea:	2e00      	cmp	r6, #0
 80075ec:	da03      	bge.n	80075f6 <_printf_i+0xd2>
 80075ee:	232d      	movs	r3, #45	; 0x2d
 80075f0:	4276      	negs	r6, r6
 80075f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f6:	485a      	ldr	r0, [pc, #360]	; (8007760 <_printf_i+0x23c>)
 80075f8:	230a      	movs	r3, #10
 80075fa:	e012      	b.n	8007622 <_printf_i+0xfe>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	6820      	ldr	r0, [r4, #0]
 8007600:	1d19      	adds	r1, r3, #4
 8007602:	6029      	str	r1, [r5, #0]
 8007604:	0605      	lsls	r5, r0, #24
 8007606:	d501      	bpl.n	800760c <_printf_i+0xe8>
 8007608:	681e      	ldr	r6, [r3, #0]
 800760a:	e002      	b.n	8007612 <_printf_i+0xee>
 800760c:	0641      	lsls	r1, r0, #25
 800760e:	d5fb      	bpl.n	8007608 <_printf_i+0xe4>
 8007610:	881e      	ldrh	r6, [r3, #0]
 8007612:	4853      	ldr	r0, [pc, #332]	; (8007760 <_printf_i+0x23c>)
 8007614:	2f6f      	cmp	r7, #111	; 0x6f
 8007616:	bf0c      	ite	eq
 8007618:	2308      	moveq	r3, #8
 800761a:	230a      	movne	r3, #10
 800761c:	2100      	movs	r1, #0
 800761e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007622:	6865      	ldr	r5, [r4, #4]
 8007624:	60a5      	str	r5, [r4, #8]
 8007626:	2d00      	cmp	r5, #0
 8007628:	bfa2      	ittt	ge
 800762a:	6821      	ldrge	r1, [r4, #0]
 800762c:	f021 0104 	bicge.w	r1, r1, #4
 8007630:	6021      	strge	r1, [r4, #0]
 8007632:	b90e      	cbnz	r6, 8007638 <_printf_i+0x114>
 8007634:	2d00      	cmp	r5, #0
 8007636:	d04b      	beq.n	80076d0 <_printf_i+0x1ac>
 8007638:	4615      	mov	r5, r2
 800763a:	fbb6 f1f3 	udiv	r1, r6, r3
 800763e:	fb03 6711 	mls	r7, r3, r1, r6
 8007642:	5dc7      	ldrb	r7, [r0, r7]
 8007644:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007648:	4637      	mov	r7, r6
 800764a:	42bb      	cmp	r3, r7
 800764c:	460e      	mov	r6, r1
 800764e:	d9f4      	bls.n	800763a <_printf_i+0x116>
 8007650:	2b08      	cmp	r3, #8
 8007652:	d10b      	bne.n	800766c <_printf_i+0x148>
 8007654:	6823      	ldr	r3, [r4, #0]
 8007656:	07de      	lsls	r6, r3, #31
 8007658:	d508      	bpl.n	800766c <_printf_i+0x148>
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4299      	cmp	r1, r3
 8007660:	bfde      	ittt	le
 8007662:	2330      	movle	r3, #48	; 0x30
 8007664:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007668:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800766c:	1b52      	subs	r2, r2, r5
 800766e:	6122      	str	r2, [r4, #16]
 8007670:	f8cd a000 	str.w	sl, [sp]
 8007674:	464b      	mov	r3, r9
 8007676:	aa03      	add	r2, sp, #12
 8007678:	4621      	mov	r1, r4
 800767a:	4640      	mov	r0, r8
 800767c:	f7ff fee4 	bl	8007448 <_printf_common>
 8007680:	3001      	adds	r0, #1
 8007682:	d14a      	bne.n	800771a <_printf_i+0x1f6>
 8007684:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007688:	b004      	add	sp, #16
 800768a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	f043 0320 	orr.w	r3, r3, #32
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	4833      	ldr	r0, [pc, #204]	; (8007764 <_printf_i+0x240>)
 8007698:	2778      	movs	r7, #120	; 0x78
 800769a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800769e:	6823      	ldr	r3, [r4, #0]
 80076a0:	6829      	ldr	r1, [r5, #0]
 80076a2:	061f      	lsls	r7, r3, #24
 80076a4:	f851 6b04 	ldr.w	r6, [r1], #4
 80076a8:	d402      	bmi.n	80076b0 <_printf_i+0x18c>
 80076aa:	065f      	lsls	r7, r3, #25
 80076ac:	bf48      	it	mi
 80076ae:	b2b6      	uxthmi	r6, r6
 80076b0:	07df      	lsls	r7, r3, #31
 80076b2:	bf48      	it	mi
 80076b4:	f043 0320 	orrmi.w	r3, r3, #32
 80076b8:	6029      	str	r1, [r5, #0]
 80076ba:	bf48      	it	mi
 80076bc:	6023      	strmi	r3, [r4, #0]
 80076be:	b91e      	cbnz	r6, 80076c8 <_printf_i+0x1a4>
 80076c0:	6823      	ldr	r3, [r4, #0]
 80076c2:	f023 0320 	bic.w	r3, r3, #32
 80076c6:	6023      	str	r3, [r4, #0]
 80076c8:	2310      	movs	r3, #16
 80076ca:	e7a7      	b.n	800761c <_printf_i+0xf8>
 80076cc:	4824      	ldr	r0, [pc, #144]	; (8007760 <_printf_i+0x23c>)
 80076ce:	e7e4      	b.n	800769a <_printf_i+0x176>
 80076d0:	4615      	mov	r5, r2
 80076d2:	e7bd      	b.n	8007650 <_printf_i+0x12c>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	6826      	ldr	r6, [r4, #0]
 80076d8:	6961      	ldr	r1, [r4, #20]
 80076da:	1d18      	adds	r0, r3, #4
 80076dc:	6028      	str	r0, [r5, #0]
 80076de:	0635      	lsls	r5, r6, #24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	d501      	bpl.n	80076e8 <_printf_i+0x1c4>
 80076e4:	6019      	str	r1, [r3, #0]
 80076e6:	e002      	b.n	80076ee <_printf_i+0x1ca>
 80076e8:	0670      	lsls	r0, r6, #25
 80076ea:	d5fb      	bpl.n	80076e4 <_printf_i+0x1c0>
 80076ec:	8019      	strh	r1, [r3, #0]
 80076ee:	2300      	movs	r3, #0
 80076f0:	6123      	str	r3, [r4, #16]
 80076f2:	4615      	mov	r5, r2
 80076f4:	e7bc      	b.n	8007670 <_printf_i+0x14c>
 80076f6:	682b      	ldr	r3, [r5, #0]
 80076f8:	1d1a      	adds	r2, r3, #4
 80076fa:	602a      	str	r2, [r5, #0]
 80076fc:	681d      	ldr	r5, [r3, #0]
 80076fe:	6862      	ldr	r2, [r4, #4]
 8007700:	2100      	movs	r1, #0
 8007702:	4628      	mov	r0, r5
 8007704:	f7f8 fd7c 	bl	8000200 <memchr>
 8007708:	b108      	cbz	r0, 800770e <_printf_i+0x1ea>
 800770a:	1b40      	subs	r0, r0, r5
 800770c:	6060      	str	r0, [r4, #4]
 800770e:	6863      	ldr	r3, [r4, #4]
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	2300      	movs	r3, #0
 8007714:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007718:	e7aa      	b.n	8007670 <_printf_i+0x14c>
 800771a:	6923      	ldr	r3, [r4, #16]
 800771c:	462a      	mov	r2, r5
 800771e:	4649      	mov	r1, r9
 8007720:	4640      	mov	r0, r8
 8007722:	47d0      	blx	sl
 8007724:	3001      	adds	r0, #1
 8007726:	d0ad      	beq.n	8007684 <_printf_i+0x160>
 8007728:	6823      	ldr	r3, [r4, #0]
 800772a:	079b      	lsls	r3, r3, #30
 800772c:	d413      	bmi.n	8007756 <_printf_i+0x232>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	4298      	cmp	r0, r3
 8007734:	bfb8      	it	lt
 8007736:	4618      	movlt	r0, r3
 8007738:	e7a6      	b.n	8007688 <_printf_i+0x164>
 800773a:	2301      	movs	r3, #1
 800773c:	4632      	mov	r2, r6
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d09d      	beq.n	8007684 <_printf_i+0x160>
 8007748:	3501      	adds	r5, #1
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	9903      	ldr	r1, [sp, #12]
 800774e:	1a5b      	subs	r3, r3, r1
 8007750:	42ab      	cmp	r3, r5
 8007752:	dcf2      	bgt.n	800773a <_printf_i+0x216>
 8007754:	e7eb      	b.n	800772e <_printf_i+0x20a>
 8007756:	2500      	movs	r5, #0
 8007758:	f104 0619 	add.w	r6, r4, #25
 800775c:	e7f5      	b.n	800774a <_printf_i+0x226>
 800775e:	bf00      	nop
 8007760:	08009a6e 	.word	0x08009a6e
 8007764:	08009a7f 	.word	0x08009a7f

08007768 <std>:
 8007768:	2300      	movs	r3, #0
 800776a:	b510      	push	{r4, lr}
 800776c:	4604      	mov	r4, r0
 800776e:	e9c0 3300 	strd	r3, r3, [r0]
 8007772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007776:	6083      	str	r3, [r0, #8]
 8007778:	8181      	strh	r1, [r0, #12]
 800777a:	6643      	str	r3, [r0, #100]	; 0x64
 800777c:	81c2      	strh	r2, [r0, #14]
 800777e:	6183      	str	r3, [r0, #24]
 8007780:	4619      	mov	r1, r3
 8007782:	2208      	movs	r2, #8
 8007784:	305c      	adds	r0, #92	; 0x5c
 8007786:	f000 f8b1 	bl	80078ec <memset>
 800778a:	4b0d      	ldr	r3, [pc, #52]	; (80077c0 <std+0x58>)
 800778c:	6263      	str	r3, [r4, #36]	; 0x24
 800778e:	4b0d      	ldr	r3, [pc, #52]	; (80077c4 <std+0x5c>)
 8007790:	62a3      	str	r3, [r4, #40]	; 0x28
 8007792:	4b0d      	ldr	r3, [pc, #52]	; (80077c8 <std+0x60>)
 8007794:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007796:	4b0d      	ldr	r3, [pc, #52]	; (80077cc <std+0x64>)
 8007798:	6323      	str	r3, [r4, #48]	; 0x30
 800779a:	4b0d      	ldr	r3, [pc, #52]	; (80077d0 <std+0x68>)
 800779c:	6224      	str	r4, [r4, #32]
 800779e:	429c      	cmp	r4, r3
 80077a0:	d006      	beq.n	80077b0 <std+0x48>
 80077a2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80077a6:	4294      	cmp	r4, r2
 80077a8:	d002      	beq.n	80077b0 <std+0x48>
 80077aa:	33d0      	adds	r3, #208	; 0xd0
 80077ac:	429c      	cmp	r4, r3
 80077ae:	d105      	bne.n	80077bc <std+0x54>
 80077b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f000 b8ce 	b.w	8007958 <__retarget_lock_init_recursive>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	08009031 	.word	0x08009031
 80077c4:	08009053 	.word	0x08009053
 80077c8:	0800908b 	.word	0x0800908b
 80077cc:	080090af 	.word	0x080090af
 80077d0:	200006d0 	.word	0x200006d0

080077d4 <stdio_exit_handler>:
 80077d4:	4a02      	ldr	r2, [pc, #8]	; (80077e0 <stdio_exit_handler+0xc>)
 80077d6:	4903      	ldr	r1, [pc, #12]	; (80077e4 <stdio_exit_handler+0x10>)
 80077d8:	4803      	ldr	r0, [pc, #12]	; (80077e8 <stdio_exit_handler+0x14>)
 80077da:	f000 b869 	b.w	80078b0 <_fwalk_sglue>
 80077de:	bf00      	nop
 80077e0:	2000000c 	.word	0x2000000c
 80077e4:	080088d1 	.word	0x080088d1
 80077e8:	20000018 	.word	0x20000018

080077ec <cleanup_stdio>:
 80077ec:	6841      	ldr	r1, [r0, #4]
 80077ee:	4b0c      	ldr	r3, [pc, #48]	; (8007820 <cleanup_stdio+0x34>)
 80077f0:	4299      	cmp	r1, r3
 80077f2:	b510      	push	{r4, lr}
 80077f4:	4604      	mov	r4, r0
 80077f6:	d001      	beq.n	80077fc <cleanup_stdio+0x10>
 80077f8:	f001 f86a 	bl	80088d0 <_fflush_r>
 80077fc:	68a1      	ldr	r1, [r4, #8]
 80077fe:	4b09      	ldr	r3, [pc, #36]	; (8007824 <cleanup_stdio+0x38>)
 8007800:	4299      	cmp	r1, r3
 8007802:	d002      	beq.n	800780a <cleanup_stdio+0x1e>
 8007804:	4620      	mov	r0, r4
 8007806:	f001 f863 	bl	80088d0 <_fflush_r>
 800780a:	68e1      	ldr	r1, [r4, #12]
 800780c:	4b06      	ldr	r3, [pc, #24]	; (8007828 <cleanup_stdio+0x3c>)
 800780e:	4299      	cmp	r1, r3
 8007810:	d004      	beq.n	800781c <cleanup_stdio+0x30>
 8007812:	4620      	mov	r0, r4
 8007814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007818:	f001 b85a 	b.w	80088d0 <_fflush_r>
 800781c:	bd10      	pop	{r4, pc}
 800781e:	bf00      	nop
 8007820:	200006d0 	.word	0x200006d0
 8007824:	20000738 	.word	0x20000738
 8007828:	200007a0 	.word	0x200007a0

0800782c <global_stdio_init.part.0>:
 800782c:	b510      	push	{r4, lr}
 800782e:	4b0b      	ldr	r3, [pc, #44]	; (800785c <global_stdio_init.part.0+0x30>)
 8007830:	4c0b      	ldr	r4, [pc, #44]	; (8007860 <global_stdio_init.part.0+0x34>)
 8007832:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <global_stdio_init.part.0+0x38>)
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	4620      	mov	r0, r4
 8007838:	2200      	movs	r2, #0
 800783a:	2104      	movs	r1, #4
 800783c:	f7ff ff94 	bl	8007768 <std>
 8007840:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007844:	2201      	movs	r2, #1
 8007846:	2109      	movs	r1, #9
 8007848:	f7ff ff8e 	bl	8007768 <std>
 800784c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007850:	2202      	movs	r2, #2
 8007852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007856:	2112      	movs	r1, #18
 8007858:	f7ff bf86 	b.w	8007768 <std>
 800785c:	20000808 	.word	0x20000808
 8007860:	200006d0 	.word	0x200006d0
 8007864:	080077d5 	.word	0x080077d5

08007868 <__sfp_lock_acquire>:
 8007868:	4801      	ldr	r0, [pc, #4]	; (8007870 <__sfp_lock_acquire+0x8>)
 800786a:	f000 b876 	b.w	800795a <__retarget_lock_acquire_recursive>
 800786e:	bf00      	nop
 8007870:	2000080d 	.word	0x2000080d

08007874 <__sfp_lock_release>:
 8007874:	4801      	ldr	r0, [pc, #4]	; (800787c <__sfp_lock_release+0x8>)
 8007876:	f000 b871 	b.w	800795c <__retarget_lock_release_recursive>
 800787a:	bf00      	nop
 800787c:	2000080d 	.word	0x2000080d

08007880 <__sinit>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4604      	mov	r4, r0
 8007884:	f7ff fff0 	bl	8007868 <__sfp_lock_acquire>
 8007888:	6a23      	ldr	r3, [r4, #32]
 800788a:	b11b      	cbz	r3, 8007894 <__sinit+0x14>
 800788c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007890:	f7ff bff0 	b.w	8007874 <__sfp_lock_release>
 8007894:	4b04      	ldr	r3, [pc, #16]	; (80078a8 <__sinit+0x28>)
 8007896:	6223      	str	r3, [r4, #32]
 8007898:	4b04      	ldr	r3, [pc, #16]	; (80078ac <__sinit+0x2c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1f5      	bne.n	800788c <__sinit+0xc>
 80078a0:	f7ff ffc4 	bl	800782c <global_stdio_init.part.0>
 80078a4:	e7f2      	b.n	800788c <__sinit+0xc>
 80078a6:	bf00      	nop
 80078a8:	080077ed 	.word	0x080077ed
 80078ac:	20000808 	.word	0x20000808

080078b0 <_fwalk_sglue>:
 80078b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078b4:	4607      	mov	r7, r0
 80078b6:	4688      	mov	r8, r1
 80078b8:	4614      	mov	r4, r2
 80078ba:	2600      	movs	r6, #0
 80078bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80078c0:	f1b9 0901 	subs.w	r9, r9, #1
 80078c4:	d505      	bpl.n	80078d2 <_fwalk_sglue+0x22>
 80078c6:	6824      	ldr	r4, [r4, #0]
 80078c8:	2c00      	cmp	r4, #0
 80078ca:	d1f7      	bne.n	80078bc <_fwalk_sglue+0xc>
 80078cc:	4630      	mov	r0, r6
 80078ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d907      	bls.n	80078e8 <_fwalk_sglue+0x38>
 80078d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078dc:	3301      	adds	r3, #1
 80078de:	d003      	beq.n	80078e8 <_fwalk_sglue+0x38>
 80078e0:	4629      	mov	r1, r5
 80078e2:	4638      	mov	r0, r7
 80078e4:	47c0      	blx	r8
 80078e6:	4306      	orrs	r6, r0
 80078e8:	3568      	adds	r5, #104	; 0x68
 80078ea:	e7e9      	b.n	80078c0 <_fwalk_sglue+0x10>

080078ec <memset>:
 80078ec:	4402      	add	r2, r0
 80078ee:	4603      	mov	r3, r0
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d100      	bne.n	80078f6 <memset+0xa>
 80078f4:	4770      	bx	lr
 80078f6:	f803 1b01 	strb.w	r1, [r3], #1
 80078fa:	e7f9      	b.n	80078f0 <memset+0x4>

080078fc <_localeconv_r>:
 80078fc:	4800      	ldr	r0, [pc, #0]	; (8007900 <_localeconv_r+0x4>)
 80078fe:	4770      	bx	lr
 8007900:	20000158 	.word	0x20000158

08007904 <__errno>:
 8007904:	4b01      	ldr	r3, [pc, #4]	; (800790c <__errno+0x8>)
 8007906:	6818      	ldr	r0, [r3, #0]
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop
 800790c:	20000064 	.word	0x20000064

08007910 <__libc_init_array>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	4d0d      	ldr	r5, [pc, #52]	; (8007948 <__libc_init_array+0x38>)
 8007914:	4c0d      	ldr	r4, [pc, #52]	; (800794c <__libc_init_array+0x3c>)
 8007916:	1b64      	subs	r4, r4, r5
 8007918:	10a4      	asrs	r4, r4, #2
 800791a:	2600      	movs	r6, #0
 800791c:	42a6      	cmp	r6, r4
 800791e:	d109      	bne.n	8007934 <__libc_init_array+0x24>
 8007920:	4d0b      	ldr	r5, [pc, #44]	; (8007950 <__libc_init_array+0x40>)
 8007922:	4c0c      	ldr	r4, [pc, #48]	; (8007954 <__libc_init_array+0x44>)
 8007924:	f001 ff78 	bl	8009818 <_init>
 8007928:	1b64      	subs	r4, r4, r5
 800792a:	10a4      	asrs	r4, r4, #2
 800792c:	2600      	movs	r6, #0
 800792e:	42a6      	cmp	r6, r4
 8007930:	d105      	bne.n	800793e <__libc_init_array+0x2e>
 8007932:	bd70      	pop	{r4, r5, r6, pc}
 8007934:	f855 3b04 	ldr.w	r3, [r5], #4
 8007938:	4798      	blx	r3
 800793a:	3601      	adds	r6, #1
 800793c:	e7ee      	b.n	800791c <__libc_init_array+0xc>
 800793e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007942:	4798      	blx	r3
 8007944:	3601      	adds	r6, #1
 8007946:	e7f2      	b.n	800792e <__libc_init_array+0x1e>
 8007948:	08009dd4 	.word	0x08009dd4
 800794c:	08009dd4 	.word	0x08009dd4
 8007950:	08009dd4 	.word	0x08009dd4
 8007954:	08009dd8 	.word	0x08009dd8

08007958 <__retarget_lock_init_recursive>:
 8007958:	4770      	bx	lr

0800795a <__retarget_lock_acquire_recursive>:
 800795a:	4770      	bx	lr

0800795c <__retarget_lock_release_recursive>:
 800795c:	4770      	bx	lr

0800795e <memcpy>:
 800795e:	440a      	add	r2, r1
 8007960:	4291      	cmp	r1, r2
 8007962:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007966:	d100      	bne.n	800796a <memcpy+0xc>
 8007968:	4770      	bx	lr
 800796a:	b510      	push	{r4, lr}
 800796c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007970:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007974:	4291      	cmp	r1, r2
 8007976:	d1f9      	bne.n	800796c <memcpy+0xe>
 8007978:	bd10      	pop	{r4, pc}

0800797a <quorem>:
 800797a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797e:	6903      	ldr	r3, [r0, #16]
 8007980:	690c      	ldr	r4, [r1, #16]
 8007982:	42a3      	cmp	r3, r4
 8007984:	4607      	mov	r7, r0
 8007986:	db7e      	blt.n	8007a86 <quorem+0x10c>
 8007988:	3c01      	subs	r4, #1
 800798a:	f101 0814 	add.w	r8, r1, #20
 800798e:	f100 0514 	add.w	r5, r0, #20
 8007992:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007996:	9301      	str	r3, [sp, #4]
 8007998:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800799c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079a0:	3301      	adds	r3, #1
 80079a2:	429a      	cmp	r2, r3
 80079a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80079a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80079ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80079b0:	d331      	bcc.n	8007a16 <quorem+0x9c>
 80079b2:	f04f 0e00 	mov.w	lr, #0
 80079b6:	4640      	mov	r0, r8
 80079b8:	46ac      	mov	ip, r5
 80079ba:	46f2      	mov	sl, lr
 80079bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80079c0:	b293      	uxth	r3, r2
 80079c2:	fb06 e303 	mla	r3, r6, r3, lr
 80079c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079ca:	0c1a      	lsrs	r2, r3, #16
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	ebaa 0303 	sub.w	r3, sl, r3
 80079d2:	f8dc a000 	ldr.w	sl, [ip]
 80079d6:	fa13 f38a 	uxtah	r3, r3, sl
 80079da:	fb06 220e 	mla	r2, r6, lr, r2
 80079de:	9300      	str	r3, [sp, #0]
 80079e0:	9b00      	ldr	r3, [sp, #0]
 80079e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80079e6:	b292      	uxth	r2, r2
 80079e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80079ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80079f4:	4581      	cmp	r9, r0
 80079f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079fa:	f84c 3b04 	str.w	r3, [ip], #4
 80079fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007a02:	d2db      	bcs.n	80079bc <quorem+0x42>
 8007a04:	f855 300b 	ldr.w	r3, [r5, fp]
 8007a08:	b92b      	cbnz	r3, 8007a16 <quorem+0x9c>
 8007a0a:	9b01      	ldr	r3, [sp, #4]
 8007a0c:	3b04      	subs	r3, #4
 8007a0e:	429d      	cmp	r5, r3
 8007a10:	461a      	mov	r2, r3
 8007a12:	d32c      	bcc.n	8007a6e <quorem+0xf4>
 8007a14:	613c      	str	r4, [r7, #16]
 8007a16:	4638      	mov	r0, r7
 8007a18:	f001 fa0a 	bl	8008e30 <__mcmp>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	db22      	blt.n	8007a66 <quorem+0xec>
 8007a20:	3601      	adds	r6, #1
 8007a22:	4629      	mov	r1, r5
 8007a24:	2000      	movs	r0, #0
 8007a26:	f858 2b04 	ldr.w	r2, [r8], #4
 8007a2a:	f8d1 c000 	ldr.w	ip, [r1]
 8007a2e:	b293      	uxth	r3, r2
 8007a30:	1ac3      	subs	r3, r0, r3
 8007a32:	0c12      	lsrs	r2, r2, #16
 8007a34:	fa13 f38c 	uxtah	r3, r3, ip
 8007a38:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007a3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007a46:	45c1      	cmp	r9, r8
 8007a48:	f841 3b04 	str.w	r3, [r1], #4
 8007a4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007a50:	d2e9      	bcs.n	8007a26 <quorem+0xac>
 8007a52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a5a:	b922      	cbnz	r2, 8007a66 <quorem+0xec>
 8007a5c:	3b04      	subs	r3, #4
 8007a5e:	429d      	cmp	r5, r3
 8007a60:	461a      	mov	r2, r3
 8007a62:	d30a      	bcc.n	8007a7a <quorem+0x100>
 8007a64:	613c      	str	r4, [r7, #16]
 8007a66:	4630      	mov	r0, r6
 8007a68:	b003      	add	sp, #12
 8007a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a6e:	6812      	ldr	r2, [r2, #0]
 8007a70:	3b04      	subs	r3, #4
 8007a72:	2a00      	cmp	r2, #0
 8007a74:	d1ce      	bne.n	8007a14 <quorem+0x9a>
 8007a76:	3c01      	subs	r4, #1
 8007a78:	e7c9      	b.n	8007a0e <quorem+0x94>
 8007a7a:	6812      	ldr	r2, [r2, #0]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	2a00      	cmp	r2, #0
 8007a80:	d1f0      	bne.n	8007a64 <quorem+0xea>
 8007a82:	3c01      	subs	r4, #1
 8007a84:	e7eb      	b.n	8007a5e <quorem+0xe4>
 8007a86:	2000      	movs	r0, #0
 8007a88:	e7ee      	b.n	8007a68 <quorem+0xee>
 8007a8a:	0000      	movs	r0, r0
 8007a8c:	0000      	movs	r0, r0
	...

08007a90 <_dtoa_r>:
 8007a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a94:	ed2d 8b04 	vpush	{d8-d9}
 8007a98:	69c5      	ldr	r5, [r0, #28]
 8007a9a:	b093      	sub	sp, #76	; 0x4c
 8007a9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007aa0:	ec57 6b10 	vmov	r6, r7, d0
 8007aa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007aa8:	9107      	str	r1, [sp, #28]
 8007aaa:	4604      	mov	r4, r0
 8007aac:	920a      	str	r2, [sp, #40]	; 0x28
 8007aae:	930d      	str	r3, [sp, #52]	; 0x34
 8007ab0:	b975      	cbnz	r5, 8007ad0 <_dtoa_r+0x40>
 8007ab2:	2010      	movs	r0, #16
 8007ab4:	f000 fdde 	bl	8008674 <malloc>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	61e0      	str	r0, [r4, #28]
 8007abc:	b920      	cbnz	r0, 8007ac8 <_dtoa_r+0x38>
 8007abe:	4bae      	ldr	r3, [pc, #696]	; (8007d78 <_dtoa_r+0x2e8>)
 8007ac0:	21ef      	movs	r1, #239	; 0xef
 8007ac2:	48ae      	ldr	r0, [pc, #696]	; (8007d7c <_dtoa_r+0x2ec>)
 8007ac4:	f001 fb4e 	bl	8009164 <__assert_func>
 8007ac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007acc:	6005      	str	r5, [r0, #0]
 8007ace:	60c5      	str	r5, [r0, #12]
 8007ad0:	69e3      	ldr	r3, [r4, #28]
 8007ad2:	6819      	ldr	r1, [r3, #0]
 8007ad4:	b151      	cbz	r1, 8007aec <_dtoa_r+0x5c>
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	604a      	str	r2, [r1, #4]
 8007ada:	2301      	movs	r3, #1
 8007adc:	4093      	lsls	r3, r2
 8007ade:	608b      	str	r3, [r1, #8]
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	f000 ff69 	bl	80089b8 <_Bfree>
 8007ae6:	69e3      	ldr	r3, [r4, #28]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	601a      	str	r2, [r3, #0]
 8007aec:	1e3b      	subs	r3, r7, #0
 8007aee:	bfbb      	ittet	lt
 8007af0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007af4:	9303      	strlt	r3, [sp, #12]
 8007af6:	2300      	movge	r3, #0
 8007af8:	2201      	movlt	r2, #1
 8007afa:	bfac      	ite	ge
 8007afc:	f8c8 3000 	strge.w	r3, [r8]
 8007b00:	f8c8 2000 	strlt.w	r2, [r8]
 8007b04:	4b9e      	ldr	r3, [pc, #632]	; (8007d80 <_dtoa_r+0x2f0>)
 8007b06:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007b0a:	ea33 0308 	bics.w	r3, r3, r8
 8007b0e:	d11b      	bne.n	8007b48 <_dtoa_r+0xb8>
 8007b10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b12:	f242 730f 	movw	r3, #9999	; 0x270f
 8007b16:	6013      	str	r3, [r2, #0]
 8007b18:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007b1c:	4333      	orrs	r3, r6
 8007b1e:	f000 8593 	beq.w	8008648 <_dtoa_r+0xbb8>
 8007b22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b24:	b963      	cbnz	r3, 8007b40 <_dtoa_r+0xb0>
 8007b26:	4b97      	ldr	r3, [pc, #604]	; (8007d84 <_dtoa_r+0x2f4>)
 8007b28:	e027      	b.n	8007b7a <_dtoa_r+0xea>
 8007b2a:	4b97      	ldr	r3, [pc, #604]	; (8007d88 <_dtoa_r+0x2f8>)
 8007b2c:	9300      	str	r3, [sp, #0]
 8007b2e:	3308      	adds	r3, #8
 8007b30:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	9800      	ldr	r0, [sp, #0]
 8007b36:	b013      	add	sp, #76	; 0x4c
 8007b38:	ecbd 8b04 	vpop	{d8-d9}
 8007b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b40:	4b90      	ldr	r3, [pc, #576]	; (8007d84 <_dtoa_r+0x2f4>)
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	3303      	adds	r3, #3
 8007b46:	e7f3      	b.n	8007b30 <_dtoa_r+0xa0>
 8007b48:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	ec51 0b17 	vmov	r0, r1, d7
 8007b52:	eeb0 8a47 	vmov.f32	s16, s14
 8007b56:	eef0 8a67 	vmov.f32	s17, s15
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	f7f8 ffcc 	bl	8000af8 <__aeabi_dcmpeq>
 8007b60:	4681      	mov	r9, r0
 8007b62:	b160      	cbz	r0, 8007b7e <_dtoa_r+0xee>
 8007b64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b66:	2301      	movs	r3, #1
 8007b68:	6013      	str	r3, [r2, #0]
 8007b6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 8568 	beq.w	8008642 <_dtoa_r+0xbb2>
 8007b72:	4b86      	ldr	r3, [pc, #536]	; (8007d8c <_dtoa_r+0x2fc>)
 8007b74:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	e7da      	b.n	8007b34 <_dtoa_r+0xa4>
 8007b7e:	aa10      	add	r2, sp, #64	; 0x40
 8007b80:	a911      	add	r1, sp, #68	; 0x44
 8007b82:	4620      	mov	r0, r4
 8007b84:	eeb0 0a48 	vmov.f32	s0, s16
 8007b88:	eef0 0a68 	vmov.f32	s1, s17
 8007b8c:	f001 f9f6 	bl	8008f7c <__d2b>
 8007b90:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b94:	4682      	mov	sl, r0
 8007b96:	2d00      	cmp	r5, #0
 8007b98:	d07f      	beq.n	8007c9a <_dtoa_r+0x20a>
 8007b9a:	ee18 3a90 	vmov	r3, s17
 8007b9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ba2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007ba6:	ec51 0b18 	vmov	r0, r1, d8
 8007baa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007bae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007bb2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	2200      	movs	r2, #0
 8007bba:	4b75      	ldr	r3, [pc, #468]	; (8007d90 <_dtoa_r+0x300>)
 8007bbc:	f7f8 fb7c 	bl	80002b8 <__aeabi_dsub>
 8007bc0:	a367      	add	r3, pc, #412	; (adr r3, 8007d60 <_dtoa_r+0x2d0>)
 8007bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc6:	f7f8 fd2f 	bl	8000628 <__aeabi_dmul>
 8007bca:	a367      	add	r3, pc, #412	; (adr r3, 8007d68 <_dtoa_r+0x2d8>)
 8007bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd0:	f7f8 fb74 	bl	80002bc <__adddf3>
 8007bd4:	4606      	mov	r6, r0
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	460f      	mov	r7, r1
 8007bda:	f7f8 fcbb 	bl	8000554 <__aeabi_i2d>
 8007bde:	a364      	add	r3, pc, #400	; (adr r3, 8007d70 <_dtoa_r+0x2e0>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	f7f8 fd20 	bl	8000628 <__aeabi_dmul>
 8007be8:	4602      	mov	r2, r0
 8007bea:	460b      	mov	r3, r1
 8007bec:	4630      	mov	r0, r6
 8007bee:	4639      	mov	r1, r7
 8007bf0:	f7f8 fb64 	bl	80002bc <__adddf3>
 8007bf4:	4606      	mov	r6, r0
 8007bf6:	460f      	mov	r7, r1
 8007bf8:	f7f8 ffc6 	bl	8000b88 <__aeabi_d2iz>
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	4683      	mov	fp, r0
 8007c00:	2300      	movs	r3, #0
 8007c02:	4630      	mov	r0, r6
 8007c04:	4639      	mov	r1, r7
 8007c06:	f7f8 ff81 	bl	8000b0c <__aeabi_dcmplt>
 8007c0a:	b148      	cbz	r0, 8007c20 <_dtoa_r+0x190>
 8007c0c:	4658      	mov	r0, fp
 8007c0e:	f7f8 fca1 	bl	8000554 <__aeabi_i2d>
 8007c12:	4632      	mov	r2, r6
 8007c14:	463b      	mov	r3, r7
 8007c16:	f7f8 ff6f 	bl	8000af8 <__aeabi_dcmpeq>
 8007c1a:	b908      	cbnz	r0, 8007c20 <_dtoa_r+0x190>
 8007c1c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c20:	f1bb 0f16 	cmp.w	fp, #22
 8007c24:	d857      	bhi.n	8007cd6 <_dtoa_r+0x246>
 8007c26:	4b5b      	ldr	r3, [pc, #364]	; (8007d94 <_dtoa_r+0x304>)
 8007c28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	ec51 0b18 	vmov	r0, r1, d8
 8007c34:	f7f8 ff6a 	bl	8000b0c <__aeabi_dcmplt>
 8007c38:	2800      	cmp	r0, #0
 8007c3a:	d04e      	beq.n	8007cda <_dtoa_r+0x24a>
 8007c3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007c40:	2300      	movs	r3, #0
 8007c42:	930c      	str	r3, [sp, #48]	; 0x30
 8007c44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007c46:	1b5b      	subs	r3, r3, r5
 8007c48:	1e5a      	subs	r2, r3, #1
 8007c4a:	bf45      	ittet	mi
 8007c4c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007c50:	9305      	strmi	r3, [sp, #20]
 8007c52:	2300      	movpl	r3, #0
 8007c54:	2300      	movmi	r3, #0
 8007c56:	9206      	str	r2, [sp, #24]
 8007c58:	bf54      	ite	pl
 8007c5a:	9305      	strpl	r3, [sp, #20]
 8007c5c:	9306      	strmi	r3, [sp, #24]
 8007c5e:	f1bb 0f00 	cmp.w	fp, #0
 8007c62:	db3c      	blt.n	8007cde <_dtoa_r+0x24e>
 8007c64:	9b06      	ldr	r3, [sp, #24]
 8007c66:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007c6a:	445b      	add	r3, fp
 8007c6c:	9306      	str	r3, [sp, #24]
 8007c6e:	2300      	movs	r3, #0
 8007c70:	9308      	str	r3, [sp, #32]
 8007c72:	9b07      	ldr	r3, [sp, #28]
 8007c74:	2b09      	cmp	r3, #9
 8007c76:	d868      	bhi.n	8007d4a <_dtoa_r+0x2ba>
 8007c78:	2b05      	cmp	r3, #5
 8007c7a:	bfc4      	itt	gt
 8007c7c:	3b04      	subgt	r3, #4
 8007c7e:	9307      	strgt	r3, [sp, #28]
 8007c80:	9b07      	ldr	r3, [sp, #28]
 8007c82:	f1a3 0302 	sub.w	r3, r3, #2
 8007c86:	bfcc      	ite	gt
 8007c88:	2500      	movgt	r5, #0
 8007c8a:	2501      	movle	r5, #1
 8007c8c:	2b03      	cmp	r3, #3
 8007c8e:	f200 8085 	bhi.w	8007d9c <_dtoa_r+0x30c>
 8007c92:	e8df f003 	tbb	[pc, r3]
 8007c96:	3b2e      	.short	0x3b2e
 8007c98:	5839      	.short	0x5839
 8007c9a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c9e:	441d      	add	r5, r3
 8007ca0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ca4:	2b20      	cmp	r3, #32
 8007ca6:	bfc1      	itttt	gt
 8007ca8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007cac:	fa08 f803 	lslgt.w	r8, r8, r3
 8007cb0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007cb4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007cb8:	bfd6      	itet	le
 8007cba:	f1c3 0320 	rsble	r3, r3, #32
 8007cbe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007cc2:	fa06 f003 	lslle.w	r0, r6, r3
 8007cc6:	f7f8 fc35 	bl	8000534 <__aeabi_ui2d>
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007cd0:	3d01      	subs	r5, #1
 8007cd2:	920e      	str	r2, [sp, #56]	; 0x38
 8007cd4:	e76f      	b.n	8007bb6 <_dtoa_r+0x126>
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e7b3      	b.n	8007c42 <_dtoa_r+0x1b2>
 8007cda:	900c      	str	r0, [sp, #48]	; 0x30
 8007cdc:	e7b2      	b.n	8007c44 <_dtoa_r+0x1b4>
 8007cde:	9b05      	ldr	r3, [sp, #20]
 8007ce0:	eba3 030b 	sub.w	r3, r3, fp
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	f1cb 0300 	rsb	r3, fp, #0
 8007cea:	9308      	str	r3, [sp, #32]
 8007cec:	2300      	movs	r3, #0
 8007cee:	930b      	str	r3, [sp, #44]	; 0x2c
 8007cf0:	e7bf      	b.n	8007c72 <_dtoa_r+0x1e2>
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	dc52      	bgt.n	8007da2 <_dtoa_r+0x312>
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	9301      	str	r3, [sp, #4]
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	461a      	mov	r2, r3
 8007d04:	920a      	str	r2, [sp, #40]	; 0x28
 8007d06:	e00b      	b.n	8007d20 <_dtoa_r+0x290>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e7f3      	b.n	8007cf4 <_dtoa_r+0x264>
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d12:	445b      	add	r3, fp
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	3301      	adds	r3, #1
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	9304      	str	r3, [sp, #16]
 8007d1c:	bfb8      	it	lt
 8007d1e:	2301      	movlt	r3, #1
 8007d20:	69e0      	ldr	r0, [r4, #28]
 8007d22:	2100      	movs	r1, #0
 8007d24:	2204      	movs	r2, #4
 8007d26:	f102 0614 	add.w	r6, r2, #20
 8007d2a:	429e      	cmp	r6, r3
 8007d2c:	d93d      	bls.n	8007daa <_dtoa_r+0x31a>
 8007d2e:	6041      	str	r1, [r0, #4]
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fe01 	bl	8008938 <_Balloc>
 8007d36:	9000      	str	r0, [sp, #0]
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d139      	bne.n	8007db0 <_dtoa_r+0x320>
 8007d3c:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <_dtoa_r+0x308>)
 8007d3e:	4602      	mov	r2, r0
 8007d40:	f240 11af 	movw	r1, #431	; 0x1af
 8007d44:	e6bd      	b.n	8007ac2 <_dtoa_r+0x32>
 8007d46:	2301      	movs	r3, #1
 8007d48:	e7e1      	b.n	8007d0e <_dtoa_r+0x27e>
 8007d4a:	2501      	movs	r5, #1
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	9307      	str	r3, [sp, #28]
 8007d50:	9509      	str	r5, [sp, #36]	; 0x24
 8007d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007d56:	9301      	str	r3, [sp, #4]
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	2312      	movs	r3, #18
 8007d5e:	e7d1      	b.n	8007d04 <_dtoa_r+0x274>
 8007d60:	636f4361 	.word	0x636f4361
 8007d64:	3fd287a7 	.word	0x3fd287a7
 8007d68:	8b60c8b3 	.word	0x8b60c8b3
 8007d6c:	3fc68a28 	.word	0x3fc68a28
 8007d70:	509f79fb 	.word	0x509f79fb
 8007d74:	3fd34413 	.word	0x3fd34413
 8007d78:	08009a9d 	.word	0x08009a9d
 8007d7c:	08009ab4 	.word	0x08009ab4
 8007d80:	7ff00000 	.word	0x7ff00000
 8007d84:	08009a99 	.word	0x08009a99
 8007d88:	08009a90 	.word	0x08009a90
 8007d8c:	08009a6d 	.word	0x08009a6d
 8007d90:	3ff80000 	.word	0x3ff80000
 8007d94:	08009ba0 	.word	0x08009ba0
 8007d98:	08009b0c 	.word	0x08009b0c
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007da0:	e7d7      	b.n	8007d52 <_dtoa_r+0x2c2>
 8007da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	9304      	str	r3, [sp, #16]
 8007da8:	e7ba      	b.n	8007d20 <_dtoa_r+0x290>
 8007daa:	3101      	adds	r1, #1
 8007dac:	0052      	lsls	r2, r2, #1
 8007dae:	e7ba      	b.n	8007d26 <_dtoa_r+0x296>
 8007db0:	69e3      	ldr	r3, [r4, #28]
 8007db2:	9a00      	ldr	r2, [sp, #0]
 8007db4:	601a      	str	r2, [r3, #0]
 8007db6:	9b04      	ldr	r3, [sp, #16]
 8007db8:	2b0e      	cmp	r3, #14
 8007dba:	f200 80a8 	bhi.w	8007f0e <_dtoa_r+0x47e>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	f000 80a5 	beq.w	8007f0e <_dtoa_r+0x47e>
 8007dc4:	f1bb 0f00 	cmp.w	fp, #0
 8007dc8:	dd38      	ble.n	8007e3c <_dtoa_r+0x3ac>
 8007dca:	4bc0      	ldr	r3, [pc, #768]	; (80080cc <_dtoa_r+0x63c>)
 8007dcc:	f00b 020f 	and.w	r2, fp, #15
 8007dd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dd4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007dd8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007ddc:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007de0:	d019      	beq.n	8007e16 <_dtoa_r+0x386>
 8007de2:	4bbb      	ldr	r3, [pc, #748]	; (80080d0 <_dtoa_r+0x640>)
 8007de4:	ec51 0b18 	vmov	r0, r1, d8
 8007de8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007dec:	f7f8 fd46 	bl	800087c <__aeabi_ddiv>
 8007df0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007df4:	f008 080f 	and.w	r8, r8, #15
 8007df8:	2503      	movs	r5, #3
 8007dfa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80080d0 <_dtoa_r+0x640>
 8007dfe:	f1b8 0f00 	cmp.w	r8, #0
 8007e02:	d10a      	bne.n	8007e1a <_dtoa_r+0x38a>
 8007e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e08:	4632      	mov	r2, r6
 8007e0a:	463b      	mov	r3, r7
 8007e0c:	f7f8 fd36 	bl	800087c <__aeabi_ddiv>
 8007e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e14:	e02b      	b.n	8007e6e <_dtoa_r+0x3de>
 8007e16:	2502      	movs	r5, #2
 8007e18:	e7ef      	b.n	8007dfa <_dtoa_r+0x36a>
 8007e1a:	f018 0f01 	tst.w	r8, #1
 8007e1e:	d008      	beq.n	8007e32 <_dtoa_r+0x3a2>
 8007e20:	4630      	mov	r0, r6
 8007e22:	4639      	mov	r1, r7
 8007e24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007e28:	f7f8 fbfe 	bl	8000628 <__aeabi_dmul>
 8007e2c:	3501      	adds	r5, #1
 8007e2e:	4606      	mov	r6, r0
 8007e30:	460f      	mov	r7, r1
 8007e32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e36:	f109 0908 	add.w	r9, r9, #8
 8007e3a:	e7e0      	b.n	8007dfe <_dtoa_r+0x36e>
 8007e3c:	f000 809f 	beq.w	8007f7e <_dtoa_r+0x4ee>
 8007e40:	f1cb 0600 	rsb	r6, fp, #0
 8007e44:	4ba1      	ldr	r3, [pc, #644]	; (80080cc <_dtoa_r+0x63c>)
 8007e46:	4fa2      	ldr	r7, [pc, #648]	; (80080d0 <_dtoa_r+0x640>)
 8007e48:	f006 020f 	and.w	r2, r6, #15
 8007e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e54:	ec51 0b18 	vmov	r0, r1, d8
 8007e58:	f7f8 fbe6 	bl	8000628 <__aeabi_dmul>
 8007e5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e60:	1136      	asrs	r6, r6, #4
 8007e62:	2300      	movs	r3, #0
 8007e64:	2502      	movs	r5, #2
 8007e66:	2e00      	cmp	r6, #0
 8007e68:	d17e      	bne.n	8007f68 <_dtoa_r+0x4d8>
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d1d0      	bne.n	8007e10 <_dtoa_r+0x380>
 8007e6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	f000 8084 	beq.w	8007f82 <_dtoa_r+0x4f2>
 8007e7a:	4b96      	ldr	r3, [pc, #600]	; (80080d4 <_dtoa_r+0x644>)
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4640      	mov	r0, r8
 8007e80:	4649      	mov	r1, r9
 8007e82:	f7f8 fe43 	bl	8000b0c <__aeabi_dcmplt>
 8007e86:	2800      	cmp	r0, #0
 8007e88:	d07b      	beq.n	8007f82 <_dtoa_r+0x4f2>
 8007e8a:	9b04      	ldr	r3, [sp, #16]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d078      	beq.n	8007f82 <_dtoa_r+0x4f2>
 8007e90:	9b01      	ldr	r3, [sp, #4]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dd39      	ble.n	8007f0a <_dtoa_r+0x47a>
 8007e96:	4b90      	ldr	r3, [pc, #576]	; (80080d8 <_dtoa_r+0x648>)
 8007e98:	2200      	movs	r2, #0
 8007e9a:	4640      	mov	r0, r8
 8007e9c:	4649      	mov	r1, r9
 8007e9e:	f7f8 fbc3 	bl	8000628 <__aeabi_dmul>
 8007ea2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea6:	9e01      	ldr	r6, [sp, #4]
 8007ea8:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007eac:	3501      	adds	r5, #1
 8007eae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	f7f8 fb4e 	bl	8000554 <__aeabi_i2d>
 8007eb8:	4642      	mov	r2, r8
 8007eba:	464b      	mov	r3, r9
 8007ebc:	f7f8 fbb4 	bl	8000628 <__aeabi_dmul>
 8007ec0:	4b86      	ldr	r3, [pc, #536]	; (80080dc <_dtoa_r+0x64c>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f7f8 f9fa 	bl	80002bc <__adddf3>
 8007ec8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007ecc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ed0:	9303      	str	r3, [sp, #12]
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d158      	bne.n	8007f88 <_dtoa_r+0x4f8>
 8007ed6:	4b82      	ldr	r3, [pc, #520]	; (80080e0 <_dtoa_r+0x650>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	4640      	mov	r0, r8
 8007edc:	4649      	mov	r1, r9
 8007ede:	f7f8 f9eb 	bl	80002b8 <__aeabi_dsub>
 8007ee2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4689      	mov	r9, r1
 8007eea:	f7f8 fe2d 	bl	8000b48 <__aeabi_dcmpgt>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	f040 8296 	bne.w	8008420 <_dtoa_r+0x990>
 8007ef4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007ef8:	4640      	mov	r0, r8
 8007efa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007efe:	4649      	mov	r1, r9
 8007f00:	f7f8 fe04 	bl	8000b0c <__aeabi_dcmplt>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	f040 8289 	bne.w	800841c <_dtoa_r+0x98c>
 8007f0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007f0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f2c0 814e 	blt.w	80081b2 <_dtoa_r+0x722>
 8007f16:	f1bb 0f0e 	cmp.w	fp, #14
 8007f1a:	f300 814a 	bgt.w	80081b2 <_dtoa_r+0x722>
 8007f1e:	4b6b      	ldr	r3, [pc, #428]	; (80080cc <_dtoa_r+0x63c>)
 8007f20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007f24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	f280 80dc 	bge.w	80080e8 <_dtoa_r+0x658>
 8007f30:	9b04      	ldr	r3, [sp, #16]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	f300 80d8 	bgt.w	80080e8 <_dtoa_r+0x658>
 8007f38:	f040 826f 	bne.w	800841a <_dtoa_r+0x98a>
 8007f3c:	4b68      	ldr	r3, [pc, #416]	; (80080e0 <_dtoa_r+0x650>)
 8007f3e:	2200      	movs	r2, #0
 8007f40:	4640      	mov	r0, r8
 8007f42:	4649      	mov	r1, r9
 8007f44:	f7f8 fb70 	bl	8000628 <__aeabi_dmul>
 8007f48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f4c:	f7f8 fdf2 	bl	8000b34 <__aeabi_dcmpge>
 8007f50:	9e04      	ldr	r6, [sp, #16]
 8007f52:	4637      	mov	r7, r6
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f040 8245 	bne.w	80083e4 <_dtoa_r+0x954>
 8007f5a:	9d00      	ldr	r5, [sp, #0]
 8007f5c:	2331      	movs	r3, #49	; 0x31
 8007f5e:	f805 3b01 	strb.w	r3, [r5], #1
 8007f62:	f10b 0b01 	add.w	fp, fp, #1
 8007f66:	e241      	b.n	80083ec <_dtoa_r+0x95c>
 8007f68:	07f2      	lsls	r2, r6, #31
 8007f6a:	d505      	bpl.n	8007f78 <_dtoa_r+0x4e8>
 8007f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f70:	f7f8 fb5a 	bl	8000628 <__aeabi_dmul>
 8007f74:	3501      	adds	r5, #1
 8007f76:	2301      	movs	r3, #1
 8007f78:	1076      	asrs	r6, r6, #1
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	e773      	b.n	8007e66 <_dtoa_r+0x3d6>
 8007f7e:	2502      	movs	r5, #2
 8007f80:	e775      	b.n	8007e6e <_dtoa_r+0x3de>
 8007f82:	9e04      	ldr	r6, [sp, #16]
 8007f84:	465f      	mov	r7, fp
 8007f86:	e792      	b.n	8007eae <_dtoa_r+0x41e>
 8007f88:	9900      	ldr	r1, [sp, #0]
 8007f8a:	4b50      	ldr	r3, [pc, #320]	; (80080cc <_dtoa_r+0x63c>)
 8007f8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f90:	4431      	add	r1, r6
 8007f92:	9102      	str	r1, [sp, #8]
 8007f94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f96:	eeb0 9a47 	vmov.f32	s18, s14
 8007f9a:	eef0 9a67 	vmov.f32	s19, s15
 8007f9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007fa2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007fa6:	2900      	cmp	r1, #0
 8007fa8:	d044      	beq.n	8008034 <_dtoa_r+0x5a4>
 8007faa:	494e      	ldr	r1, [pc, #312]	; (80080e4 <_dtoa_r+0x654>)
 8007fac:	2000      	movs	r0, #0
 8007fae:	f7f8 fc65 	bl	800087c <__aeabi_ddiv>
 8007fb2:	ec53 2b19 	vmov	r2, r3, d9
 8007fb6:	f7f8 f97f 	bl	80002b8 <__aeabi_dsub>
 8007fba:	9d00      	ldr	r5, [sp, #0]
 8007fbc:	ec41 0b19 	vmov	d9, r0, r1
 8007fc0:	4649      	mov	r1, r9
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	f7f8 fde0 	bl	8000b88 <__aeabi_d2iz>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	f7f8 fac3 	bl	8000554 <__aeabi_i2d>
 8007fce:	4602      	mov	r2, r0
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4640      	mov	r0, r8
 8007fd4:	4649      	mov	r1, r9
 8007fd6:	f7f8 f96f 	bl	80002b8 <__aeabi_dsub>
 8007fda:	3630      	adds	r6, #48	; 0x30
 8007fdc:	f805 6b01 	strb.w	r6, [r5], #1
 8007fe0:	ec53 2b19 	vmov	r2, r3, d9
 8007fe4:	4680      	mov	r8, r0
 8007fe6:	4689      	mov	r9, r1
 8007fe8:	f7f8 fd90 	bl	8000b0c <__aeabi_dcmplt>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d164      	bne.n	80080ba <_dtoa_r+0x62a>
 8007ff0:	4642      	mov	r2, r8
 8007ff2:	464b      	mov	r3, r9
 8007ff4:	4937      	ldr	r1, [pc, #220]	; (80080d4 <_dtoa_r+0x644>)
 8007ff6:	2000      	movs	r0, #0
 8007ff8:	f7f8 f95e 	bl	80002b8 <__aeabi_dsub>
 8007ffc:	ec53 2b19 	vmov	r2, r3, d9
 8008000:	f7f8 fd84 	bl	8000b0c <__aeabi_dcmplt>
 8008004:	2800      	cmp	r0, #0
 8008006:	f040 80b6 	bne.w	8008176 <_dtoa_r+0x6e6>
 800800a:	9b02      	ldr	r3, [sp, #8]
 800800c:	429d      	cmp	r5, r3
 800800e:	f43f af7c 	beq.w	8007f0a <_dtoa_r+0x47a>
 8008012:	4b31      	ldr	r3, [pc, #196]	; (80080d8 <_dtoa_r+0x648>)
 8008014:	ec51 0b19 	vmov	r0, r1, d9
 8008018:	2200      	movs	r2, #0
 800801a:	f7f8 fb05 	bl	8000628 <__aeabi_dmul>
 800801e:	4b2e      	ldr	r3, [pc, #184]	; (80080d8 <_dtoa_r+0x648>)
 8008020:	ec41 0b19 	vmov	d9, r0, r1
 8008024:	2200      	movs	r2, #0
 8008026:	4640      	mov	r0, r8
 8008028:	4649      	mov	r1, r9
 800802a:	f7f8 fafd 	bl	8000628 <__aeabi_dmul>
 800802e:	4680      	mov	r8, r0
 8008030:	4689      	mov	r9, r1
 8008032:	e7c5      	b.n	8007fc0 <_dtoa_r+0x530>
 8008034:	ec51 0b17 	vmov	r0, r1, d7
 8008038:	f7f8 faf6 	bl	8000628 <__aeabi_dmul>
 800803c:	9b02      	ldr	r3, [sp, #8]
 800803e:	9d00      	ldr	r5, [sp, #0]
 8008040:	930f      	str	r3, [sp, #60]	; 0x3c
 8008042:	ec41 0b19 	vmov	d9, r0, r1
 8008046:	4649      	mov	r1, r9
 8008048:	4640      	mov	r0, r8
 800804a:	f7f8 fd9d 	bl	8000b88 <__aeabi_d2iz>
 800804e:	4606      	mov	r6, r0
 8008050:	f7f8 fa80 	bl	8000554 <__aeabi_i2d>
 8008054:	3630      	adds	r6, #48	; 0x30
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f92b 	bl	80002b8 <__aeabi_dsub>
 8008062:	f805 6b01 	strb.w	r6, [r5], #1
 8008066:	9b02      	ldr	r3, [sp, #8]
 8008068:	429d      	cmp	r5, r3
 800806a:	4680      	mov	r8, r0
 800806c:	4689      	mov	r9, r1
 800806e:	f04f 0200 	mov.w	r2, #0
 8008072:	d124      	bne.n	80080be <_dtoa_r+0x62e>
 8008074:	4b1b      	ldr	r3, [pc, #108]	; (80080e4 <_dtoa_r+0x654>)
 8008076:	ec51 0b19 	vmov	r0, r1, d9
 800807a:	f7f8 f91f 	bl	80002bc <__adddf3>
 800807e:	4602      	mov	r2, r0
 8008080:	460b      	mov	r3, r1
 8008082:	4640      	mov	r0, r8
 8008084:	4649      	mov	r1, r9
 8008086:	f7f8 fd5f 	bl	8000b48 <__aeabi_dcmpgt>
 800808a:	2800      	cmp	r0, #0
 800808c:	d173      	bne.n	8008176 <_dtoa_r+0x6e6>
 800808e:	ec53 2b19 	vmov	r2, r3, d9
 8008092:	4914      	ldr	r1, [pc, #80]	; (80080e4 <_dtoa_r+0x654>)
 8008094:	2000      	movs	r0, #0
 8008096:	f7f8 f90f 	bl	80002b8 <__aeabi_dsub>
 800809a:	4602      	mov	r2, r0
 800809c:	460b      	mov	r3, r1
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fd33 	bl	8000b0c <__aeabi_dcmplt>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	f43f af2f 	beq.w	8007f0a <_dtoa_r+0x47a>
 80080ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80080ae:	1e6b      	subs	r3, r5, #1
 80080b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80080b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	d0f8      	beq.n	80080ac <_dtoa_r+0x61c>
 80080ba:	46bb      	mov	fp, r7
 80080bc:	e04a      	b.n	8008154 <_dtoa_r+0x6c4>
 80080be:	4b06      	ldr	r3, [pc, #24]	; (80080d8 <_dtoa_r+0x648>)
 80080c0:	f7f8 fab2 	bl	8000628 <__aeabi_dmul>
 80080c4:	4680      	mov	r8, r0
 80080c6:	4689      	mov	r9, r1
 80080c8:	e7bd      	b.n	8008046 <_dtoa_r+0x5b6>
 80080ca:	bf00      	nop
 80080cc:	08009ba0 	.word	0x08009ba0
 80080d0:	08009b78 	.word	0x08009b78
 80080d4:	3ff00000 	.word	0x3ff00000
 80080d8:	40240000 	.word	0x40240000
 80080dc:	401c0000 	.word	0x401c0000
 80080e0:	40140000 	.word	0x40140000
 80080e4:	3fe00000 	.word	0x3fe00000
 80080e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80080ec:	9d00      	ldr	r5, [sp, #0]
 80080ee:	4642      	mov	r2, r8
 80080f0:	464b      	mov	r3, r9
 80080f2:	4630      	mov	r0, r6
 80080f4:	4639      	mov	r1, r7
 80080f6:	f7f8 fbc1 	bl	800087c <__aeabi_ddiv>
 80080fa:	f7f8 fd45 	bl	8000b88 <__aeabi_d2iz>
 80080fe:	9001      	str	r0, [sp, #4]
 8008100:	f7f8 fa28 	bl	8000554 <__aeabi_i2d>
 8008104:	4642      	mov	r2, r8
 8008106:	464b      	mov	r3, r9
 8008108:	f7f8 fa8e 	bl	8000628 <__aeabi_dmul>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f8d0 	bl	80002b8 <__aeabi_dsub>
 8008118:	9e01      	ldr	r6, [sp, #4]
 800811a:	9f04      	ldr	r7, [sp, #16]
 800811c:	3630      	adds	r6, #48	; 0x30
 800811e:	f805 6b01 	strb.w	r6, [r5], #1
 8008122:	9e00      	ldr	r6, [sp, #0]
 8008124:	1bae      	subs	r6, r5, r6
 8008126:	42b7      	cmp	r7, r6
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	d134      	bne.n	8008198 <_dtoa_r+0x708>
 800812e:	f7f8 f8c5 	bl	80002bc <__adddf3>
 8008132:	4642      	mov	r2, r8
 8008134:	464b      	mov	r3, r9
 8008136:	4606      	mov	r6, r0
 8008138:	460f      	mov	r7, r1
 800813a:	f7f8 fd05 	bl	8000b48 <__aeabi_dcmpgt>
 800813e:	b9c8      	cbnz	r0, 8008174 <_dtoa_r+0x6e4>
 8008140:	4642      	mov	r2, r8
 8008142:	464b      	mov	r3, r9
 8008144:	4630      	mov	r0, r6
 8008146:	4639      	mov	r1, r7
 8008148:	f7f8 fcd6 	bl	8000af8 <__aeabi_dcmpeq>
 800814c:	b110      	cbz	r0, 8008154 <_dtoa_r+0x6c4>
 800814e:	9b01      	ldr	r3, [sp, #4]
 8008150:	07db      	lsls	r3, r3, #31
 8008152:	d40f      	bmi.n	8008174 <_dtoa_r+0x6e4>
 8008154:	4651      	mov	r1, sl
 8008156:	4620      	mov	r0, r4
 8008158:	f000 fc2e 	bl	80089b8 <_Bfree>
 800815c:	2300      	movs	r3, #0
 800815e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008160:	702b      	strb	r3, [r5, #0]
 8008162:	f10b 0301 	add.w	r3, fp, #1
 8008166:	6013      	str	r3, [r2, #0]
 8008168:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816a:	2b00      	cmp	r3, #0
 800816c:	f43f ace2 	beq.w	8007b34 <_dtoa_r+0xa4>
 8008170:	601d      	str	r5, [r3, #0]
 8008172:	e4df      	b.n	8007b34 <_dtoa_r+0xa4>
 8008174:	465f      	mov	r7, fp
 8008176:	462b      	mov	r3, r5
 8008178:	461d      	mov	r5, r3
 800817a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800817e:	2a39      	cmp	r2, #57	; 0x39
 8008180:	d106      	bne.n	8008190 <_dtoa_r+0x700>
 8008182:	9a00      	ldr	r2, [sp, #0]
 8008184:	429a      	cmp	r2, r3
 8008186:	d1f7      	bne.n	8008178 <_dtoa_r+0x6e8>
 8008188:	9900      	ldr	r1, [sp, #0]
 800818a:	2230      	movs	r2, #48	; 0x30
 800818c:	3701      	adds	r7, #1
 800818e:	700a      	strb	r2, [r1, #0]
 8008190:	781a      	ldrb	r2, [r3, #0]
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e790      	b.n	80080ba <_dtoa_r+0x62a>
 8008198:	4ba3      	ldr	r3, [pc, #652]	; (8008428 <_dtoa_r+0x998>)
 800819a:	2200      	movs	r2, #0
 800819c:	f7f8 fa44 	bl	8000628 <__aeabi_dmul>
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4606      	mov	r6, r0
 80081a6:	460f      	mov	r7, r1
 80081a8:	f7f8 fca6 	bl	8000af8 <__aeabi_dcmpeq>
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d09e      	beq.n	80080ee <_dtoa_r+0x65e>
 80081b0:	e7d0      	b.n	8008154 <_dtoa_r+0x6c4>
 80081b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80081b4:	2a00      	cmp	r2, #0
 80081b6:	f000 80ca 	beq.w	800834e <_dtoa_r+0x8be>
 80081ba:	9a07      	ldr	r2, [sp, #28]
 80081bc:	2a01      	cmp	r2, #1
 80081be:	f300 80ad 	bgt.w	800831c <_dtoa_r+0x88c>
 80081c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081c4:	2a00      	cmp	r2, #0
 80081c6:	f000 80a5 	beq.w	8008314 <_dtoa_r+0x884>
 80081ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80081ce:	9e08      	ldr	r6, [sp, #32]
 80081d0:	9d05      	ldr	r5, [sp, #20]
 80081d2:	9a05      	ldr	r2, [sp, #20]
 80081d4:	441a      	add	r2, r3
 80081d6:	9205      	str	r2, [sp, #20]
 80081d8:	9a06      	ldr	r2, [sp, #24]
 80081da:	2101      	movs	r1, #1
 80081dc:	441a      	add	r2, r3
 80081de:	4620      	mov	r0, r4
 80081e0:	9206      	str	r2, [sp, #24]
 80081e2:	f000 fc9f 	bl	8008b24 <__i2b>
 80081e6:	4607      	mov	r7, r0
 80081e8:	b165      	cbz	r5, 8008204 <_dtoa_r+0x774>
 80081ea:	9b06      	ldr	r3, [sp, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	dd09      	ble.n	8008204 <_dtoa_r+0x774>
 80081f0:	42ab      	cmp	r3, r5
 80081f2:	9a05      	ldr	r2, [sp, #20]
 80081f4:	bfa8      	it	ge
 80081f6:	462b      	movge	r3, r5
 80081f8:	1ad2      	subs	r2, r2, r3
 80081fa:	9205      	str	r2, [sp, #20]
 80081fc:	9a06      	ldr	r2, [sp, #24]
 80081fe:	1aed      	subs	r5, r5, r3
 8008200:	1ad3      	subs	r3, r2, r3
 8008202:	9306      	str	r3, [sp, #24]
 8008204:	9b08      	ldr	r3, [sp, #32]
 8008206:	b1f3      	cbz	r3, 8008246 <_dtoa_r+0x7b6>
 8008208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80a3 	beq.w	8008356 <_dtoa_r+0x8c6>
 8008210:	2e00      	cmp	r6, #0
 8008212:	dd10      	ble.n	8008236 <_dtoa_r+0x7a6>
 8008214:	4639      	mov	r1, r7
 8008216:	4632      	mov	r2, r6
 8008218:	4620      	mov	r0, r4
 800821a:	f000 fd43 	bl	8008ca4 <__pow5mult>
 800821e:	4652      	mov	r2, sl
 8008220:	4601      	mov	r1, r0
 8008222:	4607      	mov	r7, r0
 8008224:	4620      	mov	r0, r4
 8008226:	f000 fc93 	bl	8008b50 <__multiply>
 800822a:	4651      	mov	r1, sl
 800822c:	4680      	mov	r8, r0
 800822e:	4620      	mov	r0, r4
 8008230:	f000 fbc2 	bl	80089b8 <_Bfree>
 8008234:	46c2      	mov	sl, r8
 8008236:	9b08      	ldr	r3, [sp, #32]
 8008238:	1b9a      	subs	r2, r3, r6
 800823a:	d004      	beq.n	8008246 <_dtoa_r+0x7b6>
 800823c:	4651      	mov	r1, sl
 800823e:	4620      	mov	r0, r4
 8008240:	f000 fd30 	bl	8008ca4 <__pow5mult>
 8008244:	4682      	mov	sl, r0
 8008246:	2101      	movs	r1, #1
 8008248:	4620      	mov	r0, r4
 800824a:	f000 fc6b 	bl	8008b24 <__i2b>
 800824e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008250:	2b00      	cmp	r3, #0
 8008252:	4606      	mov	r6, r0
 8008254:	f340 8081 	ble.w	800835a <_dtoa_r+0x8ca>
 8008258:	461a      	mov	r2, r3
 800825a:	4601      	mov	r1, r0
 800825c:	4620      	mov	r0, r4
 800825e:	f000 fd21 	bl	8008ca4 <__pow5mult>
 8008262:	9b07      	ldr	r3, [sp, #28]
 8008264:	2b01      	cmp	r3, #1
 8008266:	4606      	mov	r6, r0
 8008268:	dd7a      	ble.n	8008360 <_dtoa_r+0x8d0>
 800826a:	f04f 0800 	mov.w	r8, #0
 800826e:	6933      	ldr	r3, [r6, #16]
 8008270:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008274:	6918      	ldr	r0, [r3, #16]
 8008276:	f000 fc07 	bl	8008a88 <__hi0bits>
 800827a:	f1c0 0020 	rsb	r0, r0, #32
 800827e:	9b06      	ldr	r3, [sp, #24]
 8008280:	4418      	add	r0, r3
 8008282:	f010 001f 	ands.w	r0, r0, #31
 8008286:	f000 8094 	beq.w	80083b2 <_dtoa_r+0x922>
 800828a:	f1c0 0320 	rsb	r3, r0, #32
 800828e:	2b04      	cmp	r3, #4
 8008290:	f340 8085 	ble.w	800839e <_dtoa_r+0x90e>
 8008294:	9b05      	ldr	r3, [sp, #20]
 8008296:	f1c0 001c 	rsb	r0, r0, #28
 800829a:	4403      	add	r3, r0
 800829c:	9305      	str	r3, [sp, #20]
 800829e:	9b06      	ldr	r3, [sp, #24]
 80082a0:	4403      	add	r3, r0
 80082a2:	4405      	add	r5, r0
 80082a4:	9306      	str	r3, [sp, #24]
 80082a6:	9b05      	ldr	r3, [sp, #20]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dd05      	ble.n	80082b8 <_dtoa_r+0x828>
 80082ac:	4651      	mov	r1, sl
 80082ae:	461a      	mov	r2, r3
 80082b0:	4620      	mov	r0, r4
 80082b2:	f000 fd51 	bl	8008d58 <__lshift>
 80082b6:	4682      	mov	sl, r0
 80082b8:	9b06      	ldr	r3, [sp, #24]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dd05      	ble.n	80082ca <_dtoa_r+0x83a>
 80082be:	4631      	mov	r1, r6
 80082c0:	461a      	mov	r2, r3
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 fd48 	bl	8008d58 <__lshift>
 80082c8:	4606      	mov	r6, r0
 80082ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d072      	beq.n	80083b6 <_dtoa_r+0x926>
 80082d0:	4631      	mov	r1, r6
 80082d2:	4650      	mov	r0, sl
 80082d4:	f000 fdac 	bl	8008e30 <__mcmp>
 80082d8:	2800      	cmp	r0, #0
 80082da:	da6c      	bge.n	80083b6 <_dtoa_r+0x926>
 80082dc:	2300      	movs	r3, #0
 80082de:	4651      	mov	r1, sl
 80082e0:	220a      	movs	r2, #10
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fb8a 	bl	80089fc <__multadd>
 80082e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80082ee:	4682      	mov	sl, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 81b0 	beq.w	8008656 <_dtoa_r+0xbc6>
 80082f6:	2300      	movs	r3, #0
 80082f8:	4639      	mov	r1, r7
 80082fa:	220a      	movs	r2, #10
 80082fc:	4620      	mov	r0, r4
 80082fe:	f000 fb7d 	bl	80089fc <__multadd>
 8008302:	9b01      	ldr	r3, [sp, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	4607      	mov	r7, r0
 8008308:	f300 8096 	bgt.w	8008438 <_dtoa_r+0x9a8>
 800830c:	9b07      	ldr	r3, [sp, #28]
 800830e:	2b02      	cmp	r3, #2
 8008310:	dc59      	bgt.n	80083c6 <_dtoa_r+0x936>
 8008312:	e091      	b.n	8008438 <_dtoa_r+0x9a8>
 8008314:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008316:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800831a:	e758      	b.n	80081ce <_dtoa_r+0x73e>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	1e5e      	subs	r6, r3, #1
 8008320:	9b08      	ldr	r3, [sp, #32]
 8008322:	42b3      	cmp	r3, r6
 8008324:	bfbf      	itttt	lt
 8008326:	9b08      	ldrlt	r3, [sp, #32]
 8008328:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800832a:	9608      	strlt	r6, [sp, #32]
 800832c:	1af3      	sublt	r3, r6, r3
 800832e:	bfb4      	ite	lt
 8008330:	18d2      	addlt	r2, r2, r3
 8008332:	1b9e      	subge	r6, r3, r6
 8008334:	9b04      	ldr	r3, [sp, #16]
 8008336:	bfbc      	itt	lt
 8008338:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800833a:	2600      	movlt	r6, #0
 800833c:	2b00      	cmp	r3, #0
 800833e:	bfb7      	itett	lt
 8008340:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008344:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008348:	1a9d      	sublt	r5, r3, r2
 800834a:	2300      	movlt	r3, #0
 800834c:	e741      	b.n	80081d2 <_dtoa_r+0x742>
 800834e:	9e08      	ldr	r6, [sp, #32]
 8008350:	9d05      	ldr	r5, [sp, #20]
 8008352:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008354:	e748      	b.n	80081e8 <_dtoa_r+0x758>
 8008356:	9a08      	ldr	r2, [sp, #32]
 8008358:	e770      	b.n	800823c <_dtoa_r+0x7ac>
 800835a:	9b07      	ldr	r3, [sp, #28]
 800835c:	2b01      	cmp	r3, #1
 800835e:	dc19      	bgt.n	8008394 <_dtoa_r+0x904>
 8008360:	9b02      	ldr	r3, [sp, #8]
 8008362:	b9bb      	cbnz	r3, 8008394 <_dtoa_r+0x904>
 8008364:	9b03      	ldr	r3, [sp, #12]
 8008366:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800836a:	b99b      	cbnz	r3, 8008394 <_dtoa_r+0x904>
 800836c:	9b03      	ldr	r3, [sp, #12]
 800836e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008372:	0d1b      	lsrs	r3, r3, #20
 8008374:	051b      	lsls	r3, r3, #20
 8008376:	b183      	cbz	r3, 800839a <_dtoa_r+0x90a>
 8008378:	9b05      	ldr	r3, [sp, #20]
 800837a:	3301      	adds	r3, #1
 800837c:	9305      	str	r3, [sp, #20]
 800837e:	9b06      	ldr	r3, [sp, #24]
 8008380:	3301      	adds	r3, #1
 8008382:	9306      	str	r3, [sp, #24]
 8008384:	f04f 0801 	mov.w	r8, #1
 8008388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800838a:	2b00      	cmp	r3, #0
 800838c:	f47f af6f 	bne.w	800826e <_dtoa_r+0x7de>
 8008390:	2001      	movs	r0, #1
 8008392:	e774      	b.n	800827e <_dtoa_r+0x7ee>
 8008394:	f04f 0800 	mov.w	r8, #0
 8008398:	e7f6      	b.n	8008388 <_dtoa_r+0x8f8>
 800839a:	4698      	mov	r8, r3
 800839c:	e7f4      	b.n	8008388 <_dtoa_r+0x8f8>
 800839e:	d082      	beq.n	80082a6 <_dtoa_r+0x816>
 80083a0:	9a05      	ldr	r2, [sp, #20]
 80083a2:	331c      	adds	r3, #28
 80083a4:	441a      	add	r2, r3
 80083a6:	9205      	str	r2, [sp, #20]
 80083a8:	9a06      	ldr	r2, [sp, #24]
 80083aa:	441a      	add	r2, r3
 80083ac:	441d      	add	r5, r3
 80083ae:	9206      	str	r2, [sp, #24]
 80083b0:	e779      	b.n	80082a6 <_dtoa_r+0x816>
 80083b2:	4603      	mov	r3, r0
 80083b4:	e7f4      	b.n	80083a0 <_dtoa_r+0x910>
 80083b6:	9b04      	ldr	r3, [sp, #16]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	dc37      	bgt.n	800842c <_dtoa_r+0x99c>
 80083bc:	9b07      	ldr	r3, [sp, #28]
 80083be:	2b02      	cmp	r3, #2
 80083c0:	dd34      	ble.n	800842c <_dtoa_r+0x99c>
 80083c2:	9b04      	ldr	r3, [sp, #16]
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	9b01      	ldr	r3, [sp, #4]
 80083c8:	b963      	cbnz	r3, 80083e4 <_dtoa_r+0x954>
 80083ca:	4631      	mov	r1, r6
 80083cc:	2205      	movs	r2, #5
 80083ce:	4620      	mov	r0, r4
 80083d0:	f000 fb14 	bl	80089fc <__multadd>
 80083d4:	4601      	mov	r1, r0
 80083d6:	4606      	mov	r6, r0
 80083d8:	4650      	mov	r0, sl
 80083da:	f000 fd29 	bl	8008e30 <__mcmp>
 80083de:	2800      	cmp	r0, #0
 80083e0:	f73f adbb 	bgt.w	8007f5a <_dtoa_r+0x4ca>
 80083e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083e6:	9d00      	ldr	r5, [sp, #0]
 80083e8:	ea6f 0b03 	mvn.w	fp, r3
 80083ec:	f04f 0800 	mov.w	r8, #0
 80083f0:	4631      	mov	r1, r6
 80083f2:	4620      	mov	r0, r4
 80083f4:	f000 fae0 	bl	80089b8 <_Bfree>
 80083f8:	2f00      	cmp	r7, #0
 80083fa:	f43f aeab 	beq.w	8008154 <_dtoa_r+0x6c4>
 80083fe:	f1b8 0f00 	cmp.w	r8, #0
 8008402:	d005      	beq.n	8008410 <_dtoa_r+0x980>
 8008404:	45b8      	cmp	r8, r7
 8008406:	d003      	beq.n	8008410 <_dtoa_r+0x980>
 8008408:	4641      	mov	r1, r8
 800840a:	4620      	mov	r0, r4
 800840c:	f000 fad4 	bl	80089b8 <_Bfree>
 8008410:	4639      	mov	r1, r7
 8008412:	4620      	mov	r0, r4
 8008414:	f000 fad0 	bl	80089b8 <_Bfree>
 8008418:	e69c      	b.n	8008154 <_dtoa_r+0x6c4>
 800841a:	2600      	movs	r6, #0
 800841c:	4637      	mov	r7, r6
 800841e:	e7e1      	b.n	80083e4 <_dtoa_r+0x954>
 8008420:	46bb      	mov	fp, r7
 8008422:	4637      	mov	r7, r6
 8008424:	e599      	b.n	8007f5a <_dtoa_r+0x4ca>
 8008426:	bf00      	nop
 8008428:	40240000 	.word	0x40240000
 800842c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800842e:	2b00      	cmp	r3, #0
 8008430:	f000 80c8 	beq.w	80085c4 <_dtoa_r+0xb34>
 8008434:	9b04      	ldr	r3, [sp, #16]
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	2d00      	cmp	r5, #0
 800843a:	dd05      	ble.n	8008448 <_dtoa_r+0x9b8>
 800843c:	4639      	mov	r1, r7
 800843e:	462a      	mov	r2, r5
 8008440:	4620      	mov	r0, r4
 8008442:	f000 fc89 	bl	8008d58 <__lshift>
 8008446:	4607      	mov	r7, r0
 8008448:	f1b8 0f00 	cmp.w	r8, #0
 800844c:	d05b      	beq.n	8008506 <_dtoa_r+0xa76>
 800844e:	6879      	ldr	r1, [r7, #4]
 8008450:	4620      	mov	r0, r4
 8008452:	f000 fa71 	bl	8008938 <_Balloc>
 8008456:	4605      	mov	r5, r0
 8008458:	b928      	cbnz	r0, 8008466 <_dtoa_r+0x9d6>
 800845a:	4b83      	ldr	r3, [pc, #524]	; (8008668 <_dtoa_r+0xbd8>)
 800845c:	4602      	mov	r2, r0
 800845e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008462:	f7ff bb2e 	b.w	8007ac2 <_dtoa_r+0x32>
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	3202      	adds	r2, #2
 800846a:	0092      	lsls	r2, r2, #2
 800846c:	f107 010c 	add.w	r1, r7, #12
 8008470:	300c      	adds	r0, #12
 8008472:	f7ff fa74 	bl	800795e <memcpy>
 8008476:	2201      	movs	r2, #1
 8008478:	4629      	mov	r1, r5
 800847a:	4620      	mov	r0, r4
 800847c:	f000 fc6c 	bl	8008d58 <__lshift>
 8008480:	9b00      	ldr	r3, [sp, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	9304      	str	r3, [sp, #16]
 8008486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800848a:	4413      	add	r3, r2
 800848c:	9308      	str	r3, [sp, #32]
 800848e:	9b02      	ldr	r3, [sp, #8]
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	46b8      	mov	r8, r7
 8008496:	9306      	str	r3, [sp, #24]
 8008498:	4607      	mov	r7, r0
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	4631      	mov	r1, r6
 800849e:	3b01      	subs	r3, #1
 80084a0:	4650      	mov	r0, sl
 80084a2:	9301      	str	r3, [sp, #4]
 80084a4:	f7ff fa69 	bl	800797a <quorem>
 80084a8:	4641      	mov	r1, r8
 80084aa:	9002      	str	r0, [sp, #8]
 80084ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80084b0:	4650      	mov	r0, sl
 80084b2:	f000 fcbd 	bl	8008e30 <__mcmp>
 80084b6:	463a      	mov	r2, r7
 80084b8:	9005      	str	r0, [sp, #20]
 80084ba:	4631      	mov	r1, r6
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 fcd3 	bl	8008e68 <__mdiff>
 80084c2:	68c2      	ldr	r2, [r0, #12]
 80084c4:	4605      	mov	r5, r0
 80084c6:	bb02      	cbnz	r2, 800850a <_dtoa_r+0xa7a>
 80084c8:	4601      	mov	r1, r0
 80084ca:	4650      	mov	r0, sl
 80084cc:	f000 fcb0 	bl	8008e30 <__mcmp>
 80084d0:	4602      	mov	r2, r0
 80084d2:	4629      	mov	r1, r5
 80084d4:	4620      	mov	r0, r4
 80084d6:	9209      	str	r2, [sp, #36]	; 0x24
 80084d8:	f000 fa6e 	bl	80089b8 <_Bfree>
 80084dc:	9b07      	ldr	r3, [sp, #28]
 80084de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084e0:	9d04      	ldr	r5, [sp, #16]
 80084e2:	ea43 0102 	orr.w	r1, r3, r2
 80084e6:	9b06      	ldr	r3, [sp, #24]
 80084e8:	4319      	orrs	r1, r3
 80084ea:	d110      	bne.n	800850e <_dtoa_r+0xa7e>
 80084ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084f0:	d029      	beq.n	8008546 <_dtoa_r+0xab6>
 80084f2:	9b05      	ldr	r3, [sp, #20]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	dd02      	ble.n	80084fe <_dtoa_r+0xa6e>
 80084f8:	9b02      	ldr	r3, [sp, #8]
 80084fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80084fe:	9b01      	ldr	r3, [sp, #4]
 8008500:	f883 9000 	strb.w	r9, [r3]
 8008504:	e774      	b.n	80083f0 <_dtoa_r+0x960>
 8008506:	4638      	mov	r0, r7
 8008508:	e7ba      	b.n	8008480 <_dtoa_r+0x9f0>
 800850a:	2201      	movs	r2, #1
 800850c:	e7e1      	b.n	80084d2 <_dtoa_r+0xa42>
 800850e:	9b05      	ldr	r3, [sp, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	db04      	blt.n	800851e <_dtoa_r+0xa8e>
 8008514:	9907      	ldr	r1, [sp, #28]
 8008516:	430b      	orrs	r3, r1
 8008518:	9906      	ldr	r1, [sp, #24]
 800851a:	430b      	orrs	r3, r1
 800851c:	d120      	bne.n	8008560 <_dtoa_r+0xad0>
 800851e:	2a00      	cmp	r2, #0
 8008520:	dded      	ble.n	80084fe <_dtoa_r+0xa6e>
 8008522:	4651      	mov	r1, sl
 8008524:	2201      	movs	r2, #1
 8008526:	4620      	mov	r0, r4
 8008528:	f000 fc16 	bl	8008d58 <__lshift>
 800852c:	4631      	mov	r1, r6
 800852e:	4682      	mov	sl, r0
 8008530:	f000 fc7e 	bl	8008e30 <__mcmp>
 8008534:	2800      	cmp	r0, #0
 8008536:	dc03      	bgt.n	8008540 <_dtoa_r+0xab0>
 8008538:	d1e1      	bne.n	80084fe <_dtoa_r+0xa6e>
 800853a:	f019 0f01 	tst.w	r9, #1
 800853e:	d0de      	beq.n	80084fe <_dtoa_r+0xa6e>
 8008540:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008544:	d1d8      	bne.n	80084f8 <_dtoa_r+0xa68>
 8008546:	9a01      	ldr	r2, [sp, #4]
 8008548:	2339      	movs	r3, #57	; 0x39
 800854a:	7013      	strb	r3, [r2, #0]
 800854c:	462b      	mov	r3, r5
 800854e:	461d      	mov	r5, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008556:	2a39      	cmp	r2, #57	; 0x39
 8008558:	d06c      	beq.n	8008634 <_dtoa_r+0xba4>
 800855a:	3201      	adds	r2, #1
 800855c:	701a      	strb	r2, [r3, #0]
 800855e:	e747      	b.n	80083f0 <_dtoa_r+0x960>
 8008560:	2a00      	cmp	r2, #0
 8008562:	dd07      	ble.n	8008574 <_dtoa_r+0xae4>
 8008564:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008568:	d0ed      	beq.n	8008546 <_dtoa_r+0xab6>
 800856a:	9a01      	ldr	r2, [sp, #4]
 800856c:	f109 0301 	add.w	r3, r9, #1
 8008570:	7013      	strb	r3, [r2, #0]
 8008572:	e73d      	b.n	80083f0 <_dtoa_r+0x960>
 8008574:	9b04      	ldr	r3, [sp, #16]
 8008576:	9a08      	ldr	r2, [sp, #32]
 8008578:	f803 9c01 	strb.w	r9, [r3, #-1]
 800857c:	4293      	cmp	r3, r2
 800857e:	d043      	beq.n	8008608 <_dtoa_r+0xb78>
 8008580:	4651      	mov	r1, sl
 8008582:	2300      	movs	r3, #0
 8008584:	220a      	movs	r2, #10
 8008586:	4620      	mov	r0, r4
 8008588:	f000 fa38 	bl	80089fc <__multadd>
 800858c:	45b8      	cmp	r8, r7
 800858e:	4682      	mov	sl, r0
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	f04f 020a 	mov.w	r2, #10
 8008598:	4641      	mov	r1, r8
 800859a:	4620      	mov	r0, r4
 800859c:	d107      	bne.n	80085ae <_dtoa_r+0xb1e>
 800859e:	f000 fa2d 	bl	80089fc <__multadd>
 80085a2:	4680      	mov	r8, r0
 80085a4:	4607      	mov	r7, r0
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	9304      	str	r3, [sp, #16]
 80085ac:	e775      	b.n	800849a <_dtoa_r+0xa0a>
 80085ae:	f000 fa25 	bl	80089fc <__multadd>
 80085b2:	4639      	mov	r1, r7
 80085b4:	4680      	mov	r8, r0
 80085b6:	2300      	movs	r3, #0
 80085b8:	220a      	movs	r2, #10
 80085ba:	4620      	mov	r0, r4
 80085bc:	f000 fa1e 	bl	80089fc <__multadd>
 80085c0:	4607      	mov	r7, r0
 80085c2:	e7f0      	b.n	80085a6 <_dtoa_r+0xb16>
 80085c4:	9b04      	ldr	r3, [sp, #16]
 80085c6:	9301      	str	r3, [sp, #4]
 80085c8:	9d00      	ldr	r5, [sp, #0]
 80085ca:	4631      	mov	r1, r6
 80085cc:	4650      	mov	r0, sl
 80085ce:	f7ff f9d4 	bl	800797a <quorem>
 80085d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80085d6:	9b00      	ldr	r3, [sp, #0]
 80085d8:	f805 9b01 	strb.w	r9, [r5], #1
 80085dc:	1aea      	subs	r2, r5, r3
 80085de:	9b01      	ldr	r3, [sp, #4]
 80085e0:	4293      	cmp	r3, r2
 80085e2:	dd07      	ble.n	80085f4 <_dtoa_r+0xb64>
 80085e4:	4651      	mov	r1, sl
 80085e6:	2300      	movs	r3, #0
 80085e8:	220a      	movs	r2, #10
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fa06 	bl	80089fc <__multadd>
 80085f0:	4682      	mov	sl, r0
 80085f2:	e7ea      	b.n	80085ca <_dtoa_r+0xb3a>
 80085f4:	9b01      	ldr	r3, [sp, #4]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	bfc8      	it	gt
 80085fa:	461d      	movgt	r5, r3
 80085fc:	9b00      	ldr	r3, [sp, #0]
 80085fe:	bfd8      	it	le
 8008600:	2501      	movle	r5, #1
 8008602:	441d      	add	r5, r3
 8008604:	f04f 0800 	mov.w	r8, #0
 8008608:	4651      	mov	r1, sl
 800860a:	2201      	movs	r2, #1
 800860c:	4620      	mov	r0, r4
 800860e:	f000 fba3 	bl	8008d58 <__lshift>
 8008612:	4631      	mov	r1, r6
 8008614:	4682      	mov	sl, r0
 8008616:	f000 fc0b 	bl	8008e30 <__mcmp>
 800861a:	2800      	cmp	r0, #0
 800861c:	dc96      	bgt.n	800854c <_dtoa_r+0xabc>
 800861e:	d102      	bne.n	8008626 <_dtoa_r+0xb96>
 8008620:	f019 0f01 	tst.w	r9, #1
 8008624:	d192      	bne.n	800854c <_dtoa_r+0xabc>
 8008626:	462b      	mov	r3, r5
 8008628:	461d      	mov	r5, r3
 800862a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800862e:	2a30      	cmp	r2, #48	; 0x30
 8008630:	d0fa      	beq.n	8008628 <_dtoa_r+0xb98>
 8008632:	e6dd      	b.n	80083f0 <_dtoa_r+0x960>
 8008634:	9a00      	ldr	r2, [sp, #0]
 8008636:	429a      	cmp	r2, r3
 8008638:	d189      	bne.n	800854e <_dtoa_r+0xabe>
 800863a:	f10b 0b01 	add.w	fp, fp, #1
 800863e:	2331      	movs	r3, #49	; 0x31
 8008640:	e796      	b.n	8008570 <_dtoa_r+0xae0>
 8008642:	4b0a      	ldr	r3, [pc, #40]	; (800866c <_dtoa_r+0xbdc>)
 8008644:	f7ff ba99 	b.w	8007b7a <_dtoa_r+0xea>
 8008648:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800864a:	2b00      	cmp	r3, #0
 800864c:	f47f aa6d 	bne.w	8007b2a <_dtoa_r+0x9a>
 8008650:	4b07      	ldr	r3, [pc, #28]	; (8008670 <_dtoa_r+0xbe0>)
 8008652:	f7ff ba92 	b.w	8007b7a <_dtoa_r+0xea>
 8008656:	9b01      	ldr	r3, [sp, #4]
 8008658:	2b00      	cmp	r3, #0
 800865a:	dcb5      	bgt.n	80085c8 <_dtoa_r+0xb38>
 800865c:	9b07      	ldr	r3, [sp, #28]
 800865e:	2b02      	cmp	r3, #2
 8008660:	f73f aeb1 	bgt.w	80083c6 <_dtoa_r+0x936>
 8008664:	e7b0      	b.n	80085c8 <_dtoa_r+0xb38>
 8008666:	bf00      	nop
 8008668:	08009b0c 	.word	0x08009b0c
 800866c:	08009a6c 	.word	0x08009a6c
 8008670:	08009a90 	.word	0x08009a90

08008674 <malloc>:
 8008674:	4b02      	ldr	r3, [pc, #8]	; (8008680 <malloc+0xc>)
 8008676:	4601      	mov	r1, r0
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	f000 b823 	b.w	80086c4 <_malloc_r>
 800867e:	bf00      	nop
 8008680:	20000064 	.word	0x20000064

08008684 <sbrk_aligned>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4e0e      	ldr	r6, [pc, #56]	; (80086c0 <sbrk_aligned+0x3c>)
 8008688:	460c      	mov	r4, r1
 800868a:	6831      	ldr	r1, [r6, #0]
 800868c:	4605      	mov	r5, r0
 800868e:	b911      	cbnz	r1, 8008696 <sbrk_aligned+0x12>
 8008690:	f000 fd46 	bl	8009120 <_sbrk_r>
 8008694:	6030      	str	r0, [r6, #0]
 8008696:	4621      	mov	r1, r4
 8008698:	4628      	mov	r0, r5
 800869a:	f000 fd41 	bl	8009120 <_sbrk_r>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d00a      	beq.n	80086b8 <sbrk_aligned+0x34>
 80086a2:	1cc4      	adds	r4, r0, #3
 80086a4:	f024 0403 	bic.w	r4, r4, #3
 80086a8:	42a0      	cmp	r0, r4
 80086aa:	d007      	beq.n	80086bc <sbrk_aligned+0x38>
 80086ac:	1a21      	subs	r1, r4, r0
 80086ae:	4628      	mov	r0, r5
 80086b0:	f000 fd36 	bl	8009120 <_sbrk_r>
 80086b4:	3001      	adds	r0, #1
 80086b6:	d101      	bne.n	80086bc <sbrk_aligned+0x38>
 80086b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086bc:	4620      	mov	r0, r4
 80086be:	bd70      	pop	{r4, r5, r6, pc}
 80086c0:	20000814 	.word	0x20000814

080086c4 <_malloc_r>:
 80086c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086c8:	1ccd      	adds	r5, r1, #3
 80086ca:	f025 0503 	bic.w	r5, r5, #3
 80086ce:	3508      	adds	r5, #8
 80086d0:	2d0c      	cmp	r5, #12
 80086d2:	bf38      	it	cc
 80086d4:	250c      	movcc	r5, #12
 80086d6:	2d00      	cmp	r5, #0
 80086d8:	4607      	mov	r7, r0
 80086da:	db01      	blt.n	80086e0 <_malloc_r+0x1c>
 80086dc:	42a9      	cmp	r1, r5
 80086de:	d905      	bls.n	80086ec <_malloc_r+0x28>
 80086e0:	230c      	movs	r3, #12
 80086e2:	603b      	str	r3, [r7, #0]
 80086e4:	2600      	movs	r6, #0
 80086e6:	4630      	mov	r0, r6
 80086e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80087c0 <_malloc_r+0xfc>
 80086f0:	f000 f916 	bl	8008920 <__malloc_lock>
 80086f4:	f8d8 3000 	ldr.w	r3, [r8]
 80086f8:	461c      	mov	r4, r3
 80086fa:	bb5c      	cbnz	r4, 8008754 <_malloc_r+0x90>
 80086fc:	4629      	mov	r1, r5
 80086fe:	4638      	mov	r0, r7
 8008700:	f7ff ffc0 	bl	8008684 <sbrk_aligned>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	4604      	mov	r4, r0
 8008708:	d155      	bne.n	80087b6 <_malloc_r+0xf2>
 800870a:	f8d8 4000 	ldr.w	r4, [r8]
 800870e:	4626      	mov	r6, r4
 8008710:	2e00      	cmp	r6, #0
 8008712:	d145      	bne.n	80087a0 <_malloc_r+0xdc>
 8008714:	2c00      	cmp	r4, #0
 8008716:	d048      	beq.n	80087aa <_malloc_r+0xe6>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	4631      	mov	r1, r6
 800871c:	4638      	mov	r0, r7
 800871e:	eb04 0903 	add.w	r9, r4, r3
 8008722:	f000 fcfd 	bl	8009120 <_sbrk_r>
 8008726:	4581      	cmp	r9, r0
 8008728:	d13f      	bne.n	80087aa <_malloc_r+0xe6>
 800872a:	6821      	ldr	r1, [r4, #0]
 800872c:	1a6d      	subs	r5, r5, r1
 800872e:	4629      	mov	r1, r5
 8008730:	4638      	mov	r0, r7
 8008732:	f7ff ffa7 	bl	8008684 <sbrk_aligned>
 8008736:	3001      	adds	r0, #1
 8008738:	d037      	beq.n	80087aa <_malloc_r+0xe6>
 800873a:	6823      	ldr	r3, [r4, #0]
 800873c:	442b      	add	r3, r5
 800873e:	6023      	str	r3, [r4, #0]
 8008740:	f8d8 3000 	ldr.w	r3, [r8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d038      	beq.n	80087ba <_malloc_r+0xf6>
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	42a2      	cmp	r2, r4
 800874c:	d12b      	bne.n	80087a6 <_malloc_r+0xe2>
 800874e:	2200      	movs	r2, #0
 8008750:	605a      	str	r2, [r3, #4]
 8008752:	e00f      	b.n	8008774 <_malloc_r+0xb0>
 8008754:	6822      	ldr	r2, [r4, #0]
 8008756:	1b52      	subs	r2, r2, r5
 8008758:	d41f      	bmi.n	800879a <_malloc_r+0xd6>
 800875a:	2a0b      	cmp	r2, #11
 800875c:	d917      	bls.n	800878e <_malloc_r+0xca>
 800875e:	1961      	adds	r1, r4, r5
 8008760:	42a3      	cmp	r3, r4
 8008762:	6025      	str	r5, [r4, #0]
 8008764:	bf18      	it	ne
 8008766:	6059      	strne	r1, [r3, #4]
 8008768:	6863      	ldr	r3, [r4, #4]
 800876a:	bf08      	it	eq
 800876c:	f8c8 1000 	streq.w	r1, [r8]
 8008770:	5162      	str	r2, [r4, r5]
 8008772:	604b      	str	r3, [r1, #4]
 8008774:	4638      	mov	r0, r7
 8008776:	f104 060b 	add.w	r6, r4, #11
 800877a:	f000 f8d7 	bl	800892c <__malloc_unlock>
 800877e:	f026 0607 	bic.w	r6, r6, #7
 8008782:	1d23      	adds	r3, r4, #4
 8008784:	1af2      	subs	r2, r6, r3
 8008786:	d0ae      	beq.n	80086e6 <_malloc_r+0x22>
 8008788:	1b9b      	subs	r3, r3, r6
 800878a:	50a3      	str	r3, [r4, r2]
 800878c:	e7ab      	b.n	80086e6 <_malloc_r+0x22>
 800878e:	42a3      	cmp	r3, r4
 8008790:	6862      	ldr	r2, [r4, #4]
 8008792:	d1dd      	bne.n	8008750 <_malloc_r+0x8c>
 8008794:	f8c8 2000 	str.w	r2, [r8]
 8008798:	e7ec      	b.n	8008774 <_malloc_r+0xb0>
 800879a:	4623      	mov	r3, r4
 800879c:	6864      	ldr	r4, [r4, #4]
 800879e:	e7ac      	b.n	80086fa <_malloc_r+0x36>
 80087a0:	4634      	mov	r4, r6
 80087a2:	6876      	ldr	r6, [r6, #4]
 80087a4:	e7b4      	b.n	8008710 <_malloc_r+0x4c>
 80087a6:	4613      	mov	r3, r2
 80087a8:	e7cc      	b.n	8008744 <_malloc_r+0x80>
 80087aa:	230c      	movs	r3, #12
 80087ac:	603b      	str	r3, [r7, #0]
 80087ae:	4638      	mov	r0, r7
 80087b0:	f000 f8bc 	bl	800892c <__malloc_unlock>
 80087b4:	e797      	b.n	80086e6 <_malloc_r+0x22>
 80087b6:	6025      	str	r5, [r4, #0]
 80087b8:	e7dc      	b.n	8008774 <_malloc_r+0xb0>
 80087ba:	605b      	str	r3, [r3, #4]
 80087bc:	deff      	udf	#255	; 0xff
 80087be:	bf00      	nop
 80087c0:	20000810 	.word	0x20000810

080087c4 <__sflush_r>:
 80087c4:	898a      	ldrh	r2, [r1, #12]
 80087c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ca:	4605      	mov	r5, r0
 80087cc:	0710      	lsls	r0, r2, #28
 80087ce:	460c      	mov	r4, r1
 80087d0:	d458      	bmi.n	8008884 <__sflush_r+0xc0>
 80087d2:	684b      	ldr	r3, [r1, #4]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dc05      	bgt.n	80087e4 <__sflush_r+0x20>
 80087d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dc02      	bgt.n	80087e4 <__sflush_r+0x20>
 80087de:	2000      	movs	r0, #0
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	d0f9      	beq.n	80087de <__sflush_r+0x1a>
 80087ea:	2300      	movs	r3, #0
 80087ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80087f0:	682f      	ldr	r7, [r5, #0]
 80087f2:	6a21      	ldr	r1, [r4, #32]
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	d032      	beq.n	800885e <__sflush_r+0x9a>
 80087f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	075a      	lsls	r2, r3, #29
 80087fe:	d505      	bpl.n	800880c <__sflush_r+0x48>
 8008800:	6863      	ldr	r3, [r4, #4]
 8008802:	1ac0      	subs	r0, r0, r3
 8008804:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008806:	b10b      	cbz	r3, 800880c <__sflush_r+0x48>
 8008808:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800880a:	1ac0      	subs	r0, r0, r3
 800880c:	2300      	movs	r3, #0
 800880e:	4602      	mov	r2, r0
 8008810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008812:	6a21      	ldr	r1, [r4, #32]
 8008814:	4628      	mov	r0, r5
 8008816:	47b0      	blx	r6
 8008818:	1c43      	adds	r3, r0, #1
 800881a:	89a3      	ldrh	r3, [r4, #12]
 800881c:	d106      	bne.n	800882c <__sflush_r+0x68>
 800881e:	6829      	ldr	r1, [r5, #0]
 8008820:	291d      	cmp	r1, #29
 8008822:	d82b      	bhi.n	800887c <__sflush_r+0xb8>
 8008824:	4a29      	ldr	r2, [pc, #164]	; (80088cc <__sflush_r+0x108>)
 8008826:	410a      	asrs	r2, r1
 8008828:	07d6      	lsls	r6, r2, #31
 800882a:	d427      	bmi.n	800887c <__sflush_r+0xb8>
 800882c:	2200      	movs	r2, #0
 800882e:	6062      	str	r2, [r4, #4]
 8008830:	04d9      	lsls	r1, r3, #19
 8008832:	6922      	ldr	r2, [r4, #16]
 8008834:	6022      	str	r2, [r4, #0]
 8008836:	d504      	bpl.n	8008842 <__sflush_r+0x7e>
 8008838:	1c42      	adds	r2, r0, #1
 800883a:	d101      	bne.n	8008840 <__sflush_r+0x7c>
 800883c:	682b      	ldr	r3, [r5, #0]
 800883e:	b903      	cbnz	r3, 8008842 <__sflush_r+0x7e>
 8008840:	6560      	str	r0, [r4, #84]	; 0x54
 8008842:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008844:	602f      	str	r7, [r5, #0]
 8008846:	2900      	cmp	r1, #0
 8008848:	d0c9      	beq.n	80087de <__sflush_r+0x1a>
 800884a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800884e:	4299      	cmp	r1, r3
 8008850:	d002      	beq.n	8008858 <__sflush_r+0x94>
 8008852:	4628      	mov	r0, r5
 8008854:	f000 fcba 	bl	80091cc <_free_r>
 8008858:	2000      	movs	r0, #0
 800885a:	6360      	str	r0, [r4, #52]	; 0x34
 800885c:	e7c0      	b.n	80087e0 <__sflush_r+0x1c>
 800885e:	2301      	movs	r3, #1
 8008860:	4628      	mov	r0, r5
 8008862:	47b0      	blx	r6
 8008864:	1c41      	adds	r1, r0, #1
 8008866:	d1c8      	bne.n	80087fa <__sflush_r+0x36>
 8008868:	682b      	ldr	r3, [r5, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0c5      	beq.n	80087fa <__sflush_r+0x36>
 800886e:	2b1d      	cmp	r3, #29
 8008870:	d001      	beq.n	8008876 <__sflush_r+0xb2>
 8008872:	2b16      	cmp	r3, #22
 8008874:	d101      	bne.n	800887a <__sflush_r+0xb6>
 8008876:	602f      	str	r7, [r5, #0]
 8008878:	e7b1      	b.n	80087de <__sflush_r+0x1a>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008880:	81a3      	strh	r3, [r4, #12]
 8008882:	e7ad      	b.n	80087e0 <__sflush_r+0x1c>
 8008884:	690f      	ldr	r7, [r1, #16]
 8008886:	2f00      	cmp	r7, #0
 8008888:	d0a9      	beq.n	80087de <__sflush_r+0x1a>
 800888a:	0793      	lsls	r3, r2, #30
 800888c:	680e      	ldr	r6, [r1, #0]
 800888e:	bf08      	it	eq
 8008890:	694b      	ldreq	r3, [r1, #20]
 8008892:	600f      	str	r7, [r1, #0]
 8008894:	bf18      	it	ne
 8008896:	2300      	movne	r3, #0
 8008898:	eba6 0807 	sub.w	r8, r6, r7
 800889c:	608b      	str	r3, [r1, #8]
 800889e:	f1b8 0f00 	cmp.w	r8, #0
 80088a2:	dd9c      	ble.n	80087de <__sflush_r+0x1a>
 80088a4:	6a21      	ldr	r1, [r4, #32]
 80088a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80088a8:	4643      	mov	r3, r8
 80088aa:	463a      	mov	r2, r7
 80088ac:	4628      	mov	r0, r5
 80088ae:	47b0      	blx	r6
 80088b0:	2800      	cmp	r0, #0
 80088b2:	dc06      	bgt.n	80088c2 <__sflush_r+0xfe>
 80088b4:	89a3      	ldrh	r3, [r4, #12]
 80088b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088c0:	e78e      	b.n	80087e0 <__sflush_r+0x1c>
 80088c2:	4407      	add	r7, r0
 80088c4:	eba8 0800 	sub.w	r8, r8, r0
 80088c8:	e7e9      	b.n	800889e <__sflush_r+0xda>
 80088ca:	bf00      	nop
 80088cc:	dfbffffe 	.word	0xdfbffffe

080088d0 <_fflush_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	690b      	ldr	r3, [r1, #16]
 80088d4:	4605      	mov	r5, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b913      	cbnz	r3, 80088e0 <_fflush_r+0x10>
 80088da:	2500      	movs	r5, #0
 80088dc:	4628      	mov	r0, r5
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	b118      	cbz	r0, 80088ea <_fflush_r+0x1a>
 80088e2:	6a03      	ldr	r3, [r0, #32]
 80088e4:	b90b      	cbnz	r3, 80088ea <_fflush_r+0x1a>
 80088e6:	f7fe ffcb 	bl	8007880 <__sinit>
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f3      	beq.n	80088da <_fflush_r+0xa>
 80088f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80088f4:	07d0      	lsls	r0, r2, #31
 80088f6:	d404      	bmi.n	8008902 <_fflush_r+0x32>
 80088f8:	0599      	lsls	r1, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_fflush_r+0x32>
 80088fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088fe:	f7ff f82c 	bl	800795a <__retarget_lock_acquire_recursive>
 8008902:	4628      	mov	r0, r5
 8008904:	4621      	mov	r1, r4
 8008906:	f7ff ff5d 	bl	80087c4 <__sflush_r>
 800890a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800890c:	07da      	lsls	r2, r3, #31
 800890e:	4605      	mov	r5, r0
 8008910:	d4e4      	bmi.n	80088dc <_fflush_r+0xc>
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	059b      	lsls	r3, r3, #22
 8008916:	d4e1      	bmi.n	80088dc <_fflush_r+0xc>
 8008918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800891a:	f7ff f81f 	bl	800795c <__retarget_lock_release_recursive>
 800891e:	e7dd      	b.n	80088dc <_fflush_r+0xc>

08008920 <__malloc_lock>:
 8008920:	4801      	ldr	r0, [pc, #4]	; (8008928 <__malloc_lock+0x8>)
 8008922:	f7ff b81a 	b.w	800795a <__retarget_lock_acquire_recursive>
 8008926:	bf00      	nop
 8008928:	2000080c 	.word	0x2000080c

0800892c <__malloc_unlock>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__malloc_unlock+0x8>)
 800892e:	f7ff b815 	b.w	800795c <__retarget_lock_release_recursive>
 8008932:	bf00      	nop
 8008934:	2000080c 	.word	0x2000080c

08008938 <_Balloc>:
 8008938:	b570      	push	{r4, r5, r6, lr}
 800893a:	69c6      	ldr	r6, [r0, #28]
 800893c:	4604      	mov	r4, r0
 800893e:	460d      	mov	r5, r1
 8008940:	b976      	cbnz	r6, 8008960 <_Balloc+0x28>
 8008942:	2010      	movs	r0, #16
 8008944:	f7ff fe96 	bl	8008674 <malloc>
 8008948:	4602      	mov	r2, r0
 800894a:	61e0      	str	r0, [r4, #28]
 800894c:	b920      	cbnz	r0, 8008958 <_Balloc+0x20>
 800894e:	4b18      	ldr	r3, [pc, #96]	; (80089b0 <_Balloc+0x78>)
 8008950:	4818      	ldr	r0, [pc, #96]	; (80089b4 <_Balloc+0x7c>)
 8008952:	216b      	movs	r1, #107	; 0x6b
 8008954:	f000 fc06 	bl	8009164 <__assert_func>
 8008958:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800895c:	6006      	str	r6, [r0, #0]
 800895e:	60c6      	str	r6, [r0, #12]
 8008960:	69e6      	ldr	r6, [r4, #28]
 8008962:	68f3      	ldr	r3, [r6, #12]
 8008964:	b183      	cbz	r3, 8008988 <_Balloc+0x50>
 8008966:	69e3      	ldr	r3, [r4, #28]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800896e:	b9b8      	cbnz	r0, 80089a0 <_Balloc+0x68>
 8008970:	2101      	movs	r1, #1
 8008972:	fa01 f605 	lsl.w	r6, r1, r5
 8008976:	1d72      	adds	r2, r6, #5
 8008978:	0092      	lsls	r2, r2, #2
 800897a:	4620      	mov	r0, r4
 800897c:	f000 fc10 	bl	80091a0 <_calloc_r>
 8008980:	b160      	cbz	r0, 800899c <_Balloc+0x64>
 8008982:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008986:	e00e      	b.n	80089a6 <_Balloc+0x6e>
 8008988:	2221      	movs	r2, #33	; 0x21
 800898a:	2104      	movs	r1, #4
 800898c:	4620      	mov	r0, r4
 800898e:	f000 fc07 	bl	80091a0 <_calloc_r>
 8008992:	69e3      	ldr	r3, [r4, #28]
 8008994:	60f0      	str	r0, [r6, #12]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e4      	bne.n	8008966 <_Balloc+0x2e>
 800899c:	2000      	movs	r0, #0
 800899e:	bd70      	pop	{r4, r5, r6, pc}
 80089a0:	6802      	ldr	r2, [r0, #0]
 80089a2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80089a6:	2300      	movs	r3, #0
 80089a8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80089ac:	e7f7      	b.n	800899e <_Balloc+0x66>
 80089ae:	bf00      	nop
 80089b0:	08009a9d 	.word	0x08009a9d
 80089b4:	08009b1d 	.word	0x08009b1d

080089b8 <_Bfree>:
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	69c6      	ldr	r6, [r0, #28]
 80089bc:	4605      	mov	r5, r0
 80089be:	460c      	mov	r4, r1
 80089c0:	b976      	cbnz	r6, 80089e0 <_Bfree+0x28>
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7ff fe56 	bl	8008674 <malloc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	61e8      	str	r0, [r5, #28]
 80089cc:	b920      	cbnz	r0, 80089d8 <_Bfree+0x20>
 80089ce:	4b09      	ldr	r3, [pc, #36]	; (80089f4 <_Bfree+0x3c>)
 80089d0:	4809      	ldr	r0, [pc, #36]	; (80089f8 <_Bfree+0x40>)
 80089d2:	218f      	movs	r1, #143	; 0x8f
 80089d4:	f000 fbc6 	bl	8009164 <__assert_func>
 80089d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80089dc:	6006      	str	r6, [r0, #0]
 80089de:	60c6      	str	r6, [r0, #12]
 80089e0:	b13c      	cbz	r4, 80089f2 <_Bfree+0x3a>
 80089e2:	69eb      	ldr	r3, [r5, #28]
 80089e4:	6862      	ldr	r2, [r4, #4]
 80089e6:	68db      	ldr	r3, [r3, #12]
 80089e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80089ec:	6021      	str	r1, [r4, #0]
 80089ee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80089f2:	bd70      	pop	{r4, r5, r6, pc}
 80089f4:	08009a9d 	.word	0x08009a9d
 80089f8:	08009b1d 	.word	0x08009b1d

080089fc <__multadd>:
 80089fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	690d      	ldr	r5, [r1, #16]
 8008a02:	4607      	mov	r7, r0
 8008a04:	460c      	mov	r4, r1
 8008a06:	461e      	mov	r6, r3
 8008a08:	f101 0c14 	add.w	ip, r1, #20
 8008a0c:	2000      	movs	r0, #0
 8008a0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008a12:	b299      	uxth	r1, r3
 8008a14:	fb02 6101 	mla	r1, r2, r1, r6
 8008a18:	0c1e      	lsrs	r6, r3, #16
 8008a1a:	0c0b      	lsrs	r3, r1, #16
 8008a1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008a20:	b289      	uxth	r1, r1
 8008a22:	3001      	adds	r0, #1
 8008a24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008a28:	4285      	cmp	r5, r0
 8008a2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008a2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008a32:	dcec      	bgt.n	8008a0e <__multadd+0x12>
 8008a34:	b30e      	cbz	r6, 8008a7a <__multadd+0x7e>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	42ab      	cmp	r3, r5
 8008a3a:	dc19      	bgt.n	8008a70 <__multadd+0x74>
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4638      	mov	r0, r7
 8008a40:	3101      	adds	r1, #1
 8008a42:	f7ff ff79 	bl	8008938 <_Balloc>
 8008a46:	4680      	mov	r8, r0
 8008a48:	b928      	cbnz	r0, 8008a56 <__multadd+0x5a>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	4b0c      	ldr	r3, [pc, #48]	; (8008a80 <__multadd+0x84>)
 8008a4e:	480d      	ldr	r0, [pc, #52]	; (8008a84 <__multadd+0x88>)
 8008a50:	21ba      	movs	r1, #186	; 0xba
 8008a52:	f000 fb87 	bl	8009164 <__assert_func>
 8008a56:	6922      	ldr	r2, [r4, #16]
 8008a58:	3202      	adds	r2, #2
 8008a5a:	f104 010c 	add.w	r1, r4, #12
 8008a5e:	0092      	lsls	r2, r2, #2
 8008a60:	300c      	adds	r0, #12
 8008a62:	f7fe ff7c 	bl	800795e <memcpy>
 8008a66:	4621      	mov	r1, r4
 8008a68:	4638      	mov	r0, r7
 8008a6a:	f7ff ffa5 	bl	80089b8 <_Bfree>
 8008a6e:	4644      	mov	r4, r8
 8008a70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008a74:	3501      	adds	r5, #1
 8008a76:	615e      	str	r6, [r3, #20]
 8008a78:	6125      	str	r5, [r4, #16]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a80:	08009b0c 	.word	0x08009b0c
 8008a84:	08009b1d 	.word	0x08009b1d

08008a88 <__hi0bits>:
 8008a88:	0c03      	lsrs	r3, r0, #16
 8008a8a:	041b      	lsls	r3, r3, #16
 8008a8c:	b9d3      	cbnz	r3, 8008ac4 <__hi0bits+0x3c>
 8008a8e:	0400      	lsls	r0, r0, #16
 8008a90:	2310      	movs	r3, #16
 8008a92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a96:	bf04      	itt	eq
 8008a98:	0200      	lsleq	r0, r0, #8
 8008a9a:	3308      	addeq	r3, #8
 8008a9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008aa0:	bf04      	itt	eq
 8008aa2:	0100      	lsleq	r0, r0, #4
 8008aa4:	3304      	addeq	r3, #4
 8008aa6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008aaa:	bf04      	itt	eq
 8008aac:	0080      	lsleq	r0, r0, #2
 8008aae:	3302      	addeq	r3, #2
 8008ab0:	2800      	cmp	r0, #0
 8008ab2:	db05      	blt.n	8008ac0 <__hi0bits+0x38>
 8008ab4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008ab8:	f103 0301 	add.w	r3, r3, #1
 8008abc:	bf08      	it	eq
 8008abe:	2320      	moveq	r3, #32
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	4770      	bx	lr
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	e7e4      	b.n	8008a92 <__hi0bits+0xa>

08008ac8 <__lo0bits>:
 8008ac8:	6803      	ldr	r3, [r0, #0]
 8008aca:	f013 0207 	ands.w	r2, r3, #7
 8008ace:	d00c      	beq.n	8008aea <__lo0bits+0x22>
 8008ad0:	07d9      	lsls	r1, r3, #31
 8008ad2:	d422      	bmi.n	8008b1a <__lo0bits+0x52>
 8008ad4:	079a      	lsls	r2, r3, #30
 8008ad6:	bf49      	itett	mi
 8008ad8:	085b      	lsrmi	r3, r3, #1
 8008ada:	089b      	lsrpl	r3, r3, #2
 8008adc:	6003      	strmi	r3, [r0, #0]
 8008ade:	2201      	movmi	r2, #1
 8008ae0:	bf5c      	itt	pl
 8008ae2:	6003      	strpl	r3, [r0, #0]
 8008ae4:	2202      	movpl	r2, #2
 8008ae6:	4610      	mov	r0, r2
 8008ae8:	4770      	bx	lr
 8008aea:	b299      	uxth	r1, r3
 8008aec:	b909      	cbnz	r1, 8008af2 <__lo0bits+0x2a>
 8008aee:	0c1b      	lsrs	r3, r3, #16
 8008af0:	2210      	movs	r2, #16
 8008af2:	b2d9      	uxtb	r1, r3
 8008af4:	b909      	cbnz	r1, 8008afa <__lo0bits+0x32>
 8008af6:	3208      	adds	r2, #8
 8008af8:	0a1b      	lsrs	r3, r3, #8
 8008afa:	0719      	lsls	r1, r3, #28
 8008afc:	bf04      	itt	eq
 8008afe:	091b      	lsreq	r3, r3, #4
 8008b00:	3204      	addeq	r2, #4
 8008b02:	0799      	lsls	r1, r3, #30
 8008b04:	bf04      	itt	eq
 8008b06:	089b      	lsreq	r3, r3, #2
 8008b08:	3202      	addeq	r2, #2
 8008b0a:	07d9      	lsls	r1, r3, #31
 8008b0c:	d403      	bmi.n	8008b16 <__lo0bits+0x4e>
 8008b0e:	085b      	lsrs	r3, r3, #1
 8008b10:	f102 0201 	add.w	r2, r2, #1
 8008b14:	d003      	beq.n	8008b1e <__lo0bits+0x56>
 8008b16:	6003      	str	r3, [r0, #0]
 8008b18:	e7e5      	b.n	8008ae6 <__lo0bits+0x1e>
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	e7e3      	b.n	8008ae6 <__lo0bits+0x1e>
 8008b1e:	2220      	movs	r2, #32
 8008b20:	e7e1      	b.n	8008ae6 <__lo0bits+0x1e>
	...

08008b24 <__i2b>:
 8008b24:	b510      	push	{r4, lr}
 8008b26:	460c      	mov	r4, r1
 8008b28:	2101      	movs	r1, #1
 8008b2a:	f7ff ff05 	bl	8008938 <_Balloc>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	b928      	cbnz	r0, 8008b3e <__i2b+0x1a>
 8008b32:	4b05      	ldr	r3, [pc, #20]	; (8008b48 <__i2b+0x24>)
 8008b34:	4805      	ldr	r0, [pc, #20]	; (8008b4c <__i2b+0x28>)
 8008b36:	f240 1145 	movw	r1, #325	; 0x145
 8008b3a:	f000 fb13 	bl	8009164 <__assert_func>
 8008b3e:	2301      	movs	r3, #1
 8008b40:	6144      	str	r4, [r0, #20]
 8008b42:	6103      	str	r3, [r0, #16]
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	bf00      	nop
 8008b48:	08009b0c 	.word	0x08009b0c
 8008b4c:	08009b1d 	.word	0x08009b1d

08008b50 <__multiply>:
 8008b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b54:	4691      	mov	r9, r2
 8008b56:	690a      	ldr	r2, [r1, #16]
 8008b58:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	bfb8      	it	lt
 8008b60:	460b      	movlt	r3, r1
 8008b62:	460c      	mov	r4, r1
 8008b64:	bfbc      	itt	lt
 8008b66:	464c      	movlt	r4, r9
 8008b68:	4699      	movlt	r9, r3
 8008b6a:	6927      	ldr	r7, [r4, #16]
 8008b6c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008b70:	68a3      	ldr	r3, [r4, #8]
 8008b72:	6861      	ldr	r1, [r4, #4]
 8008b74:	eb07 060a 	add.w	r6, r7, sl
 8008b78:	42b3      	cmp	r3, r6
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	bfb8      	it	lt
 8008b7e:	3101      	addlt	r1, #1
 8008b80:	f7ff feda 	bl	8008938 <_Balloc>
 8008b84:	b930      	cbnz	r0, 8008b94 <__multiply+0x44>
 8008b86:	4602      	mov	r2, r0
 8008b88:	4b44      	ldr	r3, [pc, #272]	; (8008c9c <__multiply+0x14c>)
 8008b8a:	4845      	ldr	r0, [pc, #276]	; (8008ca0 <__multiply+0x150>)
 8008b8c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b90:	f000 fae8 	bl	8009164 <__assert_func>
 8008b94:	f100 0514 	add.w	r5, r0, #20
 8008b98:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b9c:	462b      	mov	r3, r5
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	4543      	cmp	r3, r8
 8008ba2:	d321      	bcc.n	8008be8 <__multiply+0x98>
 8008ba4:	f104 0314 	add.w	r3, r4, #20
 8008ba8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008bac:	f109 0314 	add.w	r3, r9, #20
 8008bb0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008bb4:	9202      	str	r2, [sp, #8]
 8008bb6:	1b3a      	subs	r2, r7, r4
 8008bb8:	3a15      	subs	r2, #21
 8008bba:	f022 0203 	bic.w	r2, r2, #3
 8008bbe:	3204      	adds	r2, #4
 8008bc0:	f104 0115 	add.w	r1, r4, #21
 8008bc4:	428f      	cmp	r7, r1
 8008bc6:	bf38      	it	cc
 8008bc8:	2204      	movcc	r2, #4
 8008bca:	9201      	str	r2, [sp, #4]
 8008bcc:	9a02      	ldr	r2, [sp, #8]
 8008bce:	9303      	str	r3, [sp, #12]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d80c      	bhi.n	8008bee <__multiply+0x9e>
 8008bd4:	2e00      	cmp	r6, #0
 8008bd6:	dd03      	ble.n	8008be0 <__multiply+0x90>
 8008bd8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d05b      	beq.n	8008c98 <__multiply+0x148>
 8008be0:	6106      	str	r6, [r0, #16]
 8008be2:	b005      	add	sp, #20
 8008be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008be8:	f843 2b04 	str.w	r2, [r3], #4
 8008bec:	e7d8      	b.n	8008ba0 <__multiply+0x50>
 8008bee:	f8b3 a000 	ldrh.w	sl, [r3]
 8008bf2:	f1ba 0f00 	cmp.w	sl, #0
 8008bf6:	d024      	beq.n	8008c42 <__multiply+0xf2>
 8008bf8:	f104 0e14 	add.w	lr, r4, #20
 8008bfc:	46a9      	mov	r9, r5
 8008bfe:	f04f 0c00 	mov.w	ip, #0
 8008c02:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008c06:	f8d9 1000 	ldr.w	r1, [r9]
 8008c0a:	fa1f fb82 	uxth.w	fp, r2
 8008c0e:	b289      	uxth	r1, r1
 8008c10:	fb0a 110b 	mla	r1, sl, fp, r1
 8008c14:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008c18:	f8d9 2000 	ldr.w	r2, [r9]
 8008c1c:	4461      	add	r1, ip
 8008c1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c22:	fb0a c20b 	mla	r2, sl, fp, ip
 8008c26:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008c2a:	b289      	uxth	r1, r1
 8008c2c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c30:	4577      	cmp	r7, lr
 8008c32:	f849 1b04 	str.w	r1, [r9], #4
 8008c36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008c3a:	d8e2      	bhi.n	8008c02 <__multiply+0xb2>
 8008c3c:	9a01      	ldr	r2, [sp, #4]
 8008c3e:	f845 c002 	str.w	ip, [r5, r2]
 8008c42:	9a03      	ldr	r2, [sp, #12]
 8008c44:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008c48:	3304      	adds	r3, #4
 8008c4a:	f1b9 0f00 	cmp.w	r9, #0
 8008c4e:	d021      	beq.n	8008c94 <__multiply+0x144>
 8008c50:	6829      	ldr	r1, [r5, #0]
 8008c52:	f104 0c14 	add.w	ip, r4, #20
 8008c56:	46ae      	mov	lr, r5
 8008c58:	f04f 0a00 	mov.w	sl, #0
 8008c5c:	f8bc b000 	ldrh.w	fp, [ip]
 8008c60:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008c64:	fb09 220b 	mla	r2, r9, fp, r2
 8008c68:	4452      	add	r2, sl
 8008c6a:	b289      	uxth	r1, r1
 8008c6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008c70:	f84e 1b04 	str.w	r1, [lr], #4
 8008c74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008c78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c7c:	f8be 1000 	ldrh.w	r1, [lr]
 8008c80:	fb09 110a 	mla	r1, r9, sl, r1
 8008c84:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008c88:	4567      	cmp	r7, ip
 8008c8a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008c8e:	d8e5      	bhi.n	8008c5c <__multiply+0x10c>
 8008c90:	9a01      	ldr	r2, [sp, #4]
 8008c92:	50a9      	str	r1, [r5, r2]
 8008c94:	3504      	adds	r5, #4
 8008c96:	e799      	b.n	8008bcc <__multiply+0x7c>
 8008c98:	3e01      	subs	r6, #1
 8008c9a:	e79b      	b.n	8008bd4 <__multiply+0x84>
 8008c9c:	08009b0c 	.word	0x08009b0c
 8008ca0:	08009b1d 	.word	0x08009b1d

08008ca4 <__pow5mult>:
 8008ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ca8:	4615      	mov	r5, r2
 8008caa:	f012 0203 	ands.w	r2, r2, #3
 8008cae:	4606      	mov	r6, r0
 8008cb0:	460f      	mov	r7, r1
 8008cb2:	d007      	beq.n	8008cc4 <__pow5mult+0x20>
 8008cb4:	4c25      	ldr	r4, [pc, #148]	; (8008d4c <__pow5mult+0xa8>)
 8008cb6:	3a01      	subs	r2, #1
 8008cb8:	2300      	movs	r3, #0
 8008cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008cbe:	f7ff fe9d 	bl	80089fc <__multadd>
 8008cc2:	4607      	mov	r7, r0
 8008cc4:	10ad      	asrs	r5, r5, #2
 8008cc6:	d03d      	beq.n	8008d44 <__pow5mult+0xa0>
 8008cc8:	69f4      	ldr	r4, [r6, #28]
 8008cca:	b97c      	cbnz	r4, 8008cec <__pow5mult+0x48>
 8008ccc:	2010      	movs	r0, #16
 8008cce:	f7ff fcd1 	bl	8008674 <malloc>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	61f0      	str	r0, [r6, #28]
 8008cd6:	b928      	cbnz	r0, 8008ce4 <__pow5mult+0x40>
 8008cd8:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <__pow5mult+0xac>)
 8008cda:	481e      	ldr	r0, [pc, #120]	; (8008d54 <__pow5mult+0xb0>)
 8008cdc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008ce0:	f000 fa40 	bl	8009164 <__assert_func>
 8008ce4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ce8:	6004      	str	r4, [r0, #0]
 8008cea:	60c4      	str	r4, [r0, #12]
 8008cec:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008cf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008cf4:	b94c      	cbnz	r4, 8008d0a <__pow5mult+0x66>
 8008cf6:	f240 2171 	movw	r1, #625	; 0x271
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	f7ff ff12 	bl	8008b24 <__i2b>
 8008d00:	2300      	movs	r3, #0
 8008d02:	f8c8 0008 	str.w	r0, [r8, #8]
 8008d06:	4604      	mov	r4, r0
 8008d08:	6003      	str	r3, [r0, #0]
 8008d0a:	f04f 0900 	mov.w	r9, #0
 8008d0e:	07eb      	lsls	r3, r5, #31
 8008d10:	d50a      	bpl.n	8008d28 <__pow5mult+0x84>
 8008d12:	4639      	mov	r1, r7
 8008d14:	4622      	mov	r2, r4
 8008d16:	4630      	mov	r0, r6
 8008d18:	f7ff ff1a 	bl	8008b50 <__multiply>
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4680      	mov	r8, r0
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7ff fe49 	bl	80089b8 <_Bfree>
 8008d26:	4647      	mov	r7, r8
 8008d28:	106d      	asrs	r5, r5, #1
 8008d2a:	d00b      	beq.n	8008d44 <__pow5mult+0xa0>
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	b938      	cbnz	r0, 8008d40 <__pow5mult+0x9c>
 8008d30:	4622      	mov	r2, r4
 8008d32:	4621      	mov	r1, r4
 8008d34:	4630      	mov	r0, r6
 8008d36:	f7ff ff0b 	bl	8008b50 <__multiply>
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	f8c0 9000 	str.w	r9, [r0]
 8008d40:	4604      	mov	r4, r0
 8008d42:	e7e4      	b.n	8008d0e <__pow5mult+0x6a>
 8008d44:	4638      	mov	r0, r7
 8008d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d4a:	bf00      	nop
 8008d4c:	08009c68 	.word	0x08009c68
 8008d50:	08009a9d 	.word	0x08009a9d
 8008d54:	08009b1d 	.word	0x08009b1d

08008d58 <__lshift>:
 8008d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	6849      	ldr	r1, [r1, #4]
 8008d60:	6923      	ldr	r3, [r4, #16]
 8008d62:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008d66:	68a3      	ldr	r3, [r4, #8]
 8008d68:	4607      	mov	r7, r0
 8008d6a:	4691      	mov	r9, r2
 8008d6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008d70:	f108 0601 	add.w	r6, r8, #1
 8008d74:	42b3      	cmp	r3, r6
 8008d76:	db0b      	blt.n	8008d90 <__lshift+0x38>
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff fddd 	bl	8008938 <_Balloc>
 8008d7e:	4605      	mov	r5, r0
 8008d80:	b948      	cbnz	r0, 8008d96 <__lshift+0x3e>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4b28      	ldr	r3, [pc, #160]	; (8008e28 <__lshift+0xd0>)
 8008d86:	4829      	ldr	r0, [pc, #164]	; (8008e2c <__lshift+0xd4>)
 8008d88:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008d8c:	f000 f9ea 	bl	8009164 <__assert_func>
 8008d90:	3101      	adds	r1, #1
 8008d92:	005b      	lsls	r3, r3, #1
 8008d94:	e7ee      	b.n	8008d74 <__lshift+0x1c>
 8008d96:	2300      	movs	r3, #0
 8008d98:	f100 0114 	add.w	r1, r0, #20
 8008d9c:	f100 0210 	add.w	r2, r0, #16
 8008da0:	4618      	mov	r0, r3
 8008da2:	4553      	cmp	r3, sl
 8008da4:	db33      	blt.n	8008e0e <__lshift+0xb6>
 8008da6:	6920      	ldr	r0, [r4, #16]
 8008da8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008dac:	f104 0314 	add.w	r3, r4, #20
 8008db0:	f019 091f 	ands.w	r9, r9, #31
 8008db4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008db8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008dbc:	d02b      	beq.n	8008e16 <__lshift+0xbe>
 8008dbe:	f1c9 0e20 	rsb	lr, r9, #32
 8008dc2:	468a      	mov	sl, r1
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	6818      	ldr	r0, [r3, #0]
 8008dc8:	fa00 f009 	lsl.w	r0, r0, r9
 8008dcc:	4310      	orrs	r0, r2
 8008dce:	f84a 0b04 	str.w	r0, [sl], #4
 8008dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd6:	459c      	cmp	ip, r3
 8008dd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ddc:	d8f3      	bhi.n	8008dc6 <__lshift+0x6e>
 8008dde:	ebac 0304 	sub.w	r3, ip, r4
 8008de2:	3b15      	subs	r3, #21
 8008de4:	f023 0303 	bic.w	r3, r3, #3
 8008de8:	3304      	adds	r3, #4
 8008dea:	f104 0015 	add.w	r0, r4, #21
 8008dee:	4584      	cmp	ip, r0
 8008df0:	bf38      	it	cc
 8008df2:	2304      	movcc	r3, #4
 8008df4:	50ca      	str	r2, [r1, r3]
 8008df6:	b10a      	cbz	r2, 8008dfc <__lshift+0xa4>
 8008df8:	f108 0602 	add.w	r6, r8, #2
 8008dfc:	3e01      	subs	r6, #1
 8008dfe:	4638      	mov	r0, r7
 8008e00:	612e      	str	r6, [r5, #16]
 8008e02:	4621      	mov	r1, r4
 8008e04:	f7ff fdd8 	bl	80089b8 <_Bfree>
 8008e08:	4628      	mov	r0, r5
 8008e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008e12:	3301      	adds	r3, #1
 8008e14:	e7c5      	b.n	8008da2 <__lshift+0x4a>
 8008e16:	3904      	subs	r1, #4
 8008e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008e20:	459c      	cmp	ip, r3
 8008e22:	d8f9      	bhi.n	8008e18 <__lshift+0xc0>
 8008e24:	e7ea      	b.n	8008dfc <__lshift+0xa4>
 8008e26:	bf00      	nop
 8008e28:	08009b0c 	.word	0x08009b0c
 8008e2c:	08009b1d 	.word	0x08009b1d

08008e30 <__mcmp>:
 8008e30:	b530      	push	{r4, r5, lr}
 8008e32:	6902      	ldr	r2, [r0, #16]
 8008e34:	690c      	ldr	r4, [r1, #16]
 8008e36:	1b12      	subs	r2, r2, r4
 8008e38:	d10e      	bne.n	8008e58 <__mcmp+0x28>
 8008e3a:	f100 0314 	add.w	r3, r0, #20
 8008e3e:	3114      	adds	r1, #20
 8008e40:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008e44:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008e48:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008e4c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008e50:	42a5      	cmp	r5, r4
 8008e52:	d003      	beq.n	8008e5c <__mcmp+0x2c>
 8008e54:	d305      	bcc.n	8008e62 <__mcmp+0x32>
 8008e56:	2201      	movs	r2, #1
 8008e58:	4610      	mov	r0, r2
 8008e5a:	bd30      	pop	{r4, r5, pc}
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	d3f3      	bcc.n	8008e48 <__mcmp+0x18>
 8008e60:	e7fa      	b.n	8008e58 <__mcmp+0x28>
 8008e62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008e66:	e7f7      	b.n	8008e58 <__mcmp+0x28>

08008e68 <__mdiff>:
 8008e68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	4606      	mov	r6, r0
 8008e70:	4611      	mov	r1, r2
 8008e72:	4620      	mov	r0, r4
 8008e74:	4690      	mov	r8, r2
 8008e76:	f7ff ffdb 	bl	8008e30 <__mcmp>
 8008e7a:	1e05      	subs	r5, r0, #0
 8008e7c:	d110      	bne.n	8008ea0 <__mdiff+0x38>
 8008e7e:	4629      	mov	r1, r5
 8008e80:	4630      	mov	r0, r6
 8008e82:	f7ff fd59 	bl	8008938 <_Balloc>
 8008e86:	b930      	cbnz	r0, 8008e96 <__mdiff+0x2e>
 8008e88:	4b3a      	ldr	r3, [pc, #232]	; (8008f74 <__mdiff+0x10c>)
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	f240 2137 	movw	r1, #567	; 0x237
 8008e90:	4839      	ldr	r0, [pc, #228]	; (8008f78 <__mdiff+0x110>)
 8008e92:	f000 f967 	bl	8009164 <__assert_func>
 8008e96:	2301      	movs	r3, #1
 8008e98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea0:	bfa4      	itt	ge
 8008ea2:	4643      	movge	r3, r8
 8008ea4:	46a0      	movge	r8, r4
 8008ea6:	4630      	mov	r0, r6
 8008ea8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008eac:	bfa6      	itte	ge
 8008eae:	461c      	movge	r4, r3
 8008eb0:	2500      	movge	r5, #0
 8008eb2:	2501      	movlt	r5, #1
 8008eb4:	f7ff fd40 	bl	8008938 <_Balloc>
 8008eb8:	b920      	cbnz	r0, 8008ec4 <__mdiff+0x5c>
 8008eba:	4b2e      	ldr	r3, [pc, #184]	; (8008f74 <__mdiff+0x10c>)
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	f240 2145 	movw	r1, #581	; 0x245
 8008ec2:	e7e5      	b.n	8008e90 <__mdiff+0x28>
 8008ec4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ec8:	6926      	ldr	r6, [r4, #16]
 8008eca:	60c5      	str	r5, [r0, #12]
 8008ecc:	f104 0914 	add.w	r9, r4, #20
 8008ed0:	f108 0514 	add.w	r5, r8, #20
 8008ed4:	f100 0e14 	add.w	lr, r0, #20
 8008ed8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008edc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008ee0:	f108 0210 	add.w	r2, r8, #16
 8008ee4:	46f2      	mov	sl, lr
 8008ee6:	2100      	movs	r1, #0
 8008ee8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008eec:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ef0:	fa11 f88b 	uxtah	r8, r1, fp
 8008ef4:	b299      	uxth	r1, r3
 8008ef6:	0c1b      	lsrs	r3, r3, #16
 8008ef8:	eba8 0801 	sub.w	r8, r8, r1
 8008efc:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008f00:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008f04:	fa1f f888 	uxth.w	r8, r8
 8008f08:	1419      	asrs	r1, r3, #16
 8008f0a:	454e      	cmp	r6, r9
 8008f0c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008f10:	f84a 3b04 	str.w	r3, [sl], #4
 8008f14:	d8e8      	bhi.n	8008ee8 <__mdiff+0x80>
 8008f16:	1b33      	subs	r3, r6, r4
 8008f18:	3b15      	subs	r3, #21
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	3304      	adds	r3, #4
 8008f20:	3415      	adds	r4, #21
 8008f22:	42a6      	cmp	r6, r4
 8008f24:	bf38      	it	cc
 8008f26:	2304      	movcc	r3, #4
 8008f28:	441d      	add	r5, r3
 8008f2a:	4473      	add	r3, lr
 8008f2c:	469e      	mov	lr, r3
 8008f2e:	462e      	mov	r6, r5
 8008f30:	4566      	cmp	r6, ip
 8008f32:	d30e      	bcc.n	8008f52 <__mdiff+0xea>
 8008f34:	f10c 0203 	add.w	r2, ip, #3
 8008f38:	1b52      	subs	r2, r2, r5
 8008f3a:	f022 0203 	bic.w	r2, r2, #3
 8008f3e:	3d03      	subs	r5, #3
 8008f40:	45ac      	cmp	ip, r5
 8008f42:	bf38      	it	cc
 8008f44:	2200      	movcc	r2, #0
 8008f46:	4413      	add	r3, r2
 8008f48:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008f4c:	b17a      	cbz	r2, 8008f6e <__mdiff+0x106>
 8008f4e:	6107      	str	r7, [r0, #16]
 8008f50:	e7a4      	b.n	8008e9c <__mdiff+0x34>
 8008f52:	f856 8b04 	ldr.w	r8, [r6], #4
 8008f56:	fa11 f288 	uxtah	r2, r1, r8
 8008f5a:	1414      	asrs	r4, r2, #16
 8008f5c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008f60:	b292      	uxth	r2, r2
 8008f62:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008f66:	f84e 2b04 	str.w	r2, [lr], #4
 8008f6a:	1421      	asrs	r1, r4, #16
 8008f6c:	e7e0      	b.n	8008f30 <__mdiff+0xc8>
 8008f6e:	3f01      	subs	r7, #1
 8008f70:	e7ea      	b.n	8008f48 <__mdiff+0xe0>
 8008f72:	bf00      	nop
 8008f74:	08009b0c 	.word	0x08009b0c
 8008f78:	08009b1d 	.word	0x08009b1d

08008f7c <__d2b>:
 8008f7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008f80:	460f      	mov	r7, r1
 8008f82:	2101      	movs	r1, #1
 8008f84:	ec59 8b10 	vmov	r8, r9, d0
 8008f88:	4616      	mov	r6, r2
 8008f8a:	f7ff fcd5 	bl	8008938 <_Balloc>
 8008f8e:	4604      	mov	r4, r0
 8008f90:	b930      	cbnz	r0, 8008fa0 <__d2b+0x24>
 8008f92:	4602      	mov	r2, r0
 8008f94:	4b24      	ldr	r3, [pc, #144]	; (8009028 <__d2b+0xac>)
 8008f96:	4825      	ldr	r0, [pc, #148]	; (800902c <__d2b+0xb0>)
 8008f98:	f240 310f 	movw	r1, #783	; 0x30f
 8008f9c:	f000 f8e2 	bl	8009164 <__assert_func>
 8008fa0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008fa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008fa8:	bb2d      	cbnz	r5, 8008ff6 <__d2b+0x7a>
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	f1b8 0300 	subs.w	r3, r8, #0
 8008fb0:	d026      	beq.n	8009000 <__d2b+0x84>
 8008fb2:	4668      	mov	r0, sp
 8008fb4:	9300      	str	r3, [sp, #0]
 8008fb6:	f7ff fd87 	bl	8008ac8 <__lo0bits>
 8008fba:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fbe:	b1e8      	cbz	r0, 8008ffc <__d2b+0x80>
 8008fc0:	f1c0 0320 	rsb	r3, r0, #32
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	430b      	orrs	r3, r1
 8008fca:	40c2      	lsrs	r2, r0
 8008fcc:	6163      	str	r3, [r4, #20]
 8008fce:	9201      	str	r2, [sp, #4]
 8008fd0:	9b01      	ldr	r3, [sp, #4]
 8008fd2:	61a3      	str	r3, [r4, #24]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	bf14      	ite	ne
 8008fd8:	2202      	movne	r2, #2
 8008fda:	2201      	moveq	r2, #1
 8008fdc:	6122      	str	r2, [r4, #16]
 8008fde:	b1bd      	cbz	r5, 8009010 <__d2b+0x94>
 8008fe0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008fe4:	4405      	add	r5, r0
 8008fe6:	603d      	str	r5, [r7, #0]
 8008fe8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008fec:	6030      	str	r0, [r6, #0]
 8008fee:	4620      	mov	r0, r4
 8008ff0:	b003      	add	sp, #12
 8008ff2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ffa:	e7d6      	b.n	8008faa <__d2b+0x2e>
 8008ffc:	6161      	str	r1, [r4, #20]
 8008ffe:	e7e7      	b.n	8008fd0 <__d2b+0x54>
 8009000:	a801      	add	r0, sp, #4
 8009002:	f7ff fd61 	bl	8008ac8 <__lo0bits>
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	6163      	str	r3, [r4, #20]
 800900a:	3020      	adds	r0, #32
 800900c:	2201      	movs	r2, #1
 800900e:	e7e5      	b.n	8008fdc <__d2b+0x60>
 8009010:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009014:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009018:	6038      	str	r0, [r7, #0]
 800901a:	6918      	ldr	r0, [r3, #16]
 800901c:	f7ff fd34 	bl	8008a88 <__hi0bits>
 8009020:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009024:	e7e2      	b.n	8008fec <__d2b+0x70>
 8009026:	bf00      	nop
 8009028:	08009b0c 	.word	0x08009b0c
 800902c:	08009b1d 	.word	0x08009b1d

08009030 <__sread>:
 8009030:	b510      	push	{r4, lr}
 8009032:	460c      	mov	r4, r1
 8009034:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009038:	f000 f860 	bl	80090fc <_read_r>
 800903c:	2800      	cmp	r0, #0
 800903e:	bfab      	itete	ge
 8009040:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009042:	89a3      	ldrhlt	r3, [r4, #12]
 8009044:	181b      	addge	r3, r3, r0
 8009046:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800904a:	bfac      	ite	ge
 800904c:	6563      	strge	r3, [r4, #84]	; 0x54
 800904e:	81a3      	strhlt	r3, [r4, #12]
 8009050:	bd10      	pop	{r4, pc}

08009052 <__swrite>:
 8009052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009056:	461f      	mov	r7, r3
 8009058:	898b      	ldrh	r3, [r1, #12]
 800905a:	05db      	lsls	r3, r3, #23
 800905c:	4605      	mov	r5, r0
 800905e:	460c      	mov	r4, r1
 8009060:	4616      	mov	r6, r2
 8009062:	d505      	bpl.n	8009070 <__swrite+0x1e>
 8009064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009068:	2302      	movs	r3, #2
 800906a:	2200      	movs	r2, #0
 800906c:	f000 f834 	bl	80090d8 <_lseek_r>
 8009070:	89a3      	ldrh	r3, [r4, #12]
 8009072:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800907a:	81a3      	strh	r3, [r4, #12]
 800907c:	4632      	mov	r2, r6
 800907e:	463b      	mov	r3, r7
 8009080:	4628      	mov	r0, r5
 8009082:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009086:	f000 b85b 	b.w	8009140 <_write_r>

0800908a <__sseek>:
 800908a:	b510      	push	{r4, lr}
 800908c:	460c      	mov	r4, r1
 800908e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009092:	f000 f821 	bl	80090d8 <_lseek_r>
 8009096:	1c43      	adds	r3, r0, #1
 8009098:	89a3      	ldrh	r3, [r4, #12]
 800909a:	bf15      	itete	ne
 800909c:	6560      	strne	r0, [r4, #84]	; 0x54
 800909e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090a6:	81a3      	strheq	r3, [r4, #12]
 80090a8:	bf18      	it	ne
 80090aa:	81a3      	strhne	r3, [r4, #12]
 80090ac:	bd10      	pop	{r4, pc}

080090ae <__sclose>:
 80090ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b2:	f000 b801 	b.w	80090b8 <_close_r>
	...

080090b8 <_close_r>:
 80090b8:	b538      	push	{r3, r4, r5, lr}
 80090ba:	4d06      	ldr	r5, [pc, #24]	; (80090d4 <_close_r+0x1c>)
 80090bc:	2300      	movs	r3, #0
 80090be:	4604      	mov	r4, r0
 80090c0:	4608      	mov	r0, r1
 80090c2:	602b      	str	r3, [r5, #0]
 80090c4:	f7f9 f91a 	bl	80022fc <_close>
 80090c8:	1c43      	adds	r3, r0, #1
 80090ca:	d102      	bne.n	80090d2 <_close_r+0x1a>
 80090cc:	682b      	ldr	r3, [r5, #0]
 80090ce:	b103      	cbz	r3, 80090d2 <_close_r+0x1a>
 80090d0:	6023      	str	r3, [r4, #0]
 80090d2:	bd38      	pop	{r3, r4, r5, pc}
 80090d4:	20000818 	.word	0x20000818

080090d8 <_lseek_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4d07      	ldr	r5, [pc, #28]	; (80090f8 <_lseek_r+0x20>)
 80090dc:	4604      	mov	r4, r0
 80090de:	4608      	mov	r0, r1
 80090e0:	4611      	mov	r1, r2
 80090e2:	2200      	movs	r2, #0
 80090e4:	602a      	str	r2, [r5, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	f7f9 f92f 	bl	800234a <_lseek>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d102      	bne.n	80090f6 <_lseek_r+0x1e>
 80090f0:	682b      	ldr	r3, [r5, #0]
 80090f2:	b103      	cbz	r3, 80090f6 <_lseek_r+0x1e>
 80090f4:	6023      	str	r3, [r4, #0]
 80090f6:	bd38      	pop	{r3, r4, r5, pc}
 80090f8:	20000818 	.word	0x20000818

080090fc <_read_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_read_r+0x20>)
 8009100:	4604      	mov	r4, r0
 8009102:	4608      	mov	r0, r1
 8009104:	4611      	mov	r1, r2
 8009106:	2200      	movs	r2, #0
 8009108:	602a      	str	r2, [r5, #0]
 800910a:	461a      	mov	r2, r3
 800910c:	f7f9 f8bd 	bl	800228a <_read>
 8009110:	1c43      	adds	r3, r0, #1
 8009112:	d102      	bne.n	800911a <_read_r+0x1e>
 8009114:	682b      	ldr	r3, [r5, #0]
 8009116:	b103      	cbz	r3, 800911a <_read_r+0x1e>
 8009118:	6023      	str	r3, [r4, #0]
 800911a:	bd38      	pop	{r3, r4, r5, pc}
 800911c:	20000818 	.word	0x20000818

08009120 <_sbrk_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	; (800913c <_sbrk_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f9 f91a 	bl	8002364 <_sbrk>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_sbrk_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_sbrk_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20000818 	.word	0x20000818

08009140 <_write_r>:
 8009140:	b538      	push	{r3, r4, r5, lr}
 8009142:	4d07      	ldr	r5, [pc, #28]	; (8009160 <_write_r+0x20>)
 8009144:	4604      	mov	r4, r0
 8009146:	4608      	mov	r0, r1
 8009148:	4611      	mov	r1, r2
 800914a:	2200      	movs	r2, #0
 800914c:	602a      	str	r2, [r5, #0]
 800914e:	461a      	mov	r2, r3
 8009150:	f7f9 f8b8 	bl	80022c4 <_write>
 8009154:	1c43      	adds	r3, r0, #1
 8009156:	d102      	bne.n	800915e <_write_r+0x1e>
 8009158:	682b      	ldr	r3, [r5, #0]
 800915a:	b103      	cbz	r3, 800915e <_write_r+0x1e>
 800915c:	6023      	str	r3, [r4, #0]
 800915e:	bd38      	pop	{r3, r4, r5, pc}
 8009160:	20000818 	.word	0x20000818

08009164 <__assert_func>:
 8009164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009166:	4614      	mov	r4, r2
 8009168:	461a      	mov	r2, r3
 800916a:	4b09      	ldr	r3, [pc, #36]	; (8009190 <__assert_func+0x2c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4605      	mov	r5, r0
 8009170:	68d8      	ldr	r0, [r3, #12]
 8009172:	b14c      	cbz	r4, 8009188 <__assert_func+0x24>
 8009174:	4b07      	ldr	r3, [pc, #28]	; (8009194 <__assert_func+0x30>)
 8009176:	9100      	str	r1, [sp, #0]
 8009178:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800917c:	4906      	ldr	r1, [pc, #24]	; (8009198 <__assert_func+0x34>)
 800917e:	462b      	mov	r3, r5
 8009180:	f000 f882 	bl	8009288 <fiprintf>
 8009184:	f000 f89f 	bl	80092c6 <abort>
 8009188:	4b04      	ldr	r3, [pc, #16]	; (800919c <__assert_func+0x38>)
 800918a:	461c      	mov	r4, r3
 800918c:	e7f3      	b.n	8009176 <__assert_func+0x12>
 800918e:	bf00      	nop
 8009190:	20000064 	.word	0x20000064
 8009194:	08009d7f 	.word	0x08009d7f
 8009198:	08009d8c 	.word	0x08009d8c
 800919c:	08009dba 	.word	0x08009dba

080091a0 <_calloc_r>:
 80091a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091a2:	fba1 2402 	umull	r2, r4, r1, r2
 80091a6:	b94c      	cbnz	r4, 80091bc <_calloc_r+0x1c>
 80091a8:	4611      	mov	r1, r2
 80091aa:	9201      	str	r2, [sp, #4]
 80091ac:	f7ff fa8a 	bl	80086c4 <_malloc_r>
 80091b0:	9a01      	ldr	r2, [sp, #4]
 80091b2:	4605      	mov	r5, r0
 80091b4:	b930      	cbnz	r0, 80091c4 <_calloc_r+0x24>
 80091b6:	4628      	mov	r0, r5
 80091b8:	b003      	add	sp, #12
 80091ba:	bd30      	pop	{r4, r5, pc}
 80091bc:	220c      	movs	r2, #12
 80091be:	6002      	str	r2, [r0, #0]
 80091c0:	2500      	movs	r5, #0
 80091c2:	e7f8      	b.n	80091b6 <_calloc_r+0x16>
 80091c4:	4621      	mov	r1, r4
 80091c6:	f7fe fb91 	bl	80078ec <memset>
 80091ca:	e7f4      	b.n	80091b6 <_calloc_r+0x16>

080091cc <_free_r>:
 80091cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ce:	2900      	cmp	r1, #0
 80091d0:	d044      	beq.n	800925c <_free_r+0x90>
 80091d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d6:	9001      	str	r0, [sp, #4]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f1a1 0404 	sub.w	r4, r1, #4
 80091de:	bfb8      	it	lt
 80091e0:	18e4      	addlt	r4, r4, r3
 80091e2:	f7ff fb9d 	bl	8008920 <__malloc_lock>
 80091e6:	4a1e      	ldr	r2, [pc, #120]	; (8009260 <_free_r+0x94>)
 80091e8:	9801      	ldr	r0, [sp, #4]
 80091ea:	6813      	ldr	r3, [r2, #0]
 80091ec:	b933      	cbnz	r3, 80091fc <_free_r+0x30>
 80091ee:	6063      	str	r3, [r4, #4]
 80091f0:	6014      	str	r4, [r2, #0]
 80091f2:	b003      	add	sp, #12
 80091f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091f8:	f7ff bb98 	b.w	800892c <__malloc_unlock>
 80091fc:	42a3      	cmp	r3, r4
 80091fe:	d908      	bls.n	8009212 <_free_r+0x46>
 8009200:	6825      	ldr	r5, [r4, #0]
 8009202:	1961      	adds	r1, r4, r5
 8009204:	428b      	cmp	r3, r1
 8009206:	bf01      	itttt	eq
 8009208:	6819      	ldreq	r1, [r3, #0]
 800920a:	685b      	ldreq	r3, [r3, #4]
 800920c:	1949      	addeq	r1, r1, r5
 800920e:	6021      	streq	r1, [r4, #0]
 8009210:	e7ed      	b.n	80091ee <_free_r+0x22>
 8009212:	461a      	mov	r2, r3
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	b10b      	cbz	r3, 800921c <_free_r+0x50>
 8009218:	42a3      	cmp	r3, r4
 800921a:	d9fa      	bls.n	8009212 <_free_r+0x46>
 800921c:	6811      	ldr	r1, [r2, #0]
 800921e:	1855      	adds	r5, r2, r1
 8009220:	42a5      	cmp	r5, r4
 8009222:	d10b      	bne.n	800923c <_free_r+0x70>
 8009224:	6824      	ldr	r4, [r4, #0]
 8009226:	4421      	add	r1, r4
 8009228:	1854      	adds	r4, r2, r1
 800922a:	42a3      	cmp	r3, r4
 800922c:	6011      	str	r1, [r2, #0]
 800922e:	d1e0      	bne.n	80091f2 <_free_r+0x26>
 8009230:	681c      	ldr	r4, [r3, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	6053      	str	r3, [r2, #4]
 8009236:	440c      	add	r4, r1
 8009238:	6014      	str	r4, [r2, #0]
 800923a:	e7da      	b.n	80091f2 <_free_r+0x26>
 800923c:	d902      	bls.n	8009244 <_free_r+0x78>
 800923e:	230c      	movs	r3, #12
 8009240:	6003      	str	r3, [r0, #0]
 8009242:	e7d6      	b.n	80091f2 <_free_r+0x26>
 8009244:	6825      	ldr	r5, [r4, #0]
 8009246:	1961      	adds	r1, r4, r5
 8009248:	428b      	cmp	r3, r1
 800924a:	bf04      	itt	eq
 800924c:	6819      	ldreq	r1, [r3, #0]
 800924e:	685b      	ldreq	r3, [r3, #4]
 8009250:	6063      	str	r3, [r4, #4]
 8009252:	bf04      	itt	eq
 8009254:	1949      	addeq	r1, r1, r5
 8009256:	6021      	streq	r1, [r4, #0]
 8009258:	6054      	str	r4, [r2, #4]
 800925a:	e7ca      	b.n	80091f2 <_free_r+0x26>
 800925c:	b003      	add	sp, #12
 800925e:	bd30      	pop	{r4, r5, pc}
 8009260:	20000810 	.word	0x20000810

08009264 <__ascii_mbtowc>:
 8009264:	b082      	sub	sp, #8
 8009266:	b901      	cbnz	r1, 800926a <__ascii_mbtowc+0x6>
 8009268:	a901      	add	r1, sp, #4
 800926a:	b142      	cbz	r2, 800927e <__ascii_mbtowc+0x1a>
 800926c:	b14b      	cbz	r3, 8009282 <__ascii_mbtowc+0x1e>
 800926e:	7813      	ldrb	r3, [r2, #0]
 8009270:	600b      	str	r3, [r1, #0]
 8009272:	7812      	ldrb	r2, [r2, #0]
 8009274:	1e10      	subs	r0, r2, #0
 8009276:	bf18      	it	ne
 8009278:	2001      	movne	r0, #1
 800927a:	b002      	add	sp, #8
 800927c:	4770      	bx	lr
 800927e:	4610      	mov	r0, r2
 8009280:	e7fb      	b.n	800927a <__ascii_mbtowc+0x16>
 8009282:	f06f 0001 	mvn.w	r0, #1
 8009286:	e7f8      	b.n	800927a <__ascii_mbtowc+0x16>

08009288 <fiprintf>:
 8009288:	b40e      	push	{r1, r2, r3}
 800928a:	b503      	push	{r0, r1, lr}
 800928c:	4601      	mov	r1, r0
 800928e:	ab03      	add	r3, sp, #12
 8009290:	4805      	ldr	r0, [pc, #20]	; (80092a8 <fiprintf+0x20>)
 8009292:	f853 2b04 	ldr.w	r2, [r3], #4
 8009296:	6800      	ldr	r0, [r0, #0]
 8009298:	9301      	str	r3, [sp, #4]
 800929a:	f000 f845 	bl	8009328 <_vfiprintf_r>
 800929e:	b002      	add	sp, #8
 80092a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80092a4:	b003      	add	sp, #12
 80092a6:	4770      	bx	lr
 80092a8:	20000064 	.word	0x20000064

080092ac <__ascii_wctomb>:
 80092ac:	b149      	cbz	r1, 80092c2 <__ascii_wctomb+0x16>
 80092ae:	2aff      	cmp	r2, #255	; 0xff
 80092b0:	bf85      	ittet	hi
 80092b2:	238a      	movhi	r3, #138	; 0x8a
 80092b4:	6003      	strhi	r3, [r0, #0]
 80092b6:	700a      	strbls	r2, [r1, #0]
 80092b8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80092bc:	bf98      	it	ls
 80092be:	2001      	movls	r0, #1
 80092c0:	4770      	bx	lr
 80092c2:	4608      	mov	r0, r1
 80092c4:	4770      	bx	lr

080092c6 <abort>:
 80092c6:	b508      	push	{r3, lr}
 80092c8:	2006      	movs	r0, #6
 80092ca:	f000 fa89 	bl	80097e0 <raise>
 80092ce:	2001      	movs	r0, #1
 80092d0:	f7f8 ffd1 	bl	8002276 <_exit>

080092d4 <__sfputc_r>:
 80092d4:	6893      	ldr	r3, [r2, #8]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	b410      	push	{r4}
 80092dc:	6093      	str	r3, [r2, #8]
 80092de:	da08      	bge.n	80092f2 <__sfputc_r+0x1e>
 80092e0:	6994      	ldr	r4, [r2, #24]
 80092e2:	42a3      	cmp	r3, r4
 80092e4:	db01      	blt.n	80092ea <__sfputc_r+0x16>
 80092e6:	290a      	cmp	r1, #10
 80092e8:	d103      	bne.n	80092f2 <__sfputc_r+0x1e>
 80092ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80092ee:	f000 b935 	b.w	800955c <__swbuf_r>
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	1c58      	adds	r0, r3, #1
 80092f6:	6010      	str	r0, [r2, #0]
 80092f8:	7019      	strb	r1, [r3, #0]
 80092fa:	4608      	mov	r0, r1
 80092fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009300:	4770      	bx	lr

08009302 <__sfputs_r>:
 8009302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009304:	4606      	mov	r6, r0
 8009306:	460f      	mov	r7, r1
 8009308:	4614      	mov	r4, r2
 800930a:	18d5      	adds	r5, r2, r3
 800930c:	42ac      	cmp	r4, r5
 800930e:	d101      	bne.n	8009314 <__sfputs_r+0x12>
 8009310:	2000      	movs	r0, #0
 8009312:	e007      	b.n	8009324 <__sfputs_r+0x22>
 8009314:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009318:	463a      	mov	r2, r7
 800931a:	4630      	mov	r0, r6
 800931c:	f7ff ffda 	bl	80092d4 <__sfputc_r>
 8009320:	1c43      	adds	r3, r0, #1
 8009322:	d1f3      	bne.n	800930c <__sfputs_r+0xa>
 8009324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009328 <_vfiprintf_r>:
 8009328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800932c:	460d      	mov	r5, r1
 800932e:	b09d      	sub	sp, #116	; 0x74
 8009330:	4614      	mov	r4, r2
 8009332:	4698      	mov	r8, r3
 8009334:	4606      	mov	r6, r0
 8009336:	b118      	cbz	r0, 8009340 <_vfiprintf_r+0x18>
 8009338:	6a03      	ldr	r3, [r0, #32]
 800933a:	b90b      	cbnz	r3, 8009340 <_vfiprintf_r+0x18>
 800933c:	f7fe faa0 	bl	8007880 <__sinit>
 8009340:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009342:	07d9      	lsls	r1, r3, #31
 8009344:	d405      	bmi.n	8009352 <_vfiprintf_r+0x2a>
 8009346:	89ab      	ldrh	r3, [r5, #12]
 8009348:	059a      	lsls	r2, r3, #22
 800934a:	d402      	bmi.n	8009352 <_vfiprintf_r+0x2a>
 800934c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800934e:	f7fe fb04 	bl	800795a <__retarget_lock_acquire_recursive>
 8009352:	89ab      	ldrh	r3, [r5, #12]
 8009354:	071b      	lsls	r3, r3, #28
 8009356:	d501      	bpl.n	800935c <_vfiprintf_r+0x34>
 8009358:	692b      	ldr	r3, [r5, #16]
 800935a:	b99b      	cbnz	r3, 8009384 <_vfiprintf_r+0x5c>
 800935c:	4629      	mov	r1, r5
 800935e:	4630      	mov	r0, r6
 8009360:	f000 f93a 	bl	80095d8 <__swsetup_r>
 8009364:	b170      	cbz	r0, 8009384 <_vfiprintf_r+0x5c>
 8009366:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009368:	07dc      	lsls	r4, r3, #31
 800936a:	d504      	bpl.n	8009376 <_vfiprintf_r+0x4e>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009370:	b01d      	add	sp, #116	; 0x74
 8009372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009376:	89ab      	ldrh	r3, [r5, #12]
 8009378:	0598      	lsls	r0, r3, #22
 800937a:	d4f7      	bmi.n	800936c <_vfiprintf_r+0x44>
 800937c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800937e:	f7fe faed 	bl	800795c <__retarget_lock_release_recursive>
 8009382:	e7f3      	b.n	800936c <_vfiprintf_r+0x44>
 8009384:	2300      	movs	r3, #0
 8009386:	9309      	str	r3, [sp, #36]	; 0x24
 8009388:	2320      	movs	r3, #32
 800938a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800938e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009392:	2330      	movs	r3, #48	; 0x30
 8009394:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009548 <_vfiprintf_r+0x220>
 8009398:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800939c:	f04f 0901 	mov.w	r9, #1
 80093a0:	4623      	mov	r3, r4
 80093a2:	469a      	mov	sl, r3
 80093a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093a8:	b10a      	cbz	r2, 80093ae <_vfiprintf_r+0x86>
 80093aa:	2a25      	cmp	r2, #37	; 0x25
 80093ac:	d1f9      	bne.n	80093a2 <_vfiprintf_r+0x7a>
 80093ae:	ebba 0b04 	subs.w	fp, sl, r4
 80093b2:	d00b      	beq.n	80093cc <_vfiprintf_r+0xa4>
 80093b4:	465b      	mov	r3, fp
 80093b6:	4622      	mov	r2, r4
 80093b8:	4629      	mov	r1, r5
 80093ba:	4630      	mov	r0, r6
 80093bc:	f7ff ffa1 	bl	8009302 <__sfputs_r>
 80093c0:	3001      	adds	r0, #1
 80093c2:	f000 80a9 	beq.w	8009518 <_vfiprintf_r+0x1f0>
 80093c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093c8:	445a      	add	r2, fp
 80093ca:	9209      	str	r2, [sp, #36]	; 0x24
 80093cc:	f89a 3000 	ldrb.w	r3, [sl]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	f000 80a1 	beq.w	8009518 <_vfiprintf_r+0x1f0>
 80093d6:	2300      	movs	r3, #0
 80093d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80093dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80093e0:	f10a 0a01 	add.w	sl, sl, #1
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	9307      	str	r3, [sp, #28]
 80093e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80093ec:	931a      	str	r3, [sp, #104]	; 0x68
 80093ee:	4654      	mov	r4, sl
 80093f0:	2205      	movs	r2, #5
 80093f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093f6:	4854      	ldr	r0, [pc, #336]	; (8009548 <_vfiprintf_r+0x220>)
 80093f8:	f7f6 ff02 	bl	8000200 <memchr>
 80093fc:	9a04      	ldr	r2, [sp, #16]
 80093fe:	b9d8      	cbnz	r0, 8009438 <_vfiprintf_r+0x110>
 8009400:	06d1      	lsls	r1, r2, #27
 8009402:	bf44      	itt	mi
 8009404:	2320      	movmi	r3, #32
 8009406:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800940a:	0713      	lsls	r3, r2, #28
 800940c:	bf44      	itt	mi
 800940e:	232b      	movmi	r3, #43	; 0x2b
 8009410:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009414:	f89a 3000 	ldrb.w	r3, [sl]
 8009418:	2b2a      	cmp	r3, #42	; 0x2a
 800941a:	d015      	beq.n	8009448 <_vfiprintf_r+0x120>
 800941c:	9a07      	ldr	r2, [sp, #28]
 800941e:	4654      	mov	r4, sl
 8009420:	2000      	movs	r0, #0
 8009422:	f04f 0c0a 	mov.w	ip, #10
 8009426:	4621      	mov	r1, r4
 8009428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800942c:	3b30      	subs	r3, #48	; 0x30
 800942e:	2b09      	cmp	r3, #9
 8009430:	d94d      	bls.n	80094ce <_vfiprintf_r+0x1a6>
 8009432:	b1b0      	cbz	r0, 8009462 <_vfiprintf_r+0x13a>
 8009434:	9207      	str	r2, [sp, #28]
 8009436:	e014      	b.n	8009462 <_vfiprintf_r+0x13a>
 8009438:	eba0 0308 	sub.w	r3, r0, r8
 800943c:	fa09 f303 	lsl.w	r3, r9, r3
 8009440:	4313      	orrs	r3, r2
 8009442:	9304      	str	r3, [sp, #16]
 8009444:	46a2      	mov	sl, r4
 8009446:	e7d2      	b.n	80093ee <_vfiprintf_r+0xc6>
 8009448:	9b03      	ldr	r3, [sp, #12]
 800944a:	1d19      	adds	r1, r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	9103      	str	r1, [sp, #12]
 8009450:	2b00      	cmp	r3, #0
 8009452:	bfbb      	ittet	lt
 8009454:	425b      	neglt	r3, r3
 8009456:	f042 0202 	orrlt.w	r2, r2, #2
 800945a:	9307      	strge	r3, [sp, #28]
 800945c:	9307      	strlt	r3, [sp, #28]
 800945e:	bfb8      	it	lt
 8009460:	9204      	strlt	r2, [sp, #16]
 8009462:	7823      	ldrb	r3, [r4, #0]
 8009464:	2b2e      	cmp	r3, #46	; 0x2e
 8009466:	d10c      	bne.n	8009482 <_vfiprintf_r+0x15a>
 8009468:	7863      	ldrb	r3, [r4, #1]
 800946a:	2b2a      	cmp	r3, #42	; 0x2a
 800946c:	d134      	bne.n	80094d8 <_vfiprintf_r+0x1b0>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	1d1a      	adds	r2, r3, #4
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	9203      	str	r2, [sp, #12]
 8009476:	2b00      	cmp	r3, #0
 8009478:	bfb8      	it	lt
 800947a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800947e:	3402      	adds	r4, #2
 8009480:	9305      	str	r3, [sp, #20]
 8009482:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009558 <_vfiprintf_r+0x230>
 8009486:	7821      	ldrb	r1, [r4, #0]
 8009488:	2203      	movs	r2, #3
 800948a:	4650      	mov	r0, sl
 800948c:	f7f6 feb8 	bl	8000200 <memchr>
 8009490:	b138      	cbz	r0, 80094a2 <_vfiprintf_r+0x17a>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	eba0 000a 	sub.w	r0, r0, sl
 8009498:	2240      	movs	r2, #64	; 0x40
 800949a:	4082      	lsls	r2, r0
 800949c:	4313      	orrs	r3, r2
 800949e:	3401      	adds	r4, #1
 80094a0:	9304      	str	r3, [sp, #16]
 80094a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094a6:	4829      	ldr	r0, [pc, #164]	; (800954c <_vfiprintf_r+0x224>)
 80094a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80094ac:	2206      	movs	r2, #6
 80094ae:	f7f6 fea7 	bl	8000200 <memchr>
 80094b2:	2800      	cmp	r0, #0
 80094b4:	d03f      	beq.n	8009536 <_vfiprintf_r+0x20e>
 80094b6:	4b26      	ldr	r3, [pc, #152]	; (8009550 <_vfiprintf_r+0x228>)
 80094b8:	bb1b      	cbnz	r3, 8009502 <_vfiprintf_r+0x1da>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	3307      	adds	r3, #7
 80094be:	f023 0307 	bic.w	r3, r3, #7
 80094c2:	3308      	adds	r3, #8
 80094c4:	9303      	str	r3, [sp, #12]
 80094c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094c8:	443b      	add	r3, r7
 80094ca:	9309      	str	r3, [sp, #36]	; 0x24
 80094cc:	e768      	b.n	80093a0 <_vfiprintf_r+0x78>
 80094ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80094d2:	460c      	mov	r4, r1
 80094d4:	2001      	movs	r0, #1
 80094d6:	e7a6      	b.n	8009426 <_vfiprintf_r+0xfe>
 80094d8:	2300      	movs	r3, #0
 80094da:	3401      	adds	r4, #1
 80094dc:	9305      	str	r3, [sp, #20]
 80094de:	4619      	mov	r1, r3
 80094e0:	f04f 0c0a 	mov.w	ip, #10
 80094e4:	4620      	mov	r0, r4
 80094e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80094ea:	3a30      	subs	r2, #48	; 0x30
 80094ec:	2a09      	cmp	r2, #9
 80094ee:	d903      	bls.n	80094f8 <_vfiprintf_r+0x1d0>
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d0c6      	beq.n	8009482 <_vfiprintf_r+0x15a>
 80094f4:	9105      	str	r1, [sp, #20]
 80094f6:	e7c4      	b.n	8009482 <_vfiprintf_r+0x15a>
 80094f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80094fc:	4604      	mov	r4, r0
 80094fe:	2301      	movs	r3, #1
 8009500:	e7f0      	b.n	80094e4 <_vfiprintf_r+0x1bc>
 8009502:	ab03      	add	r3, sp, #12
 8009504:	9300      	str	r3, [sp, #0]
 8009506:	462a      	mov	r2, r5
 8009508:	4b12      	ldr	r3, [pc, #72]	; (8009554 <_vfiprintf_r+0x22c>)
 800950a:	a904      	add	r1, sp, #16
 800950c:	4630      	mov	r0, r6
 800950e:	f7fd fd65 	bl	8006fdc <_printf_float>
 8009512:	4607      	mov	r7, r0
 8009514:	1c78      	adds	r0, r7, #1
 8009516:	d1d6      	bne.n	80094c6 <_vfiprintf_r+0x19e>
 8009518:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800951a:	07d9      	lsls	r1, r3, #31
 800951c:	d405      	bmi.n	800952a <_vfiprintf_r+0x202>
 800951e:	89ab      	ldrh	r3, [r5, #12]
 8009520:	059a      	lsls	r2, r3, #22
 8009522:	d402      	bmi.n	800952a <_vfiprintf_r+0x202>
 8009524:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009526:	f7fe fa19 	bl	800795c <__retarget_lock_release_recursive>
 800952a:	89ab      	ldrh	r3, [r5, #12]
 800952c:	065b      	lsls	r3, r3, #25
 800952e:	f53f af1d 	bmi.w	800936c <_vfiprintf_r+0x44>
 8009532:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009534:	e71c      	b.n	8009370 <_vfiprintf_r+0x48>
 8009536:	ab03      	add	r3, sp, #12
 8009538:	9300      	str	r3, [sp, #0]
 800953a:	462a      	mov	r2, r5
 800953c:	4b05      	ldr	r3, [pc, #20]	; (8009554 <_vfiprintf_r+0x22c>)
 800953e:	a904      	add	r1, sp, #16
 8009540:	4630      	mov	r0, r6
 8009542:	f7fd ffef 	bl	8007524 <_printf_i>
 8009546:	e7e4      	b.n	8009512 <_vfiprintf_r+0x1ea>
 8009548:	08009dbb 	.word	0x08009dbb
 800954c:	08009dc5 	.word	0x08009dc5
 8009550:	08006fdd 	.word	0x08006fdd
 8009554:	08009303 	.word	0x08009303
 8009558:	08009dc1 	.word	0x08009dc1

0800955c <__swbuf_r>:
 800955c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800955e:	460e      	mov	r6, r1
 8009560:	4614      	mov	r4, r2
 8009562:	4605      	mov	r5, r0
 8009564:	b118      	cbz	r0, 800956e <__swbuf_r+0x12>
 8009566:	6a03      	ldr	r3, [r0, #32]
 8009568:	b90b      	cbnz	r3, 800956e <__swbuf_r+0x12>
 800956a:	f7fe f989 	bl	8007880 <__sinit>
 800956e:	69a3      	ldr	r3, [r4, #24]
 8009570:	60a3      	str	r3, [r4, #8]
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	071a      	lsls	r2, r3, #28
 8009576:	d525      	bpl.n	80095c4 <__swbuf_r+0x68>
 8009578:	6923      	ldr	r3, [r4, #16]
 800957a:	b31b      	cbz	r3, 80095c4 <__swbuf_r+0x68>
 800957c:	6823      	ldr	r3, [r4, #0]
 800957e:	6922      	ldr	r2, [r4, #16]
 8009580:	1a98      	subs	r0, r3, r2
 8009582:	6963      	ldr	r3, [r4, #20]
 8009584:	b2f6      	uxtb	r6, r6
 8009586:	4283      	cmp	r3, r0
 8009588:	4637      	mov	r7, r6
 800958a:	dc04      	bgt.n	8009596 <__swbuf_r+0x3a>
 800958c:	4621      	mov	r1, r4
 800958e:	4628      	mov	r0, r5
 8009590:	f7ff f99e 	bl	80088d0 <_fflush_r>
 8009594:	b9e0      	cbnz	r0, 80095d0 <__swbuf_r+0x74>
 8009596:	68a3      	ldr	r3, [r4, #8]
 8009598:	3b01      	subs	r3, #1
 800959a:	60a3      	str	r3, [r4, #8]
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	1c5a      	adds	r2, r3, #1
 80095a0:	6022      	str	r2, [r4, #0]
 80095a2:	701e      	strb	r6, [r3, #0]
 80095a4:	6962      	ldr	r2, [r4, #20]
 80095a6:	1c43      	adds	r3, r0, #1
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d004      	beq.n	80095b6 <__swbuf_r+0x5a>
 80095ac:	89a3      	ldrh	r3, [r4, #12]
 80095ae:	07db      	lsls	r3, r3, #31
 80095b0:	d506      	bpl.n	80095c0 <__swbuf_r+0x64>
 80095b2:	2e0a      	cmp	r6, #10
 80095b4:	d104      	bne.n	80095c0 <__swbuf_r+0x64>
 80095b6:	4621      	mov	r1, r4
 80095b8:	4628      	mov	r0, r5
 80095ba:	f7ff f989 	bl	80088d0 <_fflush_r>
 80095be:	b938      	cbnz	r0, 80095d0 <__swbuf_r+0x74>
 80095c0:	4638      	mov	r0, r7
 80095c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095c4:	4621      	mov	r1, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 f806 	bl	80095d8 <__swsetup_r>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d0d5      	beq.n	800957c <__swbuf_r+0x20>
 80095d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80095d4:	e7f4      	b.n	80095c0 <__swbuf_r+0x64>
	...

080095d8 <__swsetup_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4b2a      	ldr	r3, [pc, #168]	; (8009684 <__swsetup_r+0xac>)
 80095dc:	4605      	mov	r5, r0
 80095de:	6818      	ldr	r0, [r3, #0]
 80095e0:	460c      	mov	r4, r1
 80095e2:	b118      	cbz	r0, 80095ec <__swsetup_r+0x14>
 80095e4:	6a03      	ldr	r3, [r0, #32]
 80095e6:	b90b      	cbnz	r3, 80095ec <__swsetup_r+0x14>
 80095e8:	f7fe f94a 	bl	8007880 <__sinit>
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095f2:	0718      	lsls	r0, r3, #28
 80095f4:	d422      	bmi.n	800963c <__swsetup_r+0x64>
 80095f6:	06d9      	lsls	r1, r3, #27
 80095f8:	d407      	bmi.n	800960a <__swsetup_r+0x32>
 80095fa:	2309      	movs	r3, #9
 80095fc:	602b      	str	r3, [r5, #0]
 80095fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009602:	81a3      	strh	r3, [r4, #12]
 8009604:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009608:	e034      	b.n	8009674 <__swsetup_r+0x9c>
 800960a:	0758      	lsls	r0, r3, #29
 800960c:	d512      	bpl.n	8009634 <__swsetup_r+0x5c>
 800960e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009610:	b141      	cbz	r1, 8009624 <__swsetup_r+0x4c>
 8009612:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009616:	4299      	cmp	r1, r3
 8009618:	d002      	beq.n	8009620 <__swsetup_r+0x48>
 800961a:	4628      	mov	r0, r5
 800961c:	f7ff fdd6 	bl	80091cc <_free_r>
 8009620:	2300      	movs	r3, #0
 8009622:	6363      	str	r3, [r4, #52]	; 0x34
 8009624:	89a3      	ldrh	r3, [r4, #12]
 8009626:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	2300      	movs	r3, #0
 800962e:	6063      	str	r3, [r4, #4]
 8009630:	6923      	ldr	r3, [r4, #16]
 8009632:	6023      	str	r3, [r4, #0]
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f043 0308 	orr.w	r3, r3, #8
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	6923      	ldr	r3, [r4, #16]
 800963e:	b94b      	cbnz	r3, 8009654 <__swsetup_r+0x7c>
 8009640:	89a3      	ldrh	r3, [r4, #12]
 8009642:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800964a:	d003      	beq.n	8009654 <__swsetup_r+0x7c>
 800964c:	4621      	mov	r1, r4
 800964e:	4628      	mov	r0, r5
 8009650:	f000 f840 	bl	80096d4 <__smakebuf_r>
 8009654:	89a0      	ldrh	r0, [r4, #12]
 8009656:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800965a:	f010 0301 	ands.w	r3, r0, #1
 800965e:	d00a      	beq.n	8009676 <__swsetup_r+0x9e>
 8009660:	2300      	movs	r3, #0
 8009662:	60a3      	str	r3, [r4, #8]
 8009664:	6963      	ldr	r3, [r4, #20]
 8009666:	425b      	negs	r3, r3
 8009668:	61a3      	str	r3, [r4, #24]
 800966a:	6923      	ldr	r3, [r4, #16]
 800966c:	b943      	cbnz	r3, 8009680 <__swsetup_r+0xa8>
 800966e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009672:	d1c4      	bne.n	80095fe <__swsetup_r+0x26>
 8009674:	bd38      	pop	{r3, r4, r5, pc}
 8009676:	0781      	lsls	r1, r0, #30
 8009678:	bf58      	it	pl
 800967a:	6963      	ldrpl	r3, [r4, #20]
 800967c:	60a3      	str	r3, [r4, #8]
 800967e:	e7f4      	b.n	800966a <__swsetup_r+0x92>
 8009680:	2000      	movs	r0, #0
 8009682:	e7f7      	b.n	8009674 <__swsetup_r+0x9c>
 8009684:	20000064 	.word	0x20000064

08009688 <__swhatbuf_r>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	460c      	mov	r4, r1
 800968c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009690:	2900      	cmp	r1, #0
 8009692:	b096      	sub	sp, #88	; 0x58
 8009694:	4615      	mov	r5, r2
 8009696:	461e      	mov	r6, r3
 8009698:	da0d      	bge.n	80096b6 <__swhatbuf_r+0x2e>
 800969a:	89a3      	ldrh	r3, [r4, #12]
 800969c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80096a0:	f04f 0100 	mov.w	r1, #0
 80096a4:	bf0c      	ite	eq
 80096a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80096aa:	2340      	movne	r3, #64	; 0x40
 80096ac:	2000      	movs	r0, #0
 80096ae:	6031      	str	r1, [r6, #0]
 80096b0:	602b      	str	r3, [r5, #0]
 80096b2:	b016      	add	sp, #88	; 0x58
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	466a      	mov	r2, sp
 80096b8:	f000 f848 	bl	800974c <_fstat_r>
 80096bc:	2800      	cmp	r0, #0
 80096be:	dbec      	blt.n	800969a <__swhatbuf_r+0x12>
 80096c0:	9901      	ldr	r1, [sp, #4]
 80096c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096ca:	4259      	negs	r1, r3
 80096cc:	4159      	adcs	r1, r3
 80096ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d2:	e7eb      	b.n	80096ac <__swhatbuf_r+0x24>

080096d4 <__smakebuf_r>:
 80096d4:	898b      	ldrh	r3, [r1, #12]
 80096d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096d8:	079d      	lsls	r5, r3, #30
 80096da:	4606      	mov	r6, r0
 80096dc:	460c      	mov	r4, r1
 80096de:	d507      	bpl.n	80096f0 <__smakebuf_r+0x1c>
 80096e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	6123      	str	r3, [r4, #16]
 80096e8:	2301      	movs	r3, #1
 80096ea:	6163      	str	r3, [r4, #20]
 80096ec:	b002      	add	sp, #8
 80096ee:	bd70      	pop	{r4, r5, r6, pc}
 80096f0:	ab01      	add	r3, sp, #4
 80096f2:	466a      	mov	r2, sp
 80096f4:	f7ff ffc8 	bl	8009688 <__swhatbuf_r>
 80096f8:	9900      	ldr	r1, [sp, #0]
 80096fa:	4605      	mov	r5, r0
 80096fc:	4630      	mov	r0, r6
 80096fe:	f7fe ffe1 	bl	80086c4 <_malloc_r>
 8009702:	b948      	cbnz	r0, 8009718 <__smakebuf_r+0x44>
 8009704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009708:	059a      	lsls	r2, r3, #22
 800970a:	d4ef      	bmi.n	80096ec <__smakebuf_r+0x18>
 800970c:	f023 0303 	bic.w	r3, r3, #3
 8009710:	f043 0302 	orr.w	r3, r3, #2
 8009714:	81a3      	strh	r3, [r4, #12]
 8009716:	e7e3      	b.n	80096e0 <__smakebuf_r+0xc>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	6020      	str	r0, [r4, #0]
 800971c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009720:	81a3      	strh	r3, [r4, #12]
 8009722:	9b00      	ldr	r3, [sp, #0]
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	9b01      	ldr	r3, [sp, #4]
 8009728:	6120      	str	r0, [r4, #16]
 800972a:	b15b      	cbz	r3, 8009744 <__smakebuf_r+0x70>
 800972c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009730:	4630      	mov	r0, r6
 8009732:	f000 f81d 	bl	8009770 <_isatty_r>
 8009736:	b128      	cbz	r0, 8009744 <__smakebuf_r+0x70>
 8009738:	89a3      	ldrh	r3, [r4, #12]
 800973a:	f023 0303 	bic.w	r3, r3, #3
 800973e:	f043 0301 	orr.w	r3, r3, #1
 8009742:	81a3      	strh	r3, [r4, #12]
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	431d      	orrs	r5, r3
 8009748:	81a5      	strh	r5, [r4, #12]
 800974a:	e7cf      	b.n	80096ec <__smakebuf_r+0x18>

0800974c <_fstat_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d07      	ldr	r5, [pc, #28]	; (800976c <_fstat_r+0x20>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	4611      	mov	r1, r2
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	f7f8 fddb 	bl	8002314 <_fstat>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d102      	bne.n	8009768 <_fstat_r+0x1c>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	b103      	cbz	r3, 8009768 <_fstat_r+0x1c>
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	20000818 	.word	0x20000818

08009770 <_isatty_r>:
 8009770:	b538      	push	{r3, r4, r5, lr}
 8009772:	4d06      	ldr	r5, [pc, #24]	; (800978c <_isatty_r+0x1c>)
 8009774:	2300      	movs	r3, #0
 8009776:	4604      	mov	r4, r0
 8009778:	4608      	mov	r0, r1
 800977a:	602b      	str	r3, [r5, #0]
 800977c:	f7f8 fdda 	bl	8002334 <_isatty>
 8009780:	1c43      	adds	r3, r0, #1
 8009782:	d102      	bne.n	800978a <_isatty_r+0x1a>
 8009784:	682b      	ldr	r3, [r5, #0]
 8009786:	b103      	cbz	r3, 800978a <_isatty_r+0x1a>
 8009788:	6023      	str	r3, [r4, #0]
 800978a:	bd38      	pop	{r3, r4, r5, pc}
 800978c:	20000818 	.word	0x20000818

08009790 <_raise_r>:
 8009790:	291f      	cmp	r1, #31
 8009792:	b538      	push	{r3, r4, r5, lr}
 8009794:	4604      	mov	r4, r0
 8009796:	460d      	mov	r5, r1
 8009798:	d904      	bls.n	80097a4 <_raise_r+0x14>
 800979a:	2316      	movs	r3, #22
 800979c:	6003      	str	r3, [r0, #0]
 800979e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097a2:	bd38      	pop	{r3, r4, r5, pc}
 80097a4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80097a6:	b112      	cbz	r2, 80097ae <_raise_r+0x1e>
 80097a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097ac:	b94b      	cbnz	r3, 80097c2 <_raise_r+0x32>
 80097ae:	4620      	mov	r0, r4
 80097b0:	f000 f830 	bl	8009814 <_getpid_r>
 80097b4:	462a      	mov	r2, r5
 80097b6:	4601      	mov	r1, r0
 80097b8:	4620      	mov	r0, r4
 80097ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097be:	f000 b817 	b.w	80097f0 <_kill_r>
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d00a      	beq.n	80097dc <_raise_r+0x4c>
 80097c6:	1c59      	adds	r1, r3, #1
 80097c8:	d103      	bne.n	80097d2 <_raise_r+0x42>
 80097ca:	2316      	movs	r3, #22
 80097cc:	6003      	str	r3, [r0, #0]
 80097ce:	2001      	movs	r0, #1
 80097d0:	e7e7      	b.n	80097a2 <_raise_r+0x12>
 80097d2:	2400      	movs	r4, #0
 80097d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80097d8:	4628      	mov	r0, r5
 80097da:	4798      	blx	r3
 80097dc:	2000      	movs	r0, #0
 80097de:	e7e0      	b.n	80097a2 <_raise_r+0x12>

080097e0 <raise>:
 80097e0:	4b02      	ldr	r3, [pc, #8]	; (80097ec <raise+0xc>)
 80097e2:	4601      	mov	r1, r0
 80097e4:	6818      	ldr	r0, [r3, #0]
 80097e6:	f7ff bfd3 	b.w	8009790 <_raise_r>
 80097ea:	bf00      	nop
 80097ec:	20000064 	.word	0x20000064

080097f0 <_kill_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	; (8009810 <_kill_r+0x20>)
 80097f4:	2300      	movs	r3, #0
 80097f6:	4604      	mov	r4, r0
 80097f8:	4608      	mov	r0, r1
 80097fa:	4611      	mov	r1, r2
 80097fc:	602b      	str	r3, [r5, #0]
 80097fe:	f7f8 fd2a 	bl	8002256 <_kill>
 8009802:	1c43      	adds	r3, r0, #1
 8009804:	d102      	bne.n	800980c <_kill_r+0x1c>
 8009806:	682b      	ldr	r3, [r5, #0]
 8009808:	b103      	cbz	r3, 800980c <_kill_r+0x1c>
 800980a:	6023      	str	r3, [r4, #0]
 800980c:	bd38      	pop	{r3, r4, r5, pc}
 800980e:	bf00      	nop
 8009810:	20000818 	.word	0x20000818

08009814 <_getpid_r>:
 8009814:	f7f8 bd17 	b.w	8002246 <_getpid>

08009818 <_init>:
 8009818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800981a:	bf00      	nop
 800981c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800981e:	bc08      	pop	{r3}
 8009820:	469e      	mov	lr, r3
 8009822:	4770      	bx	lr

08009824 <_fini>:
 8009824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009826:	bf00      	nop
 8009828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800982a:	bc08      	pop	{r3}
 800982c:	469e      	mov	lr, r3
 800982e:	4770      	bx	lr
