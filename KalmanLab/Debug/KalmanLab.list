
KalmanLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb84  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f0  0800bd48  0800bd48  0001bd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c338  0800c338  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c338  0800c338  0001c338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c340  0800c340  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c340  0800c340  0001c340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c344  0800c344  0001c344  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c348  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001e8  0800c530  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000830  0800c530  00020830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f735  00000000  00000000  000202d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040aa  00000000  00000000  0003fa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00043ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011e5  00000000  00000000  000452a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002f1c5  00000000  00000000  0004648d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e949  00000000  00000000  00075652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012055d  00000000  00000000  00093f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000077b8  00000000  00000000  001b44f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001bbcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000341f  00000000  00000000  001bbd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  001bf139  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800bd2c 	.word	0x0800bd2c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001ec 	.word	0x200001ec
 80001fc:	0800bd2c 	.word	0x0800bd2c

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <calculateDiff>:
#include "main.h"
#include <math.h>
// Substract data from original
void calculateDiff(float originalArray[], float calculatedArray[], float differenceArray[],int length){
 8000f74:	b480      	push	{r7}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	607a      	str	r2, [r7, #4]
 8000f80:	603b      	str	r3, [r7, #0]
	for(int i = 0; i<length; i++){
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	e016      	b.n	8000fb6 <calculateDiff+0x42>
		differenceArray[i] = originalArray[i] - calculatedArray[i];
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	68fa      	ldr	r2, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	ed93 7a00 	vldr	s14, [r3]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	edd3 7a00 	vldr	s15, [r3]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	687a      	ldr	r2, [r7, #4]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fac:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i<length; i++){
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	697a      	ldr	r2, [r7, #20]
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	dbe4      	blt.n	8000f88 <calculateDiff+0x14>
	}
}
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <calculateAvg>:
// Average Calculation
float calculateAvg(float differenceArray[], int length){
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	float sum = 0;
 8000fd6:	f04f 0300 	mov.w	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i<length;i++){
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
 8000fe0:	e00e      	b.n	8001000 <calculateAvg+0x34>
		sum += differenceArray[i];
 8000fe2:	68bb      	ldr	r3, [r7, #8]
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	ed97 7a03 	vldr	s14, [r7, #12]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	edc7 7a03 	vstr	s15, [r7, #12]
	for (int i = 0; i<length;i++){
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68ba      	ldr	r2, [r7, #8]
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbec      	blt.n	8000fe2 <calculateAvg+0x16>
	}
	return sum/length;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001012:	ed97 7a03 	vldr	s14, [r7, #12]
 8001016:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800101a:	eef0 7a66 	vmov.f32	s15, s13
}
 800101e:	eeb0 0a67 	vmov.f32	s0, s15
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	0000      	movs	r0, r0
	...

08001030 <calculateStDev>:
// Standard Deviation calculation
float calculateStDev(float differenceArray[], float mean, int length){
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	ed87 0a02 	vstr	s0, [r7, #8]
 800103c:	6079      	str	r1, [r7, #4]
	float sumSD = 0.0;
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
	for(int i =0; i<length;i++){
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	e02b      	b.n	80010a2 <calculateStDev+0x72>
		sumSD += pow(differenceArray[i]-mean,2);
 800104a:	69bb      	ldr	r3, [r7, #24]
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	4413      	add	r3, r2
 8001052:	ed93 7a00 	vldr	s14, [r3]
 8001056:	edd7 7a02 	vldr	s15, [r7, #8]
 800105a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa89 	bl	8000578 <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80010f0 <calculateStDev+0xc0>
 800106e:	ec43 2b10 	vmov	d0, r2, r3
 8001072:	f009 fef1 	bl	800ae58 <pow>
 8001076:	ec55 4b10 	vmov	r4, r5, d0
 800107a:	69f8      	ldr	r0, [r7, #28]
 800107c:	f7ff fa7c 	bl	8000578 <__aeabi_f2d>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	4620      	mov	r0, r4
 8001086:	4629      	mov	r1, r5
 8001088:	f7ff f918 	bl	80002bc <__adddf3>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fda0 	bl	8000bd8 <__aeabi_d2f>
 8001098:	4603      	mov	r3, r0
 800109a:	61fb      	str	r3, [r7, #28]
	for(int i =0; i<length;i++){
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	3301      	adds	r3, #1
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	dbcf      	blt.n	800104a <calculateStDev+0x1a>
	}

	float var = sumSD/length;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80010b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010bc:	edc7 7a05 	vstr	s15, [r7, #20]

	return sqrt(var);
 80010c0:	6978      	ldr	r0, [r7, #20]
 80010c2:	f7ff fa59 	bl	8000578 <__aeabi_f2d>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	ec43 2b10 	vmov	d0, r2, r3
 80010ce:	f009 ff33 	bl	800af38 <sqrt>
 80010d2:	ec53 2b10 	vmov	r2, r3, d0
 80010d6:	4610      	mov	r0, r2
 80010d8:	4619      	mov	r1, r3
 80010da:	f7ff fd7d 	bl	8000bd8 <__aeabi_d2f>
 80010de:	4603      	mov	r3, r0
 80010e0:	ee07 3a90 	vmov	s15, r3

}
 80010e4:	eeb0 0a67 	vmov.f32	s0, s15
 80010e8:	3720      	adds	r7, #32
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bdb0      	pop	{r4, r5, r7, pc}
 80010ee:	bf00      	nop
 80010f0:	00000000 	.word	0x00000000
 80010f4:	40000000 	.word	0x40000000

080010f8 <calculateCorrelation>:
// Correlation between original and tracked vector
void calculateCorrelation(float originalArray[], float calculatedArray[], float correlationArray[], int length){
 80010f8:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 80010fc:	b08b      	sub	sp, #44	; 0x2c
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
 8001106:	603b      	str	r3, [r7, #0]
 8001108:	466b      	mov	r3, sp
 800110a:	4618      	mov	r0, r3
	for(int i = 0; i<2*length-1;i++){
 800110c:	2300      	movs	r3, #0
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
 8001110:	e009      	b.n	8001126 <calculateCorrelation+0x2e>
			correlationArray[i] = 0.0;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<2*length-1;i++){
 8001120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001122:	3301      	adds	r3, #1
 8001124:	627b      	str	r3, [r7, #36]	; 0x24
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	3b01      	subs	r3, #1
 800112c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112e:	429a      	cmp	r2, r3
 8001130:	dbef      	blt.n	8001112 <calculateCorrelation+0x1a>
	}
	float inputYReversed[length];
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	1e4b      	subs	r3, r1, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	460a      	mov	r2, r1
 800113a:	2300      	movs	r3, #0
 800113c:	4690      	mov	r8, r2
 800113e:	4699      	mov	r9, r3
 8001140:	f04f 0200 	mov.w	r2, #0
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800114c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001150:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001154:	460a      	mov	r2, r1
 8001156:	2300      	movs	r3, #0
 8001158:	4614      	mov	r4, r2
 800115a:	461d      	mov	r5, r3
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	016b      	lsls	r3, r5, #5
 8001166:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 800116a:	0162      	lsls	r2, r4, #5
 800116c:	460b      	mov	r3, r1
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	3307      	adds	r3, #7
 8001172:	08db      	lsrs	r3, r3, #3
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	ebad 0d03 	sub.w	sp, sp, r3
 800117a:	466b      	mov	r3, sp
 800117c:	3303      	adds	r3, #3
 800117e:	089b      	lsrs	r3, r3, #2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	613b      	str	r3, [r7, #16]
	for (int i =0; i<length;i++){
 8001184:	2300      	movs	r3, #0
 8001186:	623b      	str	r3, [r7, #32]
 8001188:	e011      	b.n	80011ae <calculateCorrelation+0xb6>
		inputYReversed[i] = calculatedArray[length-i-1];
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001194:	3b01      	subs	r3, #1
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	4413      	add	r3, r2
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	601a      	str	r2, [r3, #0]
	for (int i =0; i<length;i++){
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	3301      	adds	r3, #1
 80011ac:	623b      	str	r3, [r7, #32]
 80011ae:	6a3a      	ldr	r2, [r7, #32]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbe9      	blt.n	800118a <calculateCorrelation+0x92>
	}
	for (int i = 0;i<2*length-1;i++){
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
 80011ba:	e035      	b.n	8001228 <calculateCorrelation+0x130>
		for(int j = 0;j<length;j++){
 80011bc:	2300      	movs	r3, #0
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	e02b      	b.n	800121a <calculateCorrelation+0x122>
			if (i-j >= 0 && i-j <length){
 80011c2:	69fa      	ldr	r2, [r7, #28]
 80011c4:	69bb      	ldr	r3, [r7, #24]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db23      	blt.n	8001214 <calculateCorrelation+0x11c>
 80011cc:	69fa      	ldr	r2, [r7, #28]
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	dd1d      	ble.n	8001214 <calculateCorrelation+0x11c>
				correlationArray[i] += originalArray[j]*inputYReversed[i-j];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	4413      	add	r3, r2
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	edd3 6a00 	vldr	s13, [r3]
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	69bb      	ldr	r3, [r7, #24]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	687a      	ldr	r2, [r7, #4]
 800120a:	4413      	add	r3, r2
 800120c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001210:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0;j<length;j++){
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	3301      	adds	r3, #1
 8001218:	61bb      	str	r3, [r7, #24]
 800121a:	69ba      	ldr	r2, [r7, #24]
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	429a      	cmp	r2, r3
 8001220:	dbcf      	blt.n	80011c2 <calculateCorrelation+0xca>
	for (int i = 0;i<2*length-1;i++){
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3301      	adds	r3, #1
 8001226:	61fb      	str	r3, [r7, #28]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	3b01      	subs	r3, #1
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbc3      	blt.n	80011bc <calculateCorrelation+0xc4>
 8001234:	4685      	mov	sp, r0
			}

		}
	}
}
 8001236:	bf00      	nop
 8001238:	372c      	adds	r7, #44	; 0x2c
 800123a:	46bd      	mov	sp, r7
 800123c:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 8001240:	4770      	bx	lr

08001242 <calculateConvolution>:
// Convolution Between two vectors
void calculateConvolution(float originalArray[], float calculatedArray[], float resultArray[], int length){
 8001242:	b480      	push	{r7}
 8001244:	b089      	sub	sp, #36	; 0x24
 8001246:	af00      	add	r7, sp, #0
 8001248:	60f8      	str	r0, [r7, #12]
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]
	for(int i = 0; i<2*length-1;i++){
 8001250:	2300      	movs	r3, #0
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	e009      	b.n	800126a <calculateConvolution+0x28>
		resultArray[i] = 0.0;
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<2*length-1;i++){
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3301      	adds	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	3b01      	subs	r3, #1
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbef      	blt.n	8001256 <calculateConvolution+0x14>
	}
	for(int i = 0; i<2*length-1;i++){
 8001276:	2300      	movs	r3, #0
 8001278:	61bb      	str	r3, [r7, #24]
 800127a:	e035      	b.n	80012e8 <calculateConvolution+0xa6>
		for(int j = 0; j<length;j++){
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]
 8001280:	e02b      	b.n	80012da <calculateConvolution+0x98>
			if (i-j >= 0 && i-j <length){
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	1ad3      	subs	r3, r2, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	db23      	blt.n	80012d4 <calculateConvolution+0x92>
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	dd1d      	ble.n	80012d4 <calculateConvolution+0x92>
				resultArray[i] += originalArray[j]*calculatedArray[i-j];
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	4413      	add	r3, r2
 80012a0:	ed93 7a00 	vldr	s14, [r3]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	68fa      	ldr	r2, [r7, #12]
 80012aa:	4413      	add	r3, r2
 80012ac:	edd3 6a00 	vldr	s13, [r3]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	4413      	add	r3, r2
 80012bc:	edd3 7a00 	vldr	s15, [r3]
 80012c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d0:	edc3 7a00 	vstr	s15, [r3]
		for(int j = 0; j<length;j++){
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	3301      	adds	r3, #1
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697a      	ldr	r2, [r7, #20]
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	429a      	cmp	r2, r3
 80012e0:	dbcf      	blt.n	8001282 <calculateConvolution+0x40>
	for(int i = 0; i<2*length-1;i++){
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	3b01      	subs	r3, #1
 80012ee:	69ba      	ldr	r2, [r7, #24]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	dbc3      	blt.n	800127c <calculateConvolution+0x3a>
			}
		}
	}
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	; 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <calculateDiffCMSIS>:
#include "main.h"

// Substract data from original
void calculateDiffCMSIS(float* originalArray[], float* calculatedArray[], float* differenceArray[],uint32_t length){
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	60f8      	str	r0, [r7, #12]
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	603b      	str	r3, [r7, #0]
		arm_sub_f32(originalArray,calculatedArray, differenceArray,length);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	687a      	ldr	r2, [r7, #4]
 8001314:	68b9      	ldr	r1, [r7, #8]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f006 ffa4 	bl	8008264 <arm_sub_f32>
}
 800131c:	bf00      	nop
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <calculateAvgCMSIS>:

// Average Calculation
float calculateAvgCMSIS(float* differenceArray[],uint32_t length){
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	float output;
	arm_mean_f32(differenceArray, length, &output);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	461a      	mov	r2, r3
 8001334:	6839      	ldr	r1, [r7, #0]
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f006 fa06 	bl	8007748 <arm_mean_f32>
	return output;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	ee07 3a90 	vmov	s15, r3
}
 8001342:	eeb0 0a67 	vmov.f32	s0, s15
 8001346:	3710      	adds	r7, #16
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <calculateStDevCMSIS>:
// Standard Deviation calculation
float calculateStDevCMSIS(float* differenceArray[],uint32_t length){
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	6039      	str	r1, [r7, #0]
	float output;
	arm_std_f32(differenceArray, length, &output);
 8001356:	f107 030c 	add.w	r3, r7, #12
 800135a:	461a      	mov	r2, r3
 800135c:	6839      	ldr	r1, [r7, #0]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f006 f968 	bl	8007634 <arm_std_f32>
	return output;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	ee07 3a90 	vmov	s15, r3

}
 800136a:	eeb0 0a67 	vmov.f32	s0, s15
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <calculateCorrelationCMSIS>:
// Correlation between original and tracked vector
void calculateCorrelationCMSIS(float originalArray[], float calculatedArray[], float correlationArray[], int length){
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
	arm_correlate_f32(originalArray, length, calculatedArray, length, correlationArray);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	9300      	str	r3, [sp, #0]
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68ba      	ldr	r2, [r7, #8]
 800138a:	6839      	ldr	r1, [r7, #0]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f006 fa19 	bl	80077c4 <arm_correlate_f32>
}
 8001392:	bf00      	nop
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <calculateConvolutionCMSIS>:
// Convolution Between two vectors
void calculateConvolutionCMSIS(float originalArray[], float calculatedArray[], float resultArray[], int length){
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af02      	add	r7, sp, #8
 80013a0:	60f8      	str	r0, [r7, #12]
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	603b      	str	r3, [r7, #0]
	arm_conv_f32(originalArray, length, calculatedArray, length, resultArray);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	9300      	str	r3, [sp, #0]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	6839      	ldr	r1, [r7, #0]
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f006 fcbc 	bl	8007d30 <arm_conv_f32>
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <KalmanFilterCMSIS>:
#include "main.h"


// CMSIS
  int KalmanFilterCMSIS(float* InputArray, float* OutputArray, struct kalman_state * kstate, int length){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	603b      	str	r3, [r7, #0]
      	for (int i = 0; i<length; i++){
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e075      	b.n	80014c0 <KalmanFilterCMSIS+0x100>

      		arm_add_f32(&kstate->p, &kstate->q,&kstate->p,1);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f103 000c 	add.w	r0, r3, #12
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f103 020c 	add.w	r2, r3, #12
 80013e2:	2301      	movs	r3, #1
 80013e4:	f006 fff2 	bl	80083cc <arm_add_f32>
      		float add = 0;
 80013e8:	f04f 0300 	mov.w	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
      		arm_add_f32(&kstate->p,&kstate->r,&add,1);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f103 000c 	add.w	r0, r3, #12
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	1d19      	adds	r1, r3, #4
 80013f8:	f107 021c 	add.w	r2, r7, #28
 80013fc:	2301      	movs	r3, #1
 80013fe:	f006 ffe5 	bl	80083cc <arm_add_f32>
      		kstate->k = kstate->p/add;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	edd3 6a03 	vldr	s13, [r3, #12]
 8001408:	ed97 7a07 	vldr	s14, [r7, #28]
 800140c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	edc3 7a04 	vstr	s15, [r3, #16]
      		float mul = 0;
 8001416:	f04f 0300 	mov.w	r3, #0
 800141a:	61bb      	str	r3, [r7, #24]
      		float sub = 0;
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
      		float constant = 1;
 8001422:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001426:	613b      	str	r3, [r7, #16]
      		arm_sub_f32(&InputArray[i],&kstate->x,&sub,1);
 8001428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	18d0      	adds	r0, r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f103 0108 	add.w	r1, r3, #8
 8001436:	f107 0214 	add.w	r2, r7, #20
 800143a:	2301      	movs	r3, #1
 800143c:	f006 ff12 	bl	8008264 <arm_sub_f32>
      		arm_mult_f32(&sub,&kstate->k,&mul,1);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f103 0110 	add.w	r1, r3, #16
 8001446:	f107 0218 	add.w	r2, r7, #24
 800144a:	f107 0014 	add.w	r0, r7, #20
 800144e:	2301      	movs	r3, #1
 8001450:	f006 ff62 	bl	8008318 <arm_mult_f32>
      		arm_add_f32(&mul,&kstate->x,&kstate->x,1);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f103 0108 	add.w	r1, r3, #8
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f103 0208 	add.w	r2, r3, #8
 8001460:	f107 0018 	add.w	r0, r7, #24
 8001464:	2301      	movs	r3, #1
 8001466:	f006 ffb1 	bl	80083cc <arm_add_f32>
      		arm_sub_f32(&constant,&kstate->k,&sub,1);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f103 0110 	add.w	r1, r3, #16
 8001470:	f107 0214 	add.w	r2, r7, #20
 8001474:	f107 0010 	add.w	r0, r7, #16
 8001478:	2301      	movs	r3, #1
 800147a:	f006 fef3 	bl	8008264 <arm_sub_f32>
      		arm_mult_f32(&kstate->p,&sub,&kstate->p,1);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f103 000c 	add.w	r0, r3, #12
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f103 020c 	add.w	r2, r3, #12
 800148a:	f107 0114 	add.w	r1, r7, #20
 800148e:	2301      	movs	r3, #1
 8001490:	f006 ff42 	bl	8008318 <arm_mult_f32>
      		OutputArray[i] = kstate->x;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6892      	ldr	r2, [r2, #8]
 80014a0:	601a      	str	r2, [r3, #0]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) 
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80014a2:	eef1 3a10 	vmrs	r3, fpscr
      		int a = __get_FPSCR();
 80014a6:	623b      	str	r3, [r7, #32]
      		if ((a & 268435456) != 0){
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d003      	beq.n	80014ba <KalmanFilterCMSIS+0xfa>
      			printf("Overflow.");
 80014b2:	4808      	ldr	r0, [pc, #32]	; (80014d4 <KalmanFilterCMSIS+0x114>)
 80014b4:	f007 fd0c 	bl	8008ed0 <iprintf>
      			while (1){}
 80014b8:	e7fe      	b.n	80014b8 <KalmanFilterCMSIS+0xf8>
      	for (int i = 0; i<length; i++){
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
 80014c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	db85      	blt.n	80013d4 <KalmanFilterCMSIS+0x14>
      		}
      	}
      	return 0;
 80014c8:	2300      	movs	r3, #0
   }
 80014ca:	4618      	mov	r0, r3
 80014cc:	3728      	adds	r7, #40	; 0x28
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	0800bd48 	.word	0x0800bd48

080014d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014dc:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
 80014e0:	af00      	add	r7, sp, #0
int main(void)
 80014e2:	f507 7312 	add.w	r3, r7, #584	; 0x248
 80014e6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80014ea:	f001 fb78 	bl	8002bde <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f9a7 	bl	8001840 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014f2:	f000 fa07 	bl	8001904 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f6:	f000 fd5d 	bl	8001fb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80014fa:	f000 fa33 	bl	8001964 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80014fe:	f000 fa95 	bl	8001a2c <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8001502:	f000 facb 	bl	8001a9c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001506:	f000 fb09 	bl	8001b1c <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 800150a:	f000 fb47 	bl	8001b9c <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 800150e:	f000 fb9b 	bl	8001c48 <MX_SPI1_Init>
  MX_SPI3_Init();
 8001512:	f000 fbd7 	bl	8001cc4 <MX_SPI3_Init>
  MX_UART4_Init();
 8001516:	f000 fc13 	bl	8001d40 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800151a:	f000 fc5d 	bl	8001dd8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800151e:	f000 fca7 	bl	8001e70 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001522:	f000 fcf3 	bl	8001f0c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8001526:	f000 fd3d 	bl	8001fa4 <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 800152a:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800152e:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001532:	4abe      	ldr	r2, [pc, #760]	; (800182c <main+0x354>)
 8001534:	4618      	mov	r0, r3
 8001536:	4611      	mov	r1, r2
 8001538:	f44f 73ca 	mov.w	r3, #404	; 0x194
 800153c:	461a      	mov	r2, r3
 800153e:	f007 fd12 	bl	8008f66 <memcpy>
  					9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087,
  					9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
  					10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
  					9.5799256668};

  float measurement[] = {0,1,2,3,4};
 8001542:	f507 730a 	add.w	r3, r7, #552	; 0x228
 8001546:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800154a:	4ab9      	ldr	r2, [pc, #740]	; (8001830 <main+0x358>)
 800154c:	461d      	mov	r5, r3
 800154e:	4614      	mov	r4, r2
 8001550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	602b      	str	r3, [r5, #0]
  struct kalman_state SValue = {0.1,0.1,10,0.1,0};
 8001558:	f507 730a 	add.w	r3, r7, #552	; 0x228
 800155c:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8001560:	4ab4      	ldr	r2, [pc, #720]	; (8001834 <main+0x35c>)
 8001562:	461d      	mov	r5, r3
 8001564:	4614      	mov	r4, r2
 8001566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	602b      	str	r3, [r5, #0]
  int Length = sizeof(TEST_ARRAY)/sizeof(TEST_ARRAY[0]);
 800156e:	2365      	movs	r3, #101	; 0x65
 8001570:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  float outputArray[Length];
 8001574:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8001578:	1e4b      	subs	r3, r1, #1
 800157a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 800157e:	460a      	mov	r2, r1
 8001580:	2300      	movs	r3, #0
 8001582:	4690      	mov	r8, r2
 8001584:	4699      	mov	r9, r3
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8001592:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001596:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800159a:	460a      	mov	r2, r1
 800159c:	2300      	movs	r3, #0
 800159e:	4692      	mov	sl, r2
 80015a0:	469b      	mov	fp, r3
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80015ae:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80015b2:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80015b6:	460b      	mov	r3, r1
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3307      	adds	r3, #7
 80015bc:	08db      	lsrs	r3, r3, #3
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	ebad 0d03 	sub.w	sp, sp, r3
 80015c4:	466b      	mov	r3, sp
 80015c6:	3303      	adds	r3, #3
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	009b      	lsls	r3, r3, #2
 80015cc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  float differenceArray[Length];
 80015d0:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 80015d4:	1e4b      	subs	r3, r1, #1
 80015d6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 80015da:	460a      	mov	r2, r1
 80015dc:	2300      	movs	r3, #0
 80015de:	62ba      	str	r2, [r7, #40]	; 0x28
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 0300 	mov.w	r3, #0
 80015ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80015ee:	4628      	mov	r0, r5
 80015f0:	0143      	lsls	r3, r0, #5
 80015f2:	4620      	mov	r0, r4
 80015f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80015f8:	4620      	mov	r0, r4
 80015fa:	0142      	lsls	r2, r0, #5
 80015fc:	460a      	mov	r2, r1
 80015fe:	2300      	movs	r3, #0
 8001600:	623a      	str	r2, [r7, #32]
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001610:	4628      	mov	r0, r5
 8001612:	0143      	lsls	r3, r0, #5
 8001614:	4620      	mov	r0, r4
 8001616:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800161a:	4620      	mov	r0, r4
 800161c:	0142      	lsls	r2, r0, #5
 800161e:	460b      	mov	r3, r1
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	3307      	adds	r3, #7
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	ebad 0d03 	sub.w	sp, sp, r3
 800162c:	466b      	mov	r3, sp
 800162e:	3303      	adds	r3, #3
 8001630:	089b      	lsrs	r3, r3, #2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
  float avg = 0.0;
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
  float SD = 0.0;
 8001640:	f04f 0300 	mov.w	r3, #0
 8001644:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  float correlationArray[2*Length-1];
 8001648:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	1e59      	subs	r1, r3, #1
 8001650:	1e4b      	subs	r3, r1, #1
 8001652:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 8001656:	460a      	mov	r2, r1
 8001658:	2300      	movs	r3, #0
 800165a:	61ba      	str	r2, [r7, #24]
 800165c:	61fb      	str	r3, [r7, #28]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	f04f 0300 	mov.w	r3, #0
 8001666:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 800166a:	4628      	mov	r0, r5
 800166c:	0143      	lsls	r3, r0, #5
 800166e:	4620      	mov	r0, r4
 8001670:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001674:	4620      	mov	r0, r4
 8001676:	0142      	lsls	r2, r0, #5
 8001678:	460a      	mov	r2, r1
 800167a:	2300      	movs	r3, #0
 800167c:	613a      	str	r2, [r7, #16]
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800168c:	4628      	mov	r0, r5
 800168e:	0143      	lsls	r3, r0, #5
 8001690:	4620      	mov	r0, r4
 8001692:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001696:	4620      	mov	r0, r4
 8001698:	0142      	lsls	r2, r0, #5
 800169a:	460b      	mov	r3, r1
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	3307      	adds	r3, #7
 80016a0:	08db      	lsrs	r3, r3, #3
 80016a2:	00db      	lsls	r3, r3, #3
 80016a4:	ebad 0d03 	sub.w	sp, sp, r3
 80016a8:	466b      	mov	r3, sp
 80016aa:	3303      	adds	r3, #3
 80016ac:	089b      	lsrs	r3, r3, #2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  float convolutionArray[2*Length-1];
 80016b4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	1e59      	subs	r1, r3, #1
 80016bc:	1e4b      	subs	r3, r1, #1
 80016be:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80016c2:	460a      	mov	r2, r1
 80016c4:	2300      	movs	r3, #0
 80016c6:	60ba      	str	r2, [r7, #8]
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80016d6:	4628      	mov	r0, r5
 80016d8:	0143      	lsls	r3, r0, #5
 80016da:	4620      	mov	r0, r4
 80016dc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016e0:	4620      	mov	r0, r4
 80016e2:	0142      	lsls	r2, r0, #5
 80016e4:	460a      	mov	r2, r1
 80016e6:	2300      	movs	r3, #0
 80016e8:	603a      	str	r2, [r7, #0]
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	f04f 0300 	mov.w	r3, #0
 80016f4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016f8:	4628      	mov	r0, r5
 80016fa:	0143      	lsls	r3, r0, #5
 80016fc:	4620      	mov	r0, r4
 80016fe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001702:	4620      	mov	r0, r4
 8001704:	0142      	lsls	r2, r0, #5
 8001706:	460b      	mov	r3, r1
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	3307      	adds	r3, #7
 800170c:	08db      	lsrs	r3, r3, #3
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	ebad 0d03 	sub.w	sp, sp, r3
 8001714:	466b      	mov	r3, sp
 8001716:	3303      	adds	r3, #3
 8001718:	089b      	lsrs	r3, r3, #2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8001720:	eef1 3a10 	vmrs	r3, fpscr
  uint32_t a = __get_FPSCR();
 8001724:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
  int status = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  {
//	int ArraySize = sizeof(TEST_ARRAY)/sizeof(TEST_ARRAY[0]);
//    int MeasurementSize = sizeof(measurement)/sizeof(measurement[0]);
//	for (int i = 0; i<MeasurementSize;i++){
//		kalman(&SValue, measurement[i]);
	ITM_Port32(31) = 1;
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <main+0x360>)
 8001730:	2201      	movs	r2, #1
 8001732:	601a      	str	r2, [r3, #0]
	KalmanFilterCMSIS(&TEST_ARRAY,outputArray,&SValue, Length);
 8001734:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001738:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800173c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001740:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8001744:	f7ff fe3c 	bl	80013c0 <KalmanFilterCMSIS>
	ITM_Port32(31) = 2;
 8001748:	4b3b      	ldr	r3, [pc, #236]	; (8001838 <main+0x360>)
 800174a:	2202      	movs	r2, #2
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	eef1 3a10 	vmrs	r3, fpscr
	a = __get_FPSCR();
 8001752:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
	if (a & 268435456 != 0){
 8001756:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <main+0x292>
		while (1){
			printf("Overflow detected.");
 8001762:	4836      	ldr	r0, [pc, #216]	; (800183c <main+0x364>)
 8001764:	f007 fbb4 	bl	8008ed0 <iprintf>
 8001768:	e7fb      	b.n	8001762 <main+0x28a>
	// Can monitor value without stopping the program using SWV
	// Cannot change values without stopping the program.
	// CMSIS has generic implementation.


	calculateDiff(&TEST_ARRAY,outputArray, differenceArray, Length);
 800176a:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800176e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8001772:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8001776:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 800177a:	f7ff fbfb 	bl	8000f74 <calculateDiff>
	avg = calculateAvg(differenceArray, Length);
 800177e:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8001782:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 8001786:	f7ff fc21 	bl	8000fcc <calculateAvg>
 800178a:	ed87 0a84 	vstr	s0, [r7, #528]	; 0x210
	SD = calculateStDev(differenceArray, avg, Length);
 800178e:	f8d7 1224 	ldr.w	r1, [r7, #548]	; 0x224
 8001792:	ed97 0a84 	vldr	s0, [r7, #528]	; 0x210
 8001796:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 800179a:	f7ff fc49 	bl	8001030 <calculateStDev>
 800179e:	ed87 0a83 	vstr	s0, [r7, #524]	; 0x20c
	calculateCorrelation(&TEST_ARRAY, outputArray, correlationArray,Length);
 80017a2:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80017a6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80017aa:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 80017ae:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80017b2:	f7ff fca1 	bl	80010f8 <calculateCorrelation>
	calculateConvolution(&TEST_ARRAY, outputArray, convolutionArray,Length);
 80017b6:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80017ba:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80017be:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80017c2:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80017c6:	f7ff fd3c 	bl	8001242 <calculateConvolution>

	calculateDiffCMSIS(TEST_ARRAY,outputArray,differenceArray, Length);
 80017ca:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80017ce:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 80017d2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80017d6:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 80017da:	f7ff fd92 	bl	8001302 <calculateDiffCMSIS>
	avg = calculateAvgCMSIS(differenceArray, Length);
 80017de:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80017e2:	4619      	mov	r1, r3
 80017e4:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80017e8:	f7ff fd9c 	bl	8001324 <calculateAvgCMSIS>
 80017ec:	ed87 0a84 	vstr	s0, [r7, #528]	; 0x210
	SD = calculateStDevCMSIS(differenceArray, Length);
 80017f0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80017f4:	4619      	mov	r1, r3
 80017f6:	f8d7 0214 	ldr.w	r0, [r7, #532]	; 0x214
 80017fa:	f7ff fda7 	bl	800134c <calculateStDevCMSIS>
 80017fe:	ed87 0a83 	vstr	s0, [r7, #524]	; 0x20c
	calculateCorrelationCMSIS(TEST_ARRAY, outputArray, correlationArray,Length);
 8001802:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 8001806:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800180a:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 800180e:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8001812:	f7ff fdaf 	bl	8001374 <calculateCorrelationCMSIS>
	calculateConvolutionCMSIS(TEST_ARRAY, outputArray, convolutionArray,Length);
 8001816:	f107 005c 	add.w	r0, r7, #92	; 0x5c
 800181a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800181e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8001822:	f8d7 121c 	ldr.w	r1, [r7, #540]	; 0x21c
 8001826:	f7ff fdb8 	bl	800139a <calculateConvolutionCMSIS>
	ITM_Port32(31) = 1;
 800182a:	e780      	b.n	800172e <main+0x256>
 800182c:	0800bd68 	.word	0x0800bd68
 8001830:	0800befc 	.word	0x0800befc
 8001834:	0800bf10 	.word	0x0800bf10
 8001838:	e000007c 	.word	0xe000007c
 800183c:	0800bd54 	.word	0x0800bd54

08001840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b096      	sub	sp, #88	; 0x58
 8001844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	2244      	movs	r2, #68	; 0x44
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f007 fb50 	bl	8008ef4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]
 800185c:	609a      	str	r2, [r3, #8]
 800185e:	60da      	str	r2, [r3, #12]
 8001860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001862:	2000      	movs	r0, #0
 8001864:	f003 fb36 	bl	8004ed4 <HAL_PWREx_ControlVoltageScaling>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800186e:	f000 fce3 	bl	8002238 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001872:	f003 faff 	bl	8004e74 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001876:	4b22      	ldr	r3, [pc, #136]	; (8001900 <SystemClock_Config+0xc0>)
 8001878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <SystemClock_Config+0xc0>)
 800187e:	f023 0318 	bic.w	r3, r3, #24
 8001882:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001886:	2314      	movs	r3, #20
 8001888:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800188a:	2301      	movs	r3, #1
 800188c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800188e:	2301      	movs	r3, #1
 8001890:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001892:	2300      	movs	r3, #0
 8001894:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001896:	2360      	movs	r3, #96	; 0x60
 8001898:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800189e:	2301      	movs	r3, #1
 80018a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018a6:	233c      	movs	r3, #60	; 0x3c
 80018a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018aa:	2302      	movs	r3, #2
 80018ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018ae:	2302      	movs	r3, #2
 80018b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018b2:	2302      	movs	r3, #2
 80018b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	4618      	mov	r0, r3
 80018bc:	f003 fbae 	bl	800501c <HAL_RCC_OscConfig>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80018c6:	f000 fcb7 	bl	8002238 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ca:	230f      	movs	r3, #15
 80018cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ce:	2303      	movs	r3, #3
 80018d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018de:	463b      	mov	r3, r7
 80018e0:	2105      	movs	r1, #5
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 ffb4 	bl	8005850 <HAL_RCC_ClockConfig>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80018ee:	f000 fca3 	bl	8002238 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80018f2:	f004 fd9b 	bl	800642c <HAL_RCCEx_EnableMSIPLLMode>
}
 80018f6:	bf00      	nop
 80018f8:	3758      	adds	r7, #88	; 0x58
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40021000 	.word	0x40021000

08001904 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b0a6      	sub	sp, #152	; 0x98
 8001908:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	2294      	movs	r2, #148	; 0x94
 800190e:	2100      	movs	r1, #0
 8001910:	4618      	mov	r0, r3
 8001912:	f007 faef 	bl	8008ef4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 8001916:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800191a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800191c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001924:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001928:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800192a:	2301      	movs	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800192e:	2301      	movs	r3, #1
 8001930:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8001932:	2318      	movs	r3, #24
 8001934:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001936:	2302      	movs	r3, #2
 8001938:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800193a:	2302      	movs	r3, #2
 800193c:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800193e:	2302      	movs	r3, #2
 8001940:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 8001942:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 8001946:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001948:	1d3b      	adds	r3, r7, #4
 800194a:	4618      	mov	r0, r3
 800194c:	f004 fa3e 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001956:	f000 fc6f 	bl	8002238 <Error_Handler>
  }
}
 800195a:	bf00      	nop
 800195c:	3798      	adds	r7, #152	; 0x98
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b086      	sub	sp, #24
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800196a:	463b      	mov	r3, r7
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
 8001978:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800197a:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <MX_ADC1_Init+0xbc>)
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <MX_ADC1_Init+0xc0>)
 800197e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001980:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001982:	2200      	movs	r2, #0
 8001984:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001988:	2200      	movs	r2, #0
 800198a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_ADC1_Init+0xbc>)
 800198e:	2200      	movs	r2, #0
 8001990:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001994:	2200      	movs	r2, #0
 8001996:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001998:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <MX_ADC1_Init+0xbc>)
 800199a:	2204      	movs	r2, #4
 800199c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800199e:	4b20      	ldr	r3, [pc, #128]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019a4:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80019aa:	4b1d      	ldr	r3, [pc, #116]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019ac:	2201      	movs	r2, #1
 80019ae:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019b0:	4b1b      	ldr	r3, [pc, #108]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019b8:	4b19      	ldr	r3, [pc, #100]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019be:	4b18      	ldr	r3, [pc, #96]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80019cc:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019da:	4811      	ldr	r0, [pc, #68]	; (8001a20 <MX_ADC1_Init+0xbc>)
 80019dc:	f001 fb14 	bl	8003008 <HAL_ADC_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80019e6:	f000 fc27 	bl	8002238 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80019ea:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_ADC1_Init+0xc4>)
 80019ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019ee:	2306      	movs	r3, #6
 80019f0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019f6:	237f      	movs	r3, #127	; 0x7f
 80019f8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019fa:	2304      	movs	r3, #4
 80019fc:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a02:	463b      	mov	r3, r7
 8001a04:	4619      	mov	r1, r3
 8001a06:	4806      	ldr	r0, [pc, #24]	; (8001a20 <MX_ADC1_Init+0xbc>)
 8001a08:	f001 fc44 	bl	8003294 <HAL_ADC_ConfigChannel>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001a12:	f000 fc11 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000204 	.word	0x20000204
 8001a24:	50040000 	.word	0x50040000
 8001a28:	04300002 	.word	0x04300002

08001a2c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001a30:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a32:	4a19      	ldr	r2, [pc, #100]	; (8001a98 <MX_DFSDM1_Init+0x6c>)
 8001a34:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8001a36:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a44:	2202      	movs	r2, #2
 8001a46:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001a4e:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001a5a:	4b0e      	ldr	r3, [pc, #56]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a62:	2204      	movs	r2, #4
 8001a64:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8001a66:	4b0b      	ldr	r3, [pc, #44]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8001a72:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001a7e:	4805      	ldr	r0, [pc, #20]	; (8001a94 <MX_DFSDM1_Init+0x68>)
 8001a80:	f002 f916 	bl	8003cb0 <HAL_DFSDM_ChannelInit>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001a8a:	f000 fbd5 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	2000026c 	.word	0x2000026c
 8001a98:	40016040 	.word	0x40016040

08001a9c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001aa2:	4a1c      	ldr	r2, [pc, #112]	; (8001b14 <MX_I2C1_Init+0x78>)
 8001aa4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001aa8:	4a1b      	ldr	r2, [pc, #108]	; (8001b18 <MX_I2C1_Init+0x7c>)
 8001aaa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab2:	4b17      	ldr	r3, [pc, #92]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001abe:	4b14      	ldr	r3, [pc, #80]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ad6:	480e      	ldr	r0, [pc, #56]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001ad8:	f002 fbc3 	bl	8004262 <HAL_I2C_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001ae2:	f000 fba9 	bl	8002238 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4809      	ldr	r0, [pc, #36]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001aea:	f002 fc55 	bl	8004398 <HAL_I2CEx_ConfigAnalogFilter>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001af4:	f000 fba0 	bl	8002238 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001af8:	2100      	movs	r1, #0
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <MX_I2C1_Init+0x74>)
 8001afc:	f002 fc97 	bl	800442e <HAL_I2CEx_ConfigDigitalFilter>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001b06:	f000 fb97 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	200002a4 	.word	0x200002a4
 8001b14:	40005400 	.word	0x40005400
 8001b18:	307075b1 	.word	0x307075b1

08001b1c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001b20:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <MX_I2C2_Init+0x78>)
 8001b24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8001b26:	4b1a      	ldr	r3, [pc, #104]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b28:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <MX_I2C2_Init+0x7c>)
 8001b2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001b2c:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b32:	4b17      	ldr	r3, [pc, #92]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001b56:	480e      	ldr	r0, [pc, #56]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b58:	f002 fb83 	bl	8004262 <HAL_I2C_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001b62:	f000 fb69 	bl	8002238 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001b66:	2100      	movs	r1, #0
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b6a:	f002 fc15 	bl	8004398 <HAL_I2CEx_ConfigAnalogFilter>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001b74:	f000 fb60 	bl	8002238 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_I2C2_Init+0x74>)
 8001b7c:	f002 fc57 	bl	800442e <HAL_I2CEx_ConfigDigitalFilter>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001b86:	f000 fb57 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200002f8 	.word	0x200002f8
 8001b94:	40005800 	.word	0x40005800
 8001b98:	307075b1 	.word	0x307075b1

08001b9c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001bb0:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bb2:	4a24      	ldr	r2, [pc, #144]	; (8001c44 <MX_OCTOSPI1_Init+0xa8>)
 8001bb4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001bb6:	4b22      	ldr	r3, [pc, #136]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001bbc:	4b20      	ldr	r3, [pc, #128]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8001bca:	4b1d      	ldr	r3, [pc, #116]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bcc:	2220      	movs	r2, #32
 8001bce:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001bd0:	4b1b      	ldr	r3, [pc, #108]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8001be2:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001be4:	2201      	movs	r2, #1
 8001be6:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001be8:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001bfc:	2208      	movs	r2, #8
 8001bfe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001c00:	480f      	ldr	r0, [pc, #60]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001c02:	f002 fc61 	bl	80044c8 <HAL_OSPI_Init>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8001c0c:	f000 fb14 	bl	8002238 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8001c10:	2301      	movs	r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001c18:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001c1c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4619      	mov	r1, r3
 8001c26:	4806      	ldr	r0, [pc, #24]	; (8001c40 <MX_OCTOSPI1_Init+0xa4>)
 8001c28:	f002 fd08 	bl	800463c <HAL_OSPIM_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8001c32:	f000 fb01 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8001c36:	bf00      	nop
 8001c38:	3718      	adds	r7, #24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	2000034c 	.word	0x2000034c
 8001c44:	a0001000 	.word	0xa0001000

08001c48 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c4c:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c4e:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <MX_SPI1_Init+0x78>)
 8001c50:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c52:	4b1a      	ldr	r3, [pc, #104]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c54:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c58:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c5a:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c62:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001c66:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c7a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c7e:	2208      	movs	r2, #8
 8001c80:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c96:	2207      	movs	r2, #7
 8001c98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_SPI1_Init+0x74>)
 8001ca8:	f004 fdb8 	bl	800681c <HAL_SPI_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001cb2:	f000 fac1 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000039c 	.word	0x2000039c
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cca:	4a1c      	ldr	r2, [pc, #112]	; (8001d3c <MX_SPI3_Init+0x78>)
 8001ccc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001cce:	4b1a      	ldr	r3, [pc, #104]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd6:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001cdc:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cde:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ce2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001cf0:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cf6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d12:	2207      	movs	r2, #7
 8001d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d1e:	2208      	movs	r2, #8
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001d22:	4805      	ldr	r0, [pc, #20]	; (8001d38 <MX_SPI3_Init+0x74>)
 8001d24:	f004 fd7a 	bl	800681c <HAL_SPI_Init>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001d2e:	f000 fa83 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000400 	.word	0x20000400
 8001d3c:	40003c00 	.word	0x40003c00

08001d40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d46:	4a23      	ldr	r2, [pc, #140]	; (8001dd4 <MX_UART4_Init+0x94>)
 8001d48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001d4a:	4b21      	ldr	r3, [pc, #132]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001d52:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001d58:	4b1d      	ldr	r3, [pc, #116]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001d5e:	4b1c      	ldr	r3, [pc, #112]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001d64:	4b1a      	ldr	r3, [pc, #104]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d66:	220c      	movs	r2, #12
 8001d68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6a:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d70:	4b17      	ldr	r3, [pc, #92]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d7c:	4b14      	ldr	r3, [pc, #80]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d82:	4b13      	ldr	r3, [pc, #76]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001d88:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d8a:	f004 fdea 	bl	8006962 <HAL_UART_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001d94:	f000 fa50 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d98:	2100      	movs	r1, #0
 8001d9a:	480d      	ldr	r0, [pc, #52]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001d9c:	f005 fb80 	bl	80074a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001da6:	f000 fa47 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001daa:	2100      	movs	r1, #0
 8001dac:	4808      	ldr	r0, [pc, #32]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001dae:	f005 fbb5 	bl	800751c <HAL_UARTEx_SetRxFifoThreshold>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001db8:	f000 fa3e 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001dbc:	4804      	ldr	r0, [pc, #16]	; (8001dd0 <MX_UART4_Init+0x90>)
 8001dbe:	f005 fb36 	bl	800742e <HAL_UARTEx_DisableFifoMode>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001dc8:	f000 fa36 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001dcc:	bf00      	nop
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000464 	.word	0x20000464
 8001dd4:	40004c00 	.word	0x40004c00

08001dd8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dde:	4a23      	ldr	r2, [pc, #140]	; (8001e6c <MX_USART1_UART_Init+0x94>)
 8001de0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001de2:	4b21      	ldr	r3, [pc, #132]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001de4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001de8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001dfe:	220c      	movs	r2, #12
 8001e00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e20:	4811      	ldr	r0, [pc, #68]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e22:	f004 fd9e 	bl	8006962 <HAL_UART_Init>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001e2c:	f000 fa04 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e30:	2100      	movs	r1, #0
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e34:	f005 fb34 	bl	80074a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001e3e:	f000 f9fb 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e42:	2100      	movs	r1, #0
 8001e44:	4808      	ldr	r0, [pc, #32]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e46:	f005 fb69 	bl	800751c <HAL_UARTEx_SetRxFifoThreshold>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001e50:	f000 f9f2 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001e54:	4804      	ldr	r0, [pc, #16]	; (8001e68 <MX_USART1_UART_Init+0x90>)
 8001e56:	f005 faea 	bl	800742e <HAL_UARTEx_DisableFifoMode>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001e60:	f000 f9ea 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e64:	bf00      	nop
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	200004f8 	.word	0x200004f8
 8001e6c:	40013800 	.word	0x40013800

08001e70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e74:	4b23      	ldr	r3, [pc, #140]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e76:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <MX_USART2_UART_Init+0x98>)
 8001e78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e7a:	4b22      	ldr	r3, [pc, #136]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e88:	4b1e      	ldr	r3, [pc, #120]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e96:	220c      	movs	r2, #12
 8001e98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001e9c:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001ea0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eba:	4812      	ldr	r0, [pc, #72]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001ebc:	f004 fd51 	bl	8006962 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8001ec6:	f000 f9b7 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eca:	2100      	movs	r1, #0
 8001ecc:	480d      	ldr	r0, [pc, #52]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001ece:	f005 fae7 	bl	80074a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 8001ed8:	f000 f9ae 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001edc:	2100      	movs	r1, #0
 8001ede:	4809      	ldr	r0, [pc, #36]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001ee0:	f005 fb1c 	bl	800751c <HAL_UARTEx_SetRxFifoThreshold>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 8001eea:	f000 f9a5 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_USART2_UART_Init+0x94>)
 8001ef0:	f005 fa9d 	bl	800742e <HAL_UARTEx_DisableFifoMode>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 8001efa:	f000 f99d 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000058c 	.word	0x2000058c
 8001f08:	40004400 	.word	0x40004400

08001f0c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f10:	4b22      	ldr	r3, [pc, #136]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f12:	4a23      	ldr	r2, [pc, #140]	; (8001fa0 <MX_USART3_UART_Init+0x94>)
 8001f14:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f16:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f1c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f2a:	4b1c      	ldr	r3, [pc, #112]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f32:	220c      	movs	r2, #12
 8001f34:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f36:	4b19      	ldr	r3, [pc, #100]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f3c:	4b17      	ldr	r3, [pc, #92]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f54:	4811      	ldr	r0, [pc, #68]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f56:	f004 fd04 	bl	8006962 <HAL_UART_Init>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001f60:	f000 f96a 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f64:	2100      	movs	r1, #0
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f68:	f005 fa9a 	bl	80074a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001f72:	f000 f961 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f76:	2100      	movs	r1, #0
 8001f78:	4808      	ldr	r0, [pc, #32]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f7a:	f005 facf 	bl	800751c <HAL_UARTEx_SetRxFifoThreshold>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001f84:	f000 f958 	bl	8002238 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001f88:	4804      	ldr	r0, [pc, #16]	; (8001f9c <MX_USART3_UART_Init+0x90>)
 8001f8a:	f005 fa50 	bl	800742e <HAL_UARTEx_DisableFifoMode>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001f94:	f000 f950 	bl	8002238 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	20000620 	.word	0x20000620
 8001fa0:	40004800 	.word	0x40004800

08001fa4 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fba:	f107 031c 	add.w	r3, r7, #28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fca:	4b96      	ldr	r3, [pc, #600]	; (8002224 <MX_GPIO_Init+0x270>)
 8001fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fce:	4a95      	ldr	r2, [pc, #596]	; (8002224 <MX_GPIO_Init+0x270>)
 8001fd0:	f043 0310 	orr.w	r3, r3, #16
 8001fd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd6:	4b93      	ldr	r3, [pc, #588]	; (8002224 <MX_GPIO_Init+0x270>)
 8001fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	61bb      	str	r3, [r7, #24]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe2:	4b90      	ldr	r3, [pc, #576]	; (8002224 <MX_GPIO_Init+0x270>)
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe6:	4a8f      	ldr	r2, [pc, #572]	; (8002224 <MX_GPIO_Init+0x270>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fee:	4b8d      	ldr	r3, [pc, #564]	; (8002224 <MX_GPIO_Init+0x270>)
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ffa:	4b8a      	ldr	r3, [pc, #552]	; (8002224 <MX_GPIO_Init+0x270>)
 8001ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffe:	4a89      	ldr	r2, [pc, #548]	; (8002224 <MX_GPIO_Init+0x270>)
 8002000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002006:	4b87      	ldr	r3, [pc, #540]	; (8002224 <MX_GPIO_Init+0x270>)
 8002008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	4b84      	ldr	r3, [pc, #528]	; (8002224 <MX_GPIO_Init+0x270>)
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	4a83      	ldr	r2, [pc, #524]	; (8002224 <MX_GPIO_Init+0x270>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201e:	4b81      	ldr	r3, [pc, #516]	; (8002224 <MX_GPIO_Init+0x270>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	4b7e      	ldr	r3, [pc, #504]	; (8002224 <MX_GPIO_Init+0x270>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	4a7d      	ldr	r2, [pc, #500]	; (8002224 <MX_GPIO_Init+0x270>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002036:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <MX_GPIO_Init+0x270>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60bb      	str	r3, [r7, #8]
 8002040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002042:	4b78      	ldr	r3, [pc, #480]	; (8002224 <MX_GPIO_Init+0x270>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	4a77      	ldr	r2, [pc, #476]	; (8002224 <MX_GPIO_Init+0x270>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800204e:	4b75      	ldr	r3, [pc, #468]	; (8002224 <MX_GPIO_Init+0x270>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	607b      	str	r3, [r7, #4]
 8002058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 800205a:	2200      	movs	r2, #0
 800205c:	f240 1105 	movw	r1, #261	; 0x105
 8002060:	4871      	ldr	r0, [pc, #452]	; (8002228 <MX_GPIO_Init+0x274>)
 8002062:	f002 f8c3 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 8002066:	2200      	movs	r2, #0
 8002068:	f248 111c 	movw	r1, #33052	; 0x811c
 800206c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002070:	f002 f8bc 	bl	80041ec <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002074:	2200      	movs	r2, #0
 8002076:	f24f 0134 	movw	r1, #61492	; 0xf034
 800207a:	486c      	ldr	r0, [pc, #432]	; (800222c <MX_GPIO_Init+0x278>)
 800207c:	f002 f8b6 	bl	80041ec <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8002080:	2200      	movs	r2, #0
 8002082:	f242 0183 	movw	r1, #8323	; 0x2083
 8002086:	486a      	ldr	r0, [pc, #424]	; (8002230 <MX_GPIO_Init+0x27c>)
 8002088:	f002 f8b0 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 800208c:	2200      	movs	r2, #0
 800208e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002092:	4868      	ldr	r0, [pc, #416]	; (8002234 <MX_GPIO_Init+0x280>)
 8002094:	f002 f8aa 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8002098:	f240 1305 	movw	r3, #261	; 0x105
 800209c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209e:	2301      	movs	r3, #1
 80020a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	485d      	ldr	r0, [pc, #372]	; (8002228 <MX_GPIO_Init+0x274>)
 80020b2:	f001 ff09 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 80020b6:	237a      	movs	r3, #122	; 0x7a
 80020b8:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	4619      	mov	r1, r3
 80020ca:	4857      	ldr	r0, [pc, #348]	; (8002228 <MX_GPIO_Init+0x274>)
 80020cc:	f001 fefc 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80020d0:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80020d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80020da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020dc:	2300      	movs	r3, #0
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4853      	ldr	r0, [pc, #332]	; (8002234 <MX_GPIO_Init+0x280>)
 80020e8:	f001 feee 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80020ec:	f248 131c 	movw	r3, #33052	; 0x811c
 80020f0:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f2:	2301      	movs	r3, #1
 80020f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002108:	f001 fede 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800210c:	2301      	movs	r3, #1
 800210e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002110:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4619      	mov	r1, r3
 8002120:	4842      	ldr	r0, [pc, #264]	; (800222c <MX_GPIO_Init+0x278>)
 8002122:	f001 fed1 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8002126:	2302      	movs	r3, #2
 8002128:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800212a:	2302      	movs	r3, #2
 800212c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212e:	2300      	movs	r3, #0
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002136:	2302      	movs	r3, #2
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800213a:	f107 031c 	add.w	r3, r7, #28
 800213e:	4619      	mov	r1, r3
 8002140:	483a      	ldr	r0, [pc, #232]	; (800222c <MX_GPIO_Init+0x278>)
 8002142:	f001 fec1 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8002146:	f24f 0334 	movw	r3, #61492	; 0xf034
 800214a:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2300      	movs	r3, #0
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002158:	f107 031c 	add.w	r3, r7, #28
 800215c:	4619      	mov	r1, r3
 800215e:	4833      	ldr	r0, [pc, #204]	; (800222c <MX_GPIO_Init+0x278>)
 8002160:	f001 feb2 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 8002164:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8002168:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800216a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800216e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002170:	2300      	movs	r3, #0
 8002172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	4619      	mov	r1, r3
 800217a:	482d      	ldr	r0, [pc, #180]	; (8002230 <MX_GPIO_Init+0x27c>)
 800217c:	f001 fea4 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8002180:	f242 0383 	movw	r3, #8323	; 0x2083
 8002184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002186:	2301      	movs	r3, #1
 8002188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002192:	f107 031c 	add.w	r3, r7, #28
 8002196:	4619      	mov	r1, r3
 8002198:	4825      	ldr	r0, [pc, #148]	; (8002230 <MX_GPIO_Init+0x27c>)
 800219a:	f001 fe95 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800219e:	f44f 7310 	mov.w	r3, #576	; 0x240
 80021a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a4:	2301      	movs	r3, #1
 80021a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a8:	2300      	movs	r3, #0
 80021aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ac:	2300      	movs	r3, #0
 80021ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021b0:	f107 031c 	add.w	r3, r7, #28
 80021b4:	4619      	mov	r1, r3
 80021b6:	481f      	ldr	r0, [pc, #124]	; (8002234 <MX_GPIO_Init+0x280>)
 80021b8:	f001 fe86 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80021bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021c2:	2300      	movs	r3, #0
 80021c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021d4:	f001 fe78 	bl	8003ec8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80021d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80021dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	2300      	movs	r3, #0
 80021e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e6:	2303      	movs	r3, #3
 80021e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021ea:	230a      	movs	r3, #10
 80021ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ee:	f107 031c 	add.w	r3, r7, #28
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021f8:	f001 fe66 	bl	8003ec8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2017      	movs	r0, #23
 8002202:	f001 fd1e 	bl	8003c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002206:	2017      	movs	r0, #23
 8002208:	f001 fd37 	bl	8003c7a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800220c:	2200      	movs	r2, #0
 800220e:	2100      	movs	r1, #0
 8002210:	2028      	movs	r0, #40	; 0x28
 8002212:	f001 fd16 	bl	8003c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002216:	2028      	movs	r0, #40	; 0x28
 8002218:	f001 fd2f 	bl	8003c7a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800221c:	bf00      	nop
 800221e:	3730      	adds	r7, #48	; 0x30
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	48001000 	.word	0x48001000
 800222c:	48000400 	.word	0x48000400
 8002230:	48000c00 	.word	0x48000c00
 8002234:	48000800 	.word	0x48000800

08002238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800223c:	b672      	cpsid	i
}
 800223e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002240:	e7fe      	b.n	8002240 <Error_Handler+0x8>
	...

08002244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800224a:	4b0f      	ldr	r3, [pc, #60]	; (8002288 <HAL_MspInit+0x44>)
 800224c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800224e:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_MspInit+0x44>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6613      	str	r3, [r2, #96]	; 0x60
 8002256:	4b0c      	ldr	r3, [pc, #48]	; (8002288 <HAL_MspInit+0x44>)
 8002258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_MspInit+0x44>)
 8002264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_MspInit+0x44>)
 8002268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800226c:	6593      	str	r3, [r2, #88]	; 0x58
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_MspInit+0x44>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000

0800228c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a15      	ldr	r2, [pc, #84]	; (8002300 <HAL_ADC_MspInit+0x74>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d123      	bne.n	80022f6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_ADC_MspInit+0x78>)
 80022b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b2:	4a14      	ldr	r2, [pc, #80]	; (8002304 <HAL_ADC_MspInit+0x78>)
 80022b4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_ADC_MspInit+0x78>)
 80022bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022c6:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <HAL_ADC_MspInit+0x78>)
 80022c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ca:	4a0e      	ldr	r2, [pc, #56]	; (8002304 <HAL_ADC_MspInit+0x78>)
 80022cc:	f043 0304 	orr.w	r3, r3, #4
 80022d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022d2:	4b0c      	ldr	r3, [pc, #48]	; (8002304 <HAL_ADC_MspInit+0x78>)
 80022d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d6:	f003 0304 	and.w	r3, r3, #4
 80022da:	60fb      	str	r3, [r7, #12]
 80022dc:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80022de:	233f      	movs	r3, #63	; 0x3f
 80022e0:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80022e2:	230b      	movs	r3, #11
 80022e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ea:	f107 0314 	add.w	r3, r7, #20
 80022ee:	4619      	mov	r1, r3
 80022f0:	4805      	ldr	r0, [pc, #20]	; (8002308 <HAL_ADC_MspInit+0x7c>)
 80022f2:	f001 fde9 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	50040000 	.word	0x50040000
 8002304:	40021000 	.word	0x40021000
 8002308:	48000800 	.word	0x48000800

0800230c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b0ae      	sub	sp, #184	; 0xb8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002324:	f107 0310 	add.w	r3, r7, #16
 8002328:	2294      	movs	r2, #148	; 0x94
 800232a:	2100      	movs	r1, #0
 800232c:	4618      	mov	r0, r3
 800232e:	f006 fde1 	bl	8008ef4 <memset>
  if(DFSDM1_Init == 0)
 8002332:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d142      	bne.n	80023c0 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800233a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800233e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002346:	f107 0310 	add.w	r3, r7, #16
 800234a:	4618      	mov	r0, r3
 800234c:	f003 fd3e 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8002356:	f7ff ff6f 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 800235c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235e:	4a1b      	ldr	r2, [pc, #108]	; (80023cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002360:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002364:	6613      	str	r3, [r2, #96]	; 0x60
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800236a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	4a15      	ldr	r2, [pc, #84]	; (80023cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002378:	f043 0310 	orr.w	r3, r3, #16
 800237c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800237e:	4b13      	ldr	r3, [pc, #76]	; (80023cc <HAL_DFSDM_ChannelMspInit+0xc0>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002382:	f003 0310 	and.w	r3, r3, #16
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 800238a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800238e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80023a4:	2306      	movs	r3, #6
 80023a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023ae:	4619      	mov	r1, r3
 80023b0:	4807      	ldr	r0, [pc, #28]	; (80023d0 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80023b2:	f001 fd89 	bl	8003ec8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80023b6:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3301      	adds	r3, #1
 80023bc:	4a02      	ldr	r2, [pc, #8]	; (80023c8 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80023be:	6013      	str	r3, [r2, #0]
  }

}
 80023c0:	bf00      	nop
 80023c2:	37b8      	adds	r7, #184	; 0xb8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	200006b4 	.word	0x200006b4
 80023cc:	40021000 	.word	0x40021000
 80023d0:	48001000 	.word	0x48001000

080023d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b0b0      	sub	sp, #192	; 0xc0
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023ec:	f107 0318 	add.w	r3, r7, #24
 80023f0:	2294      	movs	r2, #148	; 0x94
 80023f2:	2100      	movs	r1, #0
 80023f4:	4618      	mov	r0, r3
 80023f6:	f006 fd7d 	bl	8008ef4 <memset>
  if(hi2c->Instance==I2C1)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a42      	ldr	r2, [pc, #264]	; (8002508 <HAL_I2C_MspInit+0x134>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d13c      	bne.n	800247e <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002404:	2340      	movs	r3, #64	; 0x40
 8002406:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002408:	2300      	movs	r3, #0
 800240a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240c:	f107 0318 	add.w	r3, r7, #24
 8002410:	4618      	mov	r0, r3
 8002412:	f003 fcdb 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800241c:	f7ff ff0c 	bl	8002238 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002420:	4b3a      	ldr	r3, [pc, #232]	; (800250c <HAL_I2C_MspInit+0x138>)
 8002422:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002424:	4a39      	ldr	r2, [pc, #228]	; (800250c <HAL_I2C_MspInit+0x138>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800242c:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_I2C_MspInit+0x138>)
 800242e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	617b      	str	r3, [r7, #20]
 8002436:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8002438:	f44f 7340 	mov.w	r3, #768	; 0x300
 800243c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002440:	2312      	movs	r3, #18
 8002442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002446:	2301      	movs	r3, #1
 8002448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002452:	2304      	movs	r3, #4
 8002454:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002458:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800245c:	4619      	mov	r1, r3
 800245e:	482c      	ldr	r0, [pc, #176]	; (8002510 <HAL_I2C_MspInit+0x13c>)
 8002460:	f001 fd32 	bl	8003ec8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_I2C_MspInit+0x138>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002468:	4a28      	ldr	r2, [pc, #160]	; (800250c <HAL_I2C_MspInit+0x138>)
 800246a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800246e:	6593      	str	r3, [r2, #88]	; 0x58
 8002470:	4b26      	ldr	r3, [pc, #152]	; (800250c <HAL_I2C_MspInit+0x138>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002478:	613b      	str	r3, [r7, #16]
 800247a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800247c:	e040      	b.n	8002500 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a24      	ldr	r2, [pc, #144]	; (8002514 <HAL_I2C_MspInit+0x140>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d13b      	bne.n	8002500 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002488:	2380      	movs	r3, #128	; 0x80
 800248a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800248c:	2300      	movs	r3, #0
 800248e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002490:	f107 0318 	add.w	r3, r7, #24
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fc99 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 80024a0:	f7ff feca 	bl	8002238 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_I2C_MspInit+0x138>)
 80024a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a8:	4a18      	ldr	r2, [pc, #96]	; (800250c <HAL_I2C_MspInit+0x138>)
 80024aa:	f043 0302 	orr.w	r3, r3, #2
 80024ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <HAL_I2C_MspInit+0x138>)
 80024b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80024bc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024c4:	2312      	movs	r3, #18
 80024c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024d0:	2303      	movs	r3, #3
 80024d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80024d6:	2304      	movs	r3, #4
 80024d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80024e0:	4619      	mov	r1, r3
 80024e2:	480b      	ldr	r0, [pc, #44]	; (8002510 <HAL_I2C_MspInit+0x13c>)
 80024e4:	f001 fcf0 	bl	8003ec8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <HAL_I2C_MspInit+0x138>)
 80024ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ec:	4a07      	ldr	r2, [pc, #28]	; (800250c <HAL_I2C_MspInit+0x138>)
 80024ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024f2:	6593      	str	r3, [r2, #88]	; 0x58
 80024f4:	4b05      	ldr	r3, [pc, #20]	; (800250c <HAL_I2C_MspInit+0x138>)
 80024f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
}
 8002500:	bf00      	nop
 8002502:	37c0      	adds	r7, #192	; 0xc0
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40005400 	.word	0x40005400
 800250c:	40021000 	.word	0x40021000
 8002510:	48000400 	.word	0x48000400
 8002514:	40005800 	.word	0x40005800

08002518 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b0b0      	sub	sp, #192	; 0xc0
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002530:	f107 0318 	add.w	r3, r7, #24
 8002534:	2294      	movs	r2, #148	; 0x94
 8002536:	2100      	movs	r1, #0
 8002538:	4618      	mov	r0, r3
 800253a:	f006 fcdb 	bl	8008ef4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a28      	ldr	r2, [pc, #160]	; (80025e4 <HAL_OSPI_MspInit+0xcc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d149      	bne.n	80025dc <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800254c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002554:	f107 0318 	add.w	r3, r7, #24
 8002558:	4618      	mov	r0, r3
 800255a:	f003 fc37 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d001      	beq.n	8002568 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8002564:	f7ff fe68 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8002568:	4b1f      	ldr	r3, [pc, #124]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 800256a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256c:	4a1e      	ldr	r2, [pc, #120]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 800256e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002572:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002574:	4b1c      	ldr	r3, [pc, #112]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 8002576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002578:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 8002582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 8002586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258a:	6513      	str	r3, [r2, #80]	; 0x50
 800258c:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 800258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002598:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 800259a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800259c:	4a12      	ldr	r2, [pc, #72]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 800259e:	f043 0310 	orr.w	r3, r3, #16
 80025a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a4:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <HAL_OSPI_MspInit+0xd0>)
 80025a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80025b0:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80025b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025be:	2300      	movs	r3, #0
 80025c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80025ca:	230a      	movs	r3, #10
 80025cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025d0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025d4:	4619      	mov	r1, r3
 80025d6:	4805      	ldr	r0, [pc, #20]	; (80025ec <HAL_OSPI_MspInit+0xd4>)
 80025d8:	f001 fc76 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80025dc:	bf00      	nop
 80025de:	37c0      	adds	r7, #192	; 0xc0
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	a0001000 	.word	0xa0001000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	48001000 	.word	0x48001000

080025f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a2f      	ldr	r2, [pc, #188]	; (80026cc <HAL_SPI_MspInit+0xdc>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d129      	bne.n	8002666 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	4a2e      	ldr	r2, [pc, #184]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002618:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800261c:	6613      	str	r3, [r2, #96]	; 0x60
 800261e:	4b2c      	ldr	r3, [pc, #176]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002622:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a28      	ldr	r2, [pc, #160]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8002642:	23e0      	movs	r3, #224	; 0xe0
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800264e:	2303      	movs	r3, #3
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002652:	2305      	movs	r3, #5
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002660:	f001 fc32 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002664:	e02d      	b.n	80026c2 <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a1a      	ldr	r2, [pc, #104]	; (80026d4 <HAL_SPI_MspInit+0xe4>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d128      	bne.n	80026c2 <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002676:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002684:	613b      	str	r3, [r7, #16]
 8002686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 800268a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 800268e:	f043 0304 	orr.w	r3, r3, #4
 8002692:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <HAL_SPI_MspInit+0xe0>)
 8002696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80026a0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80026a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a6:	2302      	movs	r3, #2
 80026a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026aa:	2300      	movs	r3, #0
 80026ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ae:	2303      	movs	r3, #3
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026b2:	2306      	movs	r3, #6
 80026b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	4806      	ldr	r0, [pc, #24]	; (80026d8 <HAL_SPI_MspInit+0xe8>)
 80026be:	f001 fc03 	bl	8003ec8 <HAL_GPIO_Init>
}
 80026c2:	bf00      	nop
 80026c4:	3730      	adds	r7, #48	; 0x30
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	40013000 	.word	0x40013000
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40003c00 	.word	0x40003c00
 80026d8:	48000800 	.word	0x48000800

080026dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b0b4      	sub	sp, #208	; 0xd0
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026f8:	2294      	movs	r2, #148	; 0x94
 80026fa:	2100      	movs	r1, #0
 80026fc:	4618      	mov	r0, r3
 80026fe:	f006 fbf9 	bl	8008ef4 <memset>
  if(huart->Instance==UART4)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a83      	ldr	r2, [pc, #524]	; (8002914 <HAL_UART_MspInit+0x238>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d13c      	bne.n	8002786 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800270c:	2308      	movs	r3, #8
 800270e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002710:	2300      	movs	r3, #0
 8002712:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fb57 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d001      	beq.n	8002728 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002724:	f7ff fd88 	bl	8002238 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002728:	4b7b      	ldr	r3, [pc, #492]	; (8002918 <HAL_UART_MspInit+0x23c>)
 800272a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272c:	4a7a      	ldr	r2, [pc, #488]	; (8002918 <HAL_UART_MspInit+0x23c>)
 800272e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002732:	6593      	str	r3, [r2, #88]	; 0x58
 8002734:	4b78      	ldr	r3, [pc, #480]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002738:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002740:	4b75      	ldr	r3, [pc, #468]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002744:	4a74      	ldr	r2, [pc, #464]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800274c:	4b72      	ldr	r3, [pc, #456]	; (8002918 <HAL_UART_MspInit+0x23c>)
 800274e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	623b      	str	r3, [r7, #32]
 8002756:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8002758:	2303      	movs	r3, #3
 800275a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275e:	2302      	movs	r3, #2
 8002760:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800276a:	2303      	movs	r3, #3
 800276c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002770:	2308      	movs	r3, #8
 8002772:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002780:	f001 fba2 	bl	8003ec8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002784:	e0c2      	b.n	800290c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a64      	ldr	r2, [pc, #400]	; (800291c <HAL_UART_MspInit+0x240>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d13b      	bne.n	8002808 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002790:	2301      	movs	r3, #1
 8002792:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002794:	2300      	movs	r3, #0
 8002796:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002798:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fb15 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_MspInit+0xd0>
      Error_Handler();
 80027a8:	f7ff fd46 	bl	8002238 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80027ac:	4b5a      	ldr	r3, [pc, #360]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80027ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027b0:	4a59      	ldr	r2, [pc, #356]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80027b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027b6:	6613      	str	r3, [r2, #96]	; 0x60
 80027b8:	4b57      	ldr	r3, [pc, #348]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80027ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c0:	61fb      	str	r3, [r7, #28]
 80027c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027c4:	4b54      	ldr	r3, [pc, #336]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80027c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c8:	4a53      	ldr	r2, [pc, #332]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027d0:	4b51      	ldr	r3, [pc, #324]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80027d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80027dc:	23c0      	movs	r3, #192	; 0xc0
 80027de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e2:	2302      	movs	r3, #2
 80027e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e8:	2300      	movs	r3, #0
 80027ea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ee:	2303      	movs	r3, #3
 80027f0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027f4:	2307      	movs	r3, #7
 80027f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027fa:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80027fe:	4619      	mov	r1, r3
 8002800:	4847      	ldr	r0, [pc, #284]	; (8002920 <HAL_UART_MspInit+0x244>)
 8002802:	f001 fb61 	bl	8003ec8 <HAL_GPIO_Init>
}
 8002806:	e081      	b.n	800290c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a45      	ldr	r2, [pc, #276]	; (8002924 <HAL_UART_MspInit+0x248>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d13b      	bne.n	800288a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002812:	2302      	movs	r3, #2
 8002814:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002816:	2300      	movs	r3, #0
 8002818:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800281a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800281e:	4618      	mov	r0, r3
 8002820:	f003 fad4 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_UART_MspInit+0x152>
      Error_Handler();
 800282a:	f7ff fd05 	bl	8002238 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800282e:	4b3a      	ldr	r3, [pc, #232]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002832:	4a39      	ldr	r2, [pc, #228]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002838:	6593      	str	r3, [r2, #88]	; 0x58
 800283a:	4b37      	ldr	r3, [pc, #220]	; (8002918 <HAL_UART_MspInit+0x23c>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002842:	617b      	str	r3, [r7, #20]
 8002844:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002846:	4b34      	ldr	r3, [pc, #208]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	4a33      	ldr	r2, [pc, #204]	; (8002918 <HAL_UART_MspInit+0x23c>)
 800284c:	f043 0308 	orr.w	r3, r3, #8
 8002850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002852:	4b31      	ldr	r3, [pc, #196]	; (8002918 <HAL_UART_MspInit+0x23c>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	f003 0308 	and.w	r3, r3, #8
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800285e:	2378      	movs	r3, #120	; 0x78
 8002860:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002876:	2307      	movs	r3, #7
 8002878:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800287c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002880:	4619      	mov	r1, r3
 8002882:	4829      	ldr	r0, [pc, #164]	; (8002928 <HAL_UART_MspInit+0x24c>)
 8002884:	f001 fb20 	bl	8003ec8 <HAL_GPIO_Init>
}
 8002888:	e040      	b.n	800290c <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a27      	ldr	r2, [pc, #156]	; (800292c <HAL_UART_MspInit+0x250>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d13b      	bne.n	800290c <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002894:	2304      	movs	r3, #4
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002898:	2300      	movs	r3, #0
 800289a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800289c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028a0:	4618      	mov	r0, r3
 80028a2:	f003 fa93 	bl	8005dcc <HAL_RCCEx_PeriphCLKConfig>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 80028ac:	f7ff fcc4 	bl	8002238 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	4a18      	ldr	r2, [pc, #96]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80028b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028ba:	6593      	str	r3, [r2, #88]	; 0x58
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80028be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028c4:	60fb      	str	r3, [r7, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80028c8:	4b13      	ldr	r3, [pc, #76]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028cc:	4a12      	ldr	r2, [pc, #72]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80028ce:	f043 0308 	orr.w	r3, r3, #8
 80028d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028d4:	4b10      	ldr	r3, [pc, #64]	; (8002918 <HAL_UART_MspInit+0x23c>)
 80028d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028d8:	f003 0308 	and.w	r3, r3, #8
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80028e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80028e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028e8:	2302      	movs	r3, #2
 80028ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028f4:	2303      	movs	r3, #3
 80028f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028fa:	2307      	movs	r3, #7
 80028fc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002900:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002904:	4619      	mov	r1, r3
 8002906:	4808      	ldr	r0, [pc, #32]	; (8002928 <HAL_UART_MspInit+0x24c>)
 8002908:	f001 fade 	bl	8003ec8 <HAL_GPIO_Init>
}
 800290c:	bf00      	nop
 800290e:	37d0      	adds	r7, #208	; 0xd0
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40004c00 	.word	0x40004c00
 8002918:	40021000 	.word	0x40021000
 800291c:	40013800 	.word	0x40013800
 8002920:	48000400 	.word	0x48000400
 8002924:	40004400 	.word	0x40004400
 8002928:	48000c00 	.word	0x48000c00
 800292c:	40004800 	.word	0x40004800

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002934:	e7fe      	b.n	8002934 <NMI_Handler+0x4>

08002936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <MemManage_Handler+0x4>

08002942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <BusFault_Handler+0x4>

08002948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <UsageFault_Handler+0x4>

0800294e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297c:	f000 f984 	bl	8002c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002988:	2020      	movs	r0, #32
 800298a:	f001 fc47 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800298e:	2040      	movs	r0, #64	; 0x40
 8002990:	f001 fc44 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8002994:	2080      	movs	r0, #128	; 0x80
 8002996:	f001 fc41 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800299a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800299e:	f001 fc3d 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 80029aa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80029ae:	f001 fc35 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80029b2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80029b6:	f001 fc31 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 80029ba:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80029be:	f001 fc2d 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80029c2:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029c6:	f001 fc29 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80029ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80029ce:	f001 fc25 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80029d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80029d6:	f001 fc21 	bl	800421c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	bd80      	pop	{r7, pc}

080029de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0
  return 1;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_kill>:

int _kill(int pid, int sig)
{
 80029ee:	b580      	push	{r7, lr}
 80029f0:	b082      	sub	sp, #8
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	6078      	str	r0, [r7, #4]
 80029f6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029f8:	f006 fa88 	bl	8008f0c <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2216      	movs	r2, #22
 8002a00:	601a      	str	r2, [r3, #0]
  return -1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <_exit>:

void _exit (int status)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b082      	sub	sp, #8
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a16:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff ffe7 	bl	80029ee <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a20:	e7fe      	b.n	8002a20 <_exit+0x12>

08002a22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	617b      	str	r3, [r7, #20]
 8002a32:	e00a      	b.n	8002a4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a34:	f3af 8000 	nop.w
 8002a38:	4601      	mov	r1, r0
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	60ba      	str	r2, [r7, #8]
 8002a40:	b2ca      	uxtb	r2, r1
 8002a42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	3301      	adds	r3, #1
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	dbf0      	blt.n	8002a34 <_read+0x12>
  }

  return len;
 8002a52:	687b      	ldr	r3, [r7, #4]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	e009      	b.n	8002a82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	60ba      	str	r2, [r7, #8]
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	429a      	cmp	r2, r3
 8002a88:	dbf1      	blt.n	8002a6e <_write+0x12>
  }
  return len;
 8002a8a:	687b      	ldr	r3, [r7, #4]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <_close>:

int _close(int file)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	370c      	adds	r7, #12
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr

08002aac <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abc:	605a      	str	r2, [r3, #4]
  return 0;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <_isatty>:

int _isatty(int file)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ad4:	2301      	movs	r3, #1
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ae2:	b480      	push	{r7}
 8002ae4:	b085      	sub	sp, #20
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	60f8      	str	r0, [r7, #12]
 8002aea:	60b9      	str	r1, [r7, #8]
 8002aec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3714      	adds	r7, #20
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b04:	4a14      	ldr	r2, [pc, #80]	; (8002b58 <_sbrk+0x5c>)
 8002b06:	4b15      	ldr	r3, [pc, #84]	; (8002b5c <_sbrk+0x60>)
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b10:	4b13      	ldr	r3, [pc, #76]	; (8002b60 <_sbrk+0x64>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d102      	bne.n	8002b1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b18:	4b11      	ldr	r3, [pc, #68]	; (8002b60 <_sbrk+0x64>)
 8002b1a:	4a12      	ldr	r2, [pc, #72]	; (8002b64 <_sbrk+0x68>)
 8002b1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b1e:	4b10      	ldr	r3, [pc, #64]	; (8002b60 <_sbrk+0x64>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4413      	add	r3, r2
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d207      	bcs.n	8002b3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b2c:	f006 f9ee 	bl	8008f0c <__errno>
 8002b30:	4603      	mov	r3, r0
 8002b32:	220c      	movs	r2, #12
 8002b34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3a:	e009      	b.n	8002b50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b42:	4b07      	ldr	r3, [pc, #28]	; (8002b60 <_sbrk+0x64>)
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4413      	add	r3, r2
 8002b4a:	4a05      	ldr	r2, [pc, #20]	; (8002b60 <_sbrk+0x64>)
 8002b4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	3718      	adds	r7, #24
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	200a0000 	.word	0x200a0000
 8002b5c:	00000400 	.word	0x00000400
 8002b60:	200006b8 	.word	0x200006b8
 8002b64:	20000830 	.word	0x20000830

08002b68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <SystemInit+0x20>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <SystemInit+0x20>)
 8002b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	e000ed00 	.word	0xe000ed00

08002b8c <Reset_Handler>:
 8002b8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bc4 <LoopForever+0x2>
 8002b90:	f7ff ffea 	bl	8002b68 <SystemInit>
 8002b94:	480c      	ldr	r0, [pc, #48]	; (8002bc8 <LoopForever+0x6>)
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <LoopForever+0xa>)
 8002b98:	4a0d      	ldr	r2, [pc, #52]	; (8002bd0 <LoopForever+0xe>)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e002      	b.n	8002ba4 <LoopCopyDataInit>

08002b9e <CopyDataInit>:
 8002b9e:	58d4      	ldr	r4, [r2, r3]
 8002ba0:	50c4      	str	r4, [r0, r3]
 8002ba2:	3304      	adds	r3, #4

08002ba4 <LoopCopyDataInit>:
 8002ba4:	18c4      	adds	r4, r0, r3
 8002ba6:	428c      	cmp	r4, r1
 8002ba8:	d3f9      	bcc.n	8002b9e <CopyDataInit>
 8002baa:	4a0a      	ldr	r2, [pc, #40]	; (8002bd4 <LoopForever+0x12>)
 8002bac:	4c0a      	ldr	r4, [pc, #40]	; (8002bd8 <LoopForever+0x16>)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	e001      	b.n	8002bb6 <LoopFillZerobss>

08002bb2 <FillZerobss>:
 8002bb2:	6013      	str	r3, [r2, #0]
 8002bb4:	3204      	adds	r2, #4

08002bb6 <LoopFillZerobss>:
 8002bb6:	42a2      	cmp	r2, r4
 8002bb8:	d3fb      	bcc.n	8002bb2 <FillZerobss>
 8002bba:	f006 f9ad 	bl	8008f18 <__libc_init_array>
 8002bbe:	f7fe fc8b 	bl	80014d8 <main>

08002bc2 <LoopForever>:
 8002bc2:	e7fe      	b.n	8002bc2 <LoopForever>
 8002bc4:	200a0000 	.word	0x200a0000
 8002bc8:	20000000 	.word	0x20000000
 8002bcc:	200001e8 	.word	0x200001e8
 8002bd0:	0800c348 	.word	0x0800c348
 8002bd4:	200001e8 	.word	0x200001e8
 8002bd8:	20000830 	.word	0x20000830

08002bdc <ADC1_IRQHandler>:
 8002bdc:	e7fe      	b.n	8002bdc <ADC1_IRQHandler>

08002bde <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002be4:	2300      	movs	r3, #0
 8002be6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be8:	2003      	movs	r0, #3
 8002bea:	f001 f81f 	bl	8003c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f000 f80e 	bl	8002c10 <HAL_InitTick>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d002      	beq.n	8002c00 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	71fb      	strb	r3, [r7, #7]
 8002bfe:	e001      	b.n	8002c04 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c00:	f7ff fb20 	bl	8002244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c04:	79fb      	ldrb	r3, [r7, #7]
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c1c:	4b17      	ldr	r3, [pc, #92]	; (8002c7c <HAL_InitTick+0x6c>)
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d023      	beq.n	8002c6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_InitTick+0x70>)
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_InitTick+0x6c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f001 f82b 	bl	8003c96 <HAL_SYSTICK_Config>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b0f      	cmp	r3, #15
 8002c4a:	d809      	bhi.n	8002c60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c54:	f000 fff5 	bl	8003c42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_InitTick+0x74>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e007      	b.n	8002c70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e004      	b.n	8002c70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e001      	b.n	8002c70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	20000008 	.word	0x20000008
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <HAL_IncTick+0x20>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4b06      	ldr	r3, [pc, #24]	; (8002cac <HAL_IncTick+0x24>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4413      	add	r3, r2
 8002c98:	4a04      	ldr	r2, [pc, #16]	; (8002cac <HAL_IncTick+0x24>)
 8002c9a:	6013      	str	r3, [r2, #0]
}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	200006bc 	.word	0x200006bc

08002cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002cb4:	4b03      	ldr	r3, [pc, #12]	; (8002cc4 <HAL_GetTick+0x14>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200006bc 	.word	0x200006bc

08002cc8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3360      	adds	r3, #96	; 0x60
 8002d42:	461a      	mov	r2, r3
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	4b08      	ldr	r3, [pc, #32]	; (8002d74 <LL_ADC_SetOffset+0x44>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr
 8002d74:	03fff000 	.word	0x03fff000

08002d78 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3360      	adds	r3, #96	; 0x60
 8002d86:	461a      	mov	r2, r3
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b087      	sub	sp, #28
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	3360      	adds	r3, #96	; 0x60
 8002db4:	461a      	mov	r2, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dce:	bf00      	nop
 8002dd0:	371c      	adds	r7, #28
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	615a      	str	r2, [r3, #20]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	3330      	adds	r3, #48	; 0x30
 8002e10:	461a      	mov	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	0a1b      	lsrs	r3, r3, #8
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	f003 031f 	and.w	r3, r3, #31
 8002e2a:	211f      	movs	r1, #31
 8002e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	401a      	ands	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0e9b      	lsrs	r3, r3, #26
 8002e38:	f003 011f 	and.w	r1, r3, #31
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	431a      	orrs	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e4c:	bf00      	nop
 8002e4e:	371c      	adds	r7, #28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3314      	adds	r3, #20
 8002e68:	461a      	mov	r2, r3
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	0e5b      	lsrs	r3, r3, #25
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	f003 0304 	and.w	r3, r3, #4
 8002e74:	4413      	add	r3, r2
 8002e76:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	0d1b      	lsrs	r3, r3, #20
 8002e80:	f003 031f 	and.w	r3, r3, #31
 8002e84:	2107      	movs	r1, #7
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	0d1b      	lsrs	r3, r3, #20
 8002e92:	f003 031f 	and.w	r3, r3, #31
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
	...

08002eb0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	401a      	ands	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f003 0318 	and.w	r3, r3, #24
 8002ed2:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ed4:	40d9      	lsrs	r1, r3
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	400b      	ands	r3, r1
 8002eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	0007ffff 	.word	0x0007ffff

08002ef8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	6093      	str	r3, [r2, #8]
}
 8002f10:	bf00      	nop
 8002f12:	370c      	adds	r7, #12
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f30:	d101      	bne.n	8002f36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f80:	d101      	bne.n	8002f86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	370c      	adds	r7, #12
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d101      	bne.n	8002fac <LL_ADC_IsEnabled+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_ADC_IsEnabled+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d101      	bne.n	8002fd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e000      	b.n	8002fd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fd2:	2300      	movs	r3, #0
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d101      	bne.n	8002ff8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e000      	b.n	8002ffa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
	...

08003008 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003014:	2300      	movs	r3, #0
 8003016:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e129      	b.n	8003276 <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800302c:	2b00      	cmp	r3, #0
 800302e:	d109      	bne.n	8003044 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff f92b 	bl	800228c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff ff67 	bl	8002f1c <LL_ADC_IsDeepPowerDownEnabled>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d004      	beq.n	800305e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7ff ff4d 	bl	8002ef8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff ff82 	bl	8002f6c <LL_ADC_IsInternalRegulatorEnabled>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d115      	bne.n	800309a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4618      	mov	r0, r3
 8003074:	f7ff ff66 	bl	8002f44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003078:	4b81      	ldr	r3, [pc, #516]	; (8003280 <HAL_ADC_Init+0x278>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	099b      	lsrs	r3, r3, #6
 800307e:	4a81      	ldr	r2, [pc, #516]	; (8003284 <HAL_ADC_Init+0x27c>)
 8003080:	fba2 2303 	umull	r2, r3, r2, r3
 8003084:	099b      	lsrs	r3, r3, #6
 8003086:	3301      	adds	r3, #1
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800308c:	e002      	b.n	8003094 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	3b01      	subs	r3, #1
 8003092:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d1f9      	bne.n	800308e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7ff ff64 	bl	8002f6c <LL_ADC_IsInternalRegulatorEnabled>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d10d      	bne.n	80030c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	f043 0210 	orr.w	r2, r3, #16
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ba:	f043 0201 	orr.w	r2, r3, #1
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff ff75 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 80030d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	f040 80c2 	bne.w	8003264 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f040 80be 	bne.w	8003264 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030f0:	f043 0202 	orr.w	r2, r3, #2
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff ff49 	bl	8002f94 <LL_ADC_IsEnabled>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10b      	bne.n	8003120 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003108:	485f      	ldr	r0, [pc, #380]	; (8003288 <HAL_ADC_Init+0x280>)
 800310a:	f7ff ff43 	bl	8002f94 <LL_ADC_IsEnabled>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	4619      	mov	r1, r3
 800311a:	485c      	ldr	r0, [pc, #368]	; (800328c <HAL_ADC_Init+0x284>)
 800311c:	f7ff fdd4 	bl	8002cc8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7e5b      	ldrb	r3, [r3, #25]
 8003124:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800312a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003130:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003136:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003140:	4313      	orrs	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3020 	ldrb.w	r3, [r3, #32]
 800314a:	2b01      	cmp	r3, #1
 800314c:	d106      	bne.n	800315c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	3b01      	subs	r3, #1
 8003154:	045b      	lsls	r3, r3, #17
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4313      	orrs	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2b00      	cmp	r3, #0
 8003162:	d009      	beq.n	8003178 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4313      	orrs	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68da      	ldr	r2, [r3, #12]
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <HAL_ADC_Init+0x288>)
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6812      	ldr	r2, [r2, #0]
 8003186:	69b9      	ldr	r1, [r7, #24]
 8003188:	430b      	orrs	r3, r1
 800318a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff ff25 	bl	8002fe0 <LL_ADC_INJ_IsConversionOngoing>
 8003196:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d140      	bne.n	8003220 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d13d      	bne.n	8003220 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7e1b      	ldrb	r3, [r3, #24]
 80031ac:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031ae:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031b6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c6:	f023 0306 	bic.w	r3, r3, #6
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6812      	ldr	r2, [r2, #0]
 80031ce:	69b9      	ldr	r1, [r7, #24]
 80031d0:	430b      	orrs	r3, r1
 80031d2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d118      	bne.n	8003210 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80031e8:	f023 0304 	bic.w	r3, r3, #4
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031f4:	4311      	orrs	r1, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80031fa:	4311      	orrs	r1, r2
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003200:	430a      	orrs	r2, r1
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	611a      	str	r2, [r3, #16]
 800320e:	e007      	b.n	8003220 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	691a      	ldr	r2, [r3, #16]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d10c      	bne.n	8003242 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322e:	f023 010f 	bic.w	r1, r3, #15
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	631a      	str	r2, [r3, #48]	; 0x30
 8003240:	e007      	b.n	8003252 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f022 020f 	bic.w	r2, r2, #15
 8003250:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	f043 0201 	orr.w	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	659a      	str	r2, [r3, #88]	; 0x58
 8003262:	e007      	b.n	8003274 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003268:	f043 0210 	orr.w	r2, r3, #16
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003274:	7ffb      	ldrb	r3, [r7, #31]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3720      	adds	r7, #32
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	20000000 	.word	0x20000000
 8003284:	053e2d63 	.word	0x053e2d63
 8003288:	50040000 	.word	0x50040000
 800328c:	50040300 	.word	0x50040300
 8003290:	fff0c007 	.word	0xfff0c007

08003294 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b0b6      	sub	sp, #216	; 0xd8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800329e:	2300      	movs	r3, #0
 80032a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x22>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e3d5      	b.n	8003a62 <HAL_ADC_ConfigChannel+0x7ce>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7ff fe79 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 83ba 	bne.w	8003a44 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	2b05      	cmp	r3, #5
 80032de:	d824      	bhi.n	800332a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	3b02      	subs	r3, #2
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d81b      	bhi.n	8003322 <HAL_ADC_ConfigChannel+0x8e>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <HAL_ADC_ConfigChannel+0x5c>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003301 	.word	0x08003301
 80032f4:	08003309 	.word	0x08003309
 80032f8:	08003311 	.word	0x08003311
 80032fc:	08003319 	.word	0x08003319
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8003300:	230c      	movs	r3, #12
 8003302:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003306:	e010      	b.n	800332a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8003308:	2312      	movs	r3, #18
 800330a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800330e:	e00c      	b.n	800332a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8003310:	2318      	movs	r3, #24
 8003312:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003316:	e008      	b.n	800332a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8003318:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003320:	e003      	b.n	800332a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8003322:	2306      	movs	r3, #6
 8003324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8003328:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6818      	ldr	r0, [r3, #0]
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8003338:	f7ff fd62 	bl	8002e00 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fe3a 	bl	8002fba <LL_ADC_REG_IsConversionOngoing>
 8003346:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f7ff fe46 	bl	8002fe0 <LL_ADC_INJ_IsConversionOngoing>
 8003354:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003358:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 81bf 	bne.w	80036e0 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003366:	2b00      	cmp	r3, #0
 8003368:	f040 81ba 	bne.w	80036e0 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003374:	d10f      	bne.n	8003396 <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6818      	ldr	r0, [r3, #0]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2200      	movs	r2, #0
 8003380:	4619      	mov	r1, r3
 8003382:	f7ff fd69 	bl	8002e58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fd23 	bl	8002dda <LL_ADC_SetSamplingTimeCommonConfig>
 8003394:	e00e      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	6819      	ldr	r1, [r3, #0]
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7ff fd58 	bl	8002e58 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fd13 	bl	8002dda <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68db      	ldr	r3, [r3, #12]
 80033be:	08db      	lsrs	r3, r3, #3
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d00a      	beq.n	80033ec <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	6919      	ldr	r1, [r3, #16]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e6:	f7ff fca3 	bl	8002d30 <LL_ADC_SetOffset>
 80033ea:	e179      	b.n	80036e0 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2100      	movs	r1, #0
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7ff fcc0 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 80033f8:	4603      	mov	r3, r0
 80033fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x184>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2100      	movs	r1, #0
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fcb5 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 800340e:	4603      	mov	r3, r0
 8003410:	0e9b      	lsrs	r3, r3, #26
 8003412:	f003 021f 	and.w	r2, r3, #31
 8003416:	e01e      	b.n	8003456 <HAL_ADC_ConfigChannel+0x1c2>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2100      	movs	r1, #0
 800341e:	4618      	mov	r0, r3
 8003420:	f7ff fcaa 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 8003424:	4603      	mov	r3, r0
 8003426:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800342e:	fa93 f3a3 	rbit	r3, r3
 8003432:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003436:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800343a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800343e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8003446:	2320      	movs	r3, #32
 8003448:	e004      	b.n	8003454 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 800344a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345e:	2b00      	cmp	r3, #0
 8003460:	d105      	bne.n	800346e <HAL_ADC_ConfigChannel+0x1da>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	0e9b      	lsrs	r3, r3, #26
 8003468:	f003 031f 	and.w	r3, r3, #31
 800346c:	e018      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x20c>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8003482:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003486:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 800348a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8003492:	2320      	movs	r3, #32
 8003494:	e004      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8003496:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800349a:	fab3 f383 	clz	r3, r3
 800349e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d106      	bne.n	80034b2 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2200      	movs	r2, #0
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff fc79 	bl	8002da4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2101      	movs	r1, #1
 80034b8:	4618      	mov	r0, r3
 80034ba:	f7ff fc5d 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 80034be:	4603      	mov	r3, r0
 80034c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d10a      	bne.n	80034de <HAL_ADC_ConfigChannel+0x24a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2101      	movs	r1, #1
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7ff fc52 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0e9b      	lsrs	r3, r3, #26
 80034d8:	f003 021f 	and.w	r2, r3, #31
 80034dc:	e01e      	b.n	800351c <HAL_ADC_ConfigChannel+0x288>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2101      	movs	r1, #1
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fc47 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80034fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003500:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8003504:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003508:	2b00      	cmp	r3, #0
 800350a:	d101      	bne.n	8003510 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 800350c:	2320      	movs	r3, #32
 800350e:	e004      	b.n	800351a <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003510:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003514:	fab3 f383 	clz	r3, r3
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003524:	2b00      	cmp	r3, #0
 8003526:	d105      	bne.n	8003534 <HAL_ADC_ConfigChannel+0x2a0>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	0e9b      	lsrs	r3, r3, #26
 800352e:	f003 031f 	and.w	r3, r3, #31
 8003532:	e018      	b.n	8003566 <HAL_ADC_ConfigChannel+0x2d2>
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003540:	fa93 f3a3 	rbit	r3, r3
 8003544:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8003548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800354c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8003550:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e004      	b.n	8003566 <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 800355c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003560:	fab3 f383 	clz	r3, r3
 8003564:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003566:	429a      	cmp	r2, r3
 8003568:	d106      	bne.n	8003578 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2200      	movs	r2, #0
 8003570:	2101      	movs	r1, #1
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff fc16 	bl	8002da4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2102      	movs	r1, #2
 800357e:	4618      	mov	r0, r3
 8003580:	f7ff fbfa 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 8003584:	4603      	mov	r3, r0
 8003586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_ADC_ConfigChannel+0x310>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	2102      	movs	r1, #2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff fbef 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 800359a:	4603      	mov	r3, r0
 800359c:	0e9b      	lsrs	r3, r3, #26
 800359e:	f003 021f 	and.w	r2, r3, #31
 80035a2:	e01e      	b.n	80035e2 <HAL_ADC_ConfigChannel+0x34e>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f7ff fbe4 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80035c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80035ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d101      	bne.n	80035d6 <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80035d2:	2320      	movs	r3, #32
 80035d4:	e004      	b.n	80035e0 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80035d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035da:	fab3 f383 	clz	r3, r3
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d105      	bne.n	80035fa <HAL_ADC_ConfigChannel+0x366>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	0e9b      	lsrs	r3, r3, #26
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	e014      	b.n	8003624 <HAL_ADC_ConfigChannel+0x390>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003602:	fa93 f3a3 	rbit	r3, r3
 8003606:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8003608:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800360a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800360e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d101      	bne.n	800361a <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8003616:	2320      	movs	r3, #32
 8003618:	e004      	b.n	8003624 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800361a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800361e:	fab3 f383 	clz	r3, r3
 8003622:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003624:	429a      	cmp	r2, r3
 8003626:	d106      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2200      	movs	r2, #0
 800362e:	2102      	movs	r1, #2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fbb7 	bl	8002da4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2103      	movs	r1, #3
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fb9b 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <HAL_ADC_ConfigChannel+0x3ce>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2103      	movs	r1, #3
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fb90 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	0e9b      	lsrs	r3, r3, #26
 800365c:	f003 021f 	and.w	r2, r3, #31
 8003660:	e017      	b.n	8003692 <HAL_ADC_ConfigChannel+0x3fe>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2103      	movs	r1, #3
 8003668:	4618      	mov	r0, r3
 800366a:	f7ff fb85 	bl	8002d78 <LL_ADC_GetOffsetChannel>
 800366e:	4603      	mov	r3, r0
 8003670:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003674:	fa93 f3a3 	rbit	r3, r3
 8003678:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800367a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800367c:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800367e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8003684:	2320      	movs	r3, #32
 8003686:	e003      	b.n	8003690 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8003688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <HAL_ADC_ConfigChannel+0x416>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	0e9b      	lsrs	r3, r3, #26
 80036a4:	f003 031f 	and.w	r3, r3, #31
 80036a8:	e011      	b.n	80036ce <HAL_ADC_ConfigChannel+0x43a>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036b2:	fa93 f3a3 	rbit	r3, r3
 80036b6:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80036b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80036ba:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80036bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80036c2:	2320      	movs	r3, #32
 80036c4:	e003      	b.n	80036ce <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80036c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036c8:	fab3 f383 	clz	r3, r3
 80036cc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d106      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2200      	movs	r2, #0
 80036d8:	2103      	movs	r1, #3
 80036da:	4618      	mov	r0, r3
 80036dc:	f7ff fb62 	bl	8002da4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f7ff fc55 	bl	8002f94 <LL_ADC_IsEnabled>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f040 813f 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6818      	ldr	r0, [r3, #0]
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	6819      	ldr	r1, [r3, #0]
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	461a      	mov	r2, r3
 8003700:	f7ff fbd6 	bl	8002eb0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a8e      	ldr	r2, [pc, #568]	; (8003944 <HAL_ADC_ConfigChannel+0x6b0>)
 800370a:	4293      	cmp	r3, r2
 800370c:	f040 8130 	bne.w	8003970 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10b      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x4a4>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 031f 	and.w	r3, r3, #31
 800372c:	2b09      	cmp	r3, #9
 800372e:	bf94      	ite	ls
 8003730:	2301      	movls	r3, #1
 8003732:	2300      	movhi	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e019      	b.n	800376c <HAL_ADC_ConfigChannel+0x4d8>
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003740:	fa93 f3a3 	rbit	r3, r3
 8003744:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003748:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800374a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e003      	b.n	800375c <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8003754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003756:	fab3 f383 	clz	r3, r3
 800375a:	b2db      	uxtb	r3, r3
 800375c:	3301      	adds	r3, #1
 800375e:	f003 031f 	and.w	r3, r3, #31
 8003762:	2b09      	cmp	r3, #9
 8003764:	bf94      	ite	ls
 8003766:	2301      	movls	r3, #1
 8003768:	2300      	movhi	r3, #0
 800376a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800376c:	2b00      	cmp	r3, #0
 800376e:	d079      	beq.n	8003864 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d107      	bne.n	800378c <HAL_ADC_ConfigChannel+0x4f8>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	0e9b      	lsrs	r3, r3, #26
 8003782:	3301      	adds	r3, #1
 8003784:	069b      	lsls	r3, r3, #26
 8003786:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800378a:	e015      	b.n	80037b8 <HAL_ADC_ConfigChannel+0x524>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800379a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800379c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800379e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80037a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	069b      	lsls	r3, r3, #26
 80037b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d109      	bne.n	80037d8 <HAL_ADC_ConfigChannel+0x544>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	0e9b      	lsrs	r3, r3, #26
 80037ca:	3301      	adds	r3, #1
 80037cc:	f003 031f 	and.w	r3, r3, #31
 80037d0:	2101      	movs	r1, #1
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	e017      	b.n	8003808 <HAL_ADC_ConfigChannel+0x574>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037e0:	fa93 f3a3 	rbit	r3, r3
 80037e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80037e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80037ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e003      	b.n	80037fc <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 80037f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037f6:	fab3 f383 	clz	r3, r3
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	3301      	adds	r3, #1
 80037fe:	f003 031f 	and.w	r3, r3, #31
 8003802:	2101      	movs	r1, #1
 8003804:	fa01 f303 	lsl.w	r3, r1, r3
 8003808:	ea42 0103 	orr.w	r1, r2, r3
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10a      	bne.n	800382e <HAL_ADC_ConfigChannel+0x59a>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	f003 021f 	and.w	r2, r3, #31
 8003824:	4613      	mov	r3, r2
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	4413      	add	r3, r2
 800382a:	051b      	lsls	r3, r3, #20
 800382c:	e018      	b.n	8003860 <HAL_ADC_ConfigChannel+0x5cc>
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003836:	fa93 f3a3 	rbit	r3, r3
 800383a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 8003846:	2320      	movs	r3, #32
 8003848:	e003      	b.n	8003852 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 800384a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800384c:	fab3 f383 	clz	r3, r3
 8003850:	b2db      	uxtb	r3, r3
 8003852:	3301      	adds	r3, #1
 8003854:	f003 021f 	and.w	r2, r3, #31
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003860:	430b      	orrs	r3, r1
 8003862:	e080      	b.n	8003966 <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_ADC_ConfigChannel+0x5ec>
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	0e9b      	lsrs	r3, r3, #26
 8003876:	3301      	adds	r3, #1
 8003878:	069b      	lsls	r3, r3, #26
 800387a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800387e:	e015      	b.n	80038ac <HAL_ADC_ConfigChannel+0x618>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	fa93 f3a3 	rbit	r3, r3
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8003892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003898:	2320      	movs	r3, #32
 800389a:	e003      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 800389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	3301      	adds	r3, #1
 80038a6:	069b      	lsls	r3, r3, #26
 80038a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d109      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x638>
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	0e9b      	lsrs	r3, r3, #26
 80038be:	3301      	adds	r3, #1
 80038c0:	f003 031f 	and.w	r3, r3, #31
 80038c4:	2101      	movs	r1, #1
 80038c6:	fa01 f303 	lsl.w	r3, r1, r3
 80038ca:	e017      	b.n	80038fc <HAL_ADC_ConfigChannel+0x668>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	61bb      	str	r3, [r7, #24]
  return result;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80038de:	6a3b      	ldr	r3, [r7, #32]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	e003      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f003 031f 	and.w	r3, r3, #31
 80038f6:	2101      	movs	r1, #1
 80038f8:	fa01 f303 	lsl.w	r3, r1, r3
 80038fc:	ea42 0103 	orr.w	r1, r2, r3
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10d      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x694>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	3301      	adds	r3, #1
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	3b1e      	subs	r3, #30
 8003920:	051b      	lsls	r3, r3, #20
 8003922:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003926:	e01d      	b.n	8003964 <HAL_ADC_ConfigChannel+0x6d0>
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	fa93 f3a3 	rbit	r3, r3
 8003934:	60fb      	str	r3, [r7, #12]
  return result;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d103      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003940:	2320      	movs	r3, #32
 8003942:	e005      	b.n	8003950 <HAL_ADC_ConfigChannel+0x6bc>
 8003944:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	fab3 f383 	clz	r3, r3
 800394e:	b2db      	uxtb	r3, r3
 8003950:	3301      	adds	r3, #1
 8003952:	f003 021f 	and.w	r2, r3, #31
 8003956:	4613      	mov	r3, r2
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	4413      	add	r3, r2
 800395c:	3b1e      	subs	r3, #30
 800395e:	051b      	lsls	r3, r3, #20
 8003960:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003964:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800396a:	4619      	mov	r1, r3
 800396c:	f7ff fa74 	bl	8002e58 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b3d      	ldr	r3, [pc, #244]	; (8003a6c <HAL_ADC_ConfigChannel+0x7d8>)
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d06c      	beq.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800397c:	483c      	ldr	r0, [pc, #240]	; (8003a70 <HAL_ADC_ConfigChannel+0x7dc>)
 800397e:	f7ff f9c9 	bl	8002d14 <LL_ADC_GetCommonPathInternalCh>
 8003982:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a3a      	ldr	r2, [pc, #232]	; (8003a74 <HAL_ADC_ConfigChannel+0x7e0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d127      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003990:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003994:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d121      	bne.n	80039e0 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a35      	ldr	r2, [pc, #212]	; (8003a78 <HAL_ADC_ConfigChannel+0x7e4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d157      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80039ae:	4619      	mov	r1, r3
 80039b0:	482f      	ldr	r0, [pc, #188]	; (8003a70 <HAL_ADC_ConfigChannel+0x7dc>)
 80039b2:	f7ff f99c 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_ADC_ConfigChannel+0x7e8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	099b      	lsrs	r3, r3, #6
 80039bc:	4a30      	ldr	r2, [pc, #192]	; (8003a80 <HAL_ADC_ConfigChannel+0x7ec>)
 80039be:	fba2 2303 	umull	r2, r3, r2, r3
 80039c2:	099b      	lsrs	r3, r3, #6
 80039c4:	1c5a      	adds	r2, r3, #1
 80039c6:	4613      	mov	r3, r2
 80039c8:	005b      	lsls	r3, r3, #1
 80039ca:	4413      	add	r3, r2
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039d0:	e002      	b.n	80039d8 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f9      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039de:	e03a      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a27      	ldr	r2, [pc, #156]	; (8003a84 <HAL_ADC_ConfigChannel+0x7f0>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d113      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80039ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10d      	bne.n	8003a12 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a1f      	ldr	r2, [pc, #124]	; (8003a78 <HAL_ADC_ConfigChannel+0x7e4>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d12a      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4819      	ldr	r0, [pc, #100]	; (8003a70 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a0c:	f7ff f96f 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a10:	e021      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a1c      	ldr	r2, [pc, #112]	; (8003a88 <HAL_ADC_ConfigChannel+0x7f4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d11c      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d116      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a12      	ldr	r2, [pc, #72]	; (8003a78 <HAL_ADC_ConfigChannel+0x7e4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d111      	bne.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a36:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <HAL_ADC_ConfigChannel+0x7dc>)
 8003a3e:	f7ff f956 	bl	8002cee <LL_ADC_SetCommonPathInternalCh>
 8003a42:	e008      	b.n	8003a56 <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f043 0220 	orr.w	r2, r3, #32
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003a5e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	37d8      	adds	r7, #216	; 0xd8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	80080000 	.word	0x80080000
 8003a70:	50040300 	.word	0x50040300
 8003a74:	c7520000 	.word	0xc7520000
 8003a78:	50040000 	.word	0x50040000
 8003a7c:	20000000 	.word	0x20000000
 8003a80:	053e2d63 	.word	0x053e2d63
 8003a84:	cb840000 	.word	0xcb840000
 8003a88:	80000001 	.word	0x80000001

08003a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003abe:	4a04      	ldr	r2, [pc, #16]	; (8003ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	60d3      	str	r3, [r2, #12]
}
 8003ac4:	bf00      	nop
 8003ac6:	3714      	adds	r7, #20
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	e000ed00 	.word	0xe000ed00

08003ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ad8:	4b04      	ldr	r3, [pc, #16]	; (8003aec <__NVIC_GetPriorityGrouping+0x18>)
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	0a1b      	lsrs	r3, r3, #8
 8003ade:	f003 0307 	and.w	r3, r3, #7
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aea:	4770      	bx	lr
 8003aec:	e000ed00 	.word	0xe000ed00

08003af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	db0b      	blt.n	8003b1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b02:	79fb      	ldrb	r3, [r7, #7]
 8003b04:	f003 021f 	and.w	r2, r3, #31
 8003b08:	4907      	ldr	r1, [pc, #28]	; (8003b28 <__NVIC_EnableIRQ+0x38>)
 8003b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0e:	095b      	lsrs	r3, r3, #5
 8003b10:	2001      	movs	r0, #1
 8003b12:	fa00 f202 	lsl.w	r2, r0, r2
 8003b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	370c      	adds	r7, #12
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	e000e100 	.word	0xe000e100

08003b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	6039      	str	r1, [r7, #0]
 8003b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	db0a      	blt.n	8003b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	b2da      	uxtb	r2, r3
 8003b44:	490c      	ldr	r1, [pc, #48]	; (8003b78 <__NVIC_SetPriority+0x4c>)
 8003b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4a:	0112      	lsls	r2, r2, #4
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	440b      	add	r3, r1
 8003b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003b54:	e00a      	b.n	8003b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	4908      	ldr	r1, [pc, #32]	; (8003b7c <__NVIC_SetPriority+0x50>)
 8003b5c:	79fb      	ldrb	r3, [r7, #7]
 8003b5e:	f003 030f 	and.w	r3, r3, #15
 8003b62:	3b04      	subs	r3, #4
 8003b64:	0112      	lsls	r2, r2, #4
 8003b66:	b2d2      	uxtb	r2, r2
 8003b68:	440b      	add	r3, r1
 8003b6a:	761a      	strb	r2, [r3, #24]
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100
 8003b7c:	e000ed00 	.word	0xe000ed00

08003b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b089      	sub	sp, #36	; 0x24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0307 	and.w	r3, r3, #7
 8003b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f1c3 0307 	rsb	r3, r3, #7
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	bf28      	it	cs
 8003b9e:	2304      	movcs	r3, #4
 8003ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d902      	bls.n	8003bb0 <NVIC_EncodePriority+0x30>
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	3b03      	subs	r3, #3
 8003bae:	e000      	b.n	8003bb2 <NVIC_EncodePriority+0x32>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43da      	mvns	r2, r3
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	401a      	ands	r2, r3
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	fa01 f303 	lsl.w	r3, r1, r3
 8003bd2:	43d9      	mvns	r1, r3
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003bd8:	4313      	orrs	r3, r2
         );
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3724      	adds	r7, #36	; 0x24
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
	...

08003be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bf8:	d301      	bcc.n	8003bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e00f      	b.n	8003c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003bfe:	4a0a      	ldr	r2, [pc, #40]	; (8003c28 <SysTick_Config+0x40>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c06:	210f      	movs	r1, #15
 8003c08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c0c:	f7ff ff8e 	bl	8003b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c10:	4b05      	ldr	r3, [pc, #20]	; (8003c28 <SysTick_Config+0x40>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <SysTick_Config+0x40>)
 8003c18:	2207      	movs	r2, #7
 8003c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c1c:	2300      	movs	r3, #0
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	e000e010 	.word	0xe000e010

08003c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff ff29 	bl	8003a8c <__NVIC_SetPriorityGrouping>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b086      	sub	sp, #24
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	4603      	mov	r3, r0
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
 8003c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003c54:	f7ff ff3e 	bl	8003ad4 <__NVIC_GetPriorityGrouping>
 8003c58:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	6978      	ldr	r0, [r7, #20]
 8003c60:	f7ff ff8e 	bl	8003b80 <NVIC_EncodePriority>
 8003c64:	4602      	mov	r2, r0
 8003c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c6a:	4611      	mov	r1, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff ff5d 	bl	8003b2c <__NVIC_SetPriority>
}
 8003c72:	bf00      	nop
 8003c74:	3718      	adds	r7, #24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	4603      	mov	r3, r0
 8003c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7ff ff31 	bl	8003af0 <__NVIC_EnableIRQ>
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7ff ffa2 	bl	8003be8 <SysTick_Config>
 8003ca4:	4603      	mov	r3, r0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3708      	adds	r7, #8
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e0ac      	b.n	8003e1c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 f8b2 	bl	8003e30 <DFSDM_GetChannelFromInstance>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4a55      	ldr	r2, [pc, #340]	; (8003e24 <HAL_DFSDM_ChannelInit+0x174>)
 8003cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e09f      	b.n	8003e1c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f7fe fb15 	bl	800230c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8003ce2:	4b51      	ldr	r3, [pc, #324]	; (8003e28 <HAL_DFSDM_ChannelInit+0x178>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	4a4f      	ldr	r2, [pc, #316]	; (8003e28 <HAL_DFSDM_ChannelInit+0x178>)
 8003cea:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8003cec:	4b4e      	ldr	r3, [pc, #312]	; (8003e28 <HAL_DFSDM_ChannelInit+0x178>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d125      	bne.n	8003d40 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a4c      	ldr	r2, [pc, #304]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003cfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003cfe:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003d00:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	4948      	ldr	r1, [pc, #288]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003d0e:	4b47      	ldr	r3, [pc, #284]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a46      	ldr	r2, [pc, #280]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d14:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8003d18:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	791b      	ldrb	r3, [r3, #4]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d108      	bne.n	8003d34 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8003d22:	4b42      	ldr	r3, [pc, #264]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	041b      	lsls	r3, r3, #16
 8003d2e:	493f      	ldr	r1, [pc, #252]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d30:	4313      	orrs	r3, r2
 8003d32:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003d34:	4b3d      	ldr	r3, [pc, #244]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a3c      	ldr	r2, [pc, #240]	; (8003e2c <HAL_DFSDM_ChannelInit+0x17c>)
 8003d3a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003d3e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003d4e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	6819      	ldr	r1, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d5e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003d64:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f022 020f 	bic.w	r2, r2, #15
 8003d7c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	689a      	ldr	r2, [r3, #8]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003da4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6899      	ldr	r1, [r3, #8]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	3b01      	subs	r3, #1
 8003db6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f002 0207 	and.w	r2, r2, #7
 8003dd0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6859      	ldr	r1, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003dfc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f810 	bl	8003e30 <DFSDM_GetChannelFromInstance>
 8003e10:	4602      	mov	r2, r0
 8003e12:	4904      	ldr	r1, [pc, #16]	; (8003e24 <HAL_DFSDM_ChannelInit+0x174>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3708      	adds	r7, #8
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200006c4 	.word	0x200006c4
 8003e28:	200006c0 	.word	0x200006c0
 8003e2c:	40016000 	.word	0x40016000

08003e30 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4a1c      	ldr	r2, [pc, #112]	; (8003eac <DFSDM_GetChannelFromInstance+0x7c>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d102      	bne.n	8003e46 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003e40:	2300      	movs	r3, #0
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	e02b      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a19      	ldr	r2, [pc, #100]	; (8003eb0 <DFSDM_GetChannelFromInstance+0x80>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d102      	bne.n	8003e54 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	e024      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a17      	ldr	r2, [pc, #92]	; (8003eb4 <DFSDM_GetChannelFromInstance+0x84>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d102      	bne.n	8003e62 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e01d      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <DFSDM_GetChannelFromInstance+0x88>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d102      	bne.n	8003e70 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003e6a:	2304      	movs	r3, #4
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e016      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	4a12      	ldr	r2, [pc, #72]	; (8003ebc <DFSDM_GetChannelFromInstance+0x8c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d102      	bne.n	8003e7e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003e78:	2305      	movs	r3, #5
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e00f      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a0f      	ldr	r2, [pc, #60]	; (8003ec0 <DFSDM_GetChannelFromInstance+0x90>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d102      	bne.n	8003e8c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8003e86:	2306      	movs	r3, #6
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	e008      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	4a0d      	ldr	r2, [pc, #52]	; (8003ec4 <DFSDM_GetChannelFromInstance+0x94>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d102      	bne.n	8003e9a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8003e94:	2307      	movs	r3, #7
 8003e96:	60fb      	str	r3, [r7, #12]
 8003e98:	e001      	b.n	8003e9e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40016000 	.word	0x40016000
 8003eb0:	40016020 	.word	0x40016020
 8003eb4:	40016040 	.word	0x40016040
 8003eb8:	40016080 	.word	0x40016080
 8003ebc:	400160a0 	.word	0x400160a0
 8003ec0:	400160c0 	.word	0x400160c0
 8003ec4:	400160e0 	.word	0x400160e0

08003ec8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b087      	sub	sp, #28
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ed6:	e166      	b.n	80041a6 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	2101      	movs	r1, #1
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	f000 8158 	beq.w	80041a0 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f003 0303 	and.w	r3, r3, #3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d005      	beq.n	8003f08 <HAL_GPIO_Init+0x40>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f003 0303 	and.w	r3, r3, #3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d130      	bne.n	8003f6a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	2203      	movs	r2, #3
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	43db      	mvns	r3, r3
 8003f1a:	693a      	ldr	r2, [r7, #16]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	693a      	ldr	r2, [r7, #16]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	693a      	ldr	r2, [r7, #16]
 8003f36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f3e:	2201      	movs	r2, #1
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 0201 	and.w	r2, r3, #1
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d017      	beq.n	8003fa6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2203      	movs	r2, #3
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f003 0303 	and.w	r3, r3, #3
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d123      	bne.n	8003ffa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	08da      	lsrs	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	3208      	adds	r2, #8
 8003fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f003 0307 	and.w	r3, r3, #7
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	220f      	movs	r2, #15
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	08da      	lsrs	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3208      	adds	r2, #8
 8003ff4:	6939      	ldr	r1, [r7, #16]
 8003ff6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	2203      	movs	r2, #3
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43db      	mvns	r3, r3
 800400c:	693a      	ldr	r2, [r7, #16]
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f003 0203 	and.w	r2, r3, #3
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 80b2 	beq.w	80041a0 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403c:	4b61      	ldr	r3, [pc, #388]	; (80041c4 <HAL_GPIO_Init+0x2fc>)
 800403e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004040:	4a60      	ldr	r2, [pc, #384]	; (80041c4 <HAL_GPIO_Init+0x2fc>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6613      	str	r3, [r2, #96]	; 0x60
 8004048:	4b5e      	ldr	r3, [pc, #376]	; (80041c4 <HAL_GPIO_Init+0x2fc>)
 800404a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004054:	4a5c      	ldr	r2, [pc, #368]	; (80041c8 <HAL_GPIO_Init+0x300>)
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	089b      	lsrs	r3, r3, #2
 800405a:	3302      	adds	r3, #2
 800405c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004060:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0303 	and.w	r3, r3, #3
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	220f      	movs	r2, #15
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43db      	mvns	r3, r3
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800407e:	d02b      	beq.n	80040d8 <HAL_GPIO_Init+0x210>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_GPIO_Init+0x304>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d025      	beq.n	80040d4 <HAL_GPIO_Init+0x20c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	4a51      	ldr	r2, [pc, #324]	; (80041d0 <HAL_GPIO_Init+0x308>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d01f      	beq.n	80040d0 <HAL_GPIO_Init+0x208>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a50      	ldr	r2, [pc, #320]	; (80041d4 <HAL_GPIO_Init+0x30c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d019      	beq.n	80040cc <HAL_GPIO_Init+0x204>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	4a4f      	ldr	r2, [pc, #316]	; (80041d8 <HAL_GPIO_Init+0x310>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_GPIO_Init+0x200>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	4a4e      	ldr	r2, [pc, #312]	; (80041dc <HAL_GPIO_Init+0x314>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d00d      	beq.n	80040c4 <HAL_GPIO_Init+0x1fc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a4d      	ldr	r2, [pc, #308]	; (80041e0 <HAL_GPIO_Init+0x318>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d007      	beq.n	80040c0 <HAL_GPIO_Init+0x1f8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a4c      	ldr	r2, [pc, #304]	; (80041e4 <HAL_GPIO_Init+0x31c>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_GPIO_Init+0x1f4>
 80040b8:	2307      	movs	r3, #7
 80040ba:	e00e      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040bc:	2308      	movs	r3, #8
 80040be:	e00c      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040c0:	2306      	movs	r3, #6
 80040c2:	e00a      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040c4:	2305      	movs	r3, #5
 80040c6:	e008      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e006      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040cc:	2303      	movs	r3, #3
 80040ce:	e004      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e002      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040d4:	2301      	movs	r3, #1
 80040d6:	e000      	b.n	80040da <HAL_GPIO_Init+0x212>
 80040d8:	2300      	movs	r3, #0
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	f002 0203 	and.w	r2, r2, #3
 80040e0:	0092      	lsls	r2, r2, #2
 80040e2:	4093      	lsls	r3, r2
 80040e4:	693a      	ldr	r2, [r7, #16]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80040ea:	4937      	ldr	r1, [pc, #220]	; (80041c8 <HAL_GPIO_Init+0x300>)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	3302      	adds	r3, #2
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80040f8:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_GPIO_Init+0x320>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	43db      	mvns	r3, r3
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8004114:	693a      	ldr	r2, [r7, #16]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800411c:	4a32      	ldr	r2, [pc, #200]	; (80041e8 <HAL_GPIO_Init+0x320>)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004122:	4b31      	ldr	r3, [pc, #196]	; (80041e8 <HAL_GPIO_Init+0x320>)
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	43db      	mvns	r3, r3
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	4013      	ands	r3, r2
 8004130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004146:	4a28      	ldr	r2, [pc, #160]	; (80041e8 <HAL_GPIO_Init+0x320>)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800414c:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_GPIO_Init+0x320>)
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	43db      	mvns	r3, r3
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4013      	ands	r3, r2
 800415a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d003      	beq.n	8004170 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8004168:	693a      	ldr	r2, [r7, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004170:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <HAL_GPIO_Init+0x320>)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004176:	4b1c      	ldr	r3, [pc, #112]	; (80041e8 <HAL_GPIO_Init+0x320>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	43db      	mvns	r3, r3
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4013      	ands	r3, r2
 8004184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8004192:	693a      	ldr	r2, [r7, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800419a:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <HAL_GPIO_Init+0x320>)
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	3301      	adds	r3, #1
 80041a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	fa22 f303 	lsr.w	r3, r2, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f47f ae91 	bne.w	8003ed8 <HAL_GPIO_Init+0x10>
  }
}
 80041b6:	bf00      	nop
 80041b8:	bf00      	nop
 80041ba:	371c      	adds	r7, #28
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr
 80041c4:	40021000 	.word	0x40021000
 80041c8:	40010000 	.word	0x40010000
 80041cc:	48000400 	.word	0x48000400
 80041d0:	48000800 	.word	0x48000800
 80041d4:	48000c00 	.word	0x48000c00
 80041d8:	48001000 	.word	0x48001000
 80041dc:	48001400 	.word	0x48001400
 80041e0:	48001800 	.word	0x48001800
 80041e4:	48001c00 	.word	0x48001c00
 80041e8:	40010400 	.word	0x40010400

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004208:	e002      	b.n	8004210 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800420a:	887a      	ldrh	r2, [r7, #2]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	4603      	mov	r3, r0
 8004224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004226:	4b08      	ldr	r3, [pc, #32]	; (8004248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004228:	695a      	ldr	r2, [r3, #20]
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004232:	4a05      	ldr	r2, [pc, #20]	; (8004248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004234:	88fb      	ldrh	r3, [r7, #6]
 8004236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	4618      	mov	r0, r3
 800423c:	f000 f806 	bl	800424c <HAL_GPIO_EXTI_Callback>
  }
}
 8004240:	bf00      	nop
 8004242:	3708      	adds	r7, #8
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40010400 	.word	0x40010400

0800424c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	4603      	mov	r3, r0
 8004254:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e08d      	b.n	8004390 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d106      	bne.n	800428e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7fe f8a3 	bl	80023d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2224      	movs	r2, #36	; 0x24
 8004292:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0201 	bic.w	r2, r2, #1
 80042a4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042b2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042d8:	609a      	str	r2, [r3, #8]
 80042da:	e006      	b.n	80042ea <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d108      	bne.n	8004304 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004300:	605a      	str	r2, [r3, #4]
 8004302:	e007      	b.n	8004314 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	685a      	ldr	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004312:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	6812      	ldr	r2, [r2, #0]
 800431e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004326:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68da      	ldr	r2, [r3, #12]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004336:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	695b      	ldr	r3, [r3, #20]
 8004340:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69d9      	ldr	r1, [r3, #28]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1a      	ldr	r2, [r3, #32]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b20      	cmp	r3, #32
 80043ac:	d138      	bne.n	8004420 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e032      	b.n	8004422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2224      	movs	r2, #36	; 0x24
 80043c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0201 	bic.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80043ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6819      	ldr	r1, [r3, #0]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	683a      	ldr	r2, [r7, #0]
 80043f8:	430a      	orrs	r2, r1
 80043fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	e000      	b.n	8004422 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004420:	2302      	movs	r3, #2
  }
}
 8004422:	4618      	mov	r0, r3
 8004424:	370c      	adds	r7, #12
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b20      	cmp	r3, #32
 8004442:	d139      	bne.n	80044b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800444e:	2302      	movs	r3, #2
 8004450:	e033      	b.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2224      	movs	r2, #36	; 0x24
 800445e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0201 	bic.w	r2, r2, #1
 8004470:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004480:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	021b      	lsls	r3, r3, #8
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e000      	b.n	80044ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80044b8:	2302      	movs	r3, #2
  }
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
	...

080044c8 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b086      	sub	sp, #24
 80044cc:	af02      	add	r7, sp, #8
 80044ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044d0:	2300      	movs	r3, #0
 80044d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7fe fbec 	bl	8002cb0 <HAL_GetTick>
 80044d8:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d102      	bne.n	80044e6 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
 80044e4:	e092      	b.n	800460c <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f040 808b 	bne.w	800460c <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f7fe f80e 	bl	8002518 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80044fc:	f241 3188 	movw	r1, #5000	; 0x1388
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f88b 	bl	800461c <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	4b42      	ldr	r3, [pc, #264]	; (8004618 <HAL_OSPI_Init+0x150>)
 800450e:	4013      	ands	r3, r2
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	68d1      	ldr	r1, [r2, #12]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6912      	ldr	r2, [r2, #16]
 8004518:	3a01      	subs	r2, #1
 800451a:	0412      	lsls	r2, r2, #16
 800451c:	4311      	orrs	r1, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6952      	ldr	r2, [r2, #20]
 8004522:	3a01      	subs	r2, #1
 8004524:	0212      	lsls	r2, r2, #8
 8004526:	4311      	orrs	r1, r2
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800452c:	4311      	orrs	r1, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	69d2      	ldr	r2, [r2, #28]
 8004532:	4311      	orrs	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6812      	ldr	r2, [r2, #0]
 8004538:	430b      	orrs	r3, r1
 800453a:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0412      	lsls	r2, r2, #16
 8004546:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	3b01      	subs	r3, #1
 8004558:	021a      	lsls	r2, r3, #8
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	2200      	movs	r2, #0
 800456c:	2120      	movs	r1, #32
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fb98 	bl	8004ca4 <OSPI_WaitFlagStateUntilTimeout>
 8004574:	4603      	mov	r3, r0
 8004576:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004578:	7bfb      	ldrb	r3, [r7, #15]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d146      	bne.n	800460c <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	1e5a      	subs	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689a      	ldr	r2, [r3, #8]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	430a      	orrs	r2, r1
 80045aa:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045b4:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	430a      	orrs	r2, r1
 80045c8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	699b      	ldr	r3, [r3, #24]
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d107      	bne.n	80045f4 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689a      	ldr	r2, [r3, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f042 0202 	orr.w	r2, r2, #2
 80045f2:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	68db      	ldr	r3, [r3, #12]
 80045f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045fc:	d103      	bne.n	8004606 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2201      	movs	r2, #1
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
 8004604:	e002      	b.n	800460c <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2202      	movs	r2, #2
 800460a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 800460c:	7bfb      	ldrb	r3, [r7, #15]
}
 800460e:	4618      	mov	r0, r3
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	f8e0f8f4 	.word	0xf8e0f8f4

0800461c <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
	...

0800463c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b092      	sub	sp, #72	; 0x48
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004648:	2300      	movs	r3, #0
 800464a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800464e:	2300      	movs	r3, #0
 8004650:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a08      	ldr	r2, [pc, #32]	; (800467c <HAL_OSPIM_Config+0x40>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d105      	bne.n	800466a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8004662:	2301      	movs	r3, #1
 8004664:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8004668:	e004      	b.n	8004674 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800466a:	2301      	movs	r3, #1
 800466c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800466e:	2300      	movs	r3, #0
 8004670:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8004674:	2300      	movs	r3, #0
 8004676:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800467a:	e01f      	b.n	80046bc <HAL_OSPIM_Config+0x80>
 800467c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8004680:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004684:	3301      	adds	r3, #1
 8004686:	b2d8      	uxtb	r0, r3
 8004688:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800468c:	f107 0114 	add.w	r1, r7, #20
 8004690:	4613      	mov	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	4619      	mov	r1, r3
 800469c:	f000 fb3a 	bl	8004d14 <OSPIM_GetConfig>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d005      	beq.n	80046b2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2208      	movs	r2, #8
 80046b0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80046b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046b6:	3301      	adds	r3, #1
 80046b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80046bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d9dd      	bls.n	8004680 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80046c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	f040 82de 	bne.w	8004c8a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80046ce:	4bc6      	ldr	r3, [pc, #792]	; (80049e8 <HAL_OSPIM_Config+0x3ac>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00b      	beq.n	80046f2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80046da:	4bc3      	ldr	r3, [pc, #780]	; (80049e8 <HAL_OSPIM_Config+0x3ac>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4ac2      	ldr	r2, [pc, #776]	; (80049e8 <HAL_OSPIM_Config+0x3ac>)
 80046e0:	f023 0301 	bic.w	r3, r3, #1
 80046e4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80046e6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80046ea:	f043 0301 	orr.w	r3, r3, #1
 80046ee:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80046f2:	4bbe      	ldr	r3, [pc, #760]	; (80049ec <HAL_OSPIM_Config+0x3b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00b      	beq.n	8004716 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80046fe:	4bbb      	ldr	r3, [pc, #748]	; (80049ec <HAL_OSPIM_Config+0x3b0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4aba      	ldr	r2, [pc, #744]	; (80049ec <HAL_OSPIM_Config+0x3b0>)
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800470a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800470e:	f043 0302 	orr.w	r3, r3, #2
 8004712:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004716:	49b6      	ldr	r1, [pc, #728]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 8004718:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3348      	adds	r3, #72	; 0x48
 8004724:	443b      	add	r3, r7
 8004726:	3b2c      	subs	r3, #44	; 0x2c
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	6859      	ldr	r1, [r3, #4]
 8004732:	48af      	ldr	r0, [pc, #700]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 8004734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	3348      	adds	r3, #72	; 0x48
 8004740:	443b      	add	r3, r7
 8004742:	3b2c      	subs	r3, #44	; 0x2c
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	3b01      	subs	r3, #1
 8004748:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4403      	add	r3, r0
 8004750:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8004752:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004754:	4613      	mov	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4413      	add	r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	3348      	adds	r3, #72	; 0x48
 800475e:	443b      	add	r3, r7
 8004760:	3b34      	subs	r3, #52	; 0x34
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a1 	beq.w	80048ac <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800476a:	49a1      	ldr	r1, [pc, #644]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 800476c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800476e:	4613      	mov	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	3348      	adds	r3, #72	; 0x48
 8004778:	443b      	add	r3, r7
 800477a:	3b34      	subs	r3, #52	; 0x34
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	3b01      	subs	r3, #1
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	440b      	add	r3, r1
 8004784:	6859      	ldr	r1, [r3, #4]
 8004786:	489a      	ldr	r0, [pc, #616]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 8004788:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	3348      	adds	r3, #72	; 0x48
 8004794:	443b      	add	r3, r7
 8004796:	3b34      	subs	r3, #52	; 0x34
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3b01      	subs	r3, #1
 800479c:	f021 0201 	bic.w	r2, r1, #1
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	4403      	add	r3, r0
 80047a4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80047a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	3348      	adds	r3, #72	; 0x48
 80047b2:	443b      	add	r3, r7
 80047b4:	3b30      	subs	r3, #48	; 0x30
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01d      	beq.n	80047f8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80047bc:	498c      	ldr	r1, [pc, #560]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 80047be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3348      	adds	r3, #72	; 0x48
 80047ca:	443b      	add	r3, r7
 80047cc:	3b30      	subs	r3, #48	; 0x30
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	3b01      	subs	r3, #1
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	6859      	ldr	r1, [r3, #4]
 80047d8:	4885      	ldr	r0, [pc, #532]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 80047da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	3348      	adds	r3, #72	; 0x48
 80047e6:	443b      	add	r3, r7
 80047e8:	3b30      	subs	r3, #48	; 0x30
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	f021 0210 	bic.w	r2, r1, #16
 80047f2:	009b      	lsls	r3, r3, #2
 80047f4:	4403      	add	r3, r0
 80047f6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80047f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047fa:	4613      	mov	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	4413      	add	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	3348      	adds	r3, #72	; 0x48
 8004804:	443b      	add	r3, r7
 8004806:	3b28      	subs	r3, #40	; 0x28
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d021      	beq.n	8004852 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800480e:	4978      	ldr	r1, [pc, #480]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 8004810:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	3348      	adds	r3, #72	; 0x48
 800481c:	443b      	add	r3, r7
 800481e:	3b28      	subs	r3, #40	; 0x28
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3b01      	subs	r3, #1
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	4870      	ldr	r0, [pc, #448]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 8004830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004832:	4613      	mov	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4413      	add	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	3348      	adds	r3, #72	; 0x48
 800483c:	443b      	add	r3, r7
 800483e:	3b28      	subs	r3, #40	; 0x28
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	3b01      	subs	r3, #1
 8004844:	f003 0301 	and.w	r3, r3, #1
 8004848:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4403      	add	r3, r0
 8004850:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	3348      	adds	r3, #72	; 0x48
 800485e:	443b      	add	r3, r7
 8004860:	3b24      	subs	r3, #36	; 0x24
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d021      	beq.n	80048ac <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004868:	4961      	ldr	r1, [pc, #388]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 800486a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800486c:	4613      	mov	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4413      	add	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	3348      	adds	r3, #72	; 0x48
 8004876:	443b      	add	r3, r7
 8004878:	3b24      	subs	r3, #36	; 0x24
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3b01      	subs	r3, #1
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	6859      	ldr	r1, [r3, #4]
 8004888:	4859      	ldr	r0, [pc, #356]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 800488a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800488c:	4613      	mov	r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	4413      	add	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	3348      	adds	r3, #72	; 0x48
 8004896:	443b      	add	r3, r7
 8004898:	3b24      	subs	r3, #36	; 0x24
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	3b01      	subs	r3, #1
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4403      	add	r3, r0
 80048aa:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048b4:	4613      	mov	r3, r2
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	3348      	adds	r3, #72	; 0x48
 80048be:	443b      	add	r3, r7
 80048c0:	3b34      	subs	r3, #52	; 0x34
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4299      	cmp	r1, r3
 80048c6:	d038      	beq.n	800493a <HAL_OSPIM_Config+0x2fe>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048d0:	4613      	mov	r3, r2
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	4413      	add	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	3348      	adds	r3, #72	; 0x48
 80048da:	443b      	add	r3, r7
 80048dc:	3b30      	subs	r3, #48	; 0x30
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4299      	cmp	r1, r3
 80048e2:	d02a      	beq.n	800493a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	6899      	ldr	r1, [r3, #8]
 80048e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80048ec:	4613      	mov	r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	3348      	adds	r3, #72	; 0x48
 80048f6:	443b      	add	r3, r7
 80048f8:	3b2c      	subs	r3, #44	; 0x2c
 80048fa:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80048fc:	4299      	cmp	r1, r3
 80048fe:	d01c      	beq.n	800493a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	68d9      	ldr	r1, [r3, #12]
 8004904:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004908:	4613      	mov	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	3348      	adds	r3, #72	; 0x48
 8004912:	443b      	add	r3, r7
 8004914:	3b28      	subs	r3, #40	; 0x28
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4299      	cmp	r1, r3
 800491a:	d00e      	beq.n	800493a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	6919      	ldr	r1, [r3, #16]
 8004920:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	3348      	adds	r3, #72	; 0x48
 800492e:	443b      	add	r3, r7
 8004930:	3b24      	subs	r3, #36	; 0x24
 8004932:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004934:	4299      	cmp	r1, r3
 8004936:	f040 80d3 	bne.w	8004ae0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800493a:	492d      	ldr	r1, [pc, #180]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 800493c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004940:	4613      	mov	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	3348      	adds	r3, #72	; 0x48
 800494a:	443b      	add	r3, r7
 800494c:	3b34      	subs	r3, #52	; 0x34
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	3b01      	subs	r3, #1
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	4825      	ldr	r0, [pc, #148]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 800495a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800495e:	4613      	mov	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	4413      	add	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	3348      	adds	r3, #72	; 0x48
 8004968:	443b      	add	r3, r7
 800496a:	3b34      	subs	r3, #52	; 0x34
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	3b01      	subs	r3, #1
 8004970:	f021 0201 	bic.w	r2, r1, #1
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	4403      	add	r3, r0
 8004978:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800497a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	3348      	adds	r3, #72	; 0x48
 8004988:	443b      	add	r3, r7
 800498a:	3b30      	subs	r3, #48	; 0x30
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d01f      	beq.n	80049d2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004992:	4917      	ldr	r1, [pc, #92]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 8004994:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	3348      	adds	r3, #72	; 0x48
 80049a2:	443b      	add	r3, r7
 80049a4:	3b30      	subs	r3, #48	; 0x30
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	3b01      	subs	r3, #1
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	6859      	ldr	r1, [r3, #4]
 80049b0:	480f      	ldr	r0, [pc, #60]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 80049b2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	3348      	adds	r3, #72	; 0x48
 80049c0:	443b      	add	r3, r7
 80049c2:	3b30      	subs	r3, #48	; 0x30
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3b01      	subs	r3, #1
 80049c8:	f021 0210 	bic.w	r2, r1, #16
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4403      	add	r3, r0
 80049d0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80049d2:	4907      	ldr	r1, [pc, #28]	; (80049f0 <HAL_OSPIM_Config+0x3b4>)
 80049d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	3348      	adds	r3, #72	; 0x48
 80049e2:	443b      	add	r3, r7
 80049e4:	3b2c      	subs	r3, #44	; 0x2c
 80049e6:	e005      	b.n	80049f4 <HAL_OSPIM_Config+0x3b8>
 80049e8:	a0001000 	.word	0xa0001000
 80049ec:	a0001400 	.word	0xa0001400
 80049f0:	50061c00 	.word	0x50061c00
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	440b      	add	r3, r1
 80049fc:	6859      	ldr	r1, [r3, #4]
 80049fe:	48a6      	ldr	r0, [pc, #664]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004a00:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	3348      	adds	r3, #72	; 0x48
 8004a0e:	443b      	add	r3, r7
 8004a10:	3b2c      	subs	r3, #44	; 0x2c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3b01      	subs	r3, #1
 8004a16:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4403      	add	r3, r0
 8004a1e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004a20:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	3348      	adds	r3, #72	; 0x48
 8004a2e:	443b      	add	r3, r7
 8004a30:	3b28      	subs	r3, #40	; 0x28
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d023      	beq.n	8004a80 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004a38:	4997      	ldr	r1, [pc, #604]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004a3a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	3348      	adds	r3, #72	; 0x48
 8004a48:	443b      	add	r3, r7
 8004a4a:	3b28      	subs	r3, #40	; 0x28
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	f003 0301 	and.w	r3, r3, #1
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	6859      	ldr	r1, [r3, #4]
 8004a5a:	488f      	ldr	r0, [pc, #572]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004a5c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a60:	4613      	mov	r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	4413      	add	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3348      	adds	r3, #72	; 0x48
 8004a6a:	443b      	add	r3, r7
 8004a6c:	3b28      	subs	r3, #40	; 0x28
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	3b01      	subs	r3, #1
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4403      	add	r3, r0
 8004a7e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004a80:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	3348      	adds	r3, #72	; 0x48
 8004a8e:	443b      	add	r3, r7
 8004a90:	3b24      	subs	r3, #36	; 0x24
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d023      	beq.n	8004ae0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004a98:	497f      	ldr	r1, [pc, #508]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004a9a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	4413      	add	r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	3348      	adds	r3, #72	; 0x48
 8004aa8:	443b      	add	r3, r7
 8004aaa:	3b24      	subs	r3, #36	; 0x24
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	6859      	ldr	r1, [r3, #4]
 8004aba:	4877      	ldr	r0, [pc, #476]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004abc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	3348      	adds	r3, #72	; 0x48
 8004aca:	443b      	add	r3, r7
 8004acc:	3b24      	subs	r3, #36	; 0x24
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4403      	add	r3, r0
 8004ade:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004ae0:	4a6d      	ldr	r2, [pc, #436]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004af4:	025b      	lsls	r3, r3, #9
 8004af6:	431a      	orrs	r2, r3
 8004af8:	4967      	ldr	r1, [pc, #412]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	440b      	add	r3, r1
 8004b08:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8004b0a:	4a63      	ldr	r2, [pc, #396]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f023 0203 	bic.w	r2, r3, #3
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	431a      	orrs	r2, r3
 8004b22:	495d      	ldr	r1, [pc, #372]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	440b      	add	r3, r1
 8004b32:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d014      	beq.n	8004b66 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004b3c:	4a56      	ldr	r2, [pc, #344]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b50:	015b      	lsls	r3, r3, #5
 8004b52:	431a      	orrs	r2, r3
 8004b54:	4950      	ldr	r1, [pc, #320]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	f042 0210 	orr.w	r2, r2, #16
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d019      	beq.n	8004ba6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004b72:	4a49      	ldr	r2, [pc, #292]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	f003 0301 	and.w	r3, r3, #1
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b8a:	049b      	lsls	r3, r3, #18
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	4942      	ldr	r1, [pc, #264]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	3b01      	subs	r3, #1
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	605a      	str	r2, [r3, #4]
 8004ba4:	e01c      	b.n	8004be0 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d018      	beq.n	8004be0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004bae:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	68db      	ldr	r3, [r3, #12]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	431a      	orrs	r2, r3
 8004bca:	4933      	ldr	r1, [pc, #204]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d019      	beq.n	8004c20 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004bec:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004c02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c04:	049b      	lsls	r3, r3, #18
 8004c06:	431a      	orrs	r2, r3
 8004c08:	4923      	ldr	r1, [pc, #140]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	f003 0301 	and.w	r3, r3, #1
 8004c14:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	440b      	add	r3, r1
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e01c      	b.n	8004c5a <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d018      	beq.n	8004c5a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004c28:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c40:	069b      	lsls	r3, r3, #26
 8004c42:	431a      	orrs	r2, r3
 8004c44:	4914      	ldr	r1, [pc, #80]	; (8004c98 <HAL_OSPIM_Config+0x65c>)
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	440b      	add	r3, r1
 8004c58:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004c5a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d005      	beq.n	8004c72 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_OSPIM_Config+0x660>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <HAL_OSPIM_Config+0x660>)
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004c72:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004c7e:	4b08      	ldr	r3, [pc, #32]	; (8004ca0 <HAL_OSPIM_Config+0x664>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a07      	ldr	r2, [pc, #28]	; (8004ca0 <HAL_OSPIM_Config+0x664>)
 8004c84:	f043 0301 	orr.w	r3, r3, #1
 8004c88:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004c8a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3748      	adds	r7, #72	; 0x48
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	50061c00 	.word	0x50061c00
 8004c9c:	a0001000 	.word	0xa0001000
 8004ca0:	a0001400 	.word	0xa0001400

08004ca4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	603b      	str	r3, [r7, #0]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004cb4:	e01a      	b.n	8004cec <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cbc:	d016      	beq.n	8004cec <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cbe:	f7fd fff7 	bl	8002cb0 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d302      	bcc.n	8004cd4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10b      	bne.n	8004cec <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cda:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e00e      	b.n	8004d0a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6a1a      	ldr	r2, [r3, #32]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf14      	ite	ne
 8004cfa:	2301      	movne	r3, #1
 8004cfc:	2300      	moveq	r3, #0
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	461a      	mov	r2, r3
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d1d6      	bne.n	8004cb6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	6039      	str	r1, [r7, #0]
 8004d1e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004d20:	2300      	movs	r3, #0
 8004d22:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <OSPIM_GetConfig+0x26>
 8004d2e:	79fb      	ldrb	r3, [r7, #7]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d802      	bhi.n	8004d3a <OSPIM_GetConfig+0x26>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d102      	bne.n	8004d40 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
 8004d3e:	e08e      	b.n	8004e5e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2200      	movs	r2, #0
 8004d56:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d101      	bne.n	8004d68 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <OSPIM_GetConfig+0x158>)
 8004d66:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004d68:	2300      	movs	r3, #0
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e074      	b.n	8004e58 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004d6e:	4a40      	ldr	r2, [pc, #256]	; (8004e70 <OSPIM_GetConfig+0x15c>)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	4413      	add	r3, r2
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004d84:	68ba      	ldr	r2, [r7, #8]
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	4053      	eors	r3, r2
 8004d8a:	f003 0302 	and.w	r3, r3, #2
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d103      	bne.n	8004d9a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4053      	eors	r3, r2
 8004daa:	f003 0320 	and.w	r3, r3, #32
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00a      	beq.n	8004dda <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	4053      	eors	r3, r2
 8004dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d103      	bne.n	8004dda <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d018      	beq.n	8004e16 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	4053      	eors	r3, r2
 8004dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d111      	bne.n	8004e16 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	60da      	str	r2, [r3, #12]
 8004e08:	e005      	b.n	8004e16 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d018      	beq.n	8004e52 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	4053      	eors	r3, r2
 8004e26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d111      	bne.n	8004e52 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	611a      	str	r2, [r3, #16]
 8004e44:	e005      	b.n	8004e52 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3301      	adds	r3, #1
 8004e4a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	3301      	adds	r3, #1
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d987      	bls.n	8004d6e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	04040222 	.word	0x04040222
 8004e70:	50061c00 	.word	0x50061c00

08004e74 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004e74:	b480      	push	{r7}
 8004e76:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e78:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6013      	str	r3, [r2, #0]
}
 8004e84:	bf00      	nop
 8004e86:	46bd      	mov	sp, r7
 8004e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	40007000 	.word	0x40007000

08004e94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ea4:	d102      	bne.n	8004eac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eaa:	e00b      	b.n	8004ec4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004eac:	4b08      	ldr	r3, [pc, #32]	; (8004ed0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eba:	d102      	bne.n	8004ec2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ec0:	e000      	b.n	8004ec4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004ec2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	40007000 	.word	0x40007000

08004ed4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d141      	bne.n	8004f66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004ee2:	4b4b      	ldr	r3, [pc, #300]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eee:	d131      	bne.n	8004f54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004ef0:	4b47      	ldr	r3, [pc, #284]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	4a46      	ldr	r2, [pc, #280]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f00:	4b43      	ldr	r3, [pc, #268]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f08:	4a41      	ldr	r2, [pc, #260]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f10:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2232      	movs	r2, #50	; 0x32
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	4a3f      	ldr	r2, [pc, #252]	; (8005018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f20:	0c9b      	lsrs	r3, r3, #18
 8004f22:	3301      	adds	r3, #1
 8004f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f26:	e002      	b.n	8004f2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f2e:	4b38      	ldr	r3, [pc, #224]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3a:	d102      	bne.n	8004f42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1f2      	bne.n	8004f28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f42:	4b33      	ldr	r3, [pc, #204]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4e:	d158      	bne.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e057      	b.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f54:	4b2e      	ldr	r3, [pc, #184]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f5a:	4a2d      	ldr	r2, [pc, #180]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004f64:	e04d      	b.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f6c:	d141      	bne.n	8004ff2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f6e:	4b28      	ldr	r3, [pc, #160]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f7a:	d131      	bne.n	8004fe0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004f7c:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f82:	4a23      	ldr	r2, [pc, #140]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f8c:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f94:	4a1e      	ldr	r2, [pc, #120]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004f9c:	4b1d      	ldr	r3, [pc, #116]	; (8005014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2232      	movs	r2, #50	; 0x32
 8004fa2:	fb02 f303 	mul.w	r3, r2, r3
 8004fa6:	4a1c      	ldr	r2, [pc, #112]	; (8005018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	0c9b      	lsrs	r3, r3, #18
 8004fae:	3301      	adds	r3, #1
 8004fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fb2:	e002      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004fba:	4b15      	ldr	r3, [pc, #84]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fc6:	d102      	bne.n	8004fce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d1f2      	bne.n	8004fb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004fce:	4b10      	ldr	r3, [pc, #64]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fd0:	695b      	ldr	r3, [r3, #20]
 8004fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fda:	d112      	bne.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004fdc:	2303      	movs	r3, #3
 8004fde:	e011      	b.n	8005004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004ff0:	e007      	b.n	8005002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ff2:	4b07      	ldr	r3, [pc, #28]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ffa:	4a05      	ldr	r2, [pc, #20]	; (8005010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005000:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	40007000 	.word	0x40007000
 8005014:	20000000 	.word	0x20000000
 8005018:	431bde83 	.word	0x431bde83

0800501c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	f000 bc08 	b.w	8005840 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005030:	4b96      	ldr	r3, [pc, #600]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	f003 030c 	and.w	r3, r3, #12
 8005038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800503a:	4b94      	ldr	r3, [pc, #592]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f003 0303 	and.w	r3, r3, #3
 8005042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0310 	and.w	r3, r3, #16
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80e4 	beq.w	800521a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <HAL_RCC_OscConfig+0x4c>
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	2b0c      	cmp	r3, #12
 800505c:	f040 808b 	bne.w	8005176 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	2b01      	cmp	r3, #1
 8005064:	f040 8087 	bne.w	8005176 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005068:	4b88      	ldr	r3, [pc, #544]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d005      	beq.n	8005080 <HAL_RCC_OscConfig+0x64>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e3df      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	4b81      	ldr	r3, [pc, #516]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0308 	and.w	r3, r3, #8
 800508c:	2b00      	cmp	r3, #0
 800508e:	d004      	beq.n	800509a <HAL_RCC_OscConfig+0x7e>
 8005090:	4b7e      	ldr	r3, [pc, #504]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005098:	e005      	b.n	80050a6 <HAL_RCC_OscConfig+0x8a>
 800509a:	4b7c      	ldr	r3, [pc, #496]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800509c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a0:	091b      	lsrs	r3, r3, #4
 80050a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d223      	bcs.n	80050f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fdcc 	bl	8005c4c <RCC_SetFlashLatencyFromMSIRange>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d001      	beq.n	80050be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e3c0      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050be:	4b73      	ldr	r3, [pc, #460]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a72      	ldr	r2, [pc, #456]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050c4:	f043 0308 	orr.w	r3, r3, #8
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	4b70      	ldr	r3, [pc, #448]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	496d      	ldr	r1, [pc, #436]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050dc:	4b6b      	ldr	r3, [pc, #428]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	69db      	ldr	r3, [r3, #28]
 80050e8:	021b      	lsls	r3, r3, #8
 80050ea:	4968      	ldr	r1, [pc, #416]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050ec:	4313      	orrs	r3, r2
 80050ee:	604b      	str	r3, [r1, #4]
 80050f0:	e025      	b.n	800513e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050f2:	4b66      	ldr	r3, [pc, #408]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a65      	ldr	r2, [pc, #404]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80050f8:	f043 0308 	orr.w	r3, r3, #8
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	4b63      	ldr	r3, [pc, #396]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	4960      	ldr	r1, [pc, #384]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005110:	4b5e      	ldr	r3, [pc, #376]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	495b      	ldr	r1, [pc, #364]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005120:	4313      	orrs	r3, r2
 8005122:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	4618      	mov	r0, r3
 8005130:	f000 fd8c 	bl	8005c4c <RCC_SetFlashLatencyFromMSIRange>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e380      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800513e:	f000 fcc1 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005142:	4602      	mov	r2, r0
 8005144:	4b51      	ldr	r3, [pc, #324]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	4950      	ldr	r1, [pc, #320]	; (8005290 <HAL_RCC_OscConfig+0x274>)
 8005150:	5ccb      	ldrb	r3, [r1, r3]
 8005152:	f003 031f 	and.w	r3, r3, #31
 8005156:	fa22 f303 	lsr.w	r3, r2, r3
 800515a:	4a4e      	ldr	r2, [pc, #312]	; (8005294 <HAL_RCC_OscConfig+0x278>)
 800515c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800515e:	4b4e      	ldr	r3, [pc, #312]	; (8005298 <HAL_RCC_OscConfig+0x27c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fd54 	bl	8002c10 <HAL_InitTick>
 8005168:	4603      	mov	r3, r0
 800516a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d052      	beq.n	8005218 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	e364      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d032      	beq.n	80051e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800517e:	4b43      	ldr	r3, [pc, #268]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a42      	ldr	r2, [pc, #264]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800518a:	f7fd fd91 	bl	8002cb0 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005192:	f7fd fd8d 	bl	8002cb0 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e34d      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051a4:	4b39      	ldr	r3, [pc, #228]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b0:	4b36      	ldr	r3, [pc, #216]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a35      	ldr	r2, [pc, #212]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051b6:	f043 0308 	orr.w	r3, r3, #8
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	4b33      	ldr	r3, [pc, #204]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	4930      	ldr	r1, [pc, #192]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051ce:	4b2f      	ldr	r3, [pc, #188]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	021b      	lsls	r3, r3, #8
 80051dc:	492b      	ldr	r1, [pc, #172]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	604b      	str	r3, [r1, #4]
 80051e2:	e01a      	b.n	800521a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80051e4:	4b29      	ldr	r3, [pc, #164]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a28      	ldr	r2, [pc, #160]	; (800528c <HAL_RCC_OscConfig+0x270>)
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051f0:	f7fd fd5e 	bl	8002cb0 <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051f8:	f7fd fd5a 	bl	8002cb0 <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e31a      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800520a:	4b20      	ldr	r3, [pc, #128]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1f0      	bne.n	80051f8 <HAL_RCC_OscConfig+0x1dc>
 8005216:	e000      	b.n	800521a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 0301 	and.w	r3, r3, #1
 8005222:	2b00      	cmp	r3, #0
 8005224:	d073      	beq.n	800530e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	2b08      	cmp	r3, #8
 800522a:	d005      	beq.n	8005238 <HAL_RCC_OscConfig+0x21c>
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b0c      	cmp	r3, #12
 8005230:	d10e      	bne.n	8005250 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2b03      	cmp	r3, #3
 8005236:	d10b      	bne.n	8005250 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005238:	4b14      	ldr	r3, [pc, #80]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d063      	beq.n	800530c <HAL_RCC_OscConfig+0x2f0>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d15f      	bne.n	800530c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e2f7      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005258:	d106      	bne.n	8005268 <HAL_RCC_OscConfig+0x24c>
 800525a:	4b0c      	ldr	r3, [pc, #48]	; (800528c <HAL_RCC_OscConfig+0x270>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a0b      	ldr	r2, [pc, #44]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e025      	b.n	80052b4 <HAL_RCC_OscConfig+0x298>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005270:	d114      	bne.n	800529c <HAL_RCC_OscConfig+0x280>
 8005272:	4b06      	ldr	r3, [pc, #24]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a05      	ldr	r2, [pc, #20]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	4b03      	ldr	r3, [pc, #12]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a02      	ldr	r2, [pc, #8]	; (800528c <HAL_RCC_OscConfig+0x270>)
 8005284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	e013      	b.n	80052b4 <HAL_RCC_OscConfig+0x298>
 800528c:	40021000 	.word	0x40021000
 8005290:	0800bf24 	.word	0x0800bf24
 8005294:	20000000 	.word	0x20000000
 8005298:	20000004 	.word	0x20000004
 800529c:	4ba0      	ldr	r3, [pc, #640]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a9f      	ldr	r2, [pc, #636]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80052a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a6:	6013      	str	r3, [r2, #0]
 80052a8:	4b9d      	ldr	r3, [pc, #628]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a9c      	ldr	r2, [pc, #624]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d013      	beq.n	80052e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052bc:	f7fd fcf8 	bl	8002cb0 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fd fcf4 	bl	8002cb0 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e2b4      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052d6:	4b92      	ldr	r3, [pc, #584]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0f0      	beq.n	80052c4 <HAL_RCC_OscConfig+0x2a8>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e4:	f7fd fce4 	bl	8002cb0 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ec:	f7fd fce0 	bl	8002cb0 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b64      	cmp	r3, #100	; 0x64
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e2a0      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052fe:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x2d0>
 800530a:	e000      	b.n	800530e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800530c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d060      	beq.n	80053dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800531a:	69bb      	ldr	r3, [r7, #24]
 800531c:	2b04      	cmp	r3, #4
 800531e:	d005      	beq.n	800532c <HAL_RCC_OscConfig+0x310>
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d119      	bne.n	800535a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	2b02      	cmp	r3, #2
 800532a:	d116      	bne.n	800535a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800532c:	4b7c      	ldr	r3, [pc, #496]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <HAL_RCC_OscConfig+0x328>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d101      	bne.n	8005344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005340:	2301      	movs	r3, #1
 8005342:	e27d      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005344:	4b76      	ldr	r3, [pc, #472]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	061b      	lsls	r3, r3, #24
 8005352:	4973      	ldr	r1, [pc, #460]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005354:	4313      	orrs	r3, r2
 8005356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005358:	e040      	b.n	80053dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d023      	beq.n	80053aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005362:	4b6f      	ldr	r3, [pc, #444]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a6e      	ldr	r2, [pc, #440]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd fc9f 	bl	8002cb0 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fd fc9b 	bl	8002cb0 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e25b      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005388:	4b65      	ldr	r3, [pc, #404]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d0f0      	beq.n	8005376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005394:	4b62      	ldr	r3, [pc, #392]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	061b      	lsls	r3, r3, #24
 80053a2:	495f      	ldr	r1, [pc, #380]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80053a4:	4313      	orrs	r3, r2
 80053a6:	604b      	str	r3, [r1, #4]
 80053a8:	e018      	b.n	80053dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053aa:	4b5d      	ldr	r3, [pc, #372]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a5c      	ldr	r2, [pc, #368]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80053b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b6:	f7fd fc7b 	bl	8002cb0 <HAL_GetTick>
 80053ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053bc:	e008      	b.n	80053d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053be:	f7fd fc77 	bl	8002cb0 <HAL_GetTick>
 80053c2:	4602      	mov	r2, r0
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	1ad3      	subs	r3, r2, r3
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d901      	bls.n	80053d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e237      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80053d0:	4b53      	ldr	r3, [pc, #332]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f0      	bne.n	80053be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0308 	and.w	r3, r3, #8
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d03c      	beq.n	8005462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d01c      	beq.n	800542a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f0:	4b4b      	ldr	r3, [pc, #300]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80053f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f6:	4a4a      	ldr	r2, [pc, #296]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005400:	f7fd fc56 	bl	8002cb0 <HAL_GetTick>
 8005404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005406:	e008      	b.n	800541a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005408:	f7fd fc52 	bl	8002cb0 <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	1ad3      	subs	r3, r2, r3
 8005412:	2b02      	cmp	r3, #2
 8005414:	d901      	bls.n	800541a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005416:	2303      	movs	r3, #3
 8005418:	e212      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800541a:	4b41      	ldr	r3, [pc, #260]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800541c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0ef      	beq.n	8005408 <HAL_RCC_OscConfig+0x3ec>
 8005428:	e01b      	b.n	8005462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800542c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005430:	4a3b      	ldr	r2, [pc, #236]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800543a:	f7fd fc39 	bl	8002cb0 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005442:	f7fd fc35 	bl	8002cb0 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e1f5      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005454:	4b32      	ldr	r3, [pc, #200]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1ef      	bne.n	8005442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0304 	and.w	r3, r3, #4
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 80a6 	beq.w	80055bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005470:	2300      	movs	r3, #0
 8005472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005474:	4b2a      	ldr	r3, [pc, #168]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10d      	bne.n	800549c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005480:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005484:	4a26      	ldr	r2, [pc, #152]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548a:	6593      	str	r3, [r2, #88]	; 0x58
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800548e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005498:	2301      	movs	r3, #1
 800549a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800549c:	4b21      	ldr	r3, [pc, #132]	; (8005524 <HAL_RCC_OscConfig+0x508>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d118      	bne.n	80054da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80054a8:	4b1e      	ldr	r3, [pc, #120]	; (8005524 <HAL_RCC_OscConfig+0x508>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1d      	ldr	r2, [pc, #116]	; (8005524 <HAL_RCC_OscConfig+0x508>)
 80054ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054b4:	f7fd fbfc 	bl	8002cb0 <HAL_GetTick>
 80054b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054bc:	f7fd fbf8 	bl	8002cb0 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1b8      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80054ce:	4b15      	ldr	r3, [pc, #84]	; (8005524 <HAL_RCC_OscConfig+0x508>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d108      	bne.n	80054f4 <HAL_RCC_OscConfig+0x4d8>
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	4a0d      	ldr	r2, [pc, #52]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80054ea:	f043 0301 	orr.w	r3, r3, #1
 80054ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054f2:	e029      	b.n	8005548 <HAL_RCC_OscConfig+0x52c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b05      	cmp	r3, #5
 80054fa:	d115      	bne.n	8005528 <HAL_RCC_OscConfig+0x50c>
 80054fc:	4b08      	ldr	r3, [pc, #32]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	4a07      	ldr	r2, [pc, #28]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005504:	f043 0304 	orr.w	r3, r3, #4
 8005508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800550c:	4b04      	ldr	r3, [pc, #16]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 800550e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005512:	4a03      	ldr	r2, [pc, #12]	; (8005520 <HAL_RCC_OscConfig+0x504>)
 8005514:	f043 0301 	orr.w	r3, r3, #1
 8005518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800551c:	e014      	b.n	8005548 <HAL_RCC_OscConfig+0x52c>
 800551e:	bf00      	nop
 8005520:	40021000 	.word	0x40021000
 8005524:	40007000 	.word	0x40007000
 8005528:	4b9d      	ldr	r3, [pc, #628]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800552a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552e:	4a9c      	ldr	r2, [pc, #624]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005530:	f023 0301 	bic.w	r3, r3, #1
 8005534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005538:	4b99      	ldr	r3, [pc, #612]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800553a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553e:	4a98      	ldr	r2, [pc, #608]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005540:	f023 0304 	bic.w	r3, r3, #4
 8005544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d016      	beq.n	800557e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fd fbae 	bl	8002cb0 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005556:	e00a      	b.n	800556e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005558:	f7fd fbaa 	bl	8002cb0 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	; 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e168      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800556e:	4b8c      	ldr	r3, [pc, #560]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0ed      	beq.n	8005558 <HAL_RCC_OscConfig+0x53c>
 800557c:	e015      	b.n	80055aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800557e:	f7fd fb97 	bl	8002cb0 <HAL_GetTick>
 8005582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005584:	e00a      	b.n	800559c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005586:	f7fd fb93 	bl	8002cb0 <HAL_GetTick>
 800558a:	4602      	mov	r2, r0
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	f241 3288 	movw	r2, #5000	; 0x1388
 8005594:	4293      	cmp	r3, r2
 8005596:	d901      	bls.n	800559c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005598:	2303      	movs	r3, #3
 800559a:	e151      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800559c:	4b80      	ldr	r3, [pc, #512]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800559e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a2:	f003 0302 	and.w	r3, r3, #2
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ed      	bne.n	8005586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055aa:	7ffb      	ldrb	r3, [r7, #31]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d105      	bne.n	80055bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055b0:	4b7b      	ldr	r3, [pc, #492]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055b4:	4a7a      	ldr	r2, [pc, #488]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0320 	and.w	r3, r3, #32
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d03c      	beq.n	8005642 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01c      	beq.n	800560a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80055d0:	4b73      	ldr	r3, [pc, #460]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055d6:	4a72      	ldr	r2, [pc, #456]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e0:	f7fd fb66 	bl	8002cb0 <HAL_GetTick>
 80055e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055e6:	e008      	b.n	80055fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055e8:	f7fd fb62 	bl	8002cb0 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d901      	bls.n	80055fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055f6:	2303      	movs	r3, #3
 80055f8:	e122      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055fa:	4b69      	ldr	r3, [pc, #420]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80055fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005600:	f003 0302 	and.w	r3, r3, #2
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0ef      	beq.n	80055e8 <HAL_RCC_OscConfig+0x5cc>
 8005608:	e01b      	b.n	8005642 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800560a:	4b65      	ldr	r3, [pc, #404]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800560c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005610:	4a63      	ldr	r2, [pc, #396]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005612:	f023 0301 	bic.w	r3, r3, #1
 8005616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561a:	f7fd fb49 	bl	8002cb0 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005620:	e008      	b.n	8005634 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005622:	f7fd fb45 	bl	8002cb0 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d901      	bls.n	8005634 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e105      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005634:	4b5a      	ldr	r3, [pc, #360]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1ef      	bne.n	8005622 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	2b00      	cmp	r3, #0
 8005648:	f000 80f9 	beq.w	800583e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	2b02      	cmp	r3, #2
 8005652:	f040 80cf 	bne.w	80057f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005656:	4b52      	ldr	r3, [pc, #328]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005666:	429a      	cmp	r2, r3
 8005668:	d12c      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005674:	3b01      	subs	r3, #1
 8005676:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d123      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005686:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005688:	429a      	cmp	r2, r3
 800568a:	d11b      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005696:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005698:	429a      	cmp	r2, r3
 800569a:	d113      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a6:	085b      	lsrs	r3, r3, #1
 80056a8:	3b01      	subs	r3, #1
 80056aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d109      	bne.n	80056c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	3b01      	subs	r3, #1
 80056be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d071      	beq.n	80057a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	2b0c      	cmp	r3, #12
 80056c8:	d068      	beq.n	800579c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80056ca:	4b35      	ldr	r3, [pc, #212]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d105      	bne.n	80056e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80056d6:	4b32      	ldr	r3, [pc, #200]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e0ac      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80056e6:	4b2e      	ldr	r3, [pc, #184]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a2d      	ldr	r2, [pc, #180]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 80056ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80056f2:	f7fd fadd 	bl	8002cb0 <HAL_GetTick>
 80056f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f8:	e008      	b.n	800570c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056fa:	f7fd fad9 	bl	8002cb0 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e099      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1f0      	bne.n	80056fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005718:	4b21      	ldr	r3, [pc, #132]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	4b21      	ldr	r3, [pc, #132]	; (80057a4 <HAL_RCC_OscConfig+0x788>)
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005728:	3a01      	subs	r2, #1
 800572a:	0112      	lsls	r2, r2, #4
 800572c:	4311      	orrs	r1, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005732:	0212      	lsls	r2, r2, #8
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800573a:	0852      	lsrs	r2, r2, #1
 800573c:	3a01      	subs	r2, #1
 800573e:	0552      	lsls	r2, r2, #21
 8005740:	4311      	orrs	r1, r2
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005746:	0852      	lsrs	r2, r2, #1
 8005748:	3a01      	subs	r2, #1
 800574a:	0652      	lsls	r2, r2, #25
 800574c:	4311      	orrs	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005752:	06d2      	lsls	r2, r2, #27
 8005754:	430a      	orrs	r2, r1
 8005756:	4912      	ldr	r1, [pc, #72]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005758:	4313      	orrs	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005768:	4b0d      	ldr	r3, [pc, #52]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a0c      	ldr	r2, [pc, #48]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 800576e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005774:	f7fd fa9c 	bl	8002cb0 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577a:	e008      	b.n	800578e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577c:	f7fd fa98 	bl	8002cb0 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d901      	bls.n	800578e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	e058      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578e:	4b04      	ldr	r3, [pc, #16]	; (80057a0 <HAL_RCC_OscConfig+0x784>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800579a:	e050      	b.n	800583e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e04f      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
 80057a0:	40021000 	.word	0x40021000
 80057a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057a8:	4b27      	ldr	r3, [pc, #156]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d144      	bne.n	800583e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80057b4:	4b24      	ldr	r3, [pc, #144]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a23      	ldr	r2, [pc, #140]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057c0:	4b21      	ldr	r3, [pc, #132]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	4a20      	ldr	r2, [pc, #128]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80057cc:	f7fd fa70 	bl	8002cb0 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd fa6c 	bl	8002cb0 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e02c      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0f0      	beq.n	80057d4 <HAL_RCC_OscConfig+0x7b8>
 80057f2:	e024      	b.n	800583e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b0c      	cmp	r3, #12
 80057f8:	d01f      	beq.n	800583a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b13      	ldr	r3, [pc, #76]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 8005800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005806:	f7fd fa53 	bl	8002cb0 <HAL_GetTick>
 800580a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800580c:	e008      	b.n	8005820 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800580e:	f7fd fa4f 	bl	8002cb0 <HAL_GetTick>
 8005812:	4602      	mov	r2, r0
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b02      	cmp	r3, #2
 800581a:	d901      	bls.n	8005820 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e00f      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1f0      	bne.n	800580e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	4905      	ldr	r1, [pc, #20]	; (8005848 <HAL_RCC_OscConfig+0x82c>)
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_OscConfig+0x830>)
 8005834:	4013      	ands	r3, r2
 8005836:	60cb      	str	r3, [r1, #12]
 8005838:	e001      	b.n	800583e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e000      	b.n	8005840 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800583e:	2300      	movs	r3, #0
}
 8005840:	4618      	mov	r0, r3
 8005842:	3720      	adds	r7, #32
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	40021000 	.word	0x40021000
 800584c:	feeefffc 	.word	0xfeeefffc

08005850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800585a:	2300      	movs	r3, #0
 800585c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e11d      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005868:	4b90      	ldr	r3, [pc, #576]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f003 030f 	and.w	r3, r3, #15
 8005870:	683a      	ldr	r2, [r7, #0]
 8005872:	429a      	cmp	r2, r3
 8005874:	d910      	bls.n	8005898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005876:	4b8d      	ldr	r3, [pc, #564]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f023 020f 	bic.w	r2, r3, #15
 800587e:	498b      	ldr	r1, [pc, #556]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	4313      	orrs	r3, r2
 8005884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005886:	4b89      	ldr	r3, [pc, #548]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f003 030f 	and.w	r3, r3, #15
 800588e:	683a      	ldr	r2, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d001      	beq.n	8005898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e105      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d010      	beq.n	80058c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689a      	ldr	r2, [r3, #8]
 80058a8:	4b81      	ldr	r3, [pc, #516]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d908      	bls.n	80058c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058b4:	4b7e      	ldr	r3, [pc, #504]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	497b      	ldr	r1, [pc, #492]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d079      	beq.n	80059c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2b03      	cmp	r3, #3
 80058d8:	d11e      	bne.n	8005918 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058da:	4b75      	ldr	r3, [pc, #468]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e0dc      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80058ea:	f000 fa09 	bl	8005d00 <RCC_GetSysClockFreqFromPLLSource>
 80058ee:	4603      	mov	r3, r0
 80058f0:	4a70      	ldr	r2, [pc, #448]	; (8005ab4 <HAL_RCC_ClockConfig+0x264>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d946      	bls.n	8005984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80058f6:	4b6e      	ldr	r3, [pc, #440]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d140      	bne.n	8005984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005902:	4b6b      	ldr	r3, [pc, #428]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800590a:	4a69      	ldr	r2, [pc, #420]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800590c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005910:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005912:	2380      	movs	r3, #128	; 0x80
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e035      	b.n	8005984 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d107      	bne.n	8005930 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005920:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005928:	2b00      	cmp	r3, #0
 800592a:	d115      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e0b9      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d107      	bne.n	8005948 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005938:	4b5d      	ldr	r3, [pc, #372]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d109      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e0ad      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005948:	4b59      	ldr	r3, [pc, #356]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e0a5      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005958:	f000 f8b4 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 800595c:	4603      	mov	r3, r0
 800595e:	4a55      	ldr	r2, [pc, #340]	; (8005ab4 <HAL_RCC_ClockConfig+0x264>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d90f      	bls.n	8005984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005964:	4b52      	ldr	r3, [pc, #328]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d109      	bne.n	8005984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005970:	4b4f      	ldr	r3, [pc, #316]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005978:	4a4d      	ldr	r2, [pc, #308]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 800597a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800597e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005980:	2380      	movs	r3, #128	; 0x80
 8005982:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005984:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f023 0203 	bic.w	r2, r3, #3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	4947      	ldr	r1, [pc, #284]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005992:	4313      	orrs	r3, r2
 8005994:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005996:	f7fd f98b 	bl	8002cb0 <HAL_GetTick>
 800599a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599c:	e00a      	b.n	80059b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599e:	f7fd f987 	bl	8002cb0 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d901      	bls.n	80059b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e077      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b4:	4b3e      	ldr	r3, [pc, #248]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f003 020c 	and.w	r2, r3, #12
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d1eb      	bne.n	800599e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2b80      	cmp	r3, #128	; 0x80
 80059ca:	d105      	bne.n	80059d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80059cc:	4b38      	ldr	r3, [pc, #224]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	4a37      	ldr	r2, [pc, #220]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	4b31      	ldr	r3, [pc, #196]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d208      	bcs.n	8005a06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f4:	4b2e      	ldr	r3, [pc, #184]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	492b      	ldr	r1, [pc, #172]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a02:	4313      	orrs	r3, r2
 8005a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a06:	4b29      	ldr	r3, [pc, #164]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	683a      	ldr	r2, [r7, #0]
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d210      	bcs.n	8005a36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a14:	4b25      	ldr	r3, [pc, #148]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f023 020f 	bic.w	r2, r3, #15
 8005a1c:	4923      	ldr	r1, [pc, #140]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a24:	4b21      	ldr	r3, [pc, #132]	; (8005aac <HAL_RCC_ClockConfig+0x25c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 030f 	and.w	r3, r3, #15
 8005a2c:	683a      	ldr	r2, [r7, #0]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d001      	beq.n	8005a36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e036      	b.n	8005aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d008      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a42:	4b1b      	ldr	r3, [pc, #108]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	4918      	ldr	r1, [pc, #96]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a50:	4313      	orrs	r3, r2
 8005a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d009      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a60:	4b13      	ldr	r3, [pc, #76]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4910      	ldr	r1, [pc, #64]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a70:	4313      	orrs	r3, r2
 8005a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a74:	f000 f826 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8005a78:	4602      	mov	r2, r0
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	f003 030f 	and.w	r3, r3, #15
 8005a84:	490c      	ldr	r1, [pc, #48]	; (8005ab8 <HAL_RCC_ClockConfig+0x268>)
 8005a86:	5ccb      	ldrb	r3, [r1, r3]
 8005a88:	f003 031f 	and.w	r3, r3, #31
 8005a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a90:	4a0a      	ldr	r2, [pc, #40]	; (8005abc <HAL_RCC_ClockConfig+0x26c>)
 8005a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005a94:	4b0a      	ldr	r3, [pc, #40]	; (8005ac0 <HAL_RCC_ClockConfig+0x270>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7fd f8b9 	bl	8002c10 <HAL_InitTick>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3718      	adds	r7, #24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}
 8005aac:	40022000 	.word	0x40022000
 8005ab0:	40021000 	.word	0x40021000
 8005ab4:	04c4b400 	.word	0x04c4b400
 8005ab8:	0800bf24 	.word	0x0800bf24
 8005abc:	20000000 	.word	0x20000000
 8005ac0:	20000004 	.word	0x20000004

08005ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	b089      	sub	sp, #36	; 0x24
 8005ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61fb      	str	r3, [r7, #28]
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 030c 	and.w	r3, r3, #12
 8005ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005adc:	4b3b      	ldr	r3, [pc, #236]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0303 	and.w	r3, r3, #3
 8005ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d005      	beq.n	8005af8 <HAL_RCC_GetSysClockFreq+0x34>
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	2b0c      	cmp	r3, #12
 8005af0:	d121      	bne.n	8005b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d11e      	bne.n	8005b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005af8:	4b34      	ldr	r3, [pc, #208]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0308 	and.w	r3, r3, #8
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d107      	bne.n	8005b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b04:	4b31      	ldr	r3, [pc, #196]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b0a:	0a1b      	lsrs	r3, r3, #8
 8005b0c:	f003 030f 	and.w	r3, r3, #15
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	e005      	b.n	8005b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b14:	4b2d      	ldr	r3, [pc, #180]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	091b      	lsrs	r3, r3, #4
 8005b1a:	f003 030f 	and.w	r3, r3, #15
 8005b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b20:	4a2b      	ldr	r2, [pc, #172]	; (8005bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10d      	bne.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b34:	e00a      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	2b04      	cmp	r3, #4
 8005b3a:	d102      	bne.n	8005b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b3e:	61bb      	str	r3, [r7, #24]
 8005b40:	e004      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	2b08      	cmp	r3, #8
 8005b46:	d101      	bne.n	8005b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b48:	4b23      	ldr	r3, [pc, #140]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	2b0c      	cmp	r3, #12
 8005b50:	d134      	bne.n	8005bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b52:	4b1e      	ldr	r3, [pc, #120]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f003 0303 	and.w	r3, r3, #3
 8005b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d003      	beq.n	8005b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d003      	beq.n	8005b70 <HAL_RCC_GetSysClockFreq+0xac>
 8005b68:	e005      	b.n	8005b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005b6a:	4b1a      	ldr	r3, [pc, #104]	; (8005bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b6c:	617b      	str	r3, [r7, #20]
      break;
 8005b6e:	e005      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005b70:	4b19      	ldr	r3, [pc, #100]	; (8005bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005b72:	617b      	str	r3, [r7, #20]
      break;
 8005b74:	e002      	b.n	8005b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	617b      	str	r3, [r7, #20]
      break;
 8005b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	091b      	lsrs	r3, r3, #4
 8005b82:	f003 030f 	and.w	r3, r3, #15
 8005b86:	3301      	adds	r3, #1
 8005b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005b8a:	4b10      	ldr	r3, [pc, #64]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005b8c:	68db      	ldr	r3, [r3, #12]
 8005b8e:	0a1b      	lsrs	r3, r3, #8
 8005b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	fb03 f202 	mul.w	r2, r3, r2
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ba2:	4b0a      	ldr	r3, [pc, #40]	; (8005bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	0e5b      	lsrs	r3, r3, #25
 8005ba8:	f003 0303 	and.w	r3, r3, #3
 8005bac:	3301      	adds	r3, #1
 8005bae:	005b      	lsls	r3, r3, #1
 8005bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bbc:	69bb      	ldr	r3, [r7, #24]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3724      	adds	r7, #36	; 0x24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000
 8005bd0:	0800bf3c 	.word	0x0800bf3c
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	007a1200 	.word	0x007a1200

08005bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005be2:	681b      	ldr	r3, [r3, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000000 	.word	0x20000000

08005bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bf8:	f7ff fff0 	bl	8005bdc <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	; (8005c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800bf34 	.word	0x0800bf34

08005c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c24:	f7ff ffda 	bl	8005bdc <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	; (8005c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0adb      	lsrs	r3, r3, #11
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	; (8005c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800bf34 	.word	0x0800bf34

08005c4c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c54:	2300      	movs	r3, #0
 8005c56:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d003      	beq.n	8005c6c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c64:	f7ff f916 	bl	8004e94 <HAL_PWREx_GetVoltageRange>
 8005c68:	6178      	str	r0, [r7, #20]
 8005c6a:	e014      	b.n	8005c96 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c6c:	4b22      	ldr	r3, [pc, #136]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c70:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c76:	6593      	str	r3, [r2, #88]	; 0x58
 8005c78:	4b1f      	ldr	r3, [pc, #124]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c80:	60fb      	str	r3, [r7, #12]
 8005c82:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c84:	f7ff f906 	bl	8004e94 <HAL_PWREx_GetVoltageRange>
 8005c88:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c8a:	4b1b      	ldr	r3, [pc, #108]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c8e:	4a1a      	ldr	r2, [pc, #104]	; (8005cf8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c94:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9c:	d10b      	bne.n	8005cb6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2b80      	cmp	r3, #128	; 0x80
 8005ca2:	d913      	bls.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2ba0      	cmp	r3, #160	; 0xa0
 8005ca8:	d902      	bls.n	8005cb0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005caa:	2302      	movs	r3, #2
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	e00d      	b.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	613b      	str	r3, [r7, #16]
 8005cb4:	e00a      	b.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8005cba:	d902      	bls.n	8005cc2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	613b      	str	r3, [r7, #16]
 8005cc0:	e004      	b.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2b70      	cmp	r3, #112	; 0x70
 8005cc6:	d101      	bne.n	8005ccc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005cc8:	2301      	movs	r3, #1
 8005cca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005ccc:	4b0b      	ldr	r3, [pc, #44]	; (8005cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f023 020f 	bic.w	r2, r3, #15
 8005cd4:	4909      	ldr	r1, [pc, #36]	; (8005cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cdc:	4b07      	ldr	r3, [pc, #28]	; (8005cfc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	693a      	ldr	r2, [r7, #16]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d001      	beq.n	8005cee <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40021000 	.word	0x40021000
 8005cfc:	40022000 	.word	0x40022000

08005d00 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d06:	4b2d      	ldr	r3, [pc, #180]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d08:	68db      	ldr	r3, [r3, #12]
 8005d0a:	f003 0303 	and.w	r3, r3, #3
 8005d0e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b03      	cmp	r3, #3
 8005d14:	d00b      	beq.n	8005d2e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b03      	cmp	r3, #3
 8005d1a:	d825      	bhi.n	8005d68 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d008      	beq.n	8005d34 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d11f      	bne.n	8005d68 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005d28:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005d2a:	613b      	str	r3, [r7, #16]
    break;
 8005d2c:	e01f      	b.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005d2e:	4b25      	ldr	r3, [pc, #148]	; (8005dc4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005d30:	613b      	str	r3, [r7, #16]
    break;
 8005d32:	e01c      	b.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005d34:	4b21      	ldr	r3, [pc, #132]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0308 	and.w	r3, r3, #8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d107      	bne.n	8005d50 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005d40:	4b1e      	ldr	r3, [pc, #120]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d46:	0a1b      	lsrs	r3, r3, #8
 8005d48:	f003 030f 	and.w	r3, r3, #15
 8005d4c:	617b      	str	r3, [r7, #20]
 8005d4e:	e005      	b.n	8005d5c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	091b      	lsrs	r3, r3, #4
 8005d56:	f003 030f 	and.w	r3, r3, #15
 8005d5a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005d5c:	4a1a      	ldr	r2, [pc, #104]	; (8005dc8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d64:	613b      	str	r3, [r7, #16]
    break;
 8005d66:	e002      	b.n	8005d6e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	613b      	str	r3, [r7, #16]
    break;
 8005d6c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d6e:	4b13      	ldr	r3, [pc, #76]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	091b      	lsrs	r3, r3, #4
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d7c:	4b0f      	ldr	r3, [pc, #60]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	fb03 f202 	mul.w	r2, r3, r2
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d92:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d94:	4b09      	ldr	r3, [pc, #36]	; (8005dbc <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	0e5b      	lsrs	r3, r3, #25
 8005d9a:	f003 0303 	and.w	r3, r3, #3
 8005d9e:	3301      	adds	r3, #1
 8005da0:	005b      	lsls	r3, r3, #1
 8005da2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dac:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005dae:	683b      	ldr	r3, [r7, #0]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	371c      	adds	r7, #28
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	00f42400 	.word	0x00f42400
 8005dc4:	007a1200 	.word	0x007a1200
 8005dc8:	0800bf3c 	.word	0x0800bf3c

08005dcc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005dd8:	2300      	movs	r3, #0
 8005dda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d040      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dec:	2b80      	cmp	r3, #128	; 0x80
 8005dee:	d02a      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005df0:	2b80      	cmp	r3, #128	; 0x80
 8005df2:	d825      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005df4:	2b60      	cmp	r3, #96	; 0x60
 8005df6:	d026      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005df8:	2b60      	cmp	r3, #96	; 0x60
 8005dfa:	d821      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005dfc:	2b40      	cmp	r3, #64	; 0x40
 8005dfe:	d006      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005e00:	2b40      	cmp	r3, #64	; 0x40
 8005e02:	d81d      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005e08:	2b20      	cmp	r3, #32
 8005e0a:	d010      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005e0c:	e018      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e0e:	4b89      	ldr	r3, [pc, #548]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	4a88      	ldr	r2, [pc, #544]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e1a:	e015      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 fb12 	bl	800644c <RCCEx_PLLSAI1_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3320      	adds	r3, #32
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 fbfd 	bl	8006634 <RCCEx_PLLSAI2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	74fb      	strb	r3, [r7, #19]
      break;
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005e46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005e4e:	4b79      	ldr	r3, [pc, #484]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e54:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e5c:	4975      	ldr	r1, [pc, #468]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e64:	e001      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	7cfb      	ldrb	r3, [r7, #19]
 8005e68:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d047      	beq.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e7e:	d030      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e84:	d82a      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8a:	d02a      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e90:	d824      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e96:	d008      	beq.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e9c:	d81e      	bhi.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ea6:	d010      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ea8:	e018      	b.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005eaa:	4b62      	ldr	r3, [pc, #392]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	4a61      	ldr	r2, [pc, #388]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005eb4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eb6:	e015      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	2100      	movs	r1, #0
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 fac4 	bl	800644c <RCCEx_PLLSAI1_Config>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ec8:	e00c      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3320      	adds	r3, #32
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 fbaf 	bl	8006634 <RCCEx_PLLSAI2_Config>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005eda:	e003      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005edc:	2301      	movs	r3, #1
 8005ede:	74fb      	strb	r3, [r7, #19]
      break;
 8005ee0:	e000      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005ee2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee4:	7cfb      	ldrb	r3, [r7, #19]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d10b      	bne.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005eea:	4b52      	ldr	r3, [pc, #328]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ef0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ef8:	494e      	ldr	r1, [pc, #312]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005f00:	e001      	b.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f02:	7cfb      	ldrb	r3, [r7, #19]
 8005f04:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f000 809f 	beq.w	8006052 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f14:	2300      	movs	r3, #0
 8005f16:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f18:	4b46      	ldr	r3, [pc, #280]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00d      	beq.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f2e:	4b41      	ldr	r3, [pc, #260]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	4a40      	ldr	r2, [pc, #256]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f38:	6593      	str	r3, [r2, #88]	; 0x58
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f42:	60bb      	str	r3, [r7, #8]
 8005f44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f46:	2301      	movs	r3, #1
 8005f48:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f4a:	4b3b      	ldr	r3, [pc, #236]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a3a      	ldr	r2, [pc, #232]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f54:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f56:	f7fc feab 	bl	8002cb0 <HAL_GetTick>
 8005f5a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f5c:	e009      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f5e:	f7fc fea7 	bl	8002cb0 <HAL_GetTick>
 8005f62:	4602      	mov	r2, r0
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1ad3      	subs	r3, r2, r3
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d902      	bls.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005f6c:	2303      	movs	r3, #3
 8005f6e:	74fb      	strb	r3, [r7, #19]
        break;
 8005f70:	e005      	b.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d0ef      	beq.n	8005f5e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005f7e:	7cfb      	ldrb	r3, [r7, #19]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d15b      	bne.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f84:	4b2b      	ldr	r3, [pc, #172]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f8e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01f      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	697a      	ldr	r2, [r7, #20]
 8005f9e:	429a      	cmp	r2, r3
 8005fa0:	d019      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fa2:	4b24      	ldr	r3, [pc, #144]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fae:	4b21      	ldr	r3, [pc, #132]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb4:	4a1f      	ldr	r2, [pc, #124]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fbe:	4b1d      	ldr	r3, [pc, #116]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fc4:	4a1b      	ldr	r2, [pc, #108]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fce:	4a19      	ldr	r2, [pc, #100]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005fd0:	697b      	ldr	r3, [r7, #20]
 8005fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d016      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe0:	f7fc fe66 	bl	8002cb0 <HAL_GetTick>
 8005fe4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fe6:	e00b      	b.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fe8:	f7fc fe62 	bl	8002cb0 <HAL_GetTick>
 8005fec:	4602      	mov	r2, r0
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d902      	bls.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005ffa:	2303      	movs	r3, #3
 8005ffc:	74fb      	strb	r3, [r7, #19]
            break;
 8005ffe:	e006      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006000:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b00      	cmp	r3, #0
 800600c:	d0ec      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800600e:	7cfb      	ldrb	r3, [r7, #19]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10c      	bne.n	800602e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006014:	4b07      	ldr	r3, [pc, #28]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800601a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006024:	4903      	ldr	r1, [pc, #12]	; (8006034 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006026:	4313      	orrs	r3, r2
 8006028:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800602c:	e008      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800602e:	7cfb      	ldrb	r3, [r7, #19]
 8006030:	74bb      	strb	r3, [r7, #18]
 8006032:	e005      	b.n	8006040 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8006034:	40021000 	.word	0x40021000
 8006038:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800603c:	7cfb      	ldrb	r3, [r7, #19]
 800603e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006040:	7c7b      	ldrb	r3, [r7, #17]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d105      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006046:	4ba0      	ldr	r3, [pc, #640]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	4a9f      	ldr	r2, [pc, #636]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800604c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006050:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 0301 	and.w	r3, r3, #1
 800605a:	2b00      	cmp	r3, #0
 800605c:	d00a      	beq.n	8006074 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800605e:	4b9a      	ldr	r3, [pc, #616]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006064:	f023 0203 	bic.w	r2, r3, #3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800606c:	4996      	ldr	r1, [pc, #600]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f003 0302 	and.w	r3, r3, #2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00a      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006080:	4b91      	ldr	r3, [pc, #580]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006086:	f023 020c 	bic.w	r2, r3, #12
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608e:	498e      	ldr	r1, [pc, #568]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006090:	4313      	orrs	r3, r2
 8006092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0304 	and.w	r3, r3, #4
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00a      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80060a2:	4b89      	ldr	r3, [pc, #548]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b0:	4985      	ldr	r1, [pc, #532]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0308 	and.w	r3, r3, #8
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00a      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80060c4:	4b80      	ldr	r3, [pc, #512]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060d2:	497d      	ldr	r1, [pc, #500]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80060e6:	4b78      	ldr	r3, [pc, #480]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060f4:	4974      	ldr	r1, [pc, #464]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0320 	and.w	r3, r3, #32
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00a      	beq.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006108:	4b6f      	ldr	r3, [pc, #444]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006116:	496c      	ldr	r1, [pc, #432]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800612a:	4b67      	ldr	r3, [pc, #412]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800612c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006130:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006138:	4963      	ldr	r1, [pc, #396]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006148:	2b00      	cmp	r3, #0
 800614a:	d00a      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800614c:	4b5e      	ldr	r3, [pc, #376]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615a:	495b      	ldr	r1, [pc, #364]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800615c:	4313      	orrs	r3, r2
 800615e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800616e:	4b56      	ldr	r3, [pc, #344]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006174:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800617c:	4952      	ldr	r1, [pc, #328]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800617e:	4313      	orrs	r3, r2
 8006180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006190:	4b4d      	ldr	r3, [pc, #308]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006196:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619e:	494a      	ldr	r1, [pc, #296]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061b2:	4b45      	ldr	r3, [pc, #276]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c0:	4941      	ldr	r1, [pc, #260]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061d4:	4b3c      	ldr	r3, [pc, #240]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061da:	f023 0203 	bic.w	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e2:	4939      	ldr	r1, [pc, #228]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d028      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80061f6:	4b34      	ldr	r3, [pc, #208]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006204:	4930      	ldr	r1, [pc, #192]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006210:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006214:	d106      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006216:	4b2c      	ldr	r3, [pc, #176]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	4a2b      	ldr	r2, [pc, #172]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800621c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006220:	60d3      	str	r3, [r2, #12]
 8006222:	e011      	b.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006228:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800622c:	d10c      	bne.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	3304      	adds	r3, #4
 8006232:	2101      	movs	r1, #1
 8006234:	4618      	mov	r0, r3
 8006236:	f000 f909 	bl	800644c <RCCEx_PLLSAI1_Config>
 800623a:	4603      	mov	r3, r0
 800623c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800623e:	7cfb      	ldrb	r3, [r7, #19]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8006244:	7cfb      	ldrb	r3, [r7, #19]
 8006246:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d04d      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006258:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800625c:	d108      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800625e:	4b1a      	ldr	r3, [pc, #104]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006264:	4a18      	ldr	r2, [pc, #96]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800626a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800626e:	e012      	b.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8006270:	4b15      	ldr	r3, [pc, #84]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006272:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006276:	4a14      	ldr	r2, [pc, #80]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800627c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006280:	4b11      	ldr	r3, [pc, #68]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628e:	490e      	ldr	r1, [pc, #56]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800629a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800629e:	d106      	bne.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062a0:	4b09      	ldr	r3, [pc, #36]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a08      	ldr	r2, [pc, #32]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062aa:	60d3      	str	r3, [r2, #12]
 80062ac:	e020      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062b6:	d109      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062b8:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	4a02      	ldr	r2, [pc, #8]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80062be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062c2:	60d3      	str	r3, [r2, #12]
 80062c4:	e014      	b.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80062c6:	bf00      	nop
 80062c8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d4:	d10c      	bne.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	2101      	movs	r1, #1
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 f8b5 	bl	800644c <RCCEx_PLLSAI1_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80062e6:	7cfb      	ldrb	r3, [r7, #19]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80062ec:	7cfb      	ldrb	r3, [r7, #19]
 80062ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d028      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062fc:	4b4a      	ldr	r3, [pc, #296]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006302:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800630a:	4947      	ldr	r1, [pc, #284]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800630c:	4313      	orrs	r3, r2
 800630e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006316:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800631a:	d106      	bne.n	800632a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800631c:	4b42      	ldr	r3, [pc, #264]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	4a41      	ldr	r2, [pc, #260]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006326:	60d3      	str	r3, [r2, #12]
 8006328:	e011      	b.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800632e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006332:	d10c      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	2101      	movs	r1, #1
 800633a:	4618      	mov	r0, r3
 800633c:	f000 f886 	bl	800644c <RCCEx_PLLSAI1_Config>
 8006340:	4603      	mov	r3, r0
 8006342:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006344:	7cfb      	ldrb	r3, [r7, #19]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d001      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800634a:	7cfb      	ldrb	r3, [r7, #19]
 800634c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01e      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800635a:	4b33      	ldr	r3, [pc, #204]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800635c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006360:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800636a:	492f      	ldr	r1, [pc, #188]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637c:	d10c      	bne.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	3304      	adds	r3, #4
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 f861 	bl	800644c <RCCEx_PLLSAI1_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800638e:	7cfb      	ldrb	r3, [r7, #19]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d001      	beq.n	8006398 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8006394:	7cfb      	ldrb	r3, [r7, #19]
 8006396:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063a4:	4b20      	ldr	r3, [pc, #128]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063aa:	f023 0204 	bic.w	r2, r3, #4
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063b4:	491c      	ldr	r1, [pc, #112]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063b6:	4313      	orrs	r3, r2
 80063b8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d00b      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063ce:	f023 0218 	bic.w	r2, r3, #24
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	4913      	ldr	r1, [pc, #76]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d017      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063ec:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063fc:	490a      	ldr	r1, [pc, #40]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800640e:	d105      	bne.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	4a04      	ldr	r2, [pc, #16]	; (8006428 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006416:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800641a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800641c:	7cbb      	ldrb	r3, [r7, #18]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3718      	adds	r7, #24
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	40021000 	.word	0x40021000

0800642c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006430:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a04      	ldr	r2, [pc, #16]	; (8006448 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006436:	f043 0304 	orr.w	r3, r3, #4
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop
 8006448:	40021000 	.word	0x40021000

0800644c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800645a:	4b72      	ldr	r3, [pc, #456]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	f003 0303 	and.w	r3, r3, #3
 8006462:	2b00      	cmp	r3, #0
 8006464:	d00e      	beq.n	8006484 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006466:	4b6f      	ldr	r3, [pc, #444]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0203 	and.w	r2, r3, #3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d103      	bne.n	800647e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
       ||
 800647a:	2b00      	cmp	r3, #0
 800647c:	d142      	bne.n	8006504 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	73fb      	strb	r3, [r7, #15]
 8006482:	e03f      	b.n	8006504 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b03      	cmp	r3, #3
 800648a:	d018      	beq.n	80064be <RCCEx_PLLSAI1_Config+0x72>
 800648c:	2b03      	cmp	r3, #3
 800648e:	d825      	bhi.n	80064dc <RCCEx_PLLSAI1_Config+0x90>
 8006490:	2b01      	cmp	r3, #1
 8006492:	d002      	beq.n	800649a <RCCEx_PLLSAI1_Config+0x4e>
 8006494:	2b02      	cmp	r3, #2
 8006496:	d009      	beq.n	80064ac <RCCEx_PLLSAI1_Config+0x60>
 8006498:	e020      	b.n	80064dc <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800649a:	4b62      	ldr	r3, [pc, #392]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11d      	bne.n	80064e2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064aa:	e01a      	b.n	80064e2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064ac:	4b5d      	ldr	r3, [pc, #372]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d116      	bne.n	80064e6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064bc:	e013      	b.n	80064e6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80064be:	4b59      	ldr	r3, [pc, #356]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d10f      	bne.n	80064ea <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80064ca:	4b56      	ldr	r3, [pc, #344]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d109      	bne.n	80064ea <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064da:	e006      	b.n	80064ea <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
      break;
 80064e0:	e004      	b.n	80064ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064e2:	bf00      	nop
 80064e4:	e002      	b.n	80064ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064e6:	bf00      	nop
 80064e8:	e000      	b.n	80064ec <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80064ea:	bf00      	nop
    }

    if(status == HAL_OK)
 80064ec:	7bfb      	ldrb	r3, [r7, #15]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d108      	bne.n	8006504 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80064f2:	4b4c      	ldr	r3, [pc, #304]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f023 0203 	bic.w	r2, r3, #3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4949      	ldr	r1, [pc, #292]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006500:	4313      	orrs	r3, r2
 8006502:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006504:	7bfb      	ldrb	r3, [r7, #15]
 8006506:	2b00      	cmp	r3, #0
 8006508:	f040 8086 	bne.w	8006618 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800650c:	4b45      	ldr	r3, [pc, #276]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a44      	ldr	r2, [pc, #272]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006512:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006516:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006518:	f7fc fbca 	bl	8002cb0 <HAL_GetTick>
 800651c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800651e:	e009      	b.n	8006534 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006520:	f7fc fbc6 	bl	8002cb0 <HAL_GetTick>
 8006524:	4602      	mov	r2, r0
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	2b02      	cmp	r3, #2
 800652c:	d902      	bls.n	8006534 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800652e:	2303      	movs	r3, #3
 8006530:	73fb      	strb	r3, [r7, #15]
        break;
 8006532:	e005      	b.n	8006540 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006534:	4b3b      	ldr	r3, [pc, #236]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ef      	bne.n	8006520 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d168      	bne.n	8006618 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d113      	bne.n	8006574 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800654c:	4b35      	ldr	r3, [pc, #212]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800654e:	691a      	ldr	r2, [r3, #16]
 8006550:	4b35      	ldr	r3, [pc, #212]	; (8006628 <RCCEx_PLLSAI1_Config+0x1dc>)
 8006552:	4013      	ands	r3, r2
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	6892      	ldr	r2, [r2, #8]
 8006558:	0211      	lsls	r1, r2, #8
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68d2      	ldr	r2, [r2, #12]
 800655e:	06d2      	lsls	r2, r2, #27
 8006560:	4311      	orrs	r1, r2
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6852      	ldr	r2, [r2, #4]
 8006566:	3a01      	subs	r2, #1
 8006568:	0112      	lsls	r2, r2, #4
 800656a:	430a      	orrs	r2, r1
 800656c:	492d      	ldr	r1, [pc, #180]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800656e:	4313      	orrs	r3, r2
 8006570:	610b      	str	r3, [r1, #16]
 8006572:	e02d      	b.n	80065d0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2b01      	cmp	r3, #1
 8006578:	d115      	bne.n	80065a6 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800657a:	4b2a      	ldr	r3, [pc, #168]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800657c:	691a      	ldr	r2, [r3, #16]
 800657e:	4b2b      	ldr	r3, [pc, #172]	; (800662c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006580:	4013      	ands	r3, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6892      	ldr	r2, [r2, #8]
 8006586:	0211      	lsls	r1, r2, #8
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6912      	ldr	r2, [r2, #16]
 800658c:	0852      	lsrs	r2, r2, #1
 800658e:	3a01      	subs	r2, #1
 8006590:	0552      	lsls	r2, r2, #21
 8006592:	4311      	orrs	r1, r2
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	6852      	ldr	r2, [r2, #4]
 8006598:	3a01      	subs	r2, #1
 800659a:	0112      	lsls	r2, r2, #4
 800659c:	430a      	orrs	r2, r1
 800659e:	4921      	ldr	r1, [pc, #132]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	610b      	str	r3, [r1, #16]
 80065a4:	e014      	b.n	80065d0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80065a6:	4b1f      	ldr	r3, [pc, #124]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	4b21      	ldr	r3, [pc, #132]	; (8006630 <RCCEx_PLLSAI1_Config+0x1e4>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	0211      	lsls	r1, r2, #8
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6952      	ldr	r2, [r2, #20]
 80065b8:	0852      	lsrs	r2, r2, #1
 80065ba:	3a01      	subs	r2, #1
 80065bc:	0652      	lsls	r2, r2, #25
 80065be:	4311      	orrs	r1, r2
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6852      	ldr	r2, [r2, #4]
 80065c4:	3a01      	subs	r2, #1
 80065c6:	0112      	lsls	r2, r2, #4
 80065c8:	430a      	orrs	r2, r1
 80065ca:	4916      	ldr	r1, [pc, #88]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80065d0:	4b14      	ldr	r3, [pc, #80]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a13      	ldr	r2, [pc, #76]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065dc:	f7fc fb68 	bl	8002cb0 <HAL_GetTick>
 80065e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065e2:	e009      	b.n	80065f8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80065e4:	f7fc fb64 	bl	8002cb0 <HAL_GetTick>
 80065e8:	4602      	mov	r2, r0
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d902      	bls.n	80065f8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80065f2:	2303      	movs	r3, #3
 80065f4:	73fb      	strb	r3, [r7, #15]
          break;
 80065f6:	e005      	b.n	8006604 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80065f8:	4b0a      	ldr	r3, [pc, #40]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0ef      	beq.n	80065e4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	699b      	ldr	r3, [r3, #24]
 8006612:	4904      	ldr	r1, [pc, #16]	; (8006624 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006614:	4313      	orrs	r3, r2
 8006616:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006618:	7bfb      	ldrb	r3, [r7, #15]
}
 800661a:	4618      	mov	r0, r3
 800661c:	3710      	adds	r7, #16
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	40021000 	.word	0x40021000
 8006628:	07ff800f 	.word	0x07ff800f
 800662c:	ff9f800f 	.word	0xff9f800f
 8006630:	f9ff800f 	.word	0xf9ff800f

08006634 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b084      	sub	sp, #16
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006642:	4b72      	ldr	r3, [pc, #456]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f003 0303 	and.w	r3, r3, #3
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00e      	beq.n	800666c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800664e:	4b6f      	ldr	r3, [pc, #444]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	f003 0203 	and.w	r2, r3, #3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	429a      	cmp	r2, r3
 800665c:	d103      	bne.n	8006666 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
       ||
 8006662:	2b00      	cmp	r3, #0
 8006664:	d142      	bne.n	80066ec <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	73fb      	strb	r3, [r7, #15]
 800666a:	e03f      	b.n	80066ec <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d018      	beq.n	80066a6 <RCCEx_PLLSAI2_Config+0x72>
 8006674:	2b03      	cmp	r3, #3
 8006676:	d825      	bhi.n	80066c4 <RCCEx_PLLSAI2_Config+0x90>
 8006678:	2b01      	cmp	r3, #1
 800667a:	d002      	beq.n	8006682 <RCCEx_PLLSAI2_Config+0x4e>
 800667c:	2b02      	cmp	r3, #2
 800667e:	d009      	beq.n	8006694 <RCCEx_PLLSAI2_Config+0x60>
 8006680:	e020      	b.n	80066c4 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006682:	4b62      	ldr	r3, [pc, #392]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d11d      	bne.n	80066ca <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006692:	e01a      	b.n	80066ca <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006694:	4b5d      	ldr	r3, [pc, #372]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669c:	2b00      	cmp	r3, #0
 800669e:	d116      	bne.n	80066ce <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80066a0:	2301      	movs	r3, #1
 80066a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80066a4:	e013      	b.n	80066ce <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80066a6:	4b59      	ldr	r3, [pc, #356]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d10f      	bne.n	80066d2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80066b2:	4b56      	ldr	r3, [pc, #344]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d109      	bne.n	80066d2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80066be:	2301      	movs	r3, #1
 80066c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80066c2:	e006      	b.n	80066d2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	73fb      	strb	r3, [r7, #15]
      break;
 80066c8:	e004      	b.n	80066d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066ca:	bf00      	nop
 80066cc:	e002      	b.n	80066d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066ce:	bf00      	nop
 80066d0:	e000      	b.n	80066d4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80066d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d108      	bne.n	80066ec <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80066da:	4b4c      	ldr	r3, [pc, #304]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	f023 0203 	bic.w	r2, r3, #3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4949      	ldr	r1, [pc, #292]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066e8:	4313      	orrs	r3, r2
 80066ea:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f040 8086 	bne.w	8006800 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80066f4:	4b45      	ldr	r3, [pc, #276]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a44      	ldr	r2, [pc, #272]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80066fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006700:	f7fc fad6 	bl	8002cb0 <HAL_GetTick>
 8006704:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006706:	e009      	b.n	800671c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006708:	f7fc fad2 	bl	8002cb0 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d902      	bls.n	800671c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	73fb      	strb	r3, [r7, #15]
        break;
 800671a:	e005      	b.n	8006728 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800671c:	4b3b      	ldr	r3, [pc, #236]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006724:	2b00      	cmp	r3, #0
 8006726:	d1ef      	bne.n	8006708 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006728:	7bfb      	ldrb	r3, [r7, #15]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d168      	bne.n	8006800 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d113      	bne.n	800675c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006734:	4b35      	ldr	r3, [pc, #212]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006736:	695a      	ldr	r2, [r3, #20]
 8006738:	4b35      	ldr	r3, [pc, #212]	; (8006810 <RCCEx_PLLSAI2_Config+0x1dc>)
 800673a:	4013      	ands	r3, r2
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	6892      	ldr	r2, [r2, #8]
 8006740:	0211      	lsls	r1, r2, #8
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	68d2      	ldr	r2, [r2, #12]
 8006746:	06d2      	lsls	r2, r2, #27
 8006748:	4311      	orrs	r1, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6852      	ldr	r2, [r2, #4]
 800674e:	3a01      	subs	r2, #1
 8006750:	0112      	lsls	r2, r2, #4
 8006752:	430a      	orrs	r2, r1
 8006754:	492d      	ldr	r1, [pc, #180]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006756:	4313      	orrs	r3, r2
 8006758:	614b      	str	r3, [r1, #20]
 800675a:	e02d      	b.n	80067b8 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d115      	bne.n	800678e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006762:	4b2a      	ldr	r3, [pc, #168]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006764:	695a      	ldr	r2, [r3, #20]
 8006766:	4b2b      	ldr	r3, [pc, #172]	; (8006814 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006768:	4013      	ands	r3, r2
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	6892      	ldr	r2, [r2, #8]
 800676e:	0211      	lsls	r1, r2, #8
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6912      	ldr	r2, [r2, #16]
 8006774:	0852      	lsrs	r2, r2, #1
 8006776:	3a01      	subs	r2, #1
 8006778:	0552      	lsls	r2, r2, #21
 800677a:	4311      	orrs	r1, r2
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	6852      	ldr	r2, [r2, #4]
 8006780:	3a01      	subs	r2, #1
 8006782:	0112      	lsls	r2, r2, #4
 8006784:	430a      	orrs	r2, r1
 8006786:	4921      	ldr	r1, [pc, #132]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006788:	4313      	orrs	r3, r2
 800678a:	614b      	str	r3, [r1, #20]
 800678c:	e014      	b.n	80067b8 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 8006790:	695a      	ldr	r2, [r3, #20]
 8006792:	4b21      	ldr	r3, [pc, #132]	; (8006818 <RCCEx_PLLSAI2_Config+0x1e4>)
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6892      	ldr	r2, [r2, #8]
 800679a:	0211      	lsls	r1, r2, #8
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	6952      	ldr	r2, [r2, #20]
 80067a0:	0852      	lsrs	r2, r2, #1
 80067a2:	3a01      	subs	r2, #1
 80067a4:	0652      	lsls	r2, r2, #25
 80067a6:	4311      	orrs	r1, r2
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6852      	ldr	r2, [r2, #4]
 80067ac:	3a01      	subs	r2, #1
 80067ae:	0112      	lsls	r2, r2, #4
 80067b0:	430a      	orrs	r2, r1
 80067b2:	4916      	ldr	r1, [pc, #88]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80067b8:	4b14      	ldr	r3, [pc, #80]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a13      	ldr	r2, [pc, #76]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c4:	f7fc fa74 	bl	8002cb0 <HAL_GetTick>
 80067c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067ca:	e009      	b.n	80067e0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80067cc:	f7fc fa70 	bl	8002cb0 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d902      	bls.n	80067e0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80067da:	2303      	movs	r3, #3
 80067dc:	73fb      	strb	r3, [r7, #15]
          break;
 80067de:	e005      	b.n	80067ec <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80067e0:	4b0a      	ldr	r3, [pc, #40]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0ef      	beq.n	80067cc <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d106      	bne.n	8006800 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80067f2:	4b06      	ldr	r3, [pc, #24]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	4904      	ldr	r1, [pc, #16]	; (800680c <RCCEx_PLLSAI2_Config+0x1d8>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8006800:	7bfb      	ldrb	r3, [r7, #15]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3710      	adds	r7, #16
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
 800680a:	bf00      	nop
 800680c:	40021000 	.word	0x40021000
 8006810:	07ff800f 	.word	0x07ff800f
 8006814:	ff9f800f 	.word	0xff9f800f
 8006818:	f9ff800f 	.word	0xf9ff800f

0800681c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d101      	bne.n	800682e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e095      	b.n	800695a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006832:	2b00      	cmp	r3, #0
 8006834:	d108      	bne.n	8006848 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800683e:	d009      	beq.n	8006854 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
 8006846:	e005      	b.n	8006854 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006860:	b2db      	uxtb	r3, r3
 8006862:	2b00      	cmp	r3, #0
 8006864:	d106      	bne.n	8006874 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fb febe 	bl	80025f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800688a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006894:	d902      	bls.n	800689c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
 800689a:	e002      	b.n	80068a2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800689c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068a0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80068aa:	d007      	beq.n	80068bc <HAL_SPI_Init+0xa0>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068b4:	d002      	beq.n	80068bc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	ea42 0103 	orr.w	r1, r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	f003 0204 	and.w	r2, r3, #4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0310 	and.w	r3, r3, #16
 8006924:	431a      	orrs	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800692a:	f003 0308 	and.w	r3, r3, #8
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	68db      	ldr	r3, [r3, #12]
 8006934:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006938:	ea42 0103 	orr.w	r1, r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2201      	movs	r2, #1
 8006954:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b082      	sub	sp, #8
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e042      	b.n	80069fa <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f7fb fea8 	bl	80026dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2224      	movs	r2, #36	; 0x24
 8006990:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f022 0201 	bic.w	r2, r2, #1
 80069a2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d002      	beq.n	80069b2 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fb25 	bl	8006ffc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f826 	bl	8006a04 <UART_SetConfig>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d101      	bne.n	80069c2 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e01b      	b.n	80069fa <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	689a      	ldr	r2, [r3, #8]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0201 	orr.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fba4 	bl	8007140 <UART_CheckIdleState>
 80069f8:	4603      	mov	r3, r0
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3708      	adds	r7, #8
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
	...

08006a04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a08:	b08c      	sub	sp, #48	; 0x30
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	689a      	ldr	r2, [r3, #8]
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	431a      	orrs	r2, r3
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	431a      	orrs	r2, r3
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	69db      	ldr	r3, [r3, #28]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4baa      	ldr	r3, [pc, #680]	; (8006cdc <UART_SetConfig+0x2d8>)
 8006a34:	4013      	ands	r3, r2
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	6812      	ldr	r2, [r2, #0]
 8006a3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a3c:	430b      	orrs	r3, r1
 8006a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	68da      	ldr	r2, [r3, #12]
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	430a      	orrs	r2, r1
 8006a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a9f      	ldr	r2, [pc, #636]	; (8006ce0 <UART_SetConfig+0x2dc>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d004      	beq.n	8006a70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006a7a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	6812      	ldr	r2, [r2, #0]
 8006a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a84:	430b      	orrs	r3, r1
 8006a86:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a8e:	f023 010f 	bic.w	r1, r3, #15
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	430a      	orrs	r2, r1
 8006a9c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a90      	ldr	r2, [pc, #576]	; (8006ce4 <UART_SetConfig+0x2e0>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d125      	bne.n	8006af4 <UART_SetConfig+0xf0>
 8006aa8:	4b8f      	ldr	r3, [pc, #572]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f003 0303 	and.w	r3, r3, #3
 8006ab2:	2b03      	cmp	r3, #3
 8006ab4:	d81a      	bhi.n	8006aec <UART_SetConfig+0xe8>
 8006ab6:	a201      	add	r2, pc, #4	; (adr r2, 8006abc <UART_SetConfig+0xb8>)
 8006ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abc:	08006acd 	.word	0x08006acd
 8006ac0:	08006add 	.word	0x08006add
 8006ac4:	08006ad5 	.word	0x08006ad5
 8006ac8:	08006ae5 	.word	0x08006ae5
 8006acc:	2301      	movs	r3, #1
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad2:	e116      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ada:	e112      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006adc:	2304      	movs	r3, #4
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae2:	e10e      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006ae4:	2308      	movs	r3, #8
 8006ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aea:	e10a      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006aec:	2310      	movs	r3, #16
 8006aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006af2:	e106      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a7c      	ldr	r2, [pc, #496]	; (8006cec <UART_SetConfig+0x2e8>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d138      	bne.n	8006b70 <UART_SetConfig+0x16c>
 8006afe:	4b7a      	ldr	r3, [pc, #488]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b04:	f003 030c 	and.w	r3, r3, #12
 8006b08:	2b0c      	cmp	r3, #12
 8006b0a:	d82d      	bhi.n	8006b68 <UART_SetConfig+0x164>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <UART_SetConfig+0x110>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b49 	.word	0x08006b49
 8006b18:	08006b69 	.word	0x08006b69
 8006b1c:	08006b69 	.word	0x08006b69
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b59 	.word	0x08006b59
 8006b28:	08006b69 	.word	0x08006b69
 8006b2c:	08006b69 	.word	0x08006b69
 8006b30:	08006b69 	.word	0x08006b69
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b69 	.word	0x08006b69
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b69 	.word	0x08006b69
 8006b44:	08006b61 	.word	0x08006b61
 8006b48:	2300      	movs	r3, #0
 8006b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b4e:	e0d8      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006b50:	2302      	movs	r3, #2
 8006b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b56:	e0d4      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006b58:	2304      	movs	r3, #4
 8006b5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b5e:	e0d0      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006b60:	2308      	movs	r3, #8
 8006b62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b66:	e0cc      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006b68:	2310      	movs	r3, #16
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e0c8      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006b70:	697b      	ldr	r3, [r7, #20]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a5e      	ldr	r2, [pc, #376]	; (8006cf0 <UART_SetConfig+0x2ec>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d125      	bne.n	8006bc6 <UART_SetConfig+0x1c2>
 8006b7a:	4b5b      	ldr	r3, [pc, #364]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b80:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b84:	2b30      	cmp	r3, #48	; 0x30
 8006b86:	d016      	beq.n	8006bb6 <UART_SetConfig+0x1b2>
 8006b88:	2b30      	cmp	r3, #48	; 0x30
 8006b8a:	d818      	bhi.n	8006bbe <UART_SetConfig+0x1ba>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d00a      	beq.n	8006ba6 <UART_SetConfig+0x1a2>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d814      	bhi.n	8006bbe <UART_SetConfig+0x1ba>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d002      	beq.n	8006b9e <UART_SetConfig+0x19a>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d008      	beq.n	8006bae <UART_SetConfig+0x1aa>
 8006b9c:	e00f      	b.n	8006bbe <UART_SetConfig+0x1ba>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ba4:	e0ad      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bac:	e0a9      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006bae:	2304      	movs	r3, #4
 8006bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bb4:	e0a5      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006bb6:	2308      	movs	r3, #8
 8006bb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bbc:	e0a1      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006bbe:	2310      	movs	r3, #16
 8006bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bc4:	e09d      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a4a      	ldr	r2, [pc, #296]	; (8006cf4 <UART_SetConfig+0x2f0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d125      	bne.n	8006c1c <UART_SetConfig+0x218>
 8006bd0:	4b45      	ldr	r3, [pc, #276]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006bda:	2bc0      	cmp	r3, #192	; 0xc0
 8006bdc:	d016      	beq.n	8006c0c <UART_SetConfig+0x208>
 8006bde:	2bc0      	cmp	r3, #192	; 0xc0
 8006be0:	d818      	bhi.n	8006c14 <UART_SetConfig+0x210>
 8006be2:	2b80      	cmp	r3, #128	; 0x80
 8006be4:	d00a      	beq.n	8006bfc <UART_SetConfig+0x1f8>
 8006be6:	2b80      	cmp	r3, #128	; 0x80
 8006be8:	d814      	bhi.n	8006c14 <UART_SetConfig+0x210>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d002      	beq.n	8006bf4 <UART_SetConfig+0x1f0>
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d008      	beq.n	8006c04 <UART_SetConfig+0x200>
 8006bf2:	e00f      	b.n	8006c14 <UART_SetConfig+0x210>
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bfa:	e082      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006bfc:	2302      	movs	r3, #2
 8006bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c02:	e07e      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c04:	2304      	movs	r3, #4
 8006c06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c0a:	e07a      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c0c:	2308      	movs	r3, #8
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c12:	e076      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c14:	2310      	movs	r3, #16
 8006c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c1a:	e072      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a35      	ldr	r2, [pc, #212]	; (8006cf8 <UART_SetConfig+0x2f4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d12a      	bne.n	8006c7c <UART_SetConfig+0x278>
 8006c26:	4b30      	ldr	r3, [pc, #192]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c34:	d01a      	beq.n	8006c6c <UART_SetConfig+0x268>
 8006c36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c3a:	d81b      	bhi.n	8006c74 <UART_SetConfig+0x270>
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c40:	d00c      	beq.n	8006c5c <UART_SetConfig+0x258>
 8006c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c46:	d815      	bhi.n	8006c74 <UART_SetConfig+0x270>
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <UART_SetConfig+0x250>
 8006c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c50:	d008      	beq.n	8006c64 <UART_SetConfig+0x260>
 8006c52:	e00f      	b.n	8006c74 <UART_SetConfig+0x270>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c5a:	e052      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c5c:	2302      	movs	r3, #2
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c62:	e04e      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c64:	2304      	movs	r3, #4
 8006c66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c6a:	e04a      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c6c:	2308      	movs	r3, #8
 8006c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c72:	e046      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c74:	2310      	movs	r3, #16
 8006c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7a:	e042      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a17      	ldr	r2, [pc, #92]	; (8006ce0 <UART_SetConfig+0x2dc>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d13a      	bne.n	8006cfc <UART_SetConfig+0x2f8>
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <UART_SetConfig+0x2e4>)
 8006c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c94:	d01a      	beq.n	8006ccc <UART_SetConfig+0x2c8>
 8006c96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c9a:	d81b      	bhi.n	8006cd4 <UART_SetConfig+0x2d0>
 8006c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca0:	d00c      	beq.n	8006cbc <UART_SetConfig+0x2b8>
 8006ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca6:	d815      	bhi.n	8006cd4 <UART_SetConfig+0x2d0>
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d003      	beq.n	8006cb4 <UART_SetConfig+0x2b0>
 8006cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb0:	d008      	beq.n	8006cc4 <UART_SetConfig+0x2c0>
 8006cb2:	e00f      	b.n	8006cd4 <UART_SetConfig+0x2d0>
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cba:	e022      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006cbc:	2302      	movs	r3, #2
 8006cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cc2:	e01e      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006cc4:	2304      	movs	r3, #4
 8006cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cca:	e01a      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cd2:	e016      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cda:	e012      	b.n	8006d02 <UART_SetConfig+0x2fe>
 8006cdc:	cfff69f3 	.word	0xcfff69f3
 8006ce0:	40008000 	.word	0x40008000
 8006ce4:	40013800 	.word	0x40013800
 8006ce8:	40021000 	.word	0x40021000
 8006cec:	40004400 	.word	0x40004400
 8006cf0:	40004800 	.word	0x40004800
 8006cf4:	40004c00 	.word	0x40004c00
 8006cf8:	40005000 	.word	0x40005000
 8006cfc:	2310      	movs	r3, #16
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4aae      	ldr	r2, [pc, #696]	; (8006fc0 <UART_SetConfig+0x5bc>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	f040 8097 	bne.w	8006e3c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d12:	2b08      	cmp	r3, #8
 8006d14:	d823      	bhi.n	8006d5e <UART_SetConfig+0x35a>
 8006d16:	a201      	add	r2, pc, #4	; (adr r2, 8006d1c <UART_SetConfig+0x318>)
 8006d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d1c:	08006d41 	.word	0x08006d41
 8006d20:	08006d5f 	.word	0x08006d5f
 8006d24:	08006d49 	.word	0x08006d49
 8006d28:	08006d5f 	.word	0x08006d5f
 8006d2c:	08006d4f 	.word	0x08006d4f
 8006d30:	08006d5f 	.word	0x08006d5f
 8006d34:	08006d5f 	.word	0x08006d5f
 8006d38:	08006d5f 	.word	0x08006d5f
 8006d3c:	08006d57 	.word	0x08006d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d40:	f7fe ff58 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8006d44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d46:	e010      	b.n	8006d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d48:	4b9e      	ldr	r3, [pc, #632]	; (8006fc4 <UART_SetConfig+0x5c0>)
 8006d4a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d4c:	e00d      	b.n	8006d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d4e:	f7fe feb9 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8006d52:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d54:	e009      	b.n	8006d6a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d5c:	e005      	b.n	8006d6a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006d68:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 8130 	beq.w	8006fd2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d76:	4a94      	ldr	r2, [pc, #592]	; (8006fc8 <UART_SetConfig+0x5c4>)
 8006d78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	005b      	lsls	r3, r3, #1
 8006d8e:	4413      	add	r3, r2
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d305      	bcc.n	8006da2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d903      	bls.n	8006daa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006da8:	e113      	b.n	8006fd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	2200      	movs	r2, #0
 8006dae:	60bb      	str	r3, [r7, #8]
 8006db0:	60fa      	str	r2, [r7, #12]
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db6:	4a84      	ldr	r2, [pc, #528]	; (8006fc8 <UART_SetConfig+0x5c4>)
 8006db8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	603b      	str	r3, [r7, #0]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006dc8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006dcc:	f7f9 ff54 	bl	8000c78 <__aeabi_uldivmod>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	020b      	lsls	r3, r1, #8
 8006de2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006de6:	0202      	lsls	r2, r0, #8
 8006de8:	6979      	ldr	r1, [r7, #20]
 8006dea:	6849      	ldr	r1, [r1, #4]
 8006dec:	0849      	lsrs	r1, r1, #1
 8006dee:	2000      	movs	r0, #0
 8006df0:	460c      	mov	r4, r1
 8006df2:	4605      	mov	r5, r0
 8006df4:	eb12 0804 	adds.w	r8, r2, r4
 8006df8:	eb43 0905 	adc.w	r9, r3, r5
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	469a      	mov	sl, r3
 8006e04:	4693      	mov	fp, r2
 8006e06:	4652      	mov	r2, sl
 8006e08:	465b      	mov	r3, fp
 8006e0a:	4640      	mov	r0, r8
 8006e0c:	4649      	mov	r1, r9
 8006e0e:	f7f9 ff33 	bl	8000c78 <__aeabi_uldivmod>
 8006e12:	4602      	mov	r2, r0
 8006e14:	460b      	mov	r3, r1
 8006e16:	4613      	mov	r3, r2
 8006e18:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e20:	d308      	bcc.n	8006e34 <UART_SetConfig+0x430>
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e28:	d204      	bcs.n	8006e34 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6a3a      	ldr	r2, [r7, #32]
 8006e30:	60da      	str	r2, [r3, #12]
 8006e32:	e0ce      	b.n	8006fd2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e3a:	e0ca      	b.n	8006fd2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e44:	d166      	bne.n	8006f14 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	2b08      	cmp	r3, #8
 8006e4c:	d827      	bhi.n	8006e9e <UART_SetConfig+0x49a>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <UART_SetConfig+0x450>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006e79 	.word	0x08006e79
 8006e58:	08006e81 	.word	0x08006e81
 8006e5c:	08006e89 	.word	0x08006e89
 8006e60:	08006e9f 	.word	0x08006e9f
 8006e64:	08006e8f 	.word	0x08006e8f
 8006e68:	08006e9f 	.word	0x08006e9f
 8006e6c:	08006e9f 	.word	0x08006e9f
 8006e70:	08006e9f 	.word	0x08006e9f
 8006e74:	08006e97 	.word	0x08006e97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e78:	f7fe febc 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8006e7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e7e:	e014      	b.n	8006eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e80:	f7fe fece 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8006e84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e86:	e010      	b.n	8006eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e88:	4b4e      	ldr	r3, [pc, #312]	; (8006fc4 <UART_SetConfig+0x5c0>)
 8006e8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e8c:	e00d      	b.n	8006eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fe fe19 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8006e92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e94:	e009      	b.n	8006eaa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e9c:	e005      	b.n	8006eaa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006ea8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	f000 8090 	beq.w	8006fd2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eb6:	4a44      	ldr	r2, [pc, #272]	; (8006fc8 <UART_SetConfig+0x5c4>)
 8006eb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ec4:	005a      	lsls	r2, r3, #1
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	441a      	add	r2, r3
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ed6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	2b0f      	cmp	r3, #15
 8006edc:	d916      	bls.n	8006f0c <UART_SetConfig+0x508>
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee4:	d212      	bcs.n	8006f0c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006ee6:	6a3b      	ldr	r3, [r7, #32]
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	f023 030f 	bic.w	r3, r3, #15
 8006eee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ef0:	6a3b      	ldr	r3, [r7, #32]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	b29b      	uxth	r3, r3
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	b29a      	uxth	r2, r3
 8006efc:	8bfb      	ldrh	r3, [r7, #30]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	8bfa      	ldrh	r2, [r7, #30]
 8006f08:	60da      	str	r2, [r3, #12]
 8006f0a:	e062      	b.n	8006fd2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f12:	e05e      	b.n	8006fd2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f18:	2b08      	cmp	r3, #8
 8006f1a:	d828      	bhi.n	8006f6e <UART_SetConfig+0x56a>
 8006f1c:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <UART_SetConfig+0x520>)
 8006f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f22:	bf00      	nop
 8006f24:	08006f49 	.word	0x08006f49
 8006f28:	08006f51 	.word	0x08006f51
 8006f2c:	08006f59 	.word	0x08006f59
 8006f30:	08006f6f 	.word	0x08006f6f
 8006f34:	08006f5f 	.word	0x08006f5f
 8006f38:	08006f6f 	.word	0x08006f6f
 8006f3c:	08006f6f 	.word	0x08006f6f
 8006f40:	08006f6f 	.word	0x08006f6f
 8006f44:	08006f67 	.word	0x08006f67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7fe fe54 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8006f4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f4e:	e014      	b.n	8006f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f50:	f7fe fe66 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8006f54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f56:	e010      	b.n	8006f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f58:	4b1a      	ldr	r3, [pc, #104]	; (8006fc4 <UART_SetConfig+0x5c0>)
 8006f5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f5c:	e00d      	b.n	8006f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f5e:	f7fe fdb1 	bl	8005ac4 <HAL_RCC_GetSysClockFreq>
 8006f62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f64:	e009      	b.n	8006f7a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f6c:	e005      	b.n	8006f7a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f78:	bf00      	nop
    }

    if (pclk != 0U)
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d028      	beq.n	8006fd2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f84:	4a10      	ldr	r2, [pc, #64]	; (8006fc8 <UART_SetConfig+0x5c4>)
 8006f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	085b      	lsrs	r3, r3, #1
 8006f98:	441a      	add	r2, r3
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	d910      	bls.n	8006fcc <UART_SetConfig+0x5c8>
 8006faa:	6a3b      	ldr	r3, [r7, #32]
 8006fac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fb0:	d20c      	bcs.n	8006fcc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fb2:	6a3b      	ldr	r3, [r7, #32]
 8006fb4:	b29a      	uxth	r2, r3
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60da      	str	r2, [r3, #12]
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x5ce>
 8006fbe:	bf00      	nop
 8006fc0:	40008000 	.word	0x40008000
 8006fc4:	00f42400 	.word	0x00f42400
 8006fc8:	0800bf6c 	.word	0x0800bf6c
      }
      else
      {
        ret = HAL_ERROR;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	2200      	movs	r2, #0
 8006fec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006fee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3730      	adds	r7, #48	; 0x30
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ffc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007008:	f003 0308 	and.w	r3, r3, #8
 800700c:	2b00      	cmp	r3, #0
 800700e:	d00a      	beq.n	8007026 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d00a      	beq.n	800706a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	430a      	orrs	r2, r1
 8007068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706e:	f003 0304 	and.w	r3, r3, #4
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00a      	beq.n	800708c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d00a      	beq.n	80070ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	430a      	orrs	r2, r1
 80070ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b2:	f003 0320 	and.w	r3, r3, #32
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01a      	beq.n	8007112 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	430a      	orrs	r2, r1
 80070f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070fa:	d10a      	bne.n	8007112 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	430a      	orrs	r2, r1
 8007110:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00a      	beq.n	8007134 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	605a      	str	r2, [r3, #4]
  }
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b098      	sub	sp, #96	; 0x60
 8007144:	af02      	add	r7, sp, #8
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007150:	f7fb fdae 	bl	8002cb0 <HAL_GetTick>
 8007154:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f003 0308 	and.w	r3, r3, #8
 8007160:	2b08      	cmp	r3, #8
 8007162:	d12f      	bne.n	80071c4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007164:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007168:	9300      	str	r3, [sp, #0]
 800716a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800716c:	2200      	movs	r2, #0
 800716e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 f88e 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d022      	beq.n	80071c4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	e853 3f00 	ldrex	r3, [r3]
 800718a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800718c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800718e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007192:	653b      	str	r3, [r7, #80]	; 0x50
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	461a      	mov	r2, r3
 800719a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800719c:	647b      	str	r3, [r7, #68]	; 0x44
 800719e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80071a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071a4:	e841 2300 	strex	r3, r2, [r1]
 80071a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80071aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d1e6      	bne.n	800717e <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2200      	movs	r2, #0
 80071bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c0:	2303      	movs	r3, #3
 80071c2:	e063      	b.n	800728c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0304 	and.w	r3, r3, #4
 80071ce:	2b04      	cmp	r3, #4
 80071d0:	d149      	bne.n	8007266 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071da:	2200      	movs	r2, #0
 80071dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f857 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d03c      	beq.n	8007266 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	e853 3f00 	ldrex	r3, [r3]
 80071f8:	623b      	str	r3, [r7, #32]
   return(result);
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007200:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	461a      	mov	r2, r3
 8007208:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800720a:	633b      	str	r3, [r7, #48]	; 0x30
 800720c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e6      	bne.n	80071ec <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3308      	adds	r3, #8
 8007224:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	60fb      	str	r3, [r7, #12]
   return(result);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f023 0301 	bic.w	r3, r3, #1
 8007234:	64bb      	str	r3, [r7, #72]	; 0x48
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	3308      	adds	r3, #8
 800723c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800723e:	61fa      	str	r2, [r7, #28]
 8007240:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007242:	69b9      	ldr	r1, [r7, #24]
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	e841 2300 	strex	r3, r2, [r1]
 800724a:	617b      	str	r3, [r7, #20]
   return(result);
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d1e5      	bne.n	800721e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2220      	movs	r2, #32
 8007256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2200      	movs	r2, #0
 800725e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007262:	2303      	movs	r3, #3
 8007264:	e012      	b.n	800728c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2220      	movs	r2, #32
 800726a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3758      	adds	r7, #88	; 0x58
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a4:	e049      	b.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80072ac:	d045      	beq.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fb fcff 	bl	8002cb0 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e048      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d031      	beq.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f003 0308 	and.w	r3, r3, #8
 80072e0:	2b08      	cmp	r3, #8
 80072e2:	d110      	bne.n	8007306 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2208      	movs	r2, #8
 80072ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f838 	bl	8007362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2208      	movs	r2, #8
 80072f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007302:	2301      	movs	r3, #1
 8007304:	e029      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	69db      	ldr	r3, [r3, #28]
 800730c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007314:	d111      	bne.n	800733a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800731e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007320:	68f8      	ldr	r0, [r7, #12]
 8007322:	f000 f81e 	bl	8007362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e00f      	b.n	800735a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	69da      	ldr	r2, [r3, #28]
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	4013      	ands	r3, r2
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	429a      	cmp	r2, r3
 8007348:	bf0c      	ite	eq
 800734a:	2301      	moveq	r3, #1
 800734c:	2300      	movne	r3, #0
 800734e:	b2db      	uxtb	r3, r3
 8007350:	461a      	mov	r2, r3
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	429a      	cmp	r2, r3
 8007356:	d0a6      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007358:	2300      	movs	r3, #0
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}

08007362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007362:	b480      	push	{r7}
 8007364:	b095      	sub	sp, #84	; 0x54
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007372:	e853 3f00 	ldrex	r3, [r3]
 8007376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800737e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	461a      	mov	r2, r3
 8007386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007388:	643b      	str	r3, [r7, #64]	; 0x40
 800738a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800738c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800738e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007390:	e841 2300 	strex	r3, r2, [r1]
 8007394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1e6      	bne.n	800736a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3308      	adds	r3, #8
 80073a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	e853 3f00 	ldrex	r3, [r3]
 80073aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073b2:	f023 0301 	bic.w	r3, r3, #1
 80073b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	3308      	adds	r3, #8
 80073be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80073c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073c8:	e841 2300 	strex	r3, r2, [r1]
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d1e3      	bne.n	800739c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073d8:	2b01      	cmp	r3, #1
 80073da:	d118      	bne.n	800740e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f023 0310 	bic.w	r3, r3, #16
 80073f0:	647b      	str	r3, [r7, #68]	; 0x44
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	6979      	ldr	r1, [r7, #20]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	613b      	str	r3, [r7, #16]
   return(result);
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e6      	bne.n	80073dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2220      	movs	r2, #32
 8007412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2200      	movs	r2, #0
 800741a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007422:	bf00      	nop
 8007424:	3754      	adds	r7, #84	; 0x54
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800742e:	b480      	push	{r7}
 8007430:	b085      	sub	sp, #20
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800743c:	2b01      	cmp	r3, #1
 800743e:	d101      	bne.n	8007444 <HAL_UARTEx_DisableFifoMode+0x16>
 8007440:	2302      	movs	r3, #2
 8007442:	e027      	b.n	8007494 <HAL_UARTEx_DisableFifoMode+0x66>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2224      	movs	r2, #36	; 0x24
 8007450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f022 0201 	bic.w	r2, r2, #1
 800746a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007472:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d101      	bne.n	80074b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80074b4:	2302      	movs	r3, #2
 80074b6:	e02d      	b.n	8007514 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2224      	movs	r2, #36	; 0x24
 80074c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f022 0201 	bic.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f84f 	bl	8007598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2220      	movs	r2, #32
 8007506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007530:	2302      	movs	r3, #2
 8007532:	e02d      	b.n	8007590 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2201      	movs	r2, #1
 8007538:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2224      	movs	r2, #36	; 0x24
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681a      	ldr	r2, [r3, #0]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f022 0201 	bic.w	r2, r2, #1
 800755a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	430a      	orrs	r2, r1
 800756e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 f811 	bl	8007598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	68fa      	ldr	r2, [r7, #12]
 800757c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800758e:	2300      	movs	r3, #0
}
 8007590:	4618      	mov	r0, r3
 8007592:	3710      	adds	r7, #16
 8007594:	46bd      	mov	sp, r7
 8007596:	bd80      	pop	{r7, pc}

08007598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d108      	bne.n	80075ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80075b8:	e031      	b.n	800761e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80075ba:	2308      	movs	r3, #8
 80075bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80075be:	2308      	movs	r3, #8
 80075c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	0e5b      	lsrs	r3, r3, #25
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	f003 0307 	and.w	r3, r3, #7
 80075d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	0f5b      	lsrs	r3, r3, #29
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075e2:	7bbb      	ldrb	r3, [r7, #14]
 80075e4:	7b3a      	ldrb	r2, [r7, #12]
 80075e6:	4911      	ldr	r1, [pc, #68]	; (800762c <UARTEx_SetNbDataToProcess+0x94>)
 80075e8:	5c8a      	ldrb	r2, [r1, r2]
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075ee:	7b3a      	ldrb	r2, [r7, #12]
 80075f0:	490f      	ldr	r1, [pc, #60]	; (8007630 <UARTEx_SetNbDataToProcess+0x98>)
 80075f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	7b7a      	ldrb	r2, [r7, #13]
 8007604:	4909      	ldr	r1, [pc, #36]	; (800762c <UARTEx_SetNbDataToProcess+0x94>)
 8007606:	5c8a      	ldrb	r2, [r1, r2]
 8007608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800760c:	7b7a      	ldrb	r2, [r7, #13]
 800760e:	4908      	ldr	r1, [pc, #32]	; (8007630 <UARTEx_SetNbDataToProcess+0x98>)
 8007610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007612:	fb93 f3f2 	sdiv	r3, r3, r2
 8007616:	b29a      	uxth	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800761e:	bf00      	nop
 8007620:	3714      	adds	r7, #20
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	0800bf84 	.word	0x0800bf84
 8007630:	0800bf8c 	.word	0x0800bf8c

08007634 <arm_std_f32>:
 8007634:	2901      	cmp	r1, #1
 8007636:	d97d      	bls.n	8007734 <arm_std_f32+0x100>
 8007638:	b530      	push	{r4, r5, lr}
 800763a:	ed2d 8b02 	vpush	{d8}
 800763e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8007744 <arm_std_f32+0x110>
 8007642:	088d      	lsrs	r5, r1, #2
 8007644:	b083      	sub	sp, #12
 8007646:	eef0 4a47 	vmov.f32	s9, s14
 800764a:	d028      	beq.n	800769e <arm_std_f32+0x6a>
 800764c:	f100 0310 	add.w	r3, r0, #16
 8007650:	462c      	mov	r4, r5
 8007652:	ed53 7a04 	vldr	s15, [r3, #-16]
 8007656:	ed13 5a03 	vldr	s10, [r3, #-12]
 800765a:	ed53 5a02 	vldr	s11, [r3, #-8]
 800765e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8007662:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8007666:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800766a:	ee36 7a87 	vadd.f32	s14, s13, s14
 800766e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8007672:	ee77 7a85 	vadd.f32	s15, s15, s10
 8007676:	ee76 6a87 	vadd.f32	s13, s13, s14
 800767a:	ee25 7aa5 	vmul.f32	s14, s11, s11
 800767e:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8007682:	ee77 6a26 	vadd.f32	s13, s14, s13
 8007686:	ee26 7a06 	vmul.f32	s14, s12, s12
 800768a:	3c01      	subs	r4, #1
 800768c:	ee77 4a86 	vadd.f32	s9, s15, s12
 8007690:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007694:	f103 0310 	add.w	r3, r3, #16
 8007698:	d1db      	bne.n	8007652 <arm_std_f32+0x1e>
 800769a:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 800769e:	f011 0303 	ands.w	r3, r1, #3
 80076a2:	d01b      	beq.n	80076dc <arm_std_f32+0xa8>
 80076a4:	edd0 7a00 	vldr	s15, [r0]
 80076a8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80076ac:	3b01      	subs	r3, #1
 80076ae:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80076b2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80076b6:	d011      	beq.n	80076dc <arm_std_f32+0xa8>
 80076b8:	edd0 7a01 	vldr	s15, [r0, #4]
 80076bc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80076c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80076ca:	d007      	beq.n	80076dc <arm_std_f32+0xa8>
 80076cc:	edd0 7a02 	vldr	s15, [r0, #8]
 80076d0:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80076d4:	ee74 4aa7 	vadd.f32	s9, s9, s15
 80076d8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80076dc:	ee07 1a90 	vmov	s15, r1
 80076e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80076e8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 80076ec:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 80076f0:	eec7 5a86 	vdiv.f32	s11, s15, s12
 80076f4:	ee87 0a06 	vdiv.f32	s0, s14, s12
 80076f8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80076fc:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8007700:	ee30 0a66 	vsub.f32	s0, s0, s13
 8007704:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800770c:	db0c      	blt.n	8007728 <arm_std_f32+0xf4>
 800770e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007716:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800771a:	d40e      	bmi.n	800773a <arm_std_f32+0x106>
 800771c:	ed82 8a00 	vstr	s16, [r2]
 8007720:	b003      	add	sp, #12
 8007722:	ecbd 8b02 	vpop	{d8}
 8007726:	bd30      	pop	{r4, r5, pc}
 8007728:	2300      	movs	r3, #0
 800772a:	6013      	str	r3, [r2, #0]
 800772c:	b003      	add	sp, #12
 800772e:	ecbd 8b02 	vpop	{d8}
 8007732:	bd30      	pop	{r4, r5, pc}
 8007734:	2300      	movs	r3, #0
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	4770      	bx	lr
 800773a:	9201      	str	r2, [sp, #4]
 800773c:	f003 fb6e 	bl	800ae1c <sqrtf>
 8007740:	9a01      	ldr	r2, [sp, #4]
 8007742:	e7eb      	b.n	800771c <arm_std_f32+0xe8>
 8007744:	00000000 	.word	0x00000000

08007748 <arm_mean_f32>:
 8007748:	b430      	push	{r4, r5}
 800774a:	088d      	lsrs	r5, r1, #2
 800774c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80077c0 <arm_mean_f32+0x78>
 8007750:	d018      	beq.n	8007784 <arm_mean_f32+0x3c>
 8007752:	f100 0310 	add.w	r3, r0, #16
 8007756:	462c      	mov	r4, r5
 8007758:	ed53 5a04 	vldr	s11, [r3, #-16]
 800775c:	ed13 6a03 	vldr	s12, [r3, #-12]
 8007760:	ed53 6a02 	vldr	s13, [r3, #-8]
 8007764:	ed13 7a01 	vldr	s14, [r3, #-4]
 8007768:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800776c:	3c01      	subs	r4, #1
 800776e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007772:	f103 0310 	add.w	r3, r3, #16
 8007776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800777a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800777e:	d1eb      	bne.n	8007758 <arm_mean_f32+0x10>
 8007780:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8007784:	f011 0303 	ands.w	r3, r1, #3
 8007788:	d00f      	beq.n	80077aa <arm_mean_f32+0x62>
 800778a:	ed90 7a00 	vldr	s14, [r0]
 800778e:	3b01      	subs	r3, #1
 8007790:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007794:	d009      	beq.n	80077aa <arm_mean_f32+0x62>
 8007796:	ed90 7a01 	vldr	s14, [r0, #4]
 800779a:	2b01      	cmp	r3, #1
 800779c:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077a0:	bf1c      	itt	ne
 80077a2:	ed90 7a02 	vldrne	s14, [r0, #8]
 80077a6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80077aa:	ee07 1a10 	vmov	s14, r1
 80077ae:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80077b2:	bc30      	pop	{r4, r5}
 80077b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80077b8:	edc2 6a00 	vstr	s13, [r2]
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	00000000 	.word	0x00000000

080077c4 <arm_correlate_f32>:
 80077c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077c8:	4299      	cmp	r1, r3
 80077ca:	b08d      	sub	sp, #52	; 0x34
 80077cc:	f0c0 824c 	bcc.w	8007c68 <arm_correlate_f32+0x4a4>
 80077d0:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80077d2:	eba1 0c03 	sub.w	ip, r1, r3
 80077d6:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80077da:	f04f 0e04 	mov.w	lr, #4
 80077de:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80077e2:	3101      	adds	r1, #1
 80077e4:	1ac9      	subs	r1, r1, r3
 80077e6:	3c01      	subs	r4, #1
 80077e8:	1e5e      	subs	r6, r3, #1
 80077ea:	9102      	str	r1, [sp, #8]
 80077ec:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 80077f0:	f000 8294 	beq.w	8007d1c <arm_correlate_f32+0x558>
 80077f4:	eddf 7a53 	vldr	s15, [pc, #332]	; 8007944 <arm_correlate_f32+0x180>
 80077f8:	f1a1 0804 	sub.w	r8, r1, #4
 80077fc:	46e1      	mov	r9, ip
 80077fe:	4605      	mov	r5, r0
 8007800:	2401      	movs	r4, #1
 8007802:	f014 0703 	ands.w	r7, r4, #3
 8007806:	d01b      	beq.n	8007840 <arm_correlate_f32+0x7c>
 8007808:	ed91 7a00 	vldr	s14, [r1]
 800780c:	edd5 6a00 	vldr	s13, [r5]
 8007810:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007814:	3f01      	subs	r7, #1
 8007816:	ee77 7a87 	vadd.f32	s15, s15, s14
 800781a:	d011      	beq.n	8007840 <arm_correlate_f32+0x7c>
 800781c:	ed91 7a01 	vldr	s14, [r1, #4]
 8007820:	edd5 6a01 	vldr	s13, [r5, #4]
 8007824:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007828:	2f01      	cmp	r7, #1
 800782a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800782e:	d007      	beq.n	8007840 <arm_correlate_f32+0x7c>
 8007830:	ed95 7a02 	vldr	s14, [r5, #8]
 8007834:	edd1 6a02 	vldr	s13, [r1, #8]
 8007838:	ee27 7a26 	vmul.f32	s14, s14, s13
 800783c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007840:	1c67      	adds	r7, r4, #1
 8007842:	42bb      	cmp	r3, r7
 8007844:	edc9 7a00 	vstr	s15, [r9]
 8007848:	4641      	mov	r1, r8
 800784a:	44f1      	add	r9, lr
 800784c:	d03a      	beq.n	80078c4 <arm_correlate_f32+0x100>
 800784e:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8007852:	f000 8267 	beq.w	8007d24 <arm_correlate_f32+0x560>
 8007856:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 800785a:	f100 0110 	add.w	r1, r0, #16
 800785e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8007944 <arm_correlate_f32+0x180>
 8007862:	eb01 050a 	add.w	r5, r1, sl
 8007866:	f108 0410 	add.w	r4, r8, #16
 800786a:	ed11 7a04 	vldr	s14, [r1, #-16]
 800786e:	ed54 3a04 	vldr	s7, [r4, #-16]
 8007872:	ed11 6a03 	vldr	s12, [r1, #-12]
 8007876:	ed14 4a03 	vldr	s8, [r4, #-12]
 800787a:	ed51 6a02 	vldr	s13, [r1, #-8]
 800787e:	ed54 4a02 	vldr	s9, [r4, #-8]
 8007882:	ed51 5a01 	vldr	s11, [r1, #-4]
 8007886:	ed14 5a01 	vldr	s10, [r4, #-4]
 800788a:	ee27 7a23 	vmul.f32	s14, s14, s7
 800788e:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007892:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007896:	ee26 7aa4 	vmul.f32	s14, s13, s9
 800789a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800789e:	ee65 6a85 	vmul.f32	s13, s11, s10
 80078a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078a6:	3110      	adds	r1, #16
 80078a8:	428d      	cmp	r5, r1
 80078aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ae:	f104 0410 	add.w	r4, r4, #16
 80078b2:	d1da      	bne.n	800786a <arm_correlate_f32+0xa6>
 80078b4:	eb00 050a 	add.w	r5, r0, sl
 80078b8:	eb08 010a 	add.w	r1, r8, sl
 80078bc:	f1a8 0804 	sub.w	r8, r8, #4
 80078c0:	463c      	mov	r4, r7
 80078c2:	e79e      	b.n	8007802 <arm_correlate_f32+0x3e>
 80078c4:	2b03      	cmp	r3, #3
 80078c6:	fb0e cc04 	mla	ip, lr, r4, ip
 80078ca:	f240 81dd 	bls.w	8007c88 <arm_correlate_f32+0x4c4>
 80078ce:	9b02      	ldr	r3, [sp, #8]
 80078d0:	0899      	lsrs	r1, r3, #2
 80078d2:	9103      	str	r1, [sp, #12]
 80078d4:	f000 8220 	beq.w	8007d18 <arm_correlate_f32+0x554>
 80078d8:	08bb      	lsrs	r3, r7, #2
 80078da:	f007 0403 	and.w	r4, r7, #3
 80078de:	9300      	str	r3, [sp, #0]
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	f103 0b0c 	add.w	fp, r3, #12
 80078e6:	18d5      	adds	r5, r2, r3
 80078e8:	1e63      	subs	r3, r4, #1
 80078ea:	0109      	lsls	r1, r1, #4
 80078ec:	9306      	str	r3, [sp, #24]
 80078ee:	f100 080c 	add.w	r8, r0, #12
 80078f2:	9401      	str	r4, [sp, #4]
 80078f4:	9104      	str	r1, [sp, #16]
 80078f6:	ea4f 048e 	mov.w	r4, lr, lsl #2
 80078fa:	4441      	add	r1, r8
 80078fc:	f102 0310 	add.w	r3, r2, #16
 8007900:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8007904:	9e06      	ldr	r6, [sp, #24]
 8007906:	9405      	str	r4, [sp, #20]
 8007908:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800790c:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8007910:	46e1      	mov	r9, ip
 8007912:	4483      	add	fp, r0
 8007914:	460f      	mov	r7, r1
 8007916:	920b      	str	r2, [sp, #44]	; 0x2c
 8007918:	469c      	mov	ip, r3
 800791a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8007944 <arm_correlate_f32+0x180>
 800791e:	ed58 1a03 	vldr	s3, [r8, #-12]
 8007922:	ed18 2a02 	vldr	s4, [r8, #-8]
 8007926:	ed58 2a01 	vldr	s5, [r8, #-4]
 800792a:	ed98 0a00 	vldr	s0, [r8]
 800792e:	9900      	ldr	r1, [sp, #0]
 8007930:	eef0 5a46 	vmov.f32	s11, s12
 8007934:	eeb0 5a46 	vmov.f32	s10, s12
 8007938:	eef0 4a46 	vmov.f32	s9, s12
 800793c:	4663      	mov	r3, ip
 800793e:	4642      	mov	r2, r8
 8007940:	e005      	b.n	800794e <arm_correlate_f32+0x18a>
 8007942:	bf00      	nop
 8007944:	00000000 	.word	0x00000000
 8007948:	ed90 0a04 	vldr	s0, [r0, #16]
 800794c:	3210      	adds	r2, #16
 800794e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8007952:	ed13 7a03 	vldr	s14, [r3, #-12]
 8007956:	ed53 7a02 	vldr	s15, [r3, #-8]
 800795a:	ed13 1a01 	vldr	s2, [r3, #-4]
 800795e:	ee62 3a26 	vmul.f32	s7, s4, s13
 8007962:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8007966:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800796a:	edd2 1a01 	vldr	s3, [r2, #4]
 800796e:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007972:	ee22 3a07 	vmul.f32	s6, s4, s14
 8007976:	ee33 5a85 	vadd.f32	s10, s7, s10
 800797a:	ee74 5a25 	vadd.f32	s11, s8, s11
 800797e:	ee62 3a87 	vmul.f32	s7, s5, s14
 8007982:	ee20 4a07 	vmul.f32	s8, s0, s14
 8007986:	ee70 4aa4 	vadd.f32	s9, s1, s9
 800798a:	ee36 6a86 	vadd.f32	s12, s13, s12
 800798e:	ed92 2a02 	vldr	s4, [r2, #8]
 8007992:	ee27 7a21 	vmul.f32	s14, s14, s3
 8007996:	ee73 3a85 	vadd.f32	s7, s7, s10
 800799a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800799e:	ee20 5a27 	vmul.f32	s10, s0, s15
 80079a2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80079a6:	ee34 4a25 	vadd.f32	s8, s8, s11
 80079aa:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80079ae:	ee61 5aa7 	vmul.f32	s11, s3, s15
 80079b2:	edd2 2a03 	vldr	s5, [r2, #12]
 80079b6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80079ba:	ee35 5a23 	vadd.f32	s10, s10, s7
 80079be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079c2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80079c6:	ee20 0a01 	vmul.f32	s0, s0, s2
 80079ca:	ee61 3a81 	vmul.f32	s7, s3, s2
 80079ce:	ee75 5a84 	vadd.f32	s11, s11, s8
 80079d2:	ee22 7a01 	vmul.f32	s14, s4, s2
 80079d6:	ee21 6a22 	vmul.f32	s12, s2, s5
 80079da:	3901      	subs	r1, #1
 80079dc:	f103 0310 	add.w	r3, r3, #16
 80079e0:	ee70 4a24 	vadd.f32	s9, s0, s9
 80079e4:	ee33 5a85 	vadd.f32	s10, s7, s10
 80079e8:	ee77 5a25 	vadd.f32	s11, s14, s11
 80079ec:	ee36 6a27 	vadd.f32	s12, s12, s15
 80079f0:	4610      	mov	r0, r2
 80079f2:	d1a9      	bne.n	8007948 <arm_correlate_f32+0x184>
 80079f4:	9b01      	ldr	r3, [sp, #4]
 80079f6:	b3f3      	cbz	r3, 8007a76 <arm_correlate_f32+0x2b2>
 80079f8:	edd5 7a00 	vldr	s15, [r5]
 80079fc:	ed9b 4a00 	vldr	s8, [fp]
 8007a00:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8007a04:	ee62 3a27 	vmul.f32	s7, s4, s15
 8007a08:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8007a0c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8007a10:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8007a14:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007a18:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007a1c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007a20:	b34e      	cbz	r6, 8007a76 <arm_correlate_f32+0x2b2>
 8007a22:	edd5 7a01 	vldr	s15, [r5, #4]
 8007a26:	eddb 6a01 	vldr	s13, [fp, #4]
 8007a2a:	ee22 7a27 	vmul.f32	s14, s4, s15
 8007a2e:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8007a32:	ee67 3a84 	vmul.f32	s7, s15, s8
 8007a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007a3a:	2e01      	cmp	r6, #1
 8007a3c:	ee74 4a87 	vadd.f32	s9, s9, s14
 8007a40:	ee35 5a03 	vadd.f32	s10, s10, s6
 8007a44:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8007a48:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007a4c:	d013      	beq.n	8007a76 <arm_correlate_f32+0x2b2>
 8007a4e:	ed95 7a02 	vldr	s14, [r5, #8]
 8007a52:	eddb 3a02 	vldr	s7, [fp, #8]
 8007a56:	ee62 7a87 	vmul.f32	s15, s5, s14
 8007a5a:	ee27 4a04 	vmul.f32	s8, s14, s8
 8007a5e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007a62:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007a66:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8007a6a:	ee35 5a04 	vadd.f32	s10, s10, s8
 8007a6e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8007a72:	ee36 6a07 	vadd.f32	s12, s12, s14
 8007a76:	f108 0810 	add.w	r8, r8, #16
 8007a7a:	eb09 020e 	add.w	r2, r9, lr
 8007a7e:	eb0a 030e 	add.w	r3, sl, lr
 8007a82:	4547      	cmp	r7, r8
 8007a84:	edc9 4a00 	vstr	s9, [r9]
 8007a88:	f10b 0b10 	add.w	fp, fp, #16
 8007a8c:	ed82 5a00 	vstr	s10, [r2]
 8007a90:	44a1      	add	r9, r4
 8007a92:	edca 5a00 	vstr	s11, [sl]
 8007a96:	ed83 6a00 	vstr	s12, [r3]
 8007a9a:	44a2      	add	sl, r4
 8007a9c:	f47f af3d 	bne.w	800791a <arm_correlate_f32+0x156>
 8007aa0:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8007aa4:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8007aa8:	9b03      	ldr	r3, [sp, #12]
 8007aaa:	9c05      	ldr	r4, [sp, #20]
 8007aac:	9904      	ldr	r1, [sp, #16]
 8007aae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007ab0:	fb04 cc03 	mla	ip, r4, r3, ip
 8007ab4:	4401      	add	r1, r0
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	460d      	mov	r5, r1
 8007aba:	9303      	str	r3, [sp, #12]
 8007abc:	9b02      	ldr	r3, [sp, #8]
 8007abe:	f013 0303 	ands.w	r3, r3, #3
 8007ac2:	9301      	str	r3, [sp, #4]
 8007ac4:	d071      	beq.n	8007baa <arm_correlate_f32+0x3e6>
 8007ac6:	9903      	ldr	r1, [sp, #12]
 8007ac8:	9205      	str	r2, [sp, #20]
 8007aca:	f007 0403 	and.w	r4, r7, #3
 8007ace:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8007ad2:	1c4f      	adds	r7, r1, #1
 8007ad4:	1859      	adds	r1, r3, r1
 8007ad6:	1d03      	adds	r3, r0, #4
 8007ad8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007adc:	9400      	str	r4, [sp, #0]
 8007ade:	f102 0110 	add.w	r1, r2, #16
 8007ae2:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8007ae6:	3c01      	subs	r4, #1
 8007ae8:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8007aec:	eb02 090a 	add.w	r9, r2, sl
 8007af0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8007af4:	46e0      	mov	r8, ip
 8007af6:	4618      	mov	r0, r3
 8007af8:	460e      	mov	r6, r1
 8007afa:	4622      	mov	r2, r4
 8007afc:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8007944 <arm_correlate_f32+0x180>
 8007b00:	f105 0110 	add.w	r1, r5, #16
 8007b04:	4633      	mov	r3, r6
 8007b06:	465c      	mov	r4, fp
 8007b08:	ed11 7a04 	vldr	s14, [r1, #-16]
 8007b0c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007b10:	ed11 6a03 	vldr	s12, [r1, #-12]
 8007b14:	ed13 4a03 	vldr	s8, [r3, #-12]
 8007b18:	ed51 6a02 	vldr	s13, [r1, #-8]
 8007b1c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8007b20:	ed51 5a01 	vldr	s11, [r1, #-4]
 8007b24:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007b28:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007b2c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b34:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8007b38:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007b3c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8007b40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b44:	3c01      	subs	r4, #1
 8007b46:	f101 0110 	add.w	r1, r1, #16
 8007b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b4e:	f103 0310 	add.w	r3, r3, #16
 8007b52:	d1d9      	bne.n	8007b08 <arm_correlate_f32+0x344>
 8007b54:	9b00      	ldr	r3, [sp, #0]
 8007b56:	4455      	add	r5, sl
 8007b58:	b1d3      	cbz	r3, 8007b90 <arm_correlate_f32+0x3cc>
 8007b5a:	ed99 7a00 	vldr	s14, [r9]
 8007b5e:	edd5 6a00 	vldr	s13, [r5]
 8007b62:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b66:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b6a:	b18a      	cbz	r2, 8007b90 <arm_correlate_f32+0x3cc>
 8007b6c:	ed99 7a01 	vldr	s14, [r9, #4]
 8007b70:	edd5 6a01 	vldr	s13, [r5, #4]
 8007b74:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b78:	2a01      	cmp	r2, #1
 8007b7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b7e:	d007      	beq.n	8007b90 <arm_correlate_f32+0x3cc>
 8007b80:	ed95 7a02 	vldr	s14, [r5, #8]
 8007b84:	edd9 6a02 	vldr	s13, [r9, #8]
 8007b88:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007b8c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007b90:	463d      	mov	r5, r7
 8007b92:	3704      	adds	r7, #4
 8007b94:	42b8      	cmp	r0, r7
 8007b96:	edc8 7a00 	vstr	s15, [r8]
 8007b9a:	44f0      	add	r8, lr
 8007b9c:	d1ae      	bne.n	8007afc <arm_correlate_f32+0x338>
 8007b9e:	9b01      	ldr	r3, [sp, #4]
 8007ba0:	9a05      	ldr	r2, [sp, #20]
 8007ba2:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8007ba6:	fb0e cc03 	mla	ip, lr, r3, ip
 8007baa:	9b02      	ldr	r3, [sp, #8]
 8007bac:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8007bb0:	08b5      	lsrs	r5, r6, #2
 8007bb2:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8007944 <arm_correlate_f32+0x180>
 8007bb6:	f000 80ac 	beq.w	8007d12 <arm_correlate_f32+0x54e>
 8007bba:	f100 0110 	add.w	r1, r0, #16
 8007bbe:	f102 0310 	add.w	r3, r2, #16
 8007bc2:	462c      	mov	r4, r5
 8007bc4:	ed51 6a04 	vldr	s13, [r1, #-16]
 8007bc8:	ed53 3a04 	vldr	s7, [r3, #-16]
 8007bcc:	ed11 7a03 	vldr	s14, [r1, #-12]
 8007bd0:	ed13 4a03 	vldr	s8, [r3, #-12]
 8007bd4:	ed51 7a02 	vldr	s15, [r1, #-8]
 8007bd8:	ed53 4a02 	vldr	s9, [r3, #-8]
 8007bdc:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007be0:	ed13 5a01 	vldr	s10, [r3, #-4]
 8007be4:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8007be8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8007bec:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8007bf0:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8007bf4:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007bf8:	ee66 6a05 	vmul.f32	s13, s12, s10
 8007bfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007c00:	3c01      	subs	r4, #1
 8007c02:	f101 0110 	add.w	r1, r1, #16
 8007c06:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8007c0a:	f103 0310 	add.w	r3, r3, #16
 8007c0e:	d1d9      	bne.n	8007bc4 <arm_correlate_f32+0x400>
 8007c10:	012d      	lsls	r5, r5, #4
 8007c12:	1941      	adds	r1, r0, r5
 8007c14:	4415      	add	r5, r2
 8007c16:	f016 0303 	ands.w	r3, r6, #3
 8007c1a:	d01b      	beq.n	8007c54 <arm_correlate_f32+0x490>
 8007c1c:	edd5 7a00 	vldr	s15, [r5]
 8007c20:	ed91 7a00 	vldr	s14, [r1]
 8007c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c28:	3b01      	subs	r3, #1
 8007c2a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007c2e:	d011      	beq.n	8007c54 <arm_correlate_f32+0x490>
 8007c30:	edd5 7a01 	vldr	s15, [r5, #4]
 8007c34:	ed91 7a01 	vldr	s14, [r1, #4]
 8007c38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c3c:	2b01      	cmp	r3, #1
 8007c3e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007c42:	d007      	beq.n	8007c54 <arm_correlate_f32+0x490>
 8007c44:	edd1 7a02 	vldr	s15, [r1, #8]
 8007c48:	ed95 7a02 	vldr	s14, [r5, #8]
 8007c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007c50:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007c54:	3e01      	subs	r6, #1
 8007c56:	edcc 5a00 	vstr	s11, [ip]
 8007c5a:	f100 0004 	add.w	r0, r0, #4
 8007c5e:	44f4      	add	ip, lr
 8007c60:	d1a6      	bne.n	8007bb0 <arm_correlate_f32+0x3ec>
 8007c62:	b00d      	add	sp, #52	; 0x34
 8007c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c68:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8007c6c:	4606      	mov	r6, r0
 8007c6e:	3c02      	subs	r4, #2
 8007c70:	4610      	mov	r0, r2
 8007c72:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007c74:	440c      	add	r4, r1
 8007c76:	460d      	mov	r5, r1
 8007c78:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	4632      	mov	r2, r6
 8007c80:	f06f 0e03 	mvn.w	lr, #3
 8007c84:	462b      	mov	r3, r5
 8007c86:	e5aa      	b.n	80077de <arm_correlate_f32+0x1a>
 8007c88:	9902      	ldr	r1, [sp, #8]
 8007c8a:	2900      	cmp	r1, #0
 8007c8c:	d090      	beq.n	8007bb0 <arm_correlate_f32+0x3ec>
 8007c8e:	9902      	ldr	r1, [sp, #8]
 8007c90:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8007944 <arm_correlate_f32+0x180>
 8007c94:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8007c98:	eb00 0708 	add.w	r7, r0, r8
 8007c9c:	4601      	mov	r1, r0
 8007c9e:	4665      	mov	r5, ip
 8007ca0:	e020      	b.n	8007ce4 <arm_correlate_f32+0x520>
 8007ca2:	edd2 7a00 	vldr	s15, [r2]
 8007ca6:	ecb4 7a01 	vldmia	r4!, {s14}
 8007caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007cae:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007cb2:	b18e      	cbz	r6, 8007cd8 <arm_correlate_f32+0x514>
 8007cb4:	ed92 7a01 	vldr	s14, [r2, #4]
 8007cb8:	edd1 6a01 	vldr	s13, [r1, #4]
 8007cbc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cc6:	d007      	beq.n	8007cd8 <arm_correlate_f32+0x514>
 8007cc8:	ed91 7a02 	vldr	s14, [r1, #8]
 8007ccc:	edd2 6a02 	vldr	s13, [r2, #8]
 8007cd0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007cd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007cd8:	42bc      	cmp	r4, r7
 8007cda:	edc5 7a00 	vstr	s15, [r5]
 8007cde:	4621      	mov	r1, r4
 8007ce0:	4475      	add	r5, lr
 8007ce2:	d00b      	beq.n	8007cfc <arm_correlate_f32+0x538>
 8007ce4:	460c      	mov	r4, r1
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1db      	bne.n	8007ca2 <arm_correlate_f32+0x4de>
 8007cea:	1d0c      	adds	r4, r1, #4
 8007cec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007d2c <arm_correlate_f32+0x568>
 8007cf0:	42bc      	cmp	r4, r7
 8007cf2:	edc5 7a00 	vstr	s15, [r5]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4475      	add	r5, lr
 8007cfa:	d1f3      	bne.n	8007ce4 <arm_correlate_f32+0x520>
 8007cfc:	9b02      	ldr	r3, [sp, #8]
 8007cfe:	4440      	add	r0, r8
 8007d00:	fb0e cc03 	mla	ip, lr, r3, ip
 8007d04:	2e00      	cmp	r6, #0
 8007d06:	d0ac      	beq.n	8007c62 <arm_correlate_f32+0x49e>
 8007d08:	08b5      	lsrs	r5, r6, #2
 8007d0a:	eddf 5a08 	vldr	s11, [pc, #32]	; 8007d2c <arm_correlate_f32+0x568>
 8007d0e:	f47f af54 	bne.w	8007bba <arm_correlate_f32+0x3f6>
 8007d12:	4615      	mov	r5, r2
 8007d14:	4601      	mov	r1, r0
 8007d16:	e77e      	b.n	8007c16 <arm_correlate_f32+0x452>
 8007d18:	4605      	mov	r5, r0
 8007d1a:	e6cf      	b.n	8007abc <arm_correlate_f32+0x2f8>
 8007d1c:	9902      	ldr	r1, [sp, #8]
 8007d1e:	2900      	cmp	r1, #0
 8007d20:	d1b5      	bne.n	8007c8e <arm_correlate_f32+0x4ca>
 8007d22:	e79e      	b.n	8007c62 <arm_correlate_f32+0x49e>
 8007d24:	eddf 7a01 	vldr	s15, [pc, #4]	; 8007d2c <arm_correlate_f32+0x568>
 8007d28:	4605      	mov	r5, r0
 8007d2a:	e5c7      	b.n	80078bc <arm_correlate_f32+0xf8>
 8007d2c:	00000000 	.word	0x00000000

08007d30 <arm_conv_f32>:
 8007d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d34:	b08b      	sub	sp, #44	; 0x2c
 8007d36:	4299      	cmp	r1, r3
 8007d38:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8007d3a:	d205      	bcs.n	8007d48 <arm_conv_f32+0x18>
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	460c      	mov	r4, r1
 8007d40:	4610      	mov	r0, r2
 8007d42:	4619      	mov	r1, r3
 8007d44:	4632      	mov	r2, r6
 8007d46:	4623      	mov	r3, r4
 8007d48:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8007d4c:	3101      	adds	r1, #1
 8007d4e:	1ac9      	subs	r1, r1, r3
 8007d50:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007d54:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8007d58:	9101      	str	r1, [sp, #4]
 8007d5a:	1e59      	subs	r1, r3, #1
 8007d5c:	eb02 070b 	add.w	r7, r2, fp
 8007d60:	f000 8277 	beq.w	8008252 <arm_conv_f32+0x522>
 8007d64:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8008024 <arm_conv_f32+0x2f4>
 8007d68:	f102 0904 	add.w	r9, r2, #4
 8007d6c:	46aa      	mov	sl, r5
 8007d6e:	4680      	mov	r8, r0
 8007d70:	2401      	movs	r4, #1
 8007d72:	f014 0603 	ands.w	r6, r4, #3
 8007d76:	d01b      	beq.n	8007db0 <arm_conv_f32+0x80>
 8007d78:	ed92 7a00 	vldr	s14, [r2]
 8007d7c:	edd8 6a00 	vldr	s13, [r8]
 8007d80:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007d84:	3e01      	subs	r6, #1
 8007d86:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d8a:	d011      	beq.n	8007db0 <arm_conv_f32+0x80>
 8007d8c:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007d90:	edd8 6a01 	vldr	s13, [r8, #4]
 8007d94:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007d98:	2e01      	cmp	r6, #1
 8007d9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007d9e:	d007      	beq.n	8007db0 <arm_conv_f32+0x80>
 8007da0:	ed98 7a02 	vldr	s14, [r8, #8]
 8007da4:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007da8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007dac:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007db0:	3401      	adds	r4, #1
 8007db2:	42a3      	cmp	r3, r4
 8007db4:	ecea 7a01 	vstmia	sl!, {s15}
 8007db8:	464a      	mov	r2, r9
 8007dba:	d03a      	beq.n	8007e32 <arm_conv_f32+0x102>
 8007dbc:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8007dc0:	f000 824c 	beq.w	800825c <arm_conv_f32+0x52c>
 8007dc4:	f100 0210 	add.w	r2, r0, #16
 8007dc8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8007dcc:	eddf 7a95 	vldr	s15, [pc, #596]	; 8008024 <arm_conv_f32+0x2f4>
 8007dd0:	eb02 0c08 	add.w	ip, r2, r8
 8007dd4:	f1a9 0610 	sub.w	r6, r9, #16
 8007dd8:	ed12 7a04 	vldr	s14, [r2, #-16]
 8007ddc:	edd6 3a04 	vldr	s7, [r6, #16]
 8007de0:	ed12 6a03 	vldr	s12, [r2, #-12]
 8007de4:	ed96 4a03 	vldr	s8, [r6, #12]
 8007de8:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007dec:	edd6 4a02 	vldr	s9, [r6, #8]
 8007df0:	ed52 5a01 	vldr	s11, [r2, #-4]
 8007df4:	ed96 5a01 	vldr	s10, [r6, #4]
 8007df8:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007dfc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8007e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e04:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8007e08:	ee76 7a27 	vadd.f32	s15, s12, s15
 8007e0c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8007e10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007e14:	3210      	adds	r2, #16
 8007e16:	4594      	cmp	ip, r2
 8007e18:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e1c:	f1a6 0610 	sub.w	r6, r6, #16
 8007e20:	d1da      	bne.n	8007dd8 <arm_conv_f32+0xa8>
 8007e22:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8007e26:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8007e2a:	4480      	add	r8, r0
 8007e2c:	f109 0904 	add.w	r9, r9, #4
 8007e30:	e79f      	b.n	8007d72 <arm_conv_f32+0x42>
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	445d      	add	r5, fp
 8007e36:	f240 80e9 	bls.w	800800c <arm_conv_f32+0x2dc>
 8007e3a:	9b01      	ldr	r3, [sp, #4]
 8007e3c:	089a      	lsrs	r2, r3, #2
 8007e3e:	9202      	str	r2, [sp, #8]
 8007e40:	f000 8203 	beq.w	800824a <arm_conv_f32+0x51a>
 8007e44:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8007e48:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8007e4c:	0112      	lsls	r2, r2, #4
 8007e4e:	f004 0603 	and.w	r6, r4, #3
 8007e52:	9203      	str	r2, [sp, #12]
 8007e54:	f1a3 0a10 	sub.w	sl, r3, #16
 8007e58:	f1a3 020c 	sub.w	r2, r3, #12
 8007e5c:	3b08      	subs	r3, #8
 8007e5e:	9204      	str	r2, [sp, #16]
 8007e60:	9305      	str	r3, [sp, #20]
 8007e62:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 8007e66:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8007e6a:	9a03      	ldr	r2, [sp, #12]
 8007e6c:	f100 0c1c 	add.w	ip, r0, #28
 8007e70:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8007e74:	464c      	mov	r4, r9
 8007e76:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8007e7a:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 8007e7e:	f1a7 0310 	sub.w	r3, r7, #16
 8007e82:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 8007e86:	eb05 0b02 	add.w	fp, r5, r2
 8007e8a:	461f      	mov	r7, r3
 8007e8c:	3510      	adds	r5, #16
 8007e8e:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8008024 <arm_conv_f32+0x2f4>
 8007e92:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 8007e96:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 8007e9a:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8007e9e:	eeb0 5a46 	vmov.f32	s10, s12
 8007ea2:	eef0 4a46 	vmov.f32	s9, s12
 8007ea6:	eef0 5a46 	vmov.f32	s11, s12
 8007eaa:	463a      	mov	r2, r7
 8007eac:	4663      	mov	r3, ip
 8007eae:	4641      	mov	r1, r8
 8007eb0:	edd2 6a04 	vldr	s13, [r2, #16]
 8007eb4:	ed13 0a04 	vldr	s0, [r3, #-16]
 8007eb8:	ed92 7a03 	vldr	s14, [r2, #12]
 8007ebc:	edd2 7a02 	vldr	s15, [r2, #8]
 8007ec0:	edd2 0a01 	vldr	s1, [r2, #4]
 8007ec4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 8007ec8:	ee62 3a26 	vmul.f32	s7, s4, s13
 8007ecc:	ee61 2a26 	vmul.f32	s5, s2, s13
 8007ed0:	ed13 1a03 	vldr	s2, [r3, #-12]
 8007ed4:	ee66 6a80 	vmul.f32	s13, s13, s0
 8007ed8:	ee21 4a87 	vmul.f32	s8, s3, s14
 8007edc:	ee73 4a24 	vadd.f32	s9, s6, s9
 8007ee0:	ee33 5a85 	vadd.f32	s10, s7, s10
 8007ee4:	ee22 3a07 	vmul.f32	s6, s4, s14
 8007ee8:	ed53 1a02 	vldr	s3, [r3, #-8]
 8007eec:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8007ef0:	ee36 6a86 	vadd.f32	s12, s13, s12
 8007ef4:	ee60 3a07 	vmul.f32	s7, s0, s14
 8007ef8:	ee27 7a01 	vmul.f32	s14, s14, s2
 8007efc:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007f00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8007f04:	ee74 2a22 	vadd.f32	s5, s8, s5
 8007f08:	ee60 4a27 	vmul.f32	s9, s0, s15
 8007f0c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8007f10:	ee73 3a85 	vadd.f32	s7, s7, s10
 8007f14:	ed13 2a01 	vldr	s4, [r3, #-4]
 8007f18:	ee21 5a27 	vmul.f32	s10, s2, s15
 8007f1c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8007f20:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007f24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007f28:	ee34 4a22 	vadd.f32	s8, s8, s5
 8007f2c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8007f30:	ee21 3a20 	vmul.f32	s6, s2, s1
 8007f34:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007f38:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8007f3c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8007f40:	3901      	subs	r1, #1
 8007f42:	f1a2 0210 	sub.w	r2, r2, #16
 8007f46:	ee75 5a84 	vadd.f32	s11, s11, s8
 8007f4a:	ee73 4a24 	vadd.f32	s9, s6, s9
 8007f4e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8007f52:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007f56:	f103 0310 	add.w	r3, r3, #16
 8007f5a:	d1a9      	bne.n	8007eb0 <arm_conv_f32+0x180>
 8007f5c:	eb0a 030c 	add.w	r3, sl, ip
 8007f60:	2e00      	cmp	r6, #0
 8007f62:	d042      	beq.n	8007fea <arm_conv_f32+0x2ba>
 8007f64:	edde 7a00 	vldr	s15, [lr]
 8007f68:	ed93 4a00 	vldr	s8, [r3]
 8007f6c:	ee61 6a27 	vmul.f32	s13, s2, s15
 8007f70:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8007f74:	ee22 7a27 	vmul.f32	s14, s4, s15
 8007f78:	ee64 7a27 	vmul.f32	s15, s8, s15
 8007f7c:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8007f80:	ee74 4aa3 	vadd.f32	s9, s9, s7
 8007f84:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007f88:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007f8c:	eb09 030c 	add.w	r3, r9, ip
 8007f90:	b35c      	cbz	r4, 8007fea <arm_conv_f32+0x2ba>
 8007f92:	ed5e 7a01 	vldr	s15, [lr, #-4]
 8007f96:	edd3 6a00 	vldr	s13, [r3]
 8007f9a:	ee21 7aa7 	vmul.f32	s14, s3, s15
 8007f9e:	ee22 3a27 	vmul.f32	s6, s4, s15
 8007fa2:	ee67 3a84 	vmul.f32	s7, s15, s8
 8007fa6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007faa:	2c01      	cmp	r4, #1
 8007fac:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007fb0:	ee74 4a83 	vadd.f32	s9, s9, s6
 8007fb4:	ee35 5a23 	vadd.f32	s10, s10, s7
 8007fb8:	ee36 6a27 	vadd.f32	s12, s12, s15
 8007fbc:	eb00 030c 	add.w	r3, r0, ip
 8007fc0:	d013      	beq.n	8007fea <arm_conv_f32+0x2ba>
 8007fc2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 8007fc6:	edd3 3a00 	vldr	s7, [r3]
 8007fca:	ee62 7a07 	vmul.f32	s15, s4, s14
 8007fce:	ee27 4a04 	vmul.f32	s8, s14, s8
 8007fd2:	ee67 6a26 	vmul.f32	s13, s14, s13
 8007fd6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8007fda:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8007fde:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007fe2:	ee35 5a26 	vadd.f32	s10, s10, s13
 8007fe6:	ee36 6a07 	vadd.f32	s12, s12, s14
 8007fea:	45ab      	cmp	fp, r5
 8007fec:	ed45 5a04 	vstr	s11, [r5, #-16]
 8007ff0:	ed45 4a03 	vstr	s9, [r5, #-12]
 8007ff4:	ed05 5a02 	vstr	s10, [r5, #-8]
 8007ff8:	ed05 6a01 	vstr	s12, [r5, #-4]
 8007ffc:	f10c 0c10 	add.w	ip, ip, #16
 8008000:	f105 0310 	add.w	r3, r5, #16
 8008004:	f000 809e 	beq.w	8008144 <arm_conv_f32+0x414>
 8008008:	461d      	mov	r5, r3
 800800a:	e740      	b.n	8007e8e <arm_conv_f32+0x15e>
 800800c:	9a01      	ldr	r2, [sp, #4]
 800800e:	46ac      	mov	ip, r5
 8008010:	2a00      	cmp	r2, #0
 8008012:	d037      	beq.n	8008084 <arm_conv_f32+0x354>
 8008014:	9a01      	ldr	r2, [sp, #4]
 8008016:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8008024 <arm_conv_f32+0x2f4>
 800801a:	0096      	lsls	r6, r2, #2
 800801c:	eb05 0c06 	add.w	ip, r5, r6
 8008020:	4604      	mov	r4, r0
 8008022:	e021      	b.n	8008068 <arm_conv_f32+0x338>
 8008024:	00000000 	.word	0x00000000
 8008028:	edd7 7a00 	vldr	s15, [r7]
 800802c:	ecb2 7a01 	vldmia	r2!, {s14}
 8008030:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008034:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008038:	b189      	cbz	r1, 800805e <arm_conv_f32+0x32e>
 800803a:	ed17 7a01 	vldr	s14, [r7, #-4]
 800803e:	edd4 6a01 	vldr	s13, [r4, #4]
 8008042:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008046:	2b02      	cmp	r3, #2
 8008048:	ee77 7a87 	vadd.f32	s15, s15, s14
 800804c:	d007      	beq.n	800805e <arm_conv_f32+0x32e>
 800804e:	ed94 7a02 	vldr	s14, [r4, #8]
 8008052:	ed57 6a02 	vldr	s13, [r7, #-8]
 8008056:	ee27 7a26 	vmul.f32	s14, s14, s13
 800805a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800805e:	ece5 7a01 	vstmia	r5!, {s15}
 8008062:	4565      	cmp	r5, ip
 8008064:	4614      	mov	r4, r2
 8008066:	d00a      	beq.n	800807e <arm_conv_f32+0x34e>
 8008068:	4622      	mov	r2, r4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d1dc      	bne.n	8008028 <arm_conv_f32+0x2f8>
 800806e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8008024 <arm_conv_f32+0x2f4>
 8008072:	ece5 7a01 	vstmia	r5!, {s15}
 8008076:	1d22      	adds	r2, r4, #4
 8008078:	4565      	cmp	r5, ip
 800807a:	4614      	mov	r4, r2
 800807c:	d1f4      	bne.n	8008068 <arm_conv_f32+0x338>
 800807e:	4430      	add	r0, r6
 8008080:	2900      	cmp	r1, #0
 8008082:	d059      	beq.n	8008138 <arm_conv_f32+0x408>
 8008084:	088d      	lsrs	r5, r1, #2
 8008086:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8008024 <arm_conv_f32+0x2f4>
 800808a:	d058      	beq.n	800813e <arm_conv_f32+0x40e>
 800808c:	f100 0210 	add.w	r2, r0, #16
 8008090:	f1a7 0310 	sub.w	r3, r7, #16
 8008094:	462c      	mov	r4, r5
 8008096:	ed52 6a04 	vldr	s13, [r2, #-16]
 800809a:	edd3 3a04 	vldr	s7, [r3, #16]
 800809e:	ed12 7a03 	vldr	s14, [r2, #-12]
 80080a2:	ed93 4a03 	vldr	s8, [r3, #12]
 80080a6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80080aa:	edd3 4a02 	vldr	s9, [r3, #8]
 80080ae:	ed12 6a01 	vldr	s12, [r2, #-4]
 80080b2:	ed93 5a01 	vldr	s10, [r3, #4]
 80080b6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80080ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80080be:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80080c2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80080c6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80080ca:	ee66 6a05 	vmul.f32	s13, s12, s10
 80080ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080d2:	3c01      	subs	r4, #1
 80080d4:	f102 0210 	add.w	r2, r2, #16
 80080d8:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80080dc:	f1a3 0310 	sub.w	r3, r3, #16
 80080e0:	d1d9      	bne.n	8008096 <arm_conv_f32+0x366>
 80080e2:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 80080e6:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 80080ea:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80080ee:	f011 0203 	ands.w	r2, r1, #3
 80080f2:	d01b      	beq.n	800812c <arm_conv_f32+0x3fc>
 80080f4:	edd3 7a00 	vldr	s15, [r3]
 80080f8:	ed95 7a00 	vldr	s14, [r5]
 80080fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008100:	3a01      	subs	r2, #1
 8008102:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8008106:	d011      	beq.n	800812c <arm_conv_f32+0x3fc>
 8008108:	ed53 7a01 	vldr	s15, [r3, #-4]
 800810c:	ed95 7a01 	vldr	s14, [r5, #4]
 8008110:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008114:	2a01      	cmp	r2, #1
 8008116:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800811a:	d007      	beq.n	800812c <arm_conv_f32+0x3fc>
 800811c:	edd5 7a02 	vldr	s15, [r5, #8]
 8008120:	ed13 7a02 	vldr	s14, [r3, #-8]
 8008124:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008128:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800812c:	3901      	subs	r1, #1
 800812e:	ecec 5a01 	vstmia	ip!, {s11}
 8008132:	f100 0004 	add.w	r0, r0, #4
 8008136:	d1a5      	bne.n	8008084 <arm_conv_f32+0x354>
 8008138:	b00b      	add	sp, #44	; 0x2c
 800813a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800813e:	463b      	mov	r3, r7
 8008140:	4605      	mov	r5, r0
 8008142:	e7d4      	b.n	80080ee <arm_conv_f32+0x3be>
 8008144:	9b02      	ldr	r3, [sp, #8]
 8008146:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	9302      	str	r3, [sp, #8]
 800814e:	9b03      	ldr	r3, [sp, #12]
 8008150:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8008154:	4403      	add	r3, r0
 8008156:	465d      	mov	r5, fp
 8008158:	469e      	mov	lr, r3
 800815a:	9b01      	ldr	r3, [sp, #4]
 800815c:	f013 0c03 	ands.w	ip, r3, #3
 8008160:	d075      	beq.n	800824e <arm_conv_f32+0x51e>
 8008162:	9b02      	ldr	r3, [sp, #8]
 8008164:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8008168:	f004 0403 	and.w	r4, r4, #3
 800816c:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
 8008170:	f103 0801 	add.w	r8, r3, #1
 8008174:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8008178:	e9cd 7002 	strd	r7, r0, [sp, #8]
 800817c:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 8008180:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8008184:	f1a7 0210 	sub.w	r2, r7, #16
 8008188:	4618      	mov	r0, r3
 800818a:	465b      	mov	r3, fp
 800818c:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 8008190:	468b      	mov	fp, r1
 8008192:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 8008196:	4621      	mov	r1, r4
 8008198:	4617      	mov	r7, r2
 800819a:	461c      	mov	r4, r3
 800819c:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8008024 <arm_conv_f32+0x2f4>
 80081a0:	f10e 0210 	add.w	r2, lr, #16
 80081a4:	463b      	mov	r3, r7
 80081a6:	4656      	mov	r6, sl
 80081a8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80081ac:	edd3 3a04 	vldr	s7, [r3, #16]
 80081b0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80081b4:	ed93 4a03 	vldr	s8, [r3, #12]
 80081b8:	ed52 6a02 	vldr	s13, [r2, #-8]
 80081bc:	edd3 4a02 	vldr	s9, [r3, #8]
 80081c0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80081c4:	ed93 5a01 	vldr	s10, [r3, #4]
 80081c8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80081cc:	ee26 6a04 	vmul.f32	s12, s12, s8
 80081d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081d4:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80081d8:	ee76 7a27 	vadd.f32	s15, s12, s15
 80081dc:	ee65 6a85 	vmul.f32	s13, s11, s10
 80081e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081e4:	3e01      	subs	r6, #1
 80081e6:	f102 0210 	add.w	r2, r2, #16
 80081ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081ee:	f1a3 0310 	sub.w	r3, r3, #16
 80081f2:	d1d9      	bne.n	80081a8 <arm_conv_f32+0x478>
 80081f4:	4486      	add	lr, r0
 80081f6:	b1d1      	cbz	r1, 800822e <arm_conv_f32+0x4fe>
 80081f8:	ed99 7a00 	vldr	s14, [r9]
 80081fc:	edde 6a00 	vldr	s13, [lr]
 8008200:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008204:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008208:	b18c      	cbz	r4, 800822e <arm_conv_f32+0x4fe>
 800820a:	ed19 7a01 	vldr	s14, [r9, #-4]
 800820e:	edde 6a01 	vldr	s13, [lr, #4]
 8008212:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008216:	2c01      	cmp	r4, #1
 8008218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800821c:	d007      	beq.n	800822e <arm_conv_f32+0x4fe>
 800821e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8008222:	ed59 6a02 	vldr	s13, [r9, #-8]
 8008226:	ee27 7a26 	vmul.f32	s14, s14, s13
 800822a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800822e:	ece5 7a01 	vstmia	r5!, {s15}
 8008232:	4565      	cmp	r5, ip
 8008234:	46c6      	mov	lr, r8
 8008236:	f108 0804 	add.w	r8, r8, #4
 800823a:	d1af      	bne.n	800819c <arm_conv_f32+0x46c>
 800823c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8008240:	4659      	mov	r1, fp
 8008242:	9b01      	ldr	r3, [sp, #4]
 8008244:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008248:	e71c      	b.n	8008084 <arm_conv_f32+0x354>
 800824a:	4686      	mov	lr, r0
 800824c:	e785      	b.n	800815a <arm_conv_f32+0x42a>
 800824e:	46ac      	mov	ip, r5
 8008250:	e7f7      	b.n	8008242 <arm_conv_f32+0x512>
 8008252:	9a01      	ldr	r2, [sp, #4]
 8008254:	2a00      	cmp	r2, #0
 8008256:	f47f aedd 	bne.w	8008014 <arm_conv_f32+0x2e4>
 800825a:	e76d      	b.n	8008138 <arm_conv_f32+0x408>
 800825c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8008024 <arm_conv_f32+0x2f4>
 8008260:	4680      	mov	r8, r0
 8008262:	e5e3      	b.n	8007e2c <arm_conv_f32+0xfc>

08008264 <arm_sub_f32>:
 8008264:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8008268:	b4f0      	push	{r4, r5, r6, r7}
 800826a:	d033      	beq.n	80082d4 <arm_sub_f32+0x70>
 800826c:	f100 0610 	add.w	r6, r0, #16
 8008270:	f101 0510 	add.w	r5, r1, #16
 8008274:	f102 0410 	add.w	r4, r2, #16
 8008278:	4667      	mov	r7, ip
 800827a:	ed15 7a04 	vldr	s14, [r5, #-16]
 800827e:	ed56 7a04 	vldr	s15, [r6, #-16]
 8008282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008286:	3f01      	subs	r7, #1
 8008288:	ed44 7a04 	vstr	s15, [r4, #-16]
 800828c:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008290:	ed56 7a03 	vldr	s15, [r6, #-12]
 8008294:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008298:	f106 0610 	add.w	r6, r6, #16
 800829c:	ed44 7a03 	vstr	s15, [r4, #-12]
 80082a0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80082a4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80082a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082ac:	f105 0510 	add.w	r5, r5, #16
 80082b0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80082b4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80082b8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80082bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082c0:	f104 0410 	add.w	r4, r4, #16
 80082c4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80082c8:	d1d7      	bne.n	800827a <arm_sub_f32+0x16>
 80082ca:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80082ce:	4420      	add	r0, r4
 80082d0:	4421      	add	r1, r4
 80082d2:	4422      	add	r2, r4
 80082d4:	f013 0303 	ands.w	r3, r3, #3
 80082d8:	d01b      	beq.n	8008312 <arm_sub_f32+0xae>
 80082da:	edd0 7a00 	vldr	s15, [r0]
 80082de:	ed91 7a00 	vldr	s14, [r1]
 80082e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082e6:	3b01      	subs	r3, #1
 80082e8:	edc2 7a00 	vstr	s15, [r2]
 80082ec:	d011      	beq.n	8008312 <arm_sub_f32+0xae>
 80082ee:	edd0 7a01 	vldr	s15, [r0, #4]
 80082f2:	ed91 7a01 	vldr	s14, [r1, #4]
 80082f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	edc2 7a01 	vstr	s15, [r2, #4]
 8008300:	d007      	beq.n	8008312 <arm_sub_f32+0xae>
 8008302:	edd0 7a02 	vldr	s15, [r0, #8]
 8008306:	ed91 7a02 	vldr	s14, [r1, #8]
 800830a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800830e:	edc2 7a02 	vstr	s15, [r2, #8]
 8008312:	bcf0      	pop	{r4, r5, r6, r7}
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <arm_mult_f32>:
 8008318:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 800831c:	b4f0      	push	{r4, r5, r6, r7}
 800831e:	d033      	beq.n	8008388 <arm_mult_f32+0x70>
 8008320:	f100 0610 	add.w	r6, r0, #16
 8008324:	f101 0510 	add.w	r5, r1, #16
 8008328:	f102 0410 	add.w	r4, r2, #16
 800832c:	4667      	mov	r7, ip
 800832e:	ed15 7a04 	vldr	s14, [r5, #-16]
 8008332:	ed56 7a04 	vldr	s15, [r6, #-16]
 8008336:	ee67 7a87 	vmul.f32	s15, s15, s14
 800833a:	3f01      	subs	r7, #1
 800833c:	ed44 7a04 	vstr	s15, [r4, #-16]
 8008340:	ed15 7a03 	vldr	s14, [r5, #-12]
 8008344:	ed56 7a03 	vldr	s15, [r6, #-12]
 8008348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800834c:	f106 0610 	add.w	r6, r6, #16
 8008350:	ed44 7a03 	vstr	s15, [r4, #-12]
 8008354:	ed15 7a02 	vldr	s14, [r5, #-8]
 8008358:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 800835c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008360:	f105 0510 	add.w	r5, r5, #16
 8008364:	ed44 7a02 	vstr	s15, [r4, #-8]
 8008368:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 800836c:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8008370:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008374:	f104 0410 	add.w	r4, r4, #16
 8008378:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 800837c:	d1d7      	bne.n	800832e <arm_mult_f32+0x16>
 800837e:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8008382:	4420      	add	r0, r4
 8008384:	4421      	add	r1, r4
 8008386:	4422      	add	r2, r4
 8008388:	f013 0303 	ands.w	r3, r3, #3
 800838c:	d01b      	beq.n	80083c6 <arm_mult_f32+0xae>
 800838e:	edd1 7a00 	vldr	s15, [r1]
 8008392:	ed90 7a00 	vldr	s14, [r0]
 8008396:	ee67 7a87 	vmul.f32	s15, s15, s14
 800839a:	3b01      	subs	r3, #1
 800839c:	edc2 7a00 	vstr	s15, [r2]
 80083a0:	d011      	beq.n	80083c6 <arm_mult_f32+0xae>
 80083a2:	edd0 7a01 	vldr	s15, [r0, #4]
 80083a6:	ed91 7a01 	vldr	s14, [r1, #4]
 80083aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	edc2 7a01 	vstr	s15, [r2, #4]
 80083b4:	d007      	beq.n	80083c6 <arm_mult_f32+0xae>
 80083b6:	edd0 7a02 	vldr	s15, [r0, #8]
 80083ba:	ed91 7a02 	vldr	s14, [r1, #8]
 80083be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083c2:	edc2 7a02 	vstr	s15, [r2, #8]
 80083c6:	bcf0      	pop	{r4, r5, r6, r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop

080083cc <arm_add_f32>:
 80083cc:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80083d0:	b4f0      	push	{r4, r5, r6, r7}
 80083d2:	d033      	beq.n	800843c <arm_add_f32+0x70>
 80083d4:	f100 0610 	add.w	r6, r0, #16
 80083d8:	f101 0510 	add.w	r5, r1, #16
 80083dc:	f102 0410 	add.w	r4, r2, #16
 80083e0:	4667      	mov	r7, ip
 80083e2:	ed15 7a04 	vldr	s14, [r5, #-16]
 80083e6:	ed56 7a04 	vldr	s15, [r6, #-16]
 80083ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083ee:	3f01      	subs	r7, #1
 80083f0:	ed44 7a04 	vstr	s15, [r4, #-16]
 80083f4:	ed15 7a03 	vldr	s14, [r5, #-12]
 80083f8:	ed56 7a03 	vldr	s15, [r6, #-12]
 80083fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008400:	f106 0610 	add.w	r6, r6, #16
 8008404:	ed44 7a03 	vstr	s15, [r4, #-12]
 8008408:	ed15 7a02 	vldr	s14, [r5, #-8]
 800840c:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8008410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008414:	f105 0510 	add.w	r5, r5, #16
 8008418:	ed44 7a02 	vstr	s15, [r4, #-8]
 800841c:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8008420:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8008424:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008428:	f104 0410 	add.w	r4, r4, #16
 800842c:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8008430:	d1d7      	bne.n	80083e2 <arm_add_f32+0x16>
 8008432:	ea4f 140c 	mov.w	r4, ip, lsl #4
 8008436:	4420      	add	r0, r4
 8008438:	4421      	add	r1, r4
 800843a:	4422      	add	r2, r4
 800843c:	f013 0303 	ands.w	r3, r3, #3
 8008440:	d01b      	beq.n	800847a <arm_add_f32+0xae>
 8008442:	edd1 7a00 	vldr	s15, [r1]
 8008446:	ed90 7a00 	vldr	s14, [r0]
 800844a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800844e:	3b01      	subs	r3, #1
 8008450:	edc2 7a00 	vstr	s15, [r2]
 8008454:	d011      	beq.n	800847a <arm_add_f32+0xae>
 8008456:	edd0 7a01 	vldr	s15, [r0, #4]
 800845a:	ed91 7a01 	vldr	s14, [r1, #4]
 800845e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008462:	2b01      	cmp	r3, #1
 8008464:	edc2 7a01 	vstr	s15, [r2, #4]
 8008468:	d007      	beq.n	800847a <arm_add_f32+0xae>
 800846a:	edd0 7a02 	vldr	s15, [r0, #8]
 800846e:	ed91 7a02 	vldr	s14, [r1, #8]
 8008472:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008476:	edc2 7a02 	vstr	s15, [r2, #8]
 800847a:	bcf0      	pop	{r4, r5, r6, r7}
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop

08008480 <__cvt>:
 8008480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	ec55 4b10 	vmov	r4, r5, d0
 8008488:	2d00      	cmp	r5, #0
 800848a:	460e      	mov	r6, r1
 800848c:	4619      	mov	r1, r3
 800848e:	462b      	mov	r3, r5
 8008490:	bfbb      	ittet	lt
 8008492:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008496:	461d      	movlt	r5, r3
 8008498:	2300      	movge	r3, #0
 800849a:	232d      	movlt	r3, #45	; 0x2d
 800849c:	700b      	strb	r3, [r1, #0]
 800849e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084a4:	4691      	mov	r9, r2
 80084a6:	f023 0820 	bic.w	r8, r3, #32
 80084aa:	bfbc      	itt	lt
 80084ac:	4622      	movlt	r2, r4
 80084ae:	4614      	movlt	r4, r2
 80084b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084b4:	d005      	beq.n	80084c2 <__cvt+0x42>
 80084b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80084ba:	d100      	bne.n	80084be <__cvt+0x3e>
 80084bc:	3601      	adds	r6, #1
 80084be:	2102      	movs	r1, #2
 80084c0:	e000      	b.n	80084c4 <__cvt+0x44>
 80084c2:	2103      	movs	r1, #3
 80084c4:	ab03      	add	r3, sp, #12
 80084c6:	9301      	str	r3, [sp, #4]
 80084c8:	ab02      	add	r3, sp, #8
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	ec45 4b10 	vmov	d0, r4, r5
 80084d0:	4653      	mov	r3, sl
 80084d2:	4632      	mov	r2, r6
 80084d4:	f000 fde0 	bl	8009098 <_dtoa_r>
 80084d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80084dc:	4607      	mov	r7, r0
 80084de:	d102      	bne.n	80084e6 <__cvt+0x66>
 80084e0:	f019 0f01 	tst.w	r9, #1
 80084e4:	d022      	beq.n	800852c <__cvt+0xac>
 80084e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80084ea:	eb07 0906 	add.w	r9, r7, r6
 80084ee:	d110      	bne.n	8008512 <__cvt+0x92>
 80084f0:	783b      	ldrb	r3, [r7, #0]
 80084f2:	2b30      	cmp	r3, #48	; 0x30
 80084f4:	d10a      	bne.n	800850c <__cvt+0x8c>
 80084f6:	2200      	movs	r2, #0
 80084f8:	2300      	movs	r3, #0
 80084fa:	4620      	mov	r0, r4
 80084fc:	4629      	mov	r1, r5
 80084fe:	f7f8 fafb 	bl	8000af8 <__aeabi_dcmpeq>
 8008502:	b918      	cbnz	r0, 800850c <__cvt+0x8c>
 8008504:	f1c6 0601 	rsb	r6, r6, #1
 8008508:	f8ca 6000 	str.w	r6, [sl]
 800850c:	f8da 3000 	ldr.w	r3, [sl]
 8008510:	4499      	add	r9, r3
 8008512:	2200      	movs	r2, #0
 8008514:	2300      	movs	r3, #0
 8008516:	4620      	mov	r0, r4
 8008518:	4629      	mov	r1, r5
 800851a:	f7f8 faed 	bl	8000af8 <__aeabi_dcmpeq>
 800851e:	b108      	cbz	r0, 8008524 <__cvt+0xa4>
 8008520:	f8cd 900c 	str.w	r9, [sp, #12]
 8008524:	2230      	movs	r2, #48	; 0x30
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	454b      	cmp	r3, r9
 800852a:	d307      	bcc.n	800853c <__cvt+0xbc>
 800852c:	9b03      	ldr	r3, [sp, #12]
 800852e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008530:	1bdb      	subs	r3, r3, r7
 8008532:	4638      	mov	r0, r7
 8008534:	6013      	str	r3, [r2, #0]
 8008536:	b004      	add	sp, #16
 8008538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800853c:	1c59      	adds	r1, r3, #1
 800853e:	9103      	str	r1, [sp, #12]
 8008540:	701a      	strb	r2, [r3, #0]
 8008542:	e7f0      	b.n	8008526 <__cvt+0xa6>

08008544 <__exponent>:
 8008544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008546:	4603      	mov	r3, r0
 8008548:	2900      	cmp	r1, #0
 800854a:	bfb8      	it	lt
 800854c:	4249      	neglt	r1, r1
 800854e:	f803 2b02 	strb.w	r2, [r3], #2
 8008552:	bfb4      	ite	lt
 8008554:	222d      	movlt	r2, #45	; 0x2d
 8008556:	222b      	movge	r2, #43	; 0x2b
 8008558:	2909      	cmp	r1, #9
 800855a:	7042      	strb	r2, [r0, #1]
 800855c:	dd2a      	ble.n	80085b4 <__exponent+0x70>
 800855e:	f10d 0207 	add.w	r2, sp, #7
 8008562:	4617      	mov	r7, r2
 8008564:	260a      	movs	r6, #10
 8008566:	4694      	mov	ip, r2
 8008568:	fb91 f5f6 	sdiv	r5, r1, r6
 800856c:	fb06 1415 	mls	r4, r6, r5, r1
 8008570:	3430      	adds	r4, #48	; 0x30
 8008572:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008576:	460c      	mov	r4, r1
 8008578:	2c63      	cmp	r4, #99	; 0x63
 800857a:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800857e:	4629      	mov	r1, r5
 8008580:	dcf1      	bgt.n	8008566 <__exponent+0x22>
 8008582:	3130      	adds	r1, #48	; 0x30
 8008584:	f1ac 0402 	sub.w	r4, ip, #2
 8008588:	f802 1c01 	strb.w	r1, [r2, #-1]
 800858c:	1c41      	adds	r1, r0, #1
 800858e:	4622      	mov	r2, r4
 8008590:	42ba      	cmp	r2, r7
 8008592:	d30a      	bcc.n	80085aa <__exponent+0x66>
 8008594:	f10d 0209 	add.w	r2, sp, #9
 8008598:	eba2 020c 	sub.w	r2, r2, ip
 800859c:	42bc      	cmp	r4, r7
 800859e:	bf88      	it	hi
 80085a0:	2200      	movhi	r2, #0
 80085a2:	4413      	add	r3, r2
 80085a4:	1a18      	subs	r0, r3, r0
 80085a6:	b003      	add	sp, #12
 80085a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085aa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80085ae:	f801 5f01 	strb.w	r5, [r1, #1]!
 80085b2:	e7ed      	b.n	8008590 <__exponent+0x4c>
 80085b4:	2330      	movs	r3, #48	; 0x30
 80085b6:	3130      	adds	r1, #48	; 0x30
 80085b8:	7083      	strb	r3, [r0, #2]
 80085ba:	70c1      	strb	r1, [r0, #3]
 80085bc:	1d03      	adds	r3, r0, #4
 80085be:	e7f1      	b.n	80085a4 <__exponent+0x60>

080085c0 <_printf_float>:
 80085c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c4:	ed2d 8b02 	vpush	{d8}
 80085c8:	b08d      	sub	sp, #52	; 0x34
 80085ca:	460c      	mov	r4, r1
 80085cc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80085d0:	4616      	mov	r6, r2
 80085d2:	461f      	mov	r7, r3
 80085d4:	4605      	mov	r5, r0
 80085d6:	f000 fc95 	bl	8008f04 <_localeconv_r>
 80085da:	f8d0 a000 	ldr.w	sl, [r0]
 80085de:	4650      	mov	r0, sl
 80085e0:	f7f7 fe5e 	bl	80002a0 <strlen>
 80085e4:	2300      	movs	r3, #0
 80085e6:	930a      	str	r3, [sp, #40]	; 0x28
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	9305      	str	r3, [sp, #20]
 80085ec:	f8d8 3000 	ldr.w	r3, [r8]
 80085f0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80085f4:	3307      	adds	r3, #7
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	f103 0208 	add.w	r2, r3, #8
 80085fe:	f8c8 2000 	str.w	r2, [r8]
 8008602:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008606:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800860a:	9307      	str	r3, [sp, #28]
 800860c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008610:	ee08 0a10 	vmov	s16, r0
 8008614:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008618:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800861c:	4b9e      	ldr	r3, [pc, #632]	; (8008898 <_printf_float+0x2d8>)
 800861e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008622:	f7f8 fa9b 	bl	8000b5c <__aeabi_dcmpun>
 8008626:	bb88      	cbnz	r0, 800868c <_printf_float+0xcc>
 8008628:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800862c:	4b9a      	ldr	r3, [pc, #616]	; (8008898 <_printf_float+0x2d8>)
 800862e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008632:	f7f8 fa75 	bl	8000b20 <__aeabi_dcmple>
 8008636:	bb48      	cbnz	r0, 800868c <_printf_float+0xcc>
 8008638:	2200      	movs	r2, #0
 800863a:	2300      	movs	r3, #0
 800863c:	4640      	mov	r0, r8
 800863e:	4649      	mov	r1, r9
 8008640:	f7f8 fa64 	bl	8000b0c <__aeabi_dcmplt>
 8008644:	b110      	cbz	r0, 800864c <_printf_float+0x8c>
 8008646:	232d      	movs	r3, #45	; 0x2d
 8008648:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800864c:	4a93      	ldr	r2, [pc, #588]	; (800889c <_printf_float+0x2dc>)
 800864e:	4b94      	ldr	r3, [pc, #592]	; (80088a0 <_printf_float+0x2e0>)
 8008650:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008654:	bf94      	ite	ls
 8008656:	4690      	movls	r8, r2
 8008658:	4698      	movhi	r8, r3
 800865a:	2303      	movs	r3, #3
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	9b05      	ldr	r3, [sp, #20]
 8008660:	f023 0304 	bic.w	r3, r3, #4
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	f04f 0900 	mov.w	r9, #0
 800866a:	9700      	str	r7, [sp, #0]
 800866c:	4633      	mov	r3, r6
 800866e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008670:	4621      	mov	r1, r4
 8008672:	4628      	mov	r0, r5
 8008674:	f000 f9da 	bl	8008a2c <_printf_common>
 8008678:	3001      	adds	r0, #1
 800867a:	f040 8090 	bne.w	800879e <_printf_float+0x1de>
 800867e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008682:	b00d      	add	sp, #52	; 0x34
 8008684:	ecbd 8b02 	vpop	{d8}
 8008688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868c:	4642      	mov	r2, r8
 800868e:	464b      	mov	r3, r9
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f8 fa62 	bl	8000b5c <__aeabi_dcmpun>
 8008698:	b140      	cbz	r0, 80086ac <_printf_float+0xec>
 800869a:	464b      	mov	r3, r9
 800869c:	2b00      	cmp	r3, #0
 800869e:	bfbc      	itt	lt
 80086a0:	232d      	movlt	r3, #45	; 0x2d
 80086a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80086a6:	4a7f      	ldr	r2, [pc, #508]	; (80088a4 <_printf_float+0x2e4>)
 80086a8:	4b7f      	ldr	r3, [pc, #508]	; (80088a8 <_printf_float+0x2e8>)
 80086aa:	e7d1      	b.n	8008650 <_printf_float+0x90>
 80086ac:	6863      	ldr	r3, [r4, #4]
 80086ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80086b2:	9206      	str	r2, [sp, #24]
 80086b4:	1c5a      	adds	r2, r3, #1
 80086b6:	d13f      	bne.n	8008738 <_printf_float+0x178>
 80086b8:	2306      	movs	r3, #6
 80086ba:	6063      	str	r3, [r4, #4]
 80086bc:	9b05      	ldr	r3, [sp, #20]
 80086be:	6861      	ldr	r1, [r4, #4]
 80086c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80086c4:	2300      	movs	r3, #0
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	ab0a      	add	r3, sp, #40	; 0x28
 80086ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80086ce:	ab09      	add	r3, sp, #36	; 0x24
 80086d0:	ec49 8b10 	vmov	d0, r8, r9
 80086d4:	9300      	str	r3, [sp, #0]
 80086d6:	6022      	str	r2, [r4, #0]
 80086d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80086dc:	4628      	mov	r0, r5
 80086de:	f7ff fecf 	bl	8008480 <__cvt>
 80086e2:	9b06      	ldr	r3, [sp, #24]
 80086e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086e6:	2b47      	cmp	r3, #71	; 0x47
 80086e8:	4680      	mov	r8, r0
 80086ea:	d108      	bne.n	80086fe <_printf_float+0x13e>
 80086ec:	1cc8      	adds	r0, r1, #3
 80086ee:	db02      	blt.n	80086f6 <_printf_float+0x136>
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	4299      	cmp	r1, r3
 80086f4:	dd41      	ble.n	800877a <_printf_float+0x1ba>
 80086f6:	f1ab 0302 	sub.w	r3, fp, #2
 80086fa:	fa5f fb83 	uxtb.w	fp, r3
 80086fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008702:	d820      	bhi.n	8008746 <_printf_float+0x186>
 8008704:	3901      	subs	r1, #1
 8008706:	465a      	mov	r2, fp
 8008708:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800870c:	9109      	str	r1, [sp, #36]	; 0x24
 800870e:	f7ff ff19 	bl	8008544 <__exponent>
 8008712:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008714:	1813      	adds	r3, r2, r0
 8008716:	2a01      	cmp	r2, #1
 8008718:	4681      	mov	r9, r0
 800871a:	6123      	str	r3, [r4, #16]
 800871c:	dc02      	bgt.n	8008724 <_printf_float+0x164>
 800871e:	6822      	ldr	r2, [r4, #0]
 8008720:	07d2      	lsls	r2, r2, #31
 8008722:	d501      	bpl.n	8008728 <_printf_float+0x168>
 8008724:	3301      	adds	r3, #1
 8008726:	6123      	str	r3, [r4, #16]
 8008728:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800872c:	2b00      	cmp	r3, #0
 800872e:	d09c      	beq.n	800866a <_printf_float+0xaa>
 8008730:	232d      	movs	r3, #45	; 0x2d
 8008732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008736:	e798      	b.n	800866a <_printf_float+0xaa>
 8008738:	9a06      	ldr	r2, [sp, #24]
 800873a:	2a47      	cmp	r2, #71	; 0x47
 800873c:	d1be      	bne.n	80086bc <_printf_float+0xfc>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1bc      	bne.n	80086bc <_printf_float+0xfc>
 8008742:	2301      	movs	r3, #1
 8008744:	e7b9      	b.n	80086ba <_printf_float+0xfa>
 8008746:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800874a:	d118      	bne.n	800877e <_printf_float+0x1be>
 800874c:	2900      	cmp	r1, #0
 800874e:	6863      	ldr	r3, [r4, #4]
 8008750:	dd0b      	ble.n	800876a <_printf_float+0x1aa>
 8008752:	6121      	str	r1, [r4, #16]
 8008754:	b913      	cbnz	r3, 800875c <_printf_float+0x19c>
 8008756:	6822      	ldr	r2, [r4, #0]
 8008758:	07d0      	lsls	r0, r2, #31
 800875a:	d502      	bpl.n	8008762 <_printf_float+0x1a2>
 800875c:	3301      	adds	r3, #1
 800875e:	440b      	add	r3, r1
 8008760:	6123      	str	r3, [r4, #16]
 8008762:	65a1      	str	r1, [r4, #88]	; 0x58
 8008764:	f04f 0900 	mov.w	r9, #0
 8008768:	e7de      	b.n	8008728 <_printf_float+0x168>
 800876a:	b913      	cbnz	r3, 8008772 <_printf_float+0x1b2>
 800876c:	6822      	ldr	r2, [r4, #0]
 800876e:	07d2      	lsls	r2, r2, #31
 8008770:	d501      	bpl.n	8008776 <_printf_float+0x1b6>
 8008772:	3302      	adds	r3, #2
 8008774:	e7f4      	b.n	8008760 <_printf_float+0x1a0>
 8008776:	2301      	movs	r3, #1
 8008778:	e7f2      	b.n	8008760 <_printf_float+0x1a0>
 800877a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800877e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008780:	4299      	cmp	r1, r3
 8008782:	db05      	blt.n	8008790 <_printf_float+0x1d0>
 8008784:	6823      	ldr	r3, [r4, #0]
 8008786:	6121      	str	r1, [r4, #16]
 8008788:	07d8      	lsls	r0, r3, #31
 800878a:	d5ea      	bpl.n	8008762 <_printf_float+0x1a2>
 800878c:	1c4b      	adds	r3, r1, #1
 800878e:	e7e7      	b.n	8008760 <_printf_float+0x1a0>
 8008790:	2900      	cmp	r1, #0
 8008792:	bfd4      	ite	le
 8008794:	f1c1 0202 	rsble	r2, r1, #2
 8008798:	2201      	movgt	r2, #1
 800879a:	4413      	add	r3, r2
 800879c:	e7e0      	b.n	8008760 <_printf_float+0x1a0>
 800879e:	6823      	ldr	r3, [r4, #0]
 80087a0:	055a      	lsls	r2, r3, #21
 80087a2:	d407      	bmi.n	80087b4 <_printf_float+0x1f4>
 80087a4:	6923      	ldr	r3, [r4, #16]
 80087a6:	4642      	mov	r2, r8
 80087a8:	4631      	mov	r1, r6
 80087aa:	4628      	mov	r0, r5
 80087ac:	47b8      	blx	r7
 80087ae:	3001      	adds	r0, #1
 80087b0:	d12c      	bne.n	800880c <_printf_float+0x24c>
 80087b2:	e764      	b.n	800867e <_printf_float+0xbe>
 80087b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80087b8:	f240 80e0 	bls.w	800897c <_printf_float+0x3bc>
 80087bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087c0:	2200      	movs	r2, #0
 80087c2:	2300      	movs	r3, #0
 80087c4:	f7f8 f998 	bl	8000af8 <__aeabi_dcmpeq>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d034      	beq.n	8008836 <_printf_float+0x276>
 80087cc:	4a37      	ldr	r2, [pc, #220]	; (80088ac <_printf_float+0x2ec>)
 80087ce:	2301      	movs	r3, #1
 80087d0:	4631      	mov	r1, r6
 80087d2:	4628      	mov	r0, r5
 80087d4:	47b8      	blx	r7
 80087d6:	3001      	adds	r0, #1
 80087d8:	f43f af51 	beq.w	800867e <_printf_float+0xbe>
 80087dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087e0:	429a      	cmp	r2, r3
 80087e2:	db02      	blt.n	80087ea <_printf_float+0x22a>
 80087e4:	6823      	ldr	r3, [r4, #0]
 80087e6:	07d8      	lsls	r0, r3, #31
 80087e8:	d510      	bpl.n	800880c <_printf_float+0x24c>
 80087ea:	ee18 3a10 	vmov	r3, s16
 80087ee:	4652      	mov	r2, sl
 80087f0:	4631      	mov	r1, r6
 80087f2:	4628      	mov	r0, r5
 80087f4:	47b8      	blx	r7
 80087f6:	3001      	adds	r0, #1
 80087f8:	f43f af41 	beq.w	800867e <_printf_float+0xbe>
 80087fc:	f04f 0800 	mov.w	r8, #0
 8008800:	f104 091a 	add.w	r9, r4, #26
 8008804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008806:	3b01      	subs	r3, #1
 8008808:	4543      	cmp	r3, r8
 800880a:	dc09      	bgt.n	8008820 <_printf_float+0x260>
 800880c:	6823      	ldr	r3, [r4, #0]
 800880e:	079b      	lsls	r3, r3, #30
 8008810:	f100 8107 	bmi.w	8008a22 <_printf_float+0x462>
 8008814:	68e0      	ldr	r0, [r4, #12]
 8008816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008818:	4298      	cmp	r0, r3
 800881a:	bfb8      	it	lt
 800881c:	4618      	movlt	r0, r3
 800881e:	e730      	b.n	8008682 <_printf_float+0xc2>
 8008820:	2301      	movs	r3, #1
 8008822:	464a      	mov	r2, r9
 8008824:	4631      	mov	r1, r6
 8008826:	4628      	mov	r0, r5
 8008828:	47b8      	blx	r7
 800882a:	3001      	adds	r0, #1
 800882c:	f43f af27 	beq.w	800867e <_printf_float+0xbe>
 8008830:	f108 0801 	add.w	r8, r8, #1
 8008834:	e7e6      	b.n	8008804 <_printf_float+0x244>
 8008836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008838:	2b00      	cmp	r3, #0
 800883a:	dc39      	bgt.n	80088b0 <_printf_float+0x2f0>
 800883c:	4a1b      	ldr	r2, [pc, #108]	; (80088ac <_printf_float+0x2ec>)
 800883e:	2301      	movs	r3, #1
 8008840:	4631      	mov	r1, r6
 8008842:	4628      	mov	r0, r5
 8008844:	47b8      	blx	r7
 8008846:	3001      	adds	r0, #1
 8008848:	f43f af19 	beq.w	800867e <_printf_float+0xbe>
 800884c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008850:	4313      	orrs	r3, r2
 8008852:	d102      	bne.n	800885a <_printf_float+0x29a>
 8008854:	6823      	ldr	r3, [r4, #0]
 8008856:	07d9      	lsls	r1, r3, #31
 8008858:	d5d8      	bpl.n	800880c <_printf_float+0x24c>
 800885a:	ee18 3a10 	vmov	r3, s16
 800885e:	4652      	mov	r2, sl
 8008860:	4631      	mov	r1, r6
 8008862:	4628      	mov	r0, r5
 8008864:	47b8      	blx	r7
 8008866:	3001      	adds	r0, #1
 8008868:	f43f af09 	beq.w	800867e <_printf_float+0xbe>
 800886c:	f04f 0900 	mov.w	r9, #0
 8008870:	f104 0a1a 	add.w	sl, r4, #26
 8008874:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008876:	425b      	negs	r3, r3
 8008878:	454b      	cmp	r3, r9
 800887a:	dc01      	bgt.n	8008880 <_printf_float+0x2c0>
 800887c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800887e:	e792      	b.n	80087a6 <_printf_float+0x1e6>
 8008880:	2301      	movs	r3, #1
 8008882:	4652      	mov	r2, sl
 8008884:	4631      	mov	r1, r6
 8008886:	4628      	mov	r0, r5
 8008888:	47b8      	blx	r7
 800888a:	3001      	adds	r0, #1
 800888c:	f43f aef7 	beq.w	800867e <_printf_float+0xbe>
 8008890:	f109 0901 	add.w	r9, r9, #1
 8008894:	e7ee      	b.n	8008874 <_printf_float+0x2b4>
 8008896:	bf00      	nop
 8008898:	7fefffff 	.word	0x7fefffff
 800889c:	0800bf94 	.word	0x0800bf94
 80088a0:	0800bf98 	.word	0x0800bf98
 80088a4:	0800bf9c 	.word	0x0800bf9c
 80088a8:	0800bfa0 	.word	0x0800bfa0
 80088ac:	0800bfa4 	.word	0x0800bfa4
 80088b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088b4:	429a      	cmp	r2, r3
 80088b6:	bfa8      	it	ge
 80088b8:	461a      	movge	r2, r3
 80088ba:	2a00      	cmp	r2, #0
 80088bc:	4691      	mov	r9, r2
 80088be:	dc37      	bgt.n	8008930 <_printf_float+0x370>
 80088c0:	f04f 0b00 	mov.w	fp, #0
 80088c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80088c8:	f104 021a 	add.w	r2, r4, #26
 80088cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80088ce:	9305      	str	r3, [sp, #20]
 80088d0:	eba3 0309 	sub.w	r3, r3, r9
 80088d4:	455b      	cmp	r3, fp
 80088d6:	dc33      	bgt.n	8008940 <_printf_float+0x380>
 80088d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088dc:	429a      	cmp	r2, r3
 80088de:	db3b      	blt.n	8008958 <_printf_float+0x398>
 80088e0:	6823      	ldr	r3, [r4, #0]
 80088e2:	07da      	lsls	r2, r3, #31
 80088e4:	d438      	bmi.n	8008958 <_printf_float+0x398>
 80088e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80088ea:	eba2 0903 	sub.w	r9, r2, r3
 80088ee:	9b05      	ldr	r3, [sp, #20]
 80088f0:	1ad2      	subs	r2, r2, r3
 80088f2:	4591      	cmp	r9, r2
 80088f4:	bfa8      	it	ge
 80088f6:	4691      	movge	r9, r2
 80088f8:	f1b9 0f00 	cmp.w	r9, #0
 80088fc:	dc35      	bgt.n	800896a <_printf_float+0x3aa>
 80088fe:	f04f 0800 	mov.w	r8, #0
 8008902:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008906:	f104 0a1a 	add.w	sl, r4, #26
 800890a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800890e:	1a9b      	subs	r3, r3, r2
 8008910:	eba3 0309 	sub.w	r3, r3, r9
 8008914:	4543      	cmp	r3, r8
 8008916:	f77f af79 	ble.w	800880c <_printf_float+0x24c>
 800891a:	2301      	movs	r3, #1
 800891c:	4652      	mov	r2, sl
 800891e:	4631      	mov	r1, r6
 8008920:	4628      	mov	r0, r5
 8008922:	47b8      	blx	r7
 8008924:	3001      	adds	r0, #1
 8008926:	f43f aeaa 	beq.w	800867e <_printf_float+0xbe>
 800892a:	f108 0801 	add.w	r8, r8, #1
 800892e:	e7ec      	b.n	800890a <_printf_float+0x34a>
 8008930:	4613      	mov	r3, r2
 8008932:	4631      	mov	r1, r6
 8008934:	4642      	mov	r2, r8
 8008936:	4628      	mov	r0, r5
 8008938:	47b8      	blx	r7
 800893a:	3001      	adds	r0, #1
 800893c:	d1c0      	bne.n	80088c0 <_printf_float+0x300>
 800893e:	e69e      	b.n	800867e <_printf_float+0xbe>
 8008940:	2301      	movs	r3, #1
 8008942:	4631      	mov	r1, r6
 8008944:	4628      	mov	r0, r5
 8008946:	9205      	str	r2, [sp, #20]
 8008948:	47b8      	blx	r7
 800894a:	3001      	adds	r0, #1
 800894c:	f43f ae97 	beq.w	800867e <_printf_float+0xbe>
 8008950:	9a05      	ldr	r2, [sp, #20]
 8008952:	f10b 0b01 	add.w	fp, fp, #1
 8008956:	e7b9      	b.n	80088cc <_printf_float+0x30c>
 8008958:	ee18 3a10 	vmov	r3, s16
 800895c:	4652      	mov	r2, sl
 800895e:	4631      	mov	r1, r6
 8008960:	4628      	mov	r0, r5
 8008962:	47b8      	blx	r7
 8008964:	3001      	adds	r0, #1
 8008966:	d1be      	bne.n	80088e6 <_printf_float+0x326>
 8008968:	e689      	b.n	800867e <_printf_float+0xbe>
 800896a:	9a05      	ldr	r2, [sp, #20]
 800896c:	464b      	mov	r3, r9
 800896e:	4442      	add	r2, r8
 8008970:	4631      	mov	r1, r6
 8008972:	4628      	mov	r0, r5
 8008974:	47b8      	blx	r7
 8008976:	3001      	adds	r0, #1
 8008978:	d1c1      	bne.n	80088fe <_printf_float+0x33e>
 800897a:	e680      	b.n	800867e <_printf_float+0xbe>
 800897c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800897e:	2a01      	cmp	r2, #1
 8008980:	dc01      	bgt.n	8008986 <_printf_float+0x3c6>
 8008982:	07db      	lsls	r3, r3, #31
 8008984:	d53a      	bpl.n	80089fc <_printf_float+0x43c>
 8008986:	2301      	movs	r3, #1
 8008988:	4642      	mov	r2, r8
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	f43f ae74 	beq.w	800867e <_printf_float+0xbe>
 8008996:	ee18 3a10 	vmov	r3, s16
 800899a:	4652      	mov	r2, sl
 800899c:	4631      	mov	r1, r6
 800899e:	4628      	mov	r0, r5
 80089a0:	47b8      	blx	r7
 80089a2:	3001      	adds	r0, #1
 80089a4:	f43f ae6b 	beq.w	800867e <_printf_float+0xbe>
 80089a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80089ac:	2200      	movs	r2, #0
 80089ae:	2300      	movs	r3, #0
 80089b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80089b4:	f7f8 f8a0 	bl	8000af8 <__aeabi_dcmpeq>
 80089b8:	b9d8      	cbnz	r0, 80089f2 <_printf_float+0x432>
 80089ba:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80089be:	f108 0201 	add.w	r2, r8, #1
 80089c2:	4631      	mov	r1, r6
 80089c4:	4628      	mov	r0, r5
 80089c6:	47b8      	blx	r7
 80089c8:	3001      	adds	r0, #1
 80089ca:	d10e      	bne.n	80089ea <_printf_float+0x42a>
 80089cc:	e657      	b.n	800867e <_printf_float+0xbe>
 80089ce:	2301      	movs	r3, #1
 80089d0:	4652      	mov	r2, sl
 80089d2:	4631      	mov	r1, r6
 80089d4:	4628      	mov	r0, r5
 80089d6:	47b8      	blx	r7
 80089d8:	3001      	adds	r0, #1
 80089da:	f43f ae50 	beq.w	800867e <_printf_float+0xbe>
 80089de:	f108 0801 	add.w	r8, r8, #1
 80089e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e4:	3b01      	subs	r3, #1
 80089e6:	4543      	cmp	r3, r8
 80089e8:	dcf1      	bgt.n	80089ce <_printf_float+0x40e>
 80089ea:	464b      	mov	r3, r9
 80089ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80089f0:	e6da      	b.n	80087a8 <_printf_float+0x1e8>
 80089f2:	f04f 0800 	mov.w	r8, #0
 80089f6:	f104 0a1a 	add.w	sl, r4, #26
 80089fa:	e7f2      	b.n	80089e2 <_printf_float+0x422>
 80089fc:	2301      	movs	r3, #1
 80089fe:	4642      	mov	r2, r8
 8008a00:	e7df      	b.n	80089c2 <_printf_float+0x402>
 8008a02:	2301      	movs	r3, #1
 8008a04:	464a      	mov	r2, r9
 8008a06:	4631      	mov	r1, r6
 8008a08:	4628      	mov	r0, r5
 8008a0a:	47b8      	blx	r7
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	f43f ae36 	beq.w	800867e <_printf_float+0xbe>
 8008a12:	f108 0801 	add.w	r8, r8, #1
 8008a16:	68e3      	ldr	r3, [r4, #12]
 8008a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a1a:	1a5b      	subs	r3, r3, r1
 8008a1c:	4543      	cmp	r3, r8
 8008a1e:	dcf0      	bgt.n	8008a02 <_printf_float+0x442>
 8008a20:	e6f8      	b.n	8008814 <_printf_float+0x254>
 8008a22:	f04f 0800 	mov.w	r8, #0
 8008a26:	f104 0919 	add.w	r9, r4, #25
 8008a2a:	e7f4      	b.n	8008a16 <_printf_float+0x456>

08008a2c <_printf_common>:
 8008a2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a30:	4616      	mov	r6, r2
 8008a32:	4699      	mov	r9, r3
 8008a34:	688a      	ldr	r2, [r1, #8]
 8008a36:	690b      	ldr	r3, [r1, #16]
 8008a38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	bfb8      	it	lt
 8008a40:	4613      	movlt	r3, r2
 8008a42:	6033      	str	r3, [r6, #0]
 8008a44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008a48:	4607      	mov	r7, r0
 8008a4a:	460c      	mov	r4, r1
 8008a4c:	b10a      	cbz	r2, 8008a52 <_printf_common+0x26>
 8008a4e:	3301      	adds	r3, #1
 8008a50:	6033      	str	r3, [r6, #0]
 8008a52:	6823      	ldr	r3, [r4, #0]
 8008a54:	0699      	lsls	r1, r3, #26
 8008a56:	bf42      	ittt	mi
 8008a58:	6833      	ldrmi	r3, [r6, #0]
 8008a5a:	3302      	addmi	r3, #2
 8008a5c:	6033      	strmi	r3, [r6, #0]
 8008a5e:	6825      	ldr	r5, [r4, #0]
 8008a60:	f015 0506 	ands.w	r5, r5, #6
 8008a64:	d106      	bne.n	8008a74 <_printf_common+0x48>
 8008a66:	f104 0a19 	add.w	sl, r4, #25
 8008a6a:	68e3      	ldr	r3, [r4, #12]
 8008a6c:	6832      	ldr	r2, [r6, #0]
 8008a6e:	1a9b      	subs	r3, r3, r2
 8008a70:	42ab      	cmp	r3, r5
 8008a72:	dc26      	bgt.n	8008ac2 <_printf_common+0x96>
 8008a74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008a78:	1e13      	subs	r3, r2, #0
 8008a7a:	6822      	ldr	r2, [r4, #0]
 8008a7c:	bf18      	it	ne
 8008a7e:	2301      	movne	r3, #1
 8008a80:	0692      	lsls	r2, r2, #26
 8008a82:	d42b      	bmi.n	8008adc <_printf_common+0xb0>
 8008a84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a88:	4649      	mov	r1, r9
 8008a8a:	4638      	mov	r0, r7
 8008a8c:	47c0      	blx	r8
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d01e      	beq.n	8008ad0 <_printf_common+0xa4>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	6922      	ldr	r2, [r4, #16]
 8008a96:	f003 0306 	and.w	r3, r3, #6
 8008a9a:	2b04      	cmp	r3, #4
 8008a9c:	bf02      	ittt	eq
 8008a9e:	68e5      	ldreq	r5, [r4, #12]
 8008aa0:	6833      	ldreq	r3, [r6, #0]
 8008aa2:	1aed      	subeq	r5, r5, r3
 8008aa4:	68a3      	ldr	r3, [r4, #8]
 8008aa6:	bf0c      	ite	eq
 8008aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008aac:	2500      	movne	r5, #0
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	bfc4      	itt	gt
 8008ab2:	1a9b      	subgt	r3, r3, r2
 8008ab4:	18ed      	addgt	r5, r5, r3
 8008ab6:	2600      	movs	r6, #0
 8008ab8:	341a      	adds	r4, #26
 8008aba:	42b5      	cmp	r5, r6
 8008abc:	d11a      	bne.n	8008af4 <_printf_common+0xc8>
 8008abe:	2000      	movs	r0, #0
 8008ac0:	e008      	b.n	8008ad4 <_printf_common+0xa8>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4652      	mov	r2, sl
 8008ac6:	4649      	mov	r1, r9
 8008ac8:	4638      	mov	r0, r7
 8008aca:	47c0      	blx	r8
 8008acc:	3001      	adds	r0, #1
 8008ace:	d103      	bne.n	8008ad8 <_printf_common+0xac>
 8008ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ad8:	3501      	adds	r5, #1
 8008ada:	e7c6      	b.n	8008a6a <_printf_common+0x3e>
 8008adc:	18e1      	adds	r1, r4, r3
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	2030      	movs	r0, #48	; 0x30
 8008ae2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008ae6:	4422      	add	r2, r4
 8008ae8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008aec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008af0:	3302      	adds	r3, #2
 8008af2:	e7c7      	b.n	8008a84 <_printf_common+0x58>
 8008af4:	2301      	movs	r3, #1
 8008af6:	4622      	mov	r2, r4
 8008af8:	4649      	mov	r1, r9
 8008afa:	4638      	mov	r0, r7
 8008afc:	47c0      	blx	r8
 8008afe:	3001      	adds	r0, #1
 8008b00:	d0e6      	beq.n	8008ad0 <_printf_common+0xa4>
 8008b02:	3601      	adds	r6, #1
 8008b04:	e7d9      	b.n	8008aba <_printf_common+0x8e>
	...

08008b08 <_printf_i>:
 8008b08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b0c:	7e0f      	ldrb	r7, [r1, #24]
 8008b0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b10:	2f78      	cmp	r7, #120	; 0x78
 8008b12:	4691      	mov	r9, r2
 8008b14:	4680      	mov	r8, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	469a      	mov	sl, r3
 8008b1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b1e:	d807      	bhi.n	8008b30 <_printf_i+0x28>
 8008b20:	2f62      	cmp	r7, #98	; 0x62
 8008b22:	d80a      	bhi.n	8008b3a <_printf_i+0x32>
 8008b24:	2f00      	cmp	r7, #0
 8008b26:	f000 80d4 	beq.w	8008cd2 <_printf_i+0x1ca>
 8008b2a:	2f58      	cmp	r7, #88	; 0x58
 8008b2c:	f000 80c0 	beq.w	8008cb0 <_printf_i+0x1a8>
 8008b30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b38:	e03a      	b.n	8008bb0 <_printf_i+0xa8>
 8008b3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b3e:	2b15      	cmp	r3, #21
 8008b40:	d8f6      	bhi.n	8008b30 <_printf_i+0x28>
 8008b42:	a101      	add	r1, pc, #4	; (adr r1, 8008b48 <_printf_i+0x40>)
 8008b44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b48:	08008ba1 	.word	0x08008ba1
 8008b4c:	08008bb5 	.word	0x08008bb5
 8008b50:	08008b31 	.word	0x08008b31
 8008b54:	08008b31 	.word	0x08008b31
 8008b58:	08008b31 	.word	0x08008b31
 8008b5c:	08008b31 	.word	0x08008b31
 8008b60:	08008bb5 	.word	0x08008bb5
 8008b64:	08008b31 	.word	0x08008b31
 8008b68:	08008b31 	.word	0x08008b31
 8008b6c:	08008b31 	.word	0x08008b31
 8008b70:	08008b31 	.word	0x08008b31
 8008b74:	08008cb9 	.word	0x08008cb9
 8008b78:	08008be1 	.word	0x08008be1
 8008b7c:	08008c73 	.word	0x08008c73
 8008b80:	08008b31 	.word	0x08008b31
 8008b84:	08008b31 	.word	0x08008b31
 8008b88:	08008cdb 	.word	0x08008cdb
 8008b8c:	08008b31 	.word	0x08008b31
 8008b90:	08008be1 	.word	0x08008be1
 8008b94:	08008b31 	.word	0x08008b31
 8008b98:	08008b31 	.word	0x08008b31
 8008b9c:	08008c7b 	.word	0x08008c7b
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	1d1a      	adds	r2, r3, #4
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	602a      	str	r2, [r5, #0]
 8008ba8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e09f      	b.n	8008cf4 <_printf_i+0x1ec>
 8008bb4:	6820      	ldr	r0, [r4, #0]
 8008bb6:	682b      	ldr	r3, [r5, #0]
 8008bb8:	0607      	lsls	r7, r0, #24
 8008bba:	f103 0104 	add.w	r1, r3, #4
 8008bbe:	6029      	str	r1, [r5, #0]
 8008bc0:	d501      	bpl.n	8008bc6 <_printf_i+0xbe>
 8008bc2:	681e      	ldr	r6, [r3, #0]
 8008bc4:	e003      	b.n	8008bce <_printf_i+0xc6>
 8008bc6:	0646      	lsls	r6, r0, #25
 8008bc8:	d5fb      	bpl.n	8008bc2 <_printf_i+0xba>
 8008bca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008bce:	2e00      	cmp	r6, #0
 8008bd0:	da03      	bge.n	8008bda <_printf_i+0xd2>
 8008bd2:	232d      	movs	r3, #45	; 0x2d
 8008bd4:	4276      	negs	r6, r6
 8008bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bda:	485a      	ldr	r0, [pc, #360]	; (8008d44 <_printf_i+0x23c>)
 8008bdc:	230a      	movs	r3, #10
 8008bde:	e012      	b.n	8008c06 <_printf_i+0xfe>
 8008be0:	682b      	ldr	r3, [r5, #0]
 8008be2:	6820      	ldr	r0, [r4, #0]
 8008be4:	1d19      	adds	r1, r3, #4
 8008be6:	6029      	str	r1, [r5, #0]
 8008be8:	0605      	lsls	r5, r0, #24
 8008bea:	d501      	bpl.n	8008bf0 <_printf_i+0xe8>
 8008bec:	681e      	ldr	r6, [r3, #0]
 8008bee:	e002      	b.n	8008bf6 <_printf_i+0xee>
 8008bf0:	0641      	lsls	r1, r0, #25
 8008bf2:	d5fb      	bpl.n	8008bec <_printf_i+0xe4>
 8008bf4:	881e      	ldrh	r6, [r3, #0]
 8008bf6:	4853      	ldr	r0, [pc, #332]	; (8008d44 <_printf_i+0x23c>)
 8008bf8:	2f6f      	cmp	r7, #111	; 0x6f
 8008bfa:	bf0c      	ite	eq
 8008bfc:	2308      	moveq	r3, #8
 8008bfe:	230a      	movne	r3, #10
 8008c00:	2100      	movs	r1, #0
 8008c02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c06:	6865      	ldr	r5, [r4, #4]
 8008c08:	60a5      	str	r5, [r4, #8]
 8008c0a:	2d00      	cmp	r5, #0
 8008c0c:	bfa2      	ittt	ge
 8008c0e:	6821      	ldrge	r1, [r4, #0]
 8008c10:	f021 0104 	bicge.w	r1, r1, #4
 8008c14:	6021      	strge	r1, [r4, #0]
 8008c16:	b90e      	cbnz	r6, 8008c1c <_printf_i+0x114>
 8008c18:	2d00      	cmp	r5, #0
 8008c1a:	d04b      	beq.n	8008cb4 <_printf_i+0x1ac>
 8008c1c:	4615      	mov	r5, r2
 8008c1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c22:	fb03 6711 	mls	r7, r3, r1, r6
 8008c26:	5dc7      	ldrb	r7, [r0, r7]
 8008c28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c2c:	4637      	mov	r7, r6
 8008c2e:	42bb      	cmp	r3, r7
 8008c30:	460e      	mov	r6, r1
 8008c32:	d9f4      	bls.n	8008c1e <_printf_i+0x116>
 8008c34:	2b08      	cmp	r3, #8
 8008c36:	d10b      	bne.n	8008c50 <_printf_i+0x148>
 8008c38:	6823      	ldr	r3, [r4, #0]
 8008c3a:	07de      	lsls	r6, r3, #31
 8008c3c:	d508      	bpl.n	8008c50 <_printf_i+0x148>
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	6861      	ldr	r1, [r4, #4]
 8008c42:	4299      	cmp	r1, r3
 8008c44:	bfde      	ittt	le
 8008c46:	2330      	movle	r3, #48	; 0x30
 8008c48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008c4c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008c50:	1b52      	subs	r2, r2, r5
 8008c52:	6122      	str	r2, [r4, #16]
 8008c54:	f8cd a000 	str.w	sl, [sp]
 8008c58:	464b      	mov	r3, r9
 8008c5a:	aa03      	add	r2, sp, #12
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	4640      	mov	r0, r8
 8008c60:	f7ff fee4 	bl	8008a2c <_printf_common>
 8008c64:	3001      	adds	r0, #1
 8008c66:	d14a      	bne.n	8008cfe <_printf_i+0x1f6>
 8008c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c6c:	b004      	add	sp, #16
 8008c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f043 0320 	orr.w	r3, r3, #32
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	4833      	ldr	r0, [pc, #204]	; (8008d48 <_printf_i+0x240>)
 8008c7c:	2778      	movs	r7, #120	; 0x78
 8008c7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008c82:	6823      	ldr	r3, [r4, #0]
 8008c84:	6829      	ldr	r1, [r5, #0]
 8008c86:	061f      	lsls	r7, r3, #24
 8008c88:	f851 6b04 	ldr.w	r6, [r1], #4
 8008c8c:	d402      	bmi.n	8008c94 <_printf_i+0x18c>
 8008c8e:	065f      	lsls	r7, r3, #25
 8008c90:	bf48      	it	mi
 8008c92:	b2b6      	uxthmi	r6, r6
 8008c94:	07df      	lsls	r7, r3, #31
 8008c96:	bf48      	it	mi
 8008c98:	f043 0320 	orrmi.w	r3, r3, #32
 8008c9c:	6029      	str	r1, [r5, #0]
 8008c9e:	bf48      	it	mi
 8008ca0:	6023      	strmi	r3, [r4, #0]
 8008ca2:	b91e      	cbnz	r6, 8008cac <_printf_i+0x1a4>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	f023 0320 	bic.w	r3, r3, #32
 8008caa:	6023      	str	r3, [r4, #0]
 8008cac:	2310      	movs	r3, #16
 8008cae:	e7a7      	b.n	8008c00 <_printf_i+0xf8>
 8008cb0:	4824      	ldr	r0, [pc, #144]	; (8008d44 <_printf_i+0x23c>)
 8008cb2:	e7e4      	b.n	8008c7e <_printf_i+0x176>
 8008cb4:	4615      	mov	r5, r2
 8008cb6:	e7bd      	b.n	8008c34 <_printf_i+0x12c>
 8008cb8:	682b      	ldr	r3, [r5, #0]
 8008cba:	6826      	ldr	r6, [r4, #0]
 8008cbc:	6961      	ldr	r1, [r4, #20]
 8008cbe:	1d18      	adds	r0, r3, #4
 8008cc0:	6028      	str	r0, [r5, #0]
 8008cc2:	0635      	lsls	r5, r6, #24
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	d501      	bpl.n	8008ccc <_printf_i+0x1c4>
 8008cc8:	6019      	str	r1, [r3, #0]
 8008cca:	e002      	b.n	8008cd2 <_printf_i+0x1ca>
 8008ccc:	0670      	lsls	r0, r6, #25
 8008cce:	d5fb      	bpl.n	8008cc8 <_printf_i+0x1c0>
 8008cd0:	8019      	strh	r1, [r3, #0]
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	6123      	str	r3, [r4, #16]
 8008cd6:	4615      	mov	r5, r2
 8008cd8:	e7bc      	b.n	8008c54 <_printf_i+0x14c>
 8008cda:	682b      	ldr	r3, [r5, #0]
 8008cdc:	1d1a      	adds	r2, r3, #4
 8008cde:	602a      	str	r2, [r5, #0]
 8008ce0:	681d      	ldr	r5, [r3, #0]
 8008ce2:	6862      	ldr	r2, [r4, #4]
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	f7f7 fa8a 	bl	8000200 <memchr>
 8008cec:	b108      	cbz	r0, 8008cf2 <_printf_i+0x1ea>
 8008cee:	1b40      	subs	r0, r0, r5
 8008cf0:	6060      	str	r0, [r4, #4]
 8008cf2:	6863      	ldr	r3, [r4, #4]
 8008cf4:	6123      	str	r3, [r4, #16]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cfc:	e7aa      	b.n	8008c54 <_printf_i+0x14c>
 8008cfe:	6923      	ldr	r3, [r4, #16]
 8008d00:	462a      	mov	r2, r5
 8008d02:	4649      	mov	r1, r9
 8008d04:	4640      	mov	r0, r8
 8008d06:	47d0      	blx	sl
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d0ad      	beq.n	8008c68 <_printf_i+0x160>
 8008d0c:	6823      	ldr	r3, [r4, #0]
 8008d0e:	079b      	lsls	r3, r3, #30
 8008d10:	d413      	bmi.n	8008d3a <_printf_i+0x232>
 8008d12:	68e0      	ldr	r0, [r4, #12]
 8008d14:	9b03      	ldr	r3, [sp, #12]
 8008d16:	4298      	cmp	r0, r3
 8008d18:	bfb8      	it	lt
 8008d1a:	4618      	movlt	r0, r3
 8008d1c:	e7a6      	b.n	8008c6c <_printf_i+0x164>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4632      	mov	r2, r6
 8008d22:	4649      	mov	r1, r9
 8008d24:	4640      	mov	r0, r8
 8008d26:	47d0      	blx	sl
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d09d      	beq.n	8008c68 <_printf_i+0x160>
 8008d2c:	3501      	adds	r5, #1
 8008d2e:	68e3      	ldr	r3, [r4, #12]
 8008d30:	9903      	ldr	r1, [sp, #12]
 8008d32:	1a5b      	subs	r3, r3, r1
 8008d34:	42ab      	cmp	r3, r5
 8008d36:	dcf2      	bgt.n	8008d1e <_printf_i+0x216>
 8008d38:	e7eb      	b.n	8008d12 <_printf_i+0x20a>
 8008d3a:	2500      	movs	r5, #0
 8008d3c:	f104 0619 	add.w	r6, r4, #25
 8008d40:	e7f5      	b.n	8008d2e <_printf_i+0x226>
 8008d42:	bf00      	nop
 8008d44:	0800bfa6 	.word	0x0800bfa6
 8008d48:	0800bfb7 	.word	0x0800bfb7

08008d4c <std>:
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	b510      	push	{r4, lr}
 8008d50:	4604      	mov	r4, r0
 8008d52:	e9c0 3300 	strd	r3, r3, [r0]
 8008d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d5a:	6083      	str	r3, [r0, #8]
 8008d5c:	8181      	strh	r1, [r0, #12]
 8008d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8008d60:	81c2      	strh	r2, [r0, #14]
 8008d62:	6183      	str	r3, [r0, #24]
 8008d64:	4619      	mov	r1, r3
 8008d66:	2208      	movs	r2, #8
 8008d68:	305c      	adds	r0, #92	; 0x5c
 8008d6a:	f000 f8c3 	bl	8008ef4 <memset>
 8008d6e:	4b0d      	ldr	r3, [pc, #52]	; (8008da4 <std+0x58>)
 8008d70:	6263      	str	r3, [r4, #36]	; 0x24
 8008d72:	4b0d      	ldr	r3, [pc, #52]	; (8008da8 <std+0x5c>)
 8008d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d76:	4b0d      	ldr	r3, [pc, #52]	; (8008dac <std+0x60>)
 8008d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d7a:	4b0d      	ldr	r3, [pc, #52]	; (8008db0 <std+0x64>)
 8008d7c:	6323      	str	r3, [r4, #48]	; 0x30
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <std+0x68>)
 8008d80:	6224      	str	r4, [r4, #32]
 8008d82:	429c      	cmp	r4, r3
 8008d84:	d006      	beq.n	8008d94 <std+0x48>
 8008d86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008d8a:	4294      	cmp	r4, r2
 8008d8c:	d002      	beq.n	8008d94 <std+0x48>
 8008d8e:	33d0      	adds	r3, #208	; 0xd0
 8008d90:	429c      	cmp	r4, r3
 8008d92:	d105      	bne.n	8008da0 <std+0x54>
 8008d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d9c:	f000 b8e0 	b.w	8008f60 <__retarget_lock_init_recursive>
 8008da0:	bd10      	pop	{r4, pc}
 8008da2:	bf00      	nop
 8008da4:	0800a8c1 	.word	0x0800a8c1
 8008da8:	0800a8e3 	.word	0x0800a8e3
 8008dac:	0800a91b 	.word	0x0800a91b
 8008db0:	0800a93f 	.word	0x0800a93f
 8008db4:	200006e4 	.word	0x200006e4

08008db8 <stdio_exit_handler>:
 8008db8:	4a02      	ldr	r2, [pc, #8]	; (8008dc4 <stdio_exit_handler+0xc>)
 8008dba:	4903      	ldr	r1, [pc, #12]	; (8008dc8 <stdio_exit_handler+0x10>)
 8008dbc:	4803      	ldr	r0, [pc, #12]	; (8008dcc <stdio_exit_handler+0x14>)
 8008dbe:	f000 b869 	b.w	8008e94 <_fwalk_sglue>
 8008dc2:	bf00      	nop
 8008dc4:	2000000c 	.word	0x2000000c
 8008dc8:	0800a161 	.word	0x0800a161
 8008dcc:	20000018 	.word	0x20000018

08008dd0 <cleanup_stdio>:
 8008dd0:	6841      	ldr	r1, [r0, #4]
 8008dd2:	4b0c      	ldr	r3, [pc, #48]	; (8008e04 <cleanup_stdio+0x34>)
 8008dd4:	4299      	cmp	r1, r3
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	4604      	mov	r4, r0
 8008dda:	d001      	beq.n	8008de0 <cleanup_stdio+0x10>
 8008ddc:	f001 f9c0 	bl	800a160 <_fflush_r>
 8008de0:	68a1      	ldr	r1, [r4, #8]
 8008de2:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <cleanup_stdio+0x38>)
 8008de4:	4299      	cmp	r1, r3
 8008de6:	d002      	beq.n	8008dee <cleanup_stdio+0x1e>
 8008de8:	4620      	mov	r0, r4
 8008dea:	f001 f9b9 	bl	800a160 <_fflush_r>
 8008dee:	68e1      	ldr	r1, [r4, #12]
 8008df0:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <cleanup_stdio+0x3c>)
 8008df2:	4299      	cmp	r1, r3
 8008df4:	d004      	beq.n	8008e00 <cleanup_stdio+0x30>
 8008df6:	4620      	mov	r0, r4
 8008df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008dfc:	f001 b9b0 	b.w	800a160 <_fflush_r>
 8008e00:	bd10      	pop	{r4, pc}
 8008e02:	bf00      	nop
 8008e04:	200006e4 	.word	0x200006e4
 8008e08:	2000074c 	.word	0x2000074c
 8008e0c:	200007b4 	.word	0x200007b4

08008e10 <global_stdio_init.part.0>:
 8008e10:	b510      	push	{r4, lr}
 8008e12:	4b0b      	ldr	r3, [pc, #44]	; (8008e40 <global_stdio_init.part.0+0x30>)
 8008e14:	4c0b      	ldr	r4, [pc, #44]	; (8008e44 <global_stdio_init.part.0+0x34>)
 8008e16:	4a0c      	ldr	r2, [pc, #48]	; (8008e48 <global_stdio_init.part.0+0x38>)
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	2104      	movs	r1, #4
 8008e20:	f7ff ff94 	bl	8008d4c <std>
 8008e24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008e28:	2201      	movs	r2, #1
 8008e2a:	2109      	movs	r1, #9
 8008e2c:	f7ff ff8e 	bl	8008d4c <std>
 8008e30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008e34:	2202      	movs	r2, #2
 8008e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e3a:	2112      	movs	r1, #18
 8008e3c:	f7ff bf86 	b.w	8008d4c <std>
 8008e40:	2000081c 	.word	0x2000081c
 8008e44:	200006e4 	.word	0x200006e4
 8008e48:	08008db9 	.word	0x08008db9

08008e4c <__sfp_lock_acquire>:
 8008e4c:	4801      	ldr	r0, [pc, #4]	; (8008e54 <__sfp_lock_acquire+0x8>)
 8008e4e:	f000 b888 	b.w	8008f62 <__retarget_lock_acquire_recursive>
 8008e52:	bf00      	nop
 8008e54:	20000821 	.word	0x20000821

08008e58 <__sfp_lock_release>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__sfp_lock_release+0x8>)
 8008e5a:	f000 b883 	b.w	8008f64 <__retarget_lock_release_recursive>
 8008e5e:	bf00      	nop
 8008e60:	20000821 	.word	0x20000821

08008e64 <__sinit>:
 8008e64:	b510      	push	{r4, lr}
 8008e66:	4604      	mov	r4, r0
 8008e68:	f7ff fff0 	bl	8008e4c <__sfp_lock_acquire>
 8008e6c:	6a23      	ldr	r3, [r4, #32]
 8008e6e:	b11b      	cbz	r3, 8008e78 <__sinit+0x14>
 8008e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e74:	f7ff bff0 	b.w	8008e58 <__sfp_lock_release>
 8008e78:	4b04      	ldr	r3, [pc, #16]	; (8008e8c <__sinit+0x28>)
 8008e7a:	6223      	str	r3, [r4, #32]
 8008e7c:	4b04      	ldr	r3, [pc, #16]	; (8008e90 <__sinit+0x2c>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1f5      	bne.n	8008e70 <__sinit+0xc>
 8008e84:	f7ff ffc4 	bl	8008e10 <global_stdio_init.part.0>
 8008e88:	e7f2      	b.n	8008e70 <__sinit+0xc>
 8008e8a:	bf00      	nop
 8008e8c:	08008dd1 	.word	0x08008dd1
 8008e90:	2000081c 	.word	0x2000081c

08008e94 <_fwalk_sglue>:
 8008e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e98:	4607      	mov	r7, r0
 8008e9a:	4688      	mov	r8, r1
 8008e9c:	4614      	mov	r4, r2
 8008e9e:	2600      	movs	r6, #0
 8008ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8008ea8:	d505      	bpl.n	8008eb6 <_fwalk_sglue+0x22>
 8008eaa:	6824      	ldr	r4, [r4, #0]
 8008eac:	2c00      	cmp	r4, #0
 8008eae:	d1f7      	bne.n	8008ea0 <_fwalk_sglue+0xc>
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d907      	bls.n	8008ecc <_fwalk_sglue+0x38>
 8008ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	d003      	beq.n	8008ecc <_fwalk_sglue+0x38>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	47c0      	blx	r8
 8008eca:	4306      	orrs	r6, r0
 8008ecc:	3568      	adds	r5, #104	; 0x68
 8008ece:	e7e9      	b.n	8008ea4 <_fwalk_sglue+0x10>

08008ed0 <iprintf>:
 8008ed0:	b40f      	push	{r0, r1, r2, r3}
 8008ed2:	b507      	push	{r0, r1, r2, lr}
 8008ed4:	4906      	ldr	r1, [pc, #24]	; (8008ef0 <iprintf+0x20>)
 8008ed6:	ab04      	add	r3, sp, #16
 8008ed8:	6808      	ldr	r0, [r1, #0]
 8008eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ede:	6881      	ldr	r1, [r0, #8]
 8008ee0:	9301      	str	r3, [sp, #4]
 8008ee2:	f000 fef5 	bl	8009cd0 <_vfiprintf_r>
 8008ee6:	b003      	add	sp, #12
 8008ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008eec:	b004      	add	sp, #16
 8008eee:	4770      	bx	lr
 8008ef0:	20000064 	.word	0x20000064

08008ef4 <memset>:
 8008ef4:	4402      	add	r2, r0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d100      	bne.n	8008efe <memset+0xa>
 8008efc:	4770      	bx	lr
 8008efe:	f803 1b01 	strb.w	r1, [r3], #1
 8008f02:	e7f9      	b.n	8008ef8 <memset+0x4>

08008f04 <_localeconv_r>:
 8008f04:	4800      	ldr	r0, [pc, #0]	; (8008f08 <_localeconv_r+0x4>)
 8008f06:	4770      	bx	lr
 8008f08:	20000158 	.word	0x20000158

08008f0c <__errno>:
 8008f0c:	4b01      	ldr	r3, [pc, #4]	; (8008f14 <__errno+0x8>)
 8008f0e:	6818      	ldr	r0, [r3, #0]
 8008f10:	4770      	bx	lr
 8008f12:	bf00      	nop
 8008f14:	20000064 	.word	0x20000064

08008f18 <__libc_init_array>:
 8008f18:	b570      	push	{r4, r5, r6, lr}
 8008f1a:	4d0d      	ldr	r5, [pc, #52]	; (8008f50 <__libc_init_array+0x38>)
 8008f1c:	4c0d      	ldr	r4, [pc, #52]	; (8008f54 <__libc_init_array+0x3c>)
 8008f1e:	1b64      	subs	r4, r4, r5
 8008f20:	10a4      	asrs	r4, r4, #2
 8008f22:	2600      	movs	r6, #0
 8008f24:	42a6      	cmp	r6, r4
 8008f26:	d109      	bne.n	8008f3c <__libc_init_array+0x24>
 8008f28:	4d0b      	ldr	r5, [pc, #44]	; (8008f58 <__libc_init_array+0x40>)
 8008f2a:	4c0c      	ldr	r4, [pc, #48]	; (8008f5c <__libc_init_array+0x44>)
 8008f2c:	f002 fefe 	bl	800bd2c <_init>
 8008f30:	1b64      	subs	r4, r4, r5
 8008f32:	10a4      	asrs	r4, r4, #2
 8008f34:	2600      	movs	r6, #0
 8008f36:	42a6      	cmp	r6, r4
 8008f38:	d105      	bne.n	8008f46 <__libc_init_array+0x2e>
 8008f3a:	bd70      	pop	{r4, r5, r6, pc}
 8008f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f40:	4798      	blx	r3
 8008f42:	3601      	adds	r6, #1
 8008f44:	e7ee      	b.n	8008f24 <__libc_init_array+0xc>
 8008f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f4a:	4798      	blx	r3
 8008f4c:	3601      	adds	r6, #1
 8008f4e:	e7f2      	b.n	8008f36 <__libc_init_array+0x1e>
 8008f50:	0800c340 	.word	0x0800c340
 8008f54:	0800c340 	.word	0x0800c340
 8008f58:	0800c340 	.word	0x0800c340
 8008f5c:	0800c344 	.word	0x0800c344

08008f60 <__retarget_lock_init_recursive>:
 8008f60:	4770      	bx	lr

08008f62 <__retarget_lock_acquire_recursive>:
 8008f62:	4770      	bx	lr

08008f64 <__retarget_lock_release_recursive>:
 8008f64:	4770      	bx	lr

08008f66 <memcpy>:
 8008f66:	440a      	add	r2, r1
 8008f68:	4291      	cmp	r1, r2
 8008f6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008f6e:	d100      	bne.n	8008f72 <memcpy+0xc>
 8008f70:	4770      	bx	lr
 8008f72:	b510      	push	{r4, lr}
 8008f74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f7c:	4291      	cmp	r1, r2
 8008f7e:	d1f9      	bne.n	8008f74 <memcpy+0xe>
 8008f80:	bd10      	pop	{r4, pc}

08008f82 <quorem>:
 8008f82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f86:	6903      	ldr	r3, [r0, #16]
 8008f88:	690c      	ldr	r4, [r1, #16]
 8008f8a:	42a3      	cmp	r3, r4
 8008f8c:	4607      	mov	r7, r0
 8008f8e:	db7e      	blt.n	800908e <quorem+0x10c>
 8008f90:	3c01      	subs	r4, #1
 8008f92:	f101 0814 	add.w	r8, r1, #20
 8008f96:	f100 0514 	add.w	r5, r0, #20
 8008f9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f9e:	9301      	str	r3, [sp, #4]
 8008fa0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008fa4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008fa8:	3301      	adds	r3, #1
 8008faa:	429a      	cmp	r2, r3
 8008fac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008fb0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008fb4:	fbb2 f6f3 	udiv	r6, r2, r3
 8008fb8:	d331      	bcc.n	800901e <quorem+0x9c>
 8008fba:	f04f 0e00 	mov.w	lr, #0
 8008fbe:	4640      	mov	r0, r8
 8008fc0:	46ac      	mov	ip, r5
 8008fc2:	46f2      	mov	sl, lr
 8008fc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008fc8:	b293      	uxth	r3, r2
 8008fca:	fb06 e303 	mla	r3, r6, r3, lr
 8008fce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fd2:	0c1a      	lsrs	r2, r3, #16
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	ebaa 0303 	sub.w	r3, sl, r3
 8008fda:	f8dc a000 	ldr.w	sl, [ip]
 8008fde:	fa13 f38a 	uxtah	r3, r3, sl
 8008fe2:	fb06 220e 	mla	r2, r6, lr, r2
 8008fe6:	9300      	str	r3, [sp, #0]
 8008fe8:	9b00      	ldr	r3, [sp, #0]
 8008fea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008fee:	b292      	uxth	r2, r2
 8008ff0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ff8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008ffc:	4581      	cmp	r9, r0
 8008ffe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009002:	f84c 3b04 	str.w	r3, [ip], #4
 8009006:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800900a:	d2db      	bcs.n	8008fc4 <quorem+0x42>
 800900c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009010:	b92b      	cbnz	r3, 800901e <quorem+0x9c>
 8009012:	9b01      	ldr	r3, [sp, #4]
 8009014:	3b04      	subs	r3, #4
 8009016:	429d      	cmp	r5, r3
 8009018:	461a      	mov	r2, r3
 800901a:	d32c      	bcc.n	8009076 <quorem+0xf4>
 800901c:	613c      	str	r4, [r7, #16]
 800901e:	4638      	mov	r0, r7
 8009020:	f001 fb4e 	bl	800a6c0 <__mcmp>
 8009024:	2800      	cmp	r0, #0
 8009026:	db22      	blt.n	800906e <quorem+0xec>
 8009028:	3601      	adds	r6, #1
 800902a:	4629      	mov	r1, r5
 800902c:	2000      	movs	r0, #0
 800902e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009032:	f8d1 c000 	ldr.w	ip, [r1]
 8009036:	b293      	uxth	r3, r2
 8009038:	1ac3      	subs	r3, r0, r3
 800903a:	0c12      	lsrs	r2, r2, #16
 800903c:	fa13 f38c 	uxtah	r3, r3, ip
 8009040:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009044:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009048:	b29b      	uxth	r3, r3
 800904a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800904e:	45c1      	cmp	r9, r8
 8009050:	f841 3b04 	str.w	r3, [r1], #4
 8009054:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009058:	d2e9      	bcs.n	800902e <quorem+0xac>
 800905a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800905e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009062:	b922      	cbnz	r2, 800906e <quorem+0xec>
 8009064:	3b04      	subs	r3, #4
 8009066:	429d      	cmp	r5, r3
 8009068:	461a      	mov	r2, r3
 800906a:	d30a      	bcc.n	8009082 <quorem+0x100>
 800906c:	613c      	str	r4, [r7, #16]
 800906e:	4630      	mov	r0, r6
 8009070:	b003      	add	sp, #12
 8009072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009076:	6812      	ldr	r2, [r2, #0]
 8009078:	3b04      	subs	r3, #4
 800907a:	2a00      	cmp	r2, #0
 800907c:	d1ce      	bne.n	800901c <quorem+0x9a>
 800907e:	3c01      	subs	r4, #1
 8009080:	e7c9      	b.n	8009016 <quorem+0x94>
 8009082:	6812      	ldr	r2, [r2, #0]
 8009084:	3b04      	subs	r3, #4
 8009086:	2a00      	cmp	r2, #0
 8009088:	d1f0      	bne.n	800906c <quorem+0xea>
 800908a:	3c01      	subs	r4, #1
 800908c:	e7eb      	b.n	8009066 <quorem+0xe4>
 800908e:	2000      	movs	r0, #0
 8009090:	e7ee      	b.n	8009070 <quorem+0xee>
 8009092:	0000      	movs	r0, r0
 8009094:	0000      	movs	r0, r0
	...

08009098 <_dtoa_r>:
 8009098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800909c:	ed2d 8b04 	vpush	{d8-d9}
 80090a0:	69c5      	ldr	r5, [r0, #28]
 80090a2:	b093      	sub	sp, #76	; 0x4c
 80090a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80090a8:	ec57 6b10 	vmov	r6, r7, d0
 80090ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80090b0:	9107      	str	r1, [sp, #28]
 80090b2:	4604      	mov	r4, r0
 80090b4:	920a      	str	r2, [sp, #40]	; 0x28
 80090b6:	930d      	str	r3, [sp, #52]	; 0x34
 80090b8:	b975      	cbnz	r5, 80090d8 <_dtoa_r+0x40>
 80090ba:	2010      	movs	r0, #16
 80090bc:	f000 ff22 	bl	8009f04 <malloc>
 80090c0:	4602      	mov	r2, r0
 80090c2:	61e0      	str	r0, [r4, #28]
 80090c4:	b920      	cbnz	r0, 80090d0 <_dtoa_r+0x38>
 80090c6:	4bae      	ldr	r3, [pc, #696]	; (8009380 <_dtoa_r+0x2e8>)
 80090c8:	21ef      	movs	r1, #239	; 0xef
 80090ca:	48ae      	ldr	r0, [pc, #696]	; (8009384 <_dtoa_r+0x2ec>)
 80090cc:	f001 fdaa 	bl	800ac24 <__assert_func>
 80090d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80090d4:	6005      	str	r5, [r0, #0]
 80090d6:	60c5      	str	r5, [r0, #12]
 80090d8:	69e3      	ldr	r3, [r4, #28]
 80090da:	6819      	ldr	r1, [r3, #0]
 80090dc:	b151      	cbz	r1, 80090f4 <_dtoa_r+0x5c>
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	604a      	str	r2, [r1, #4]
 80090e2:	2301      	movs	r3, #1
 80090e4:	4093      	lsls	r3, r2
 80090e6:	608b      	str	r3, [r1, #8]
 80090e8:	4620      	mov	r0, r4
 80090ea:	f001 f8ad 	bl	800a248 <_Bfree>
 80090ee:	69e3      	ldr	r3, [r4, #28]
 80090f0:	2200      	movs	r2, #0
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	1e3b      	subs	r3, r7, #0
 80090f6:	bfbb      	ittet	lt
 80090f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80090fc:	9303      	strlt	r3, [sp, #12]
 80090fe:	2300      	movge	r3, #0
 8009100:	2201      	movlt	r2, #1
 8009102:	bfac      	ite	ge
 8009104:	f8c8 3000 	strge.w	r3, [r8]
 8009108:	f8c8 2000 	strlt.w	r2, [r8]
 800910c:	4b9e      	ldr	r3, [pc, #632]	; (8009388 <_dtoa_r+0x2f0>)
 800910e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009112:	ea33 0308 	bics.w	r3, r3, r8
 8009116:	d11b      	bne.n	8009150 <_dtoa_r+0xb8>
 8009118:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800911a:	f242 730f 	movw	r3, #9999	; 0x270f
 800911e:	6013      	str	r3, [r2, #0]
 8009120:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009124:	4333      	orrs	r3, r6
 8009126:	f000 8593 	beq.w	8009c50 <_dtoa_r+0xbb8>
 800912a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800912c:	b963      	cbnz	r3, 8009148 <_dtoa_r+0xb0>
 800912e:	4b97      	ldr	r3, [pc, #604]	; (800938c <_dtoa_r+0x2f4>)
 8009130:	e027      	b.n	8009182 <_dtoa_r+0xea>
 8009132:	4b97      	ldr	r3, [pc, #604]	; (8009390 <_dtoa_r+0x2f8>)
 8009134:	9300      	str	r3, [sp, #0]
 8009136:	3308      	adds	r3, #8
 8009138:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	9800      	ldr	r0, [sp, #0]
 800913e:	b013      	add	sp, #76	; 0x4c
 8009140:	ecbd 8b04 	vpop	{d8-d9}
 8009144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009148:	4b90      	ldr	r3, [pc, #576]	; (800938c <_dtoa_r+0x2f4>)
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	3303      	adds	r3, #3
 800914e:	e7f3      	b.n	8009138 <_dtoa_r+0xa0>
 8009150:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009154:	2200      	movs	r2, #0
 8009156:	ec51 0b17 	vmov	r0, r1, d7
 800915a:	eeb0 8a47 	vmov.f32	s16, s14
 800915e:	eef0 8a67 	vmov.f32	s17, s15
 8009162:	2300      	movs	r3, #0
 8009164:	f7f7 fcc8 	bl	8000af8 <__aeabi_dcmpeq>
 8009168:	4681      	mov	r9, r0
 800916a:	b160      	cbz	r0, 8009186 <_dtoa_r+0xee>
 800916c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800916e:	2301      	movs	r3, #1
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009174:	2b00      	cmp	r3, #0
 8009176:	f000 8568 	beq.w	8009c4a <_dtoa_r+0xbb2>
 800917a:	4b86      	ldr	r3, [pc, #536]	; (8009394 <_dtoa_r+0x2fc>)
 800917c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800917e:	6013      	str	r3, [r2, #0]
 8009180:	3b01      	subs	r3, #1
 8009182:	9300      	str	r3, [sp, #0]
 8009184:	e7da      	b.n	800913c <_dtoa_r+0xa4>
 8009186:	aa10      	add	r2, sp, #64	; 0x40
 8009188:	a911      	add	r1, sp, #68	; 0x44
 800918a:	4620      	mov	r0, r4
 800918c:	eeb0 0a48 	vmov.f32	s0, s16
 8009190:	eef0 0a68 	vmov.f32	s1, s17
 8009194:	f001 fb3a 	bl	800a80c <__d2b>
 8009198:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800919c:	4682      	mov	sl, r0
 800919e:	2d00      	cmp	r5, #0
 80091a0:	d07f      	beq.n	80092a2 <_dtoa_r+0x20a>
 80091a2:	ee18 3a90 	vmov	r3, s17
 80091a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80091aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80091ae:	ec51 0b18 	vmov	r0, r1, d8
 80091b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80091b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80091ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80091be:	4619      	mov	r1, r3
 80091c0:	2200      	movs	r2, #0
 80091c2:	4b75      	ldr	r3, [pc, #468]	; (8009398 <_dtoa_r+0x300>)
 80091c4:	f7f7 f878 	bl	80002b8 <__aeabi_dsub>
 80091c8:	a367      	add	r3, pc, #412	; (adr r3, 8009368 <_dtoa_r+0x2d0>)
 80091ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ce:	f7f7 fa2b 	bl	8000628 <__aeabi_dmul>
 80091d2:	a367      	add	r3, pc, #412	; (adr r3, 8009370 <_dtoa_r+0x2d8>)
 80091d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091d8:	f7f7 f870 	bl	80002bc <__adddf3>
 80091dc:	4606      	mov	r6, r0
 80091de:	4628      	mov	r0, r5
 80091e0:	460f      	mov	r7, r1
 80091e2:	f7f7 f9b7 	bl	8000554 <__aeabi_i2d>
 80091e6:	a364      	add	r3, pc, #400	; (adr r3, 8009378 <_dtoa_r+0x2e0>)
 80091e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ec:	f7f7 fa1c 	bl	8000628 <__aeabi_dmul>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4630      	mov	r0, r6
 80091f6:	4639      	mov	r1, r7
 80091f8:	f7f7 f860 	bl	80002bc <__adddf3>
 80091fc:	4606      	mov	r6, r0
 80091fe:	460f      	mov	r7, r1
 8009200:	f7f7 fcc2 	bl	8000b88 <__aeabi_d2iz>
 8009204:	2200      	movs	r2, #0
 8009206:	4683      	mov	fp, r0
 8009208:	2300      	movs	r3, #0
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7f7 fc7d 	bl	8000b0c <__aeabi_dcmplt>
 8009212:	b148      	cbz	r0, 8009228 <_dtoa_r+0x190>
 8009214:	4658      	mov	r0, fp
 8009216:	f7f7 f99d 	bl	8000554 <__aeabi_i2d>
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	f7f7 fc6b 	bl	8000af8 <__aeabi_dcmpeq>
 8009222:	b908      	cbnz	r0, 8009228 <_dtoa_r+0x190>
 8009224:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009228:	f1bb 0f16 	cmp.w	fp, #22
 800922c:	d857      	bhi.n	80092de <_dtoa_r+0x246>
 800922e:	4b5b      	ldr	r3, [pc, #364]	; (800939c <_dtoa_r+0x304>)
 8009230:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009238:	ec51 0b18 	vmov	r0, r1, d8
 800923c:	f7f7 fc66 	bl	8000b0c <__aeabi_dcmplt>
 8009240:	2800      	cmp	r0, #0
 8009242:	d04e      	beq.n	80092e2 <_dtoa_r+0x24a>
 8009244:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009248:	2300      	movs	r3, #0
 800924a:	930c      	str	r3, [sp, #48]	; 0x30
 800924c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800924e:	1b5b      	subs	r3, r3, r5
 8009250:	1e5a      	subs	r2, r3, #1
 8009252:	bf45      	ittet	mi
 8009254:	f1c3 0301 	rsbmi	r3, r3, #1
 8009258:	9305      	strmi	r3, [sp, #20]
 800925a:	2300      	movpl	r3, #0
 800925c:	2300      	movmi	r3, #0
 800925e:	9206      	str	r2, [sp, #24]
 8009260:	bf54      	ite	pl
 8009262:	9305      	strpl	r3, [sp, #20]
 8009264:	9306      	strmi	r3, [sp, #24]
 8009266:	f1bb 0f00 	cmp.w	fp, #0
 800926a:	db3c      	blt.n	80092e6 <_dtoa_r+0x24e>
 800926c:	9b06      	ldr	r3, [sp, #24]
 800926e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009272:	445b      	add	r3, fp
 8009274:	9306      	str	r3, [sp, #24]
 8009276:	2300      	movs	r3, #0
 8009278:	9308      	str	r3, [sp, #32]
 800927a:	9b07      	ldr	r3, [sp, #28]
 800927c:	2b09      	cmp	r3, #9
 800927e:	d868      	bhi.n	8009352 <_dtoa_r+0x2ba>
 8009280:	2b05      	cmp	r3, #5
 8009282:	bfc4      	itt	gt
 8009284:	3b04      	subgt	r3, #4
 8009286:	9307      	strgt	r3, [sp, #28]
 8009288:	9b07      	ldr	r3, [sp, #28]
 800928a:	f1a3 0302 	sub.w	r3, r3, #2
 800928e:	bfcc      	ite	gt
 8009290:	2500      	movgt	r5, #0
 8009292:	2501      	movle	r5, #1
 8009294:	2b03      	cmp	r3, #3
 8009296:	f200 8085 	bhi.w	80093a4 <_dtoa_r+0x30c>
 800929a:	e8df f003 	tbb	[pc, r3]
 800929e:	3b2e      	.short	0x3b2e
 80092a0:	5839      	.short	0x5839
 80092a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80092a6:	441d      	add	r5, r3
 80092a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80092ac:	2b20      	cmp	r3, #32
 80092ae:	bfc1      	itttt	gt
 80092b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80092b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80092b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80092bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80092c0:	bfd6      	itet	le
 80092c2:	f1c3 0320 	rsble	r3, r3, #32
 80092c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80092ca:	fa06 f003 	lslle.w	r0, r6, r3
 80092ce:	f7f7 f931 	bl	8000534 <__aeabi_ui2d>
 80092d2:	2201      	movs	r2, #1
 80092d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80092d8:	3d01      	subs	r5, #1
 80092da:	920e      	str	r2, [sp, #56]	; 0x38
 80092dc:	e76f      	b.n	80091be <_dtoa_r+0x126>
 80092de:	2301      	movs	r3, #1
 80092e0:	e7b3      	b.n	800924a <_dtoa_r+0x1b2>
 80092e2:	900c      	str	r0, [sp, #48]	; 0x30
 80092e4:	e7b2      	b.n	800924c <_dtoa_r+0x1b4>
 80092e6:	9b05      	ldr	r3, [sp, #20]
 80092e8:	eba3 030b 	sub.w	r3, r3, fp
 80092ec:	9305      	str	r3, [sp, #20]
 80092ee:	f1cb 0300 	rsb	r3, fp, #0
 80092f2:	9308      	str	r3, [sp, #32]
 80092f4:	2300      	movs	r3, #0
 80092f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80092f8:	e7bf      	b.n	800927a <_dtoa_r+0x1e2>
 80092fa:	2300      	movs	r3, #0
 80092fc:	9309      	str	r3, [sp, #36]	; 0x24
 80092fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009300:	2b00      	cmp	r3, #0
 8009302:	dc52      	bgt.n	80093aa <_dtoa_r+0x312>
 8009304:	2301      	movs	r3, #1
 8009306:	9301      	str	r3, [sp, #4]
 8009308:	9304      	str	r3, [sp, #16]
 800930a:	461a      	mov	r2, r3
 800930c:	920a      	str	r2, [sp, #40]	; 0x28
 800930e:	e00b      	b.n	8009328 <_dtoa_r+0x290>
 8009310:	2301      	movs	r3, #1
 8009312:	e7f3      	b.n	80092fc <_dtoa_r+0x264>
 8009314:	2300      	movs	r3, #0
 8009316:	9309      	str	r3, [sp, #36]	; 0x24
 8009318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800931a:	445b      	add	r3, fp
 800931c:	9301      	str	r3, [sp, #4]
 800931e:	3301      	adds	r3, #1
 8009320:	2b01      	cmp	r3, #1
 8009322:	9304      	str	r3, [sp, #16]
 8009324:	bfb8      	it	lt
 8009326:	2301      	movlt	r3, #1
 8009328:	69e0      	ldr	r0, [r4, #28]
 800932a:	2100      	movs	r1, #0
 800932c:	2204      	movs	r2, #4
 800932e:	f102 0614 	add.w	r6, r2, #20
 8009332:	429e      	cmp	r6, r3
 8009334:	d93d      	bls.n	80093b2 <_dtoa_r+0x31a>
 8009336:	6041      	str	r1, [r0, #4]
 8009338:	4620      	mov	r0, r4
 800933a:	f000 ff45 	bl	800a1c8 <_Balloc>
 800933e:	9000      	str	r0, [sp, #0]
 8009340:	2800      	cmp	r0, #0
 8009342:	d139      	bne.n	80093b8 <_dtoa_r+0x320>
 8009344:	4b16      	ldr	r3, [pc, #88]	; (80093a0 <_dtoa_r+0x308>)
 8009346:	4602      	mov	r2, r0
 8009348:	f240 11af 	movw	r1, #431	; 0x1af
 800934c:	e6bd      	b.n	80090ca <_dtoa_r+0x32>
 800934e:	2301      	movs	r3, #1
 8009350:	e7e1      	b.n	8009316 <_dtoa_r+0x27e>
 8009352:	2501      	movs	r5, #1
 8009354:	2300      	movs	r3, #0
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	9509      	str	r5, [sp, #36]	; 0x24
 800935a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800935e:	9301      	str	r3, [sp, #4]
 8009360:	9304      	str	r3, [sp, #16]
 8009362:	2200      	movs	r2, #0
 8009364:	2312      	movs	r3, #18
 8009366:	e7d1      	b.n	800930c <_dtoa_r+0x274>
 8009368:	636f4361 	.word	0x636f4361
 800936c:	3fd287a7 	.word	0x3fd287a7
 8009370:	8b60c8b3 	.word	0x8b60c8b3
 8009374:	3fc68a28 	.word	0x3fc68a28
 8009378:	509f79fb 	.word	0x509f79fb
 800937c:	3fd34413 	.word	0x3fd34413
 8009380:	0800bfd5 	.word	0x0800bfd5
 8009384:	0800bfec 	.word	0x0800bfec
 8009388:	7ff00000 	.word	0x7ff00000
 800938c:	0800bfd1 	.word	0x0800bfd1
 8009390:	0800bfc8 	.word	0x0800bfc8
 8009394:	0800bfa5 	.word	0x0800bfa5
 8009398:	3ff80000 	.word	0x3ff80000
 800939c:	0800c0e8 	.word	0x0800c0e8
 80093a0:	0800c044 	.word	0x0800c044
 80093a4:	2301      	movs	r3, #1
 80093a6:	9309      	str	r3, [sp, #36]	; 0x24
 80093a8:	e7d7      	b.n	800935a <_dtoa_r+0x2c2>
 80093aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ac:	9301      	str	r3, [sp, #4]
 80093ae:	9304      	str	r3, [sp, #16]
 80093b0:	e7ba      	b.n	8009328 <_dtoa_r+0x290>
 80093b2:	3101      	adds	r1, #1
 80093b4:	0052      	lsls	r2, r2, #1
 80093b6:	e7ba      	b.n	800932e <_dtoa_r+0x296>
 80093b8:	69e3      	ldr	r3, [r4, #28]
 80093ba:	9a00      	ldr	r2, [sp, #0]
 80093bc:	601a      	str	r2, [r3, #0]
 80093be:	9b04      	ldr	r3, [sp, #16]
 80093c0:	2b0e      	cmp	r3, #14
 80093c2:	f200 80a8 	bhi.w	8009516 <_dtoa_r+0x47e>
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	f000 80a5 	beq.w	8009516 <_dtoa_r+0x47e>
 80093cc:	f1bb 0f00 	cmp.w	fp, #0
 80093d0:	dd38      	ble.n	8009444 <_dtoa_r+0x3ac>
 80093d2:	4bc0      	ldr	r3, [pc, #768]	; (80096d4 <_dtoa_r+0x63c>)
 80093d4:	f00b 020f 	and.w	r2, fp, #15
 80093d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80093e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80093e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80093e8:	d019      	beq.n	800941e <_dtoa_r+0x386>
 80093ea:	4bbb      	ldr	r3, [pc, #748]	; (80096d8 <_dtoa_r+0x640>)
 80093ec:	ec51 0b18 	vmov	r0, r1, d8
 80093f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093f4:	f7f7 fa42 	bl	800087c <__aeabi_ddiv>
 80093f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093fc:	f008 080f 	and.w	r8, r8, #15
 8009400:	2503      	movs	r5, #3
 8009402:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80096d8 <_dtoa_r+0x640>
 8009406:	f1b8 0f00 	cmp.w	r8, #0
 800940a:	d10a      	bne.n	8009422 <_dtoa_r+0x38a>
 800940c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009410:	4632      	mov	r2, r6
 8009412:	463b      	mov	r3, r7
 8009414:	f7f7 fa32 	bl	800087c <__aeabi_ddiv>
 8009418:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800941c:	e02b      	b.n	8009476 <_dtoa_r+0x3de>
 800941e:	2502      	movs	r5, #2
 8009420:	e7ef      	b.n	8009402 <_dtoa_r+0x36a>
 8009422:	f018 0f01 	tst.w	r8, #1
 8009426:	d008      	beq.n	800943a <_dtoa_r+0x3a2>
 8009428:	4630      	mov	r0, r6
 800942a:	4639      	mov	r1, r7
 800942c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009430:	f7f7 f8fa 	bl	8000628 <__aeabi_dmul>
 8009434:	3501      	adds	r5, #1
 8009436:	4606      	mov	r6, r0
 8009438:	460f      	mov	r7, r1
 800943a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800943e:	f109 0908 	add.w	r9, r9, #8
 8009442:	e7e0      	b.n	8009406 <_dtoa_r+0x36e>
 8009444:	f000 809f 	beq.w	8009586 <_dtoa_r+0x4ee>
 8009448:	f1cb 0600 	rsb	r6, fp, #0
 800944c:	4ba1      	ldr	r3, [pc, #644]	; (80096d4 <_dtoa_r+0x63c>)
 800944e:	4fa2      	ldr	r7, [pc, #648]	; (80096d8 <_dtoa_r+0x640>)
 8009450:	f006 020f 	and.w	r2, r6, #15
 8009454:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945c:	ec51 0b18 	vmov	r0, r1, d8
 8009460:	f7f7 f8e2 	bl	8000628 <__aeabi_dmul>
 8009464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009468:	1136      	asrs	r6, r6, #4
 800946a:	2300      	movs	r3, #0
 800946c:	2502      	movs	r5, #2
 800946e:	2e00      	cmp	r6, #0
 8009470:	d17e      	bne.n	8009570 <_dtoa_r+0x4d8>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d1d0      	bne.n	8009418 <_dtoa_r+0x380>
 8009476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009478:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800947c:	2b00      	cmp	r3, #0
 800947e:	f000 8084 	beq.w	800958a <_dtoa_r+0x4f2>
 8009482:	4b96      	ldr	r3, [pc, #600]	; (80096dc <_dtoa_r+0x644>)
 8009484:	2200      	movs	r2, #0
 8009486:	4640      	mov	r0, r8
 8009488:	4649      	mov	r1, r9
 800948a:	f7f7 fb3f 	bl	8000b0c <__aeabi_dcmplt>
 800948e:	2800      	cmp	r0, #0
 8009490:	d07b      	beq.n	800958a <_dtoa_r+0x4f2>
 8009492:	9b04      	ldr	r3, [sp, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d078      	beq.n	800958a <_dtoa_r+0x4f2>
 8009498:	9b01      	ldr	r3, [sp, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	dd39      	ble.n	8009512 <_dtoa_r+0x47a>
 800949e:	4b90      	ldr	r3, [pc, #576]	; (80096e0 <_dtoa_r+0x648>)
 80094a0:	2200      	movs	r2, #0
 80094a2:	4640      	mov	r0, r8
 80094a4:	4649      	mov	r1, r9
 80094a6:	f7f7 f8bf 	bl	8000628 <__aeabi_dmul>
 80094aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094ae:	9e01      	ldr	r6, [sp, #4]
 80094b0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80094b4:	3501      	adds	r5, #1
 80094b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80094ba:	4628      	mov	r0, r5
 80094bc:	f7f7 f84a 	bl	8000554 <__aeabi_i2d>
 80094c0:	4642      	mov	r2, r8
 80094c2:	464b      	mov	r3, r9
 80094c4:	f7f7 f8b0 	bl	8000628 <__aeabi_dmul>
 80094c8:	4b86      	ldr	r3, [pc, #536]	; (80096e4 <_dtoa_r+0x64c>)
 80094ca:	2200      	movs	r2, #0
 80094cc:	f7f6 fef6 	bl	80002bc <__adddf3>
 80094d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80094d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80094d8:	9303      	str	r3, [sp, #12]
 80094da:	2e00      	cmp	r6, #0
 80094dc:	d158      	bne.n	8009590 <_dtoa_r+0x4f8>
 80094de:	4b82      	ldr	r3, [pc, #520]	; (80096e8 <_dtoa_r+0x650>)
 80094e0:	2200      	movs	r2, #0
 80094e2:	4640      	mov	r0, r8
 80094e4:	4649      	mov	r1, r9
 80094e6:	f7f6 fee7 	bl	80002b8 <__aeabi_dsub>
 80094ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80094ee:	4680      	mov	r8, r0
 80094f0:	4689      	mov	r9, r1
 80094f2:	f7f7 fb29 	bl	8000b48 <__aeabi_dcmpgt>
 80094f6:	2800      	cmp	r0, #0
 80094f8:	f040 8296 	bne.w	8009a28 <_dtoa_r+0x990>
 80094fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009500:	4640      	mov	r0, r8
 8009502:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009506:	4649      	mov	r1, r9
 8009508:	f7f7 fb00 	bl	8000b0c <__aeabi_dcmplt>
 800950c:	2800      	cmp	r0, #0
 800950e:	f040 8289 	bne.w	8009a24 <_dtoa_r+0x98c>
 8009512:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009516:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009518:	2b00      	cmp	r3, #0
 800951a:	f2c0 814e 	blt.w	80097ba <_dtoa_r+0x722>
 800951e:	f1bb 0f0e 	cmp.w	fp, #14
 8009522:	f300 814a 	bgt.w	80097ba <_dtoa_r+0x722>
 8009526:	4b6b      	ldr	r3, [pc, #428]	; (80096d4 <_dtoa_r+0x63c>)
 8009528:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800952c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009532:	2b00      	cmp	r3, #0
 8009534:	f280 80dc 	bge.w	80096f0 <_dtoa_r+0x658>
 8009538:	9b04      	ldr	r3, [sp, #16]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f300 80d8 	bgt.w	80096f0 <_dtoa_r+0x658>
 8009540:	f040 826f 	bne.w	8009a22 <_dtoa_r+0x98a>
 8009544:	4b68      	ldr	r3, [pc, #416]	; (80096e8 <_dtoa_r+0x650>)
 8009546:	2200      	movs	r2, #0
 8009548:	4640      	mov	r0, r8
 800954a:	4649      	mov	r1, r9
 800954c:	f7f7 f86c 	bl	8000628 <__aeabi_dmul>
 8009550:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009554:	f7f7 faee 	bl	8000b34 <__aeabi_dcmpge>
 8009558:	9e04      	ldr	r6, [sp, #16]
 800955a:	4637      	mov	r7, r6
 800955c:	2800      	cmp	r0, #0
 800955e:	f040 8245 	bne.w	80099ec <_dtoa_r+0x954>
 8009562:	9d00      	ldr	r5, [sp, #0]
 8009564:	2331      	movs	r3, #49	; 0x31
 8009566:	f805 3b01 	strb.w	r3, [r5], #1
 800956a:	f10b 0b01 	add.w	fp, fp, #1
 800956e:	e241      	b.n	80099f4 <_dtoa_r+0x95c>
 8009570:	07f2      	lsls	r2, r6, #31
 8009572:	d505      	bpl.n	8009580 <_dtoa_r+0x4e8>
 8009574:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009578:	f7f7 f856 	bl	8000628 <__aeabi_dmul>
 800957c:	3501      	adds	r5, #1
 800957e:	2301      	movs	r3, #1
 8009580:	1076      	asrs	r6, r6, #1
 8009582:	3708      	adds	r7, #8
 8009584:	e773      	b.n	800946e <_dtoa_r+0x3d6>
 8009586:	2502      	movs	r5, #2
 8009588:	e775      	b.n	8009476 <_dtoa_r+0x3de>
 800958a:	9e04      	ldr	r6, [sp, #16]
 800958c:	465f      	mov	r7, fp
 800958e:	e792      	b.n	80094b6 <_dtoa_r+0x41e>
 8009590:	9900      	ldr	r1, [sp, #0]
 8009592:	4b50      	ldr	r3, [pc, #320]	; (80096d4 <_dtoa_r+0x63c>)
 8009594:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009598:	4431      	add	r1, r6
 800959a:	9102      	str	r1, [sp, #8]
 800959c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800959e:	eeb0 9a47 	vmov.f32	s18, s14
 80095a2:	eef0 9a67 	vmov.f32	s19, s15
 80095a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80095aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80095ae:	2900      	cmp	r1, #0
 80095b0:	d044      	beq.n	800963c <_dtoa_r+0x5a4>
 80095b2:	494e      	ldr	r1, [pc, #312]	; (80096ec <_dtoa_r+0x654>)
 80095b4:	2000      	movs	r0, #0
 80095b6:	f7f7 f961 	bl	800087c <__aeabi_ddiv>
 80095ba:	ec53 2b19 	vmov	r2, r3, d9
 80095be:	f7f6 fe7b 	bl	80002b8 <__aeabi_dsub>
 80095c2:	9d00      	ldr	r5, [sp, #0]
 80095c4:	ec41 0b19 	vmov	d9, r0, r1
 80095c8:	4649      	mov	r1, r9
 80095ca:	4640      	mov	r0, r8
 80095cc:	f7f7 fadc 	bl	8000b88 <__aeabi_d2iz>
 80095d0:	4606      	mov	r6, r0
 80095d2:	f7f6 ffbf 	bl	8000554 <__aeabi_i2d>
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4640      	mov	r0, r8
 80095dc:	4649      	mov	r1, r9
 80095de:	f7f6 fe6b 	bl	80002b8 <__aeabi_dsub>
 80095e2:	3630      	adds	r6, #48	; 0x30
 80095e4:	f805 6b01 	strb.w	r6, [r5], #1
 80095e8:	ec53 2b19 	vmov	r2, r3, d9
 80095ec:	4680      	mov	r8, r0
 80095ee:	4689      	mov	r9, r1
 80095f0:	f7f7 fa8c 	bl	8000b0c <__aeabi_dcmplt>
 80095f4:	2800      	cmp	r0, #0
 80095f6:	d164      	bne.n	80096c2 <_dtoa_r+0x62a>
 80095f8:	4642      	mov	r2, r8
 80095fa:	464b      	mov	r3, r9
 80095fc:	4937      	ldr	r1, [pc, #220]	; (80096dc <_dtoa_r+0x644>)
 80095fe:	2000      	movs	r0, #0
 8009600:	f7f6 fe5a 	bl	80002b8 <__aeabi_dsub>
 8009604:	ec53 2b19 	vmov	r2, r3, d9
 8009608:	f7f7 fa80 	bl	8000b0c <__aeabi_dcmplt>
 800960c:	2800      	cmp	r0, #0
 800960e:	f040 80b6 	bne.w	800977e <_dtoa_r+0x6e6>
 8009612:	9b02      	ldr	r3, [sp, #8]
 8009614:	429d      	cmp	r5, r3
 8009616:	f43f af7c 	beq.w	8009512 <_dtoa_r+0x47a>
 800961a:	4b31      	ldr	r3, [pc, #196]	; (80096e0 <_dtoa_r+0x648>)
 800961c:	ec51 0b19 	vmov	r0, r1, d9
 8009620:	2200      	movs	r2, #0
 8009622:	f7f7 f801 	bl	8000628 <__aeabi_dmul>
 8009626:	4b2e      	ldr	r3, [pc, #184]	; (80096e0 <_dtoa_r+0x648>)
 8009628:	ec41 0b19 	vmov	d9, r0, r1
 800962c:	2200      	movs	r2, #0
 800962e:	4640      	mov	r0, r8
 8009630:	4649      	mov	r1, r9
 8009632:	f7f6 fff9 	bl	8000628 <__aeabi_dmul>
 8009636:	4680      	mov	r8, r0
 8009638:	4689      	mov	r9, r1
 800963a:	e7c5      	b.n	80095c8 <_dtoa_r+0x530>
 800963c:	ec51 0b17 	vmov	r0, r1, d7
 8009640:	f7f6 fff2 	bl	8000628 <__aeabi_dmul>
 8009644:	9b02      	ldr	r3, [sp, #8]
 8009646:	9d00      	ldr	r5, [sp, #0]
 8009648:	930f      	str	r3, [sp, #60]	; 0x3c
 800964a:	ec41 0b19 	vmov	d9, r0, r1
 800964e:	4649      	mov	r1, r9
 8009650:	4640      	mov	r0, r8
 8009652:	f7f7 fa99 	bl	8000b88 <__aeabi_d2iz>
 8009656:	4606      	mov	r6, r0
 8009658:	f7f6 ff7c 	bl	8000554 <__aeabi_i2d>
 800965c:	3630      	adds	r6, #48	; 0x30
 800965e:	4602      	mov	r2, r0
 8009660:	460b      	mov	r3, r1
 8009662:	4640      	mov	r0, r8
 8009664:	4649      	mov	r1, r9
 8009666:	f7f6 fe27 	bl	80002b8 <__aeabi_dsub>
 800966a:	f805 6b01 	strb.w	r6, [r5], #1
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	429d      	cmp	r5, r3
 8009672:	4680      	mov	r8, r0
 8009674:	4689      	mov	r9, r1
 8009676:	f04f 0200 	mov.w	r2, #0
 800967a:	d124      	bne.n	80096c6 <_dtoa_r+0x62e>
 800967c:	4b1b      	ldr	r3, [pc, #108]	; (80096ec <_dtoa_r+0x654>)
 800967e:	ec51 0b19 	vmov	r0, r1, d9
 8009682:	f7f6 fe1b 	bl	80002bc <__adddf3>
 8009686:	4602      	mov	r2, r0
 8009688:	460b      	mov	r3, r1
 800968a:	4640      	mov	r0, r8
 800968c:	4649      	mov	r1, r9
 800968e:	f7f7 fa5b 	bl	8000b48 <__aeabi_dcmpgt>
 8009692:	2800      	cmp	r0, #0
 8009694:	d173      	bne.n	800977e <_dtoa_r+0x6e6>
 8009696:	ec53 2b19 	vmov	r2, r3, d9
 800969a:	4914      	ldr	r1, [pc, #80]	; (80096ec <_dtoa_r+0x654>)
 800969c:	2000      	movs	r0, #0
 800969e:	f7f6 fe0b 	bl	80002b8 <__aeabi_dsub>
 80096a2:	4602      	mov	r2, r0
 80096a4:	460b      	mov	r3, r1
 80096a6:	4640      	mov	r0, r8
 80096a8:	4649      	mov	r1, r9
 80096aa:	f7f7 fa2f 	bl	8000b0c <__aeabi_dcmplt>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f43f af2f 	beq.w	8009512 <_dtoa_r+0x47a>
 80096b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80096b6:	1e6b      	subs	r3, r5, #1
 80096b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80096ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80096be:	2b30      	cmp	r3, #48	; 0x30
 80096c0:	d0f8      	beq.n	80096b4 <_dtoa_r+0x61c>
 80096c2:	46bb      	mov	fp, r7
 80096c4:	e04a      	b.n	800975c <_dtoa_r+0x6c4>
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <_dtoa_r+0x648>)
 80096c8:	f7f6 ffae 	bl	8000628 <__aeabi_dmul>
 80096cc:	4680      	mov	r8, r0
 80096ce:	4689      	mov	r9, r1
 80096d0:	e7bd      	b.n	800964e <_dtoa_r+0x5b6>
 80096d2:	bf00      	nop
 80096d4:	0800c0e8 	.word	0x0800c0e8
 80096d8:	0800c0c0 	.word	0x0800c0c0
 80096dc:	3ff00000 	.word	0x3ff00000
 80096e0:	40240000 	.word	0x40240000
 80096e4:	401c0000 	.word	0x401c0000
 80096e8:	40140000 	.word	0x40140000
 80096ec:	3fe00000 	.word	0x3fe00000
 80096f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096f4:	9d00      	ldr	r5, [sp, #0]
 80096f6:	4642      	mov	r2, r8
 80096f8:	464b      	mov	r3, r9
 80096fa:	4630      	mov	r0, r6
 80096fc:	4639      	mov	r1, r7
 80096fe:	f7f7 f8bd 	bl	800087c <__aeabi_ddiv>
 8009702:	f7f7 fa41 	bl	8000b88 <__aeabi_d2iz>
 8009706:	9001      	str	r0, [sp, #4]
 8009708:	f7f6 ff24 	bl	8000554 <__aeabi_i2d>
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	f7f6 ff8a 	bl	8000628 <__aeabi_dmul>
 8009714:	4602      	mov	r2, r0
 8009716:	460b      	mov	r3, r1
 8009718:	4630      	mov	r0, r6
 800971a:	4639      	mov	r1, r7
 800971c:	f7f6 fdcc 	bl	80002b8 <__aeabi_dsub>
 8009720:	9e01      	ldr	r6, [sp, #4]
 8009722:	9f04      	ldr	r7, [sp, #16]
 8009724:	3630      	adds	r6, #48	; 0x30
 8009726:	f805 6b01 	strb.w	r6, [r5], #1
 800972a:	9e00      	ldr	r6, [sp, #0]
 800972c:	1bae      	subs	r6, r5, r6
 800972e:	42b7      	cmp	r7, r6
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	d134      	bne.n	80097a0 <_dtoa_r+0x708>
 8009736:	f7f6 fdc1 	bl	80002bc <__adddf3>
 800973a:	4642      	mov	r2, r8
 800973c:	464b      	mov	r3, r9
 800973e:	4606      	mov	r6, r0
 8009740:	460f      	mov	r7, r1
 8009742:	f7f7 fa01 	bl	8000b48 <__aeabi_dcmpgt>
 8009746:	b9c8      	cbnz	r0, 800977c <_dtoa_r+0x6e4>
 8009748:	4642      	mov	r2, r8
 800974a:	464b      	mov	r3, r9
 800974c:	4630      	mov	r0, r6
 800974e:	4639      	mov	r1, r7
 8009750:	f7f7 f9d2 	bl	8000af8 <__aeabi_dcmpeq>
 8009754:	b110      	cbz	r0, 800975c <_dtoa_r+0x6c4>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	07db      	lsls	r3, r3, #31
 800975a:	d40f      	bmi.n	800977c <_dtoa_r+0x6e4>
 800975c:	4651      	mov	r1, sl
 800975e:	4620      	mov	r0, r4
 8009760:	f000 fd72 	bl	800a248 <_Bfree>
 8009764:	2300      	movs	r3, #0
 8009766:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009768:	702b      	strb	r3, [r5, #0]
 800976a:	f10b 0301 	add.w	r3, fp, #1
 800976e:	6013      	str	r3, [r2, #0]
 8009770:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009772:	2b00      	cmp	r3, #0
 8009774:	f43f ace2 	beq.w	800913c <_dtoa_r+0xa4>
 8009778:	601d      	str	r5, [r3, #0]
 800977a:	e4df      	b.n	800913c <_dtoa_r+0xa4>
 800977c:	465f      	mov	r7, fp
 800977e:	462b      	mov	r3, r5
 8009780:	461d      	mov	r5, r3
 8009782:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009786:	2a39      	cmp	r2, #57	; 0x39
 8009788:	d106      	bne.n	8009798 <_dtoa_r+0x700>
 800978a:	9a00      	ldr	r2, [sp, #0]
 800978c:	429a      	cmp	r2, r3
 800978e:	d1f7      	bne.n	8009780 <_dtoa_r+0x6e8>
 8009790:	9900      	ldr	r1, [sp, #0]
 8009792:	2230      	movs	r2, #48	; 0x30
 8009794:	3701      	adds	r7, #1
 8009796:	700a      	strb	r2, [r1, #0]
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	3201      	adds	r2, #1
 800979c:	701a      	strb	r2, [r3, #0]
 800979e:	e790      	b.n	80096c2 <_dtoa_r+0x62a>
 80097a0:	4ba3      	ldr	r3, [pc, #652]	; (8009a30 <_dtoa_r+0x998>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	f7f6 ff40 	bl	8000628 <__aeabi_dmul>
 80097a8:	2200      	movs	r2, #0
 80097aa:	2300      	movs	r3, #0
 80097ac:	4606      	mov	r6, r0
 80097ae:	460f      	mov	r7, r1
 80097b0:	f7f7 f9a2 	bl	8000af8 <__aeabi_dcmpeq>
 80097b4:	2800      	cmp	r0, #0
 80097b6:	d09e      	beq.n	80096f6 <_dtoa_r+0x65e>
 80097b8:	e7d0      	b.n	800975c <_dtoa_r+0x6c4>
 80097ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80097bc:	2a00      	cmp	r2, #0
 80097be:	f000 80ca 	beq.w	8009956 <_dtoa_r+0x8be>
 80097c2:	9a07      	ldr	r2, [sp, #28]
 80097c4:	2a01      	cmp	r2, #1
 80097c6:	f300 80ad 	bgt.w	8009924 <_dtoa_r+0x88c>
 80097ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	f000 80a5 	beq.w	800991c <_dtoa_r+0x884>
 80097d2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80097d6:	9e08      	ldr	r6, [sp, #32]
 80097d8:	9d05      	ldr	r5, [sp, #20]
 80097da:	9a05      	ldr	r2, [sp, #20]
 80097dc:	441a      	add	r2, r3
 80097de:	9205      	str	r2, [sp, #20]
 80097e0:	9a06      	ldr	r2, [sp, #24]
 80097e2:	2101      	movs	r1, #1
 80097e4:	441a      	add	r2, r3
 80097e6:	4620      	mov	r0, r4
 80097e8:	9206      	str	r2, [sp, #24]
 80097ea:	f000 fde3 	bl	800a3b4 <__i2b>
 80097ee:	4607      	mov	r7, r0
 80097f0:	b165      	cbz	r5, 800980c <_dtoa_r+0x774>
 80097f2:	9b06      	ldr	r3, [sp, #24]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	dd09      	ble.n	800980c <_dtoa_r+0x774>
 80097f8:	42ab      	cmp	r3, r5
 80097fa:	9a05      	ldr	r2, [sp, #20]
 80097fc:	bfa8      	it	ge
 80097fe:	462b      	movge	r3, r5
 8009800:	1ad2      	subs	r2, r2, r3
 8009802:	9205      	str	r2, [sp, #20]
 8009804:	9a06      	ldr	r2, [sp, #24]
 8009806:	1aed      	subs	r5, r5, r3
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	9306      	str	r3, [sp, #24]
 800980c:	9b08      	ldr	r3, [sp, #32]
 800980e:	b1f3      	cbz	r3, 800984e <_dtoa_r+0x7b6>
 8009810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009812:	2b00      	cmp	r3, #0
 8009814:	f000 80a3 	beq.w	800995e <_dtoa_r+0x8c6>
 8009818:	2e00      	cmp	r6, #0
 800981a:	dd10      	ble.n	800983e <_dtoa_r+0x7a6>
 800981c:	4639      	mov	r1, r7
 800981e:	4632      	mov	r2, r6
 8009820:	4620      	mov	r0, r4
 8009822:	f000 fe87 	bl	800a534 <__pow5mult>
 8009826:	4652      	mov	r2, sl
 8009828:	4601      	mov	r1, r0
 800982a:	4607      	mov	r7, r0
 800982c:	4620      	mov	r0, r4
 800982e:	f000 fdd7 	bl	800a3e0 <__multiply>
 8009832:	4651      	mov	r1, sl
 8009834:	4680      	mov	r8, r0
 8009836:	4620      	mov	r0, r4
 8009838:	f000 fd06 	bl	800a248 <_Bfree>
 800983c:	46c2      	mov	sl, r8
 800983e:	9b08      	ldr	r3, [sp, #32]
 8009840:	1b9a      	subs	r2, r3, r6
 8009842:	d004      	beq.n	800984e <_dtoa_r+0x7b6>
 8009844:	4651      	mov	r1, sl
 8009846:	4620      	mov	r0, r4
 8009848:	f000 fe74 	bl	800a534 <__pow5mult>
 800984c:	4682      	mov	sl, r0
 800984e:	2101      	movs	r1, #1
 8009850:	4620      	mov	r0, r4
 8009852:	f000 fdaf 	bl	800a3b4 <__i2b>
 8009856:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009858:	2b00      	cmp	r3, #0
 800985a:	4606      	mov	r6, r0
 800985c:	f340 8081 	ble.w	8009962 <_dtoa_r+0x8ca>
 8009860:	461a      	mov	r2, r3
 8009862:	4601      	mov	r1, r0
 8009864:	4620      	mov	r0, r4
 8009866:	f000 fe65 	bl	800a534 <__pow5mult>
 800986a:	9b07      	ldr	r3, [sp, #28]
 800986c:	2b01      	cmp	r3, #1
 800986e:	4606      	mov	r6, r0
 8009870:	dd7a      	ble.n	8009968 <_dtoa_r+0x8d0>
 8009872:	f04f 0800 	mov.w	r8, #0
 8009876:	6933      	ldr	r3, [r6, #16]
 8009878:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800987c:	6918      	ldr	r0, [r3, #16]
 800987e:	f000 fd4b 	bl	800a318 <__hi0bits>
 8009882:	f1c0 0020 	rsb	r0, r0, #32
 8009886:	9b06      	ldr	r3, [sp, #24]
 8009888:	4418      	add	r0, r3
 800988a:	f010 001f 	ands.w	r0, r0, #31
 800988e:	f000 8094 	beq.w	80099ba <_dtoa_r+0x922>
 8009892:	f1c0 0320 	rsb	r3, r0, #32
 8009896:	2b04      	cmp	r3, #4
 8009898:	f340 8085 	ble.w	80099a6 <_dtoa_r+0x90e>
 800989c:	9b05      	ldr	r3, [sp, #20]
 800989e:	f1c0 001c 	rsb	r0, r0, #28
 80098a2:	4403      	add	r3, r0
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	9b06      	ldr	r3, [sp, #24]
 80098a8:	4403      	add	r3, r0
 80098aa:	4405      	add	r5, r0
 80098ac:	9306      	str	r3, [sp, #24]
 80098ae:	9b05      	ldr	r3, [sp, #20]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	dd05      	ble.n	80098c0 <_dtoa_r+0x828>
 80098b4:	4651      	mov	r1, sl
 80098b6:	461a      	mov	r2, r3
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 fe95 	bl	800a5e8 <__lshift>
 80098be:	4682      	mov	sl, r0
 80098c0:	9b06      	ldr	r3, [sp, #24]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	dd05      	ble.n	80098d2 <_dtoa_r+0x83a>
 80098c6:	4631      	mov	r1, r6
 80098c8:	461a      	mov	r2, r3
 80098ca:	4620      	mov	r0, r4
 80098cc:	f000 fe8c 	bl	800a5e8 <__lshift>
 80098d0:	4606      	mov	r6, r0
 80098d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d072      	beq.n	80099be <_dtoa_r+0x926>
 80098d8:	4631      	mov	r1, r6
 80098da:	4650      	mov	r0, sl
 80098dc:	f000 fef0 	bl	800a6c0 <__mcmp>
 80098e0:	2800      	cmp	r0, #0
 80098e2:	da6c      	bge.n	80099be <_dtoa_r+0x926>
 80098e4:	2300      	movs	r3, #0
 80098e6:	4651      	mov	r1, sl
 80098e8:	220a      	movs	r2, #10
 80098ea:	4620      	mov	r0, r4
 80098ec:	f000 fcce 	bl	800a28c <__multadd>
 80098f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80098f6:	4682      	mov	sl, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	f000 81b0 	beq.w	8009c5e <_dtoa_r+0xbc6>
 80098fe:	2300      	movs	r3, #0
 8009900:	4639      	mov	r1, r7
 8009902:	220a      	movs	r2, #10
 8009904:	4620      	mov	r0, r4
 8009906:	f000 fcc1 	bl	800a28c <__multadd>
 800990a:	9b01      	ldr	r3, [sp, #4]
 800990c:	2b00      	cmp	r3, #0
 800990e:	4607      	mov	r7, r0
 8009910:	f300 8096 	bgt.w	8009a40 <_dtoa_r+0x9a8>
 8009914:	9b07      	ldr	r3, [sp, #28]
 8009916:	2b02      	cmp	r3, #2
 8009918:	dc59      	bgt.n	80099ce <_dtoa_r+0x936>
 800991a:	e091      	b.n	8009a40 <_dtoa_r+0x9a8>
 800991c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800991e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009922:	e758      	b.n	80097d6 <_dtoa_r+0x73e>
 8009924:	9b04      	ldr	r3, [sp, #16]
 8009926:	1e5e      	subs	r6, r3, #1
 8009928:	9b08      	ldr	r3, [sp, #32]
 800992a:	42b3      	cmp	r3, r6
 800992c:	bfbf      	itttt	lt
 800992e:	9b08      	ldrlt	r3, [sp, #32]
 8009930:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009932:	9608      	strlt	r6, [sp, #32]
 8009934:	1af3      	sublt	r3, r6, r3
 8009936:	bfb4      	ite	lt
 8009938:	18d2      	addlt	r2, r2, r3
 800993a:	1b9e      	subge	r6, r3, r6
 800993c:	9b04      	ldr	r3, [sp, #16]
 800993e:	bfbc      	itt	lt
 8009940:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009942:	2600      	movlt	r6, #0
 8009944:	2b00      	cmp	r3, #0
 8009946:	bfb7      	itett	lt
 8009948:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800994c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009950:	1a9d      	sublt	r5, r3, r2
 8009952:	2300      	movlt	r3, #0
 8009954:	e741      	b.n	80097da <_dtoa_r+0x742>
 8009956:	9e08      	ldr	r6, [sp, #32]
 8009958:	9d05      	ldr	r5, [sp, #20]
 800995a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800995c:	e748      	b.n	80097f0 <_dtoa_r+0x758>
 800995e:	9a08      	ldr	r2, [sp, #32]
 8009960:	e770      	b.n	8009844 <_dtoa_r+0x7ac>
 8009962:	9b07      	ldr	r3, [sp, #28]
 8009964:	2b01      	cmp	r3, #1
 8009966:	dc19      	bgt.n	800999c <_dtoa_r+0x904>
 8009968:	9b02      	ldr	r3, [sp, #8]
 800996a:	b9bb      	cbnz	r3, 800999c <_dtoa_r+0x904>
 800996c:	9b03      	ldr	r3, [sp, #12]
 800996e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009972:	b99b      	cbnz	r3, 800999c <_dtoa_r+0x904>
 8009974:	9b03      	ldr	r3, [sp, #12]
 8009976:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800997a:	0d1b      	lsrs	r3, r3, #20
 800997c:	051b      	lsls	r3, r3, #20
 800997e:	b183      	cbz	r3, 80099a2 <_dtoa_r+0x90a>
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	3301      	adds	r3, #1
 8009984:	9305      	str	r3, [sp, #20]
 8009986:	9b06      	ldr	r3, [sp, #24]
 8009988:	3301      	adds	r3, #1
 800998a:	9306      	str	r3, [sp, #24]
 800998c:	f04f 0801 	mov.w	r8, #1
 8009990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009992:	2b00      	cmp	r3, #0
 8009994:	f47f af6f 	bne.w	8009876 <_dtoa_r+0x7de>
 8009998:	2001      	movs	r0, #1
 800999a:	e774      	b.n	8009886 <_dtoa_r+0x7ee>
 800999c:	f04f 0800 	mov.w	r8, #0
 80099a0:	e7f6      	b.n	8009990 <_dtoa_r+0x8f8>
 80099a2:	4698      	mov	r8, r3
 80099a4:	e7f4      	b.n	8009990 <_dtoa_r+0x8f8>
 80099a6:	d082      	beq.n	80098ae <_dtoa_r+0x816>
 80099a8:	9a05      	ldr	r2, [sp, #20]
 80099aa:	331c      	adds	r3, #28
 80099ac:	441a      	add	r2, r3
 80099ae:	9205      	str	r2, [sp, #20]
 80099b0:	9a06      	ldr	r2, [sp, #24]
 80099b2:	441a      	add	r2, r3
 80099b4:	441d      	add	r5, r3
 80099b6:	9206      	str	r2, [sp, #24]
 80099b8:	e779      	b.n	80098ae <_dtoa_r+0x816>
 80099ba:	4603      	mov	r3, r0
 80099bc:	e7f4      	b.n	80099a8 <_dtoa_r+0x910>
 80099be:	9b04      	ldr	r3, [sp, #16]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc37      	bgt.n	8009a34 <_dtoa_r+0x99c>
 80099c4:	9b07      	ldr	r3, [sp, #28]
 80099c6:	2b02      	cmp	r3, #2
 80099c8:	dd34      	ble.n	8009a34 <_dtoa_r+0x99c>
 80099ca:	9b04      	ldr	r3, [sp, #16]
 80099cc:	9301      	str	r3, [sp, #4]
 80099ce:	9b01      	ldr	r3, [sp, #4]
 80099d0:	b963      	cbnz	r3, 80099ec <_dtoa_r+0x954>
 80099d2:	4631      	mov	r1, r6
 80099d4:	2205      	movs	r2, #5
 80099d6:	4620      	mov	r0, r4
 80099d8:	f000 fc58 	bl	800a28c <__multadd>
 80099dc:	4601      	mov	r1, r0
 80099de:	4606      	mov	r6, r0
 80099e0:	4650      	mov	r0, sl
 80099e2:	f000 fe6d 	bl	800a6c0 <__mcmp>
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f73f adbb 	bgt.w	8009562 <_dtoa_r+0x4ca>
 80099ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099ee:	9d00      	ldr	r5, [sp, #0]
 80099f0:	ea6f 0b03 	mvn.w	fp, r3
 80099f4:	f04f 0800 	mov.w	r8, #0
 80099f8:	4631      	mov	r1, r6
 80099fa:	4620      	mov	r0, r4
 80099fc:	f000 fc24 	bl	800a248 <_Bfree>
 8009a00:	2f00      	cmp	r7, #0
 8009a02:	f43f aeab 	beq.w	800975c <_dtoa_r+0x6c4>
 8009a06:	f1b8 0f00 	cmp.w	r8, #0
 8009a0a:	d005      	beq.n	8009a18 <_dtoa_r+0x980>
 8009a0c:	45b8      	cmp	r8, r7
 8009a0e:	d003      	beq.n	8009a18 <_dtoa_r+0x980>
 8009a10:	4641      	mov	r1, r8
 8009a12:	4620      	mov	r0, r4
 8009a14:	f000 fc18 	bl	800a248 <_Bfree>
 8009a18:	4639      	mov	r1, r7
 8009a1a:	4620      	mov	r0, r4
 8009a1c:	f000 fc14 	bl	800a248 <_Bfree>
 8009a20:	e69c      	b.n	800975c <_dtoa_r+0x6c4>
 8009a22:	2600      	movs	r6, #0
 8009a24:	4637      	mov	r7, r6
 8009a26:	e7e1      	b.n	80099ec <_dtoa_r+0x954>
 8009a28:	46bb      	mov	fp, r7
 8009a2a:	4637      	mov	r7, r6
 8009a2c:	e599      	b.n	8009562 <_dtoa_r+0x4ca>
 8009a2e:	bf00      	nop
 8009a30:	40240000 	.word	0x40240000
 8009a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 80c8 	beq.w	8009bcc <_dtoa_r+0xb34>
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	9301      	str	r3, [sp, #4]
 8009a40:	2d00      	cmp	r5, #0
 8009a42:	dd05      	ble.n	8009a50 <_dtoa_r+0x9b8>
 8009a44:	4639      	mov	r1, r7
 8009a46:	462a      	mov	r2, r5
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 fdcd 	bl	800a5e8 <__lshift>
 8009a4e:	4607      	mov	r7, r0
 8009a50:	f1b8 0f00 	cmp.w	r8, #0
 8009a54:	d05b      	beq.n	8009b0e <_dtoa_r+0xa76>
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f000 fbb5 	bl	800a1c8 <_Balloc>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	b928      	cbnz	r0, 8009a6e <_dtoa_r+0x9d6>
 8009a62:	4b83      	ldr	r3, [pc, #524]	; (8009c70 <_dtoa_r+0xbd8>)
 8009a64:	4602      	mov	r2, r0
 8009a66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009a6a:	f7ff bb2e 	b.w	80090ca <_dtoa_r+0x32>
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	3202      	adds	r2, #2
 8009a72:	0092      	lsls	r2, r2, #2
 8009a74:	f107 010c 	add.w	r1, r7, #12
 8009a78:	300c      	adds	r0, #12
 8009a7a:	f7ff fa74 	bl	8008f66 <memcpy>
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4629      	mov	r1, r5
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fdb0 	bl	800a5e8 <__lshift>
 8009a88:	9b00      	ldr	r3, [sp, #0]
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9304      	str	r3, [sp, #16]
 8009a8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a92:	4413      	add	r3, r2
 8009a94:	9308      	str	r3, [sp, #32]
 8009a96:	9b02      	ldr	r3, [sp, #8]
 8009a98:	f003 0301 	and.w	r3, r3, #1
 8009a9c:	46b8      	mov	r8, r7
 8009a9e:	9306      	str	r3, [sp, #24]
 8009aa0:	4607      	mov	r7, r0
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	3b01      	subs	r3, #1
 8009aa8:	4650      	mov	r0, sl
 8009aaa:	9301      	str	r3, [sp, #4]
 8009aac:	f7ff fa69 	bl	8008f82 <quorem>
 8009ab0:	4641      	mov	r1, r8
 8009ab2:	9002      	str	r0, [sp, #8]
 8009ab4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009ab8:	4650      	mov	r0, sl
 8009aba:	f000 fe01 	bl	800a6c0 <__mcmp>
 8009abe:	463a      	mov	r2, r7
 8009ac0:	9005      	str	r0, [sp, #20]
 8009ac2:	4631      	mov	r1, r6
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fe17 	bl	800a6f8 <__mdiff>
 8009aca:	68c2      	ldr	r2, [r0, #12]
 8009acc:	4605      	mov	r5, r0
 8009ace:	bb02      	cbnz	r2, 8009b12 <_dtoa_r+0xa7a>
 8009ad0:	4601      	mov	r1, r0
 8009ad2:	4650      	mov	r0, sl
 8009ad4:	f000 fdf4 	bl	800a6c0 <__mcmp>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	4629      	mov	r1, r5
 8009adc:	4620      	mov	r0, r4
 8009ade:	9209      	str	r2, [sp, #36]	; 0x24
 8009ae0:	f000 fbb2 	bl	800a248 <_Bfree>
 8009ae4:	9b07      	ldr	r3, [sp, #28]
 8009ae6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ae8:	9d04      	ldr	r5, [sp, #16]
 8009aea:	ea43 0102 	orr.w	r1, r3, r2
 8009aee:	9b06      	ldr	r3, [sp, #24]
 8009af0:	4319      	orrs	r1, r3
 8009af2:	d110      	bne.n	8009b16 <_dtoa_r+0xa7e>
 8009af4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009af8:	d029      	beq.n	8009b4e <_dtoa_r+0xab6>
 8009afa:	9b05      	ldr	r3, [sp, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dd02      	ble.n	8009b06 <_dtoa_r+0xa6e>
 8009b00:	9b02      	ldr	r3, [sp, #8]
 8009b02:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009b06:	9b01      	ldr	r3, [sp, #4]
 8009b08:	f883 9000 	strb.w	r9, [r3]
 8009b0c:	e774      	b.n	80099f8 <_dtoa_r+0x960>
 8009b0e:	4638      	mov	r0, r7
 8009b10:	e7ba      	b.n	8009a88 <_dtoa_r+0x9f0>
 8009b12:	2201      	movs	r2, #1
 8009b14:	e7e1      	b.n	8009ada <_dtoa_r+0xa42>
 8009b16:	9b05      	ldr	r3, [sp, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	db04      	blt.n	8009b26 <_dtoa_r+0xa8e>
 8009b1c:	9907      	ldr	r1, [sp, #28]
 8009b1e:	430b      	orrs	r3, r1
 8009b20:	9906      	ldr	r1, [sp, #24]
 8009b22:	430b      	orrs	r3, r1
 8009b24:	d120      	bne.n	8009b68 <_dtoa_r+0xad0>
 8009b26:	2a00      	cmp	r2, #0
 8009b28:	dded      	ble.n	8009b06 <_dtoa_r+0xa6e>
 8009b2a:	4651      	mov	r1, sl
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 fd5a 	bl	800a5e8 <__lshift>
 8009b34:	4631      	mov	r1, r6
 8009b36:	4682      	mov	sl, r0
 8009b38:	f000 fdc2 	bl	800a6c0 <__mcmp>
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	dc03      	bgt.n	8009b48 <_dtoa_r+0xab0>
 8009b40:	d1e1      	bne.n	8009b06 <_dtoa_r+0xa6e>
 8009b42:	f019 0f01 	tst.w	r9, #1
 8009b46:	d0de      	beq.n	8009b06 <_dtoa_r+0xa6e>
 8009b48:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b4c:	d1d8      	bne.n	8009b00 <_dtoa_r+0xa68>
 8009b4e:	9a01      	ldr	r2, [sp, #4]
 8009b50:	2339      	movs	r3, #57	; 0x39
 8009b52:	7013      	strb	r3, [r2, #0]
 8009b54:	462b      	mov	r3, r5
 8009b56:	461d      	mov	r5, r3
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b5e:	2a39      	cmp	r2, #57	; 0x39
 8009b60:	d06c      	beq.n	8009c3c <_dtoa_r+0xba4>
 8009b62:	3201      	adds	r2, #1
 8009b64:	701a      	strb	r2, [r3, #0]
 8009b66:	e747      	b.n	80099f8 <_dtoa_r+0x960>
 8009b68:	2a00      	cmp	r2, #0
 8009b6a:	dd07      	ble.n	8009b7c <_dtoa_r+0xae4>
 8009b6c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009b70:	d0ed      	beq.n	8009b4e <_dtoa_r+0xab6>
 8009b72:	9a01      	ldr	r2, [sp, #4]
 8009b74:	f109 0301 	add.w	r3, r9, #1
 8009b78:	7013      	strb	r3, [r2, #0]
 8009b7a:	e73d      	b.n	80099f8 <_dtoa_r+0x960>
 8009b7c:	9b04      	ldr	r3, [sp, #16]
 8009b7e:	9a08      	ldr	r2, [sp, #32]
 8009b80:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d043      	beq.n	8009c10 <_dtoa_r+0xb78>
 8009b88:	4651      	mov	r1, sl
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	220a      	movs	r2, #10
 8009b8e:	4620      	mov	r0, r4
 8009b90:	f000 fb7c 	bl	800a28c <__multadd>
 8009b94:	45b8      	cmp	r8, r7
 8009b96:	4682      	mov	sl, r0
 8009b98:	f04f 0300 	mov.w	r3, #0
 8009b9c:	f04f 020a 	mov.w	r2, #10
 8009ba0:	4641      	mov	r1, r8
 8009ba2:	4620      	mov	r0, r4
 8009ba4:	d107      	bne.n	8009bb6 <_dtoa_r+0xb1e>
 8009ba6:	f000 fb71 	bl	800a28c <__multadd>
 8009baa:	4680      	mov	r8, r0
 8009bac:	4607      	mov	r7, r0
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	3301      	adds	r3, #1
 8009bb2:	9304      	str	r3, [sp, #16]
 8009bb4:	e775      	b.n	8009aa2 <_dtoa_r+0xa0a>
 8009bb6:	f000 fb69 	bl	800a28c <__multadd>
 8009bba:	4639      	mov	r1, r7
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	220a      	movs	r2, #10
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	f000 fb62 	bl	800a28c <__multadd>
 8009bc8:	4607      	mov	r7, r0
 8009bca:	e7f0      	b.n	8009bae <_dtoa_r+0xb16>
 8009bcc:	9b04      	ldr	r3, [sp, #16]
 8009bce:	9301      	str	r3, [sp, #4]
 8009bd0:	9d00      	ldr	r5, [sp, #0]
 8009bd2:	4631      	mov	r1, r6
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	f7ff f9d4 	bl	8008f82 <quorem>
 8009bda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	f805 9b01 	strb.w	r9, [r5], #1
 8009be4:	1aea      	subs	r2, r5, r3
 8009be6:	9b01      	ldr	r3, [sp, #4]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	dd07      	ble.n	8009bfc <_dtoa_r+0xb64>
 8009bec:	4651      	mov	r1, sl
 8009bee:	2300      	movs	r3, #0
 8009bf0:	220a      	movs	r2, #10
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 fb4a 	bl	800a28c <__multadd>
 8009bf8:	4682      	mov	sl, r0
 8009bfa:	e7ea      	b.n	8009bd2 <_dtoa_r+0xb3a>
 8009bfc:	9b01      	ldr	r3, [sp, #4]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bfc8      	it	gt
 8009c02:	461d      	movgt	r5, r3
 8009c04:	9b00      	ldr	r3, [sp, #0]
 8009c06:	bfd8      	it	le
 8009c08:	2501      	movle	r5, #1
 8009c0a:	441d      	add	r5, r3
 8009c0c:	f04f 0800 	mov.w	r8, #0
 8009c10:	4651      	mov	r1, sl
 8009c12:	2201      	movs	r2, #1
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fce7 	bl	800a5e8 <__lshift>
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4682      	mov	sl, r0
 8009c1e:	f000 fd4f 	bl	800a6c0 <__mcmp>
 8009c22:	2800      	cmp	r0, #0
 8009c24:	dc96      	bgt.n	8009b54 <_dtoa_r+0xabc>
 8009c26:	d102      	bne.n	8009c2e <_dtoa_r+0xb96>
 8009c28:	f019 0f01 	tst.w	r9, #1
 8009c2c:	d192      	bne.n	8009b54 <_dtoa_r+0xabc>
 8009c2e:	462b      	mov	r3, r5
 8009c30:	461d      	mov	r5, r3
 8009c32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c36:	2a30      	cmp	r2, #48	; 0x30
 8009c38:	d0fa      	beq.n	8009c30 <_dtoa_r+0xb98>
 8009c3a:	e6dd      	b.n	80099f8 <_dtoa_r+0x960>
 8009c3c:	9a00      	ldr	r2, [sp, #0]
 8009c3e:	429a      	cmp	r2, r3
 8009c40:	d189      	bne.n	8009b56 <_dtoa_r+0xabe>
 8009c42:	f10b 0b01 	add.w	fp, fp, #1
 8009c46:	2331      	movs	r3, #49	; 0x31
 8009c48:	e796      	b.n	8009b78 <_dtoa_r+0xae0>
 8009c4a:	4b0a      	ldr	r3, [pc, #40]	; (8009c74 <_dtoa_r+0xbdc>)
 8009c4c:	f7ff ba99 	b.w	8009182 <_dtoa_r+0xea>
 8009c50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f47f aa6d 	bne.w	8009132 <_dtoa_r+0x9a>
 8009c58:	4b07      	ldr	r3, [pc, #28]	; (8009c78 <_dtoa_r+0xbe0>)
 8009c5a:	f7ff ba92 	b.w	8009182 <_dtoa_r+0xea>
 8009c5e:	9b01      	ldr	r3, [sp, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	dcb5      	bgt.n	8009bd0 <_dtoa_r+0xb38>
 8009c64:	9b07      	ldr	r3, [sp, #28]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	f73f aeb1 	bgt.w	80099ce <_dtoa_r+0x936>
 8009c6c:	e7b0      	b.n	8009bd0 <_dtoa_r+0xb38>
 8009c6e:	bf00      	nop
 8009c70:	0800c044 	.word	0x0800c044
 8009c74:	0800bfa4 	.word	0x0800bfa4
 8009c78:	0800bfc8 	.word	0x0800bfc8

08009c7c <__sfputc_r>:
 8009c7c:	6893      	ldr	r3, [r2, #8]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	b410      	push	{r4}
 8009c84:	6093      	str	r3, [r2, #8]
 8009c86:	da08      	bge.n	8009c9a <__sfputc_r+0x1e>
 8009c88:	6994      	ldr	r4, [r2, #24]
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	db01      	blt.n	8009c92 <__sfputc_r+0x16>
 8009c8e:	290a      	cmp	r1, #10
 8009c90:	d103      	bne.n	8009c9a <__sfputc_r+0x1e>
 8009c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c96:	f000 be56 	b.w	800a946 <__swbuf_r>
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	1c58      	adds	r0, r3, #1
 8009c9e:	6010      	str	r0, [r2, #0]
 8009ca0:	7019      	strb	r1, [r3, #0]
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <__sfputs_r>:
 8009caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	18d5      	adds	r5, r2, r3
 8009cb4:	42ac      	cmp	r4, r5
 8009cb6:	d101      	bne.n	8009cbc <__sfputs_r+0x12>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e007      	b.n	8009ccc <__sfputs_r+0x22>
 8009cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc0:	463a      	mov	r2, r7
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f7ff ffda 	bl	8009c7c <__sfputc_r>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d1f3      	bne.n	8009cb4 <__sfputs_r+0xa>
 8009ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cd0 <_vfiprintf_r>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	460d      	mov	r5, r1
 8009cd6:	b09d      	sub	sp, #116	; 0x74
 8009cd8:	4614      	mov	r4, r2
 8009cda:	4698      	mov	r8, r3
 8009cdc:	4606      	mov	r6, r0
 8009cde:	b118      	cbz	r0, 8009ce8 <_vfiprintf_r+0x18>
 8009ce0:	6a03      	ldr	r3, [r0, #32]
 8009ce2:	b90b      	cbnz	r3, 8009ce8 <_vfiprintf_r+0x18>
 8009ce4:	f7ff f8be 	bl	8008e64 <__sinit>
 8009ce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009cea:	07d9      	lsls	r1, r3, #31
 8009cec:	d405      	bmi.n	8009cfa <_vfiprintf_r+0x2a>
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	059a      	lsls	r2, r3, #22
 8009cf2:	d402      	bmi.n	8009cfa <_vfiprintf_r+0x2a>
 8009cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009cf6:	f7ff f934 	bl	8008f62 <__retarget_lock_acquire_recursive>
 8009cfa:	89ab      	ldrh	r3, [r5, #12]
 8009cfc:	071b      	lsls	r3, r3, #28
 8009cfe:	d501      	bpl.n	8009d04 <_vfiprintf_r+0x34>
 8009d00:	692b      	ldr	r3, [r5, #16]
 8009d02:	b99b      	cbnz	r3, 8009d2c <_vfiprintf_r+0x5c>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4630      	mov	r0, r6
 8009d08:	f000 fe5a 	bl	800a9c0 <__swsetup_r>
 8009d0c:	b170      	cbz	r0, 8009d2c <_vfiprintf_r+0x5c>
 8009d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d10:	07dc      	lsls	r4, r3, #31
 8009d12:	d504      	bpl.n	8009d1e <_vfiprintf_r+0x4e>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009d18:	b01d      	add	sp, #116	; 0x74
 8009d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	89ab      	ldrh	r3, [r5, #12]
 8009d20:	0598      	lsls	r0, r3, #22
 8009d22:	d4f7      	bmi.n	8009d14 <_vfiprintf_r+0x44>
 8009d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d26:	f7ff f91d 	bl	8008f64 <__retarget_lock_release_recursive>
 8009d2a:	e7f3      	b.n	8009d14 <_vfiprintf_r+0x44>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8009d30:	2320      	movs	r3, #32
 8009d32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3a:	2330      	movs	r3, #48	; 0x30
 8009d3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ef0 <_vfiprintf_r+0x220>
 8009d40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d44:	f04f 0901 	mov.w	r9, #1
 8009d48:	4623      	mov	r3, r4
 8009d4a:	469a      	mov	sl, r3
 8009d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d50:	b10a      	cbz	r2, 8009d56 <_vfiprintf_r+0x86>
 8009d52:	2a25      	cmp	r2, #37	; 0x25
 8009d54:	d1f9      	bne.n	8009d4a <_vfiprintf_r+0x7a>
 8009d56:	ebba 0b04 	subs.w	fp, sl, r4
 8009d5a:	d00b      	beq.n	8009d74 <_vfiprintf_r+0xa4>
 8009d5c:	465b      	mov	r3, fp
 8009d5e:	4622      	mov	r2, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	4630      	mov	r0, r6
 8009d64:	f7ff ffa1 	bl	8009caa <__sfputs_r>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f000 80a9 	beq.w	8009ec0 <_vfiprintf_r+0x1f0>
 8009d6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d70:	445a      	add	r2, fp
 8009d72:	9209      	str	r2, [sp, #36]	; 0x24
 8009d74:	f89a 3000 	ldrb.w	r3, [sl]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 80a1 	beq.w	8009ec0 <_vfiprintf_r+0x1f0>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d88:	f10a 0a01 	add.w	sl, sl, #1
 8009d8c:	9304      	str	r3, [sp, #16]
 8009d8e:	9307      	str	r3, [sp, #28]
 8009d90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d94:	931a      	str	r3, [sp, #104]	; 0x68
 8009d96:	4654      	mov	r4, sl
 8009d98:	2205      	movs	r2, #5
 8009d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9e:	4854      	ldr	r0, [pc, #336]	; (8009ef0 <_vfiprintf_r+0x220>)
 8009da0:	f7f6 fa2e 	bl	8000200 <memchr>
 8009da4:	9a04      	ldr	r2, [sp, #16]
 8009da6:	b9d8      	cbnz	r0, 8009de0 <_vfiprintf_r+0x110>
 8009da8:	06d1      	lsls	r1, r2, #27
 8009daa:	bf44      	itt	mi
 8009dac:	2320      	movmi	r3, #32
 8009dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009db2:	0713      	lsls	r3, r2, #28
 8009db4:	bf44      	itt	mi
 8009db6:	232b      	movmi	r3, #43	; 0x2b
 8009db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc2:	d015      	beq.n	8009df0 <_vfiprintf_r+0x120>
 8009dc4:	9a07      	ldr	r2, [sp, #28]
 8009dc6:	4654      	mov	r4, sl
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f04f 0c0a 	mov.w	ip, #10
 8009dce:	4621      	mov	r1, r4
 8009dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd4:	3b30      	subs	r3, #48	; 0x30
 8009dd6:	2b09      	cmp	r3, #9
 8009dd8:	d94d      	bls.n	8009e76 <_vfiprintf_r+0x1a6>
 8009dda:	b1b0      	cbz	r0, 8009e0a <_vfiprintf_r+0x13a>
 8009ddc:	9207      	str	r2, [sp, #28]
 8009dde:	e014      	b.n	8009e0a <_vfiprintf_r+0x13a>
 8009de0:	eba0 0308 	sub.w	r3, r0, r8
 8009de4:	fa09 f303 	lsl.w	r3, r9, r3
 8009de8:	4313      	orrs	r3, r2
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	46a2      	mov	sl, r4
 8009dee:	e7d2      	b.n	8009d96 <_vfiprintf_r+0xc6>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d19      	adds	r1, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9103      	str	r1, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfbb      	ittet	lt
 8009dfc:	425b      	neglt	r3, r3
 8009dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8009e02:	9307      	strge	r3, [sp, #28]
 8009e04:	9307      	strlt	r3, [sp, #28]
 8009e06:	bfb8      	it	lt
 8009e08:	9204      	strlt	r2, [sp, #16]
 8009e0a:	7823      	ldrb	r3, [r4, #0]
 8009e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8009e0e:	d10c      	bne.n	8009e2a <_vfiprintf_r+0x15a>
 8009e10:	7863      	ldrb	r3, [r4, #1]
 8009e12:	2b2a      	cmp	r3, #42	; 0x2a
 8009e14:	d134      	bne.n	8009e80 <_vfiprintf_r+0x1b0>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	1d1a      	adds	r2, r3, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	9203      	str	r2, [sp, #12]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bfb8      	it	lt
 8009e22:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009e26:	3402      	adds	r4, #2
 8009e28:	9305      	str	r3, [sp, #20]
 8009e2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009f00 <_vfiprintf_r+0x230>
 8009e2e:	7821      	ldrb	r1, [r4, #0]
 8009e30:	2203      	movs	r2, #3
 8009e32:	4650      	mov	r0, sl
 8009e34:	f7f6 f9e4 	bl	8000200 <memchr>
 8009e38:	b138      	cbz	r0, 8009e4a <_vfiprintf_r+0x17a>
 8009e3a:	9b04      	ldr	r3, [sp, #16]
 8009e3c:	eba0 000a 	sub.w	r0, r0, sl
 8009e40:	2240      	movs	r2, #64	; 0x40
 8009e42:	4082      	lsls	r2, r0
 8009e44:	4313      	orrs	r3, r2
 8009e46:	3401      	adds	r4, #1
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4e:	4829      	ldr	r0, [pc, #164]	; (8009ef4 <_vfiprintf_r+0x224>)
 8009e50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e54:	2206      	movs	r2, #6
 8009e56:	f7f6 f9d3 	bl	8000200 <memchr>
 8009e5a:	2800      	cmp	r0, #0
 8009e5c:	d03f      	beq.n	8009ede <_vfiprintf_r+0x20e>
 8009e5e:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <_vfiprintf_r+0x228>)
 8009e60:	bb1b      	cbnz	r3, 8009eaa <_vfiprintf_r+0x1da>
 8009e62:	9b03      	ldr	r3, [sp, #12]
 8009e64:	3307      	adds	r3, #7
 8009e66:	f023 0307 	bic.w	r3, r3, #7
 8009e6a:	3308      	adds	r3, #8
 8009e6c:	9303      	str	r3, [sp, #12]
 8009e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e70:	443b      	add	r3, r7
 8009e72:	9309      	str	r3, [sp, #36]	; 0x24
 8009e74:	e768      	b.n	8009d48 <_vfiprintf_r+0x78>
 8009e76:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	2001      	movs	r0, #1
 8009e7e:	e7a6      	b.n	8009dce <_vfiprintf_r+0xfe>
 8009e80:	2300      	movs	r3, #0
 8009e82:	3401      	adds	r4, #1
 8009e84:	9305      	str	r3, [sp, #20]
 8009e86:	4619      	mov	r1, r3
 8009e88:	f04f 0c0a 	mov.w	ip, #10
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e92:	3a30      	subs	r2, #48	; 0x30
 8009e94:	2a09      	cmp	r2, #9
 8009e96:	d903      	bls.n	8009ea0 <_vfiprintf_r+0x1d0>
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d0c6      	beq.n	8009e2a <_vfiprintf_r+0x15a>
 8009e9c:	9105      	str	r1, [sp, #20]
 8009e9e:	e7c4      	b.n	8009e2a <_vfiprintf_r+0x15a>
 8009ea0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	2301      	movs	r3, #1
 8009ea8:	e7f0      	b.n	8009e8c <_vfiprintf_r+0x1bc>
 8009eaa:	ab03      	add	r3, sp, #12
 8009eac:	9300      	str	r3, [sp, #0]
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4b12      	ldr	r3, [pc, #72]	; (8009efc <_vfiprintf_r+0x22c>)
 8009eb2:	a904      	add	r1, sp, #16
 8009eb4:	4630      	mov	r0, r6
 8009eb6:	f7fe fb83 	bl	80085c0 <_printf_float>
 8009eba:	4607      	mov	r7, r0
 8009ebc:	1c78      	adds	r0, r7, #1
 8009ebe:	d1d6      	bne.n	8009e6e <_vfiprintf_r+0x19e>
 8009ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ec2:	07d9      	lsls	r1, r3, #31
 8009ec4:	d405      	bmi.n	8009ed2 <_vfiprintf_r+0x202>
 8009ec6:	89ab      	ldrh	r3, [r5, #12]
 8009ec8:	059a      	lsls	r2, r3, #22
 8009eca:	d402      	bmi.n	8009ed2 <_vfiprintf_r+0x202>
 8009ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ece:	f7ff f849 	bl	8008f64 <__retarget_lock_release_recursive>
 8009ed2:	89ab      	ldrh	r3, [r5, #12]
 8009ed4:	065b      	lsls	r3, r3, #25
 8009ed6:	f53f af1d 	bmi.w	8009d14 <_vfiprintf_r+0x44>
 8009eda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009edc:	e71c      	b.n	8009d18 <_vfiprintf_r+0x48>
 8009ede:	ab03      	add	r3, sp, #12
 8009ee0:	9300      	str	r3, [sp, #0]
 8009ee2:	462a      	mov	r2, r5
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <_vfiprintf_r+0x22c>)
 8009ee6:	a904      	add	r1, sp, #16
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7fe fe0d 	bl	8008b08 <_printf_i>
 8009eee:	e7e4      	b.n	8009eba <_vfiprintf_r+0x1ea>
 8009ef0:	0800c055 	.word	0x0800c055
 8009ef4:	0800c05f 	.word	0x0800c05f
 8009ef8:	080085c1 	.word	0x080085c1
 8009efc:	08009cab 	.word	0x08009cab
 8009f00:	0800c05b 	.word	0x0800c05b

08009f04 <malloc>:
 8009f04:	4b02      	ldr	r3, [pc, #8]	; (8009f10 <malloc+0xc>)
 8009f06:	4601      	mov	r1, r0
 8009f08:	6818      	ldr	r0, [r3, #0]
 8009f0a:	f000 b823 	b.w	8009f54 <_malloc_r>
 8009f0e:	bf00      	nop
 8009f10:	20000064 	.word	0x20000064

08009f14 <sbrk_aligned>:
 8009f14:	b570      	push	{r4, r5, r6, lr}
 8009f16:	4e0e      	ldr	r6, [pc, #56]	; (8009f50 <sbrk_aligned+0x3c>)
 8009f18:	460c      	mov	r4, r1
 8009f1a:	6831      	ldr	r1, [r6, #0]
 8009f1c:	4605      	mov	r5, r0
 8009f1e:	b911      	cbnz	r1, 8009f26 <sbrk_aligned+0x12>
 8009f20:	f000 fe5e 	bl	800abe0 <_sbrk_r>
 8009f24:	6030      	str	r0, [r6, #0]
 8009f26:	4621      	mov	r1, r4
 8009f28:	4628      	mov	r0, r5
 8009f2a:	f000 fe59 	bl	800abe0 <_sbrk_r>
 8009f2e:	1c43      	adds	r3, r0, #1
 8009f30:	d00a      	beq.n	8009f48 <sbrk_aligned+0x34>
 8009f32:	1cc4      	adds	r4, r0, #3
 8009f34:	f024 0403 	bic.w	r4, r4, #3
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d007      	beq.n	8009f4c <sbrk_aligned+0x38>
 8009f3c:	1a21      	subs	r1, r4, r0
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 fe4e 	bl	800abe0 <_sbrk_r>
 8009f44:	3001      	adds	r0, #1
 8009f46:	d101      	bne.n	8009f4c <sbrk_aligned+0x38>
 8009f48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009f4c:	4620      	mov	r0, r4
 8009f4e:	bd70      	pop	{r4, r5, r6, pc}
 8009f50:	20000828 	.word	0x20000828

08009f54 <_malloc_r>:
 8009f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f58:	1ccd      	adds	r5, r1, #3
 8009f5a:	f025 0503 	bic.w	r5, r5, #3
 8009f5e:	3508      	adds	r5, #8
 8009f60:	2d0c      	cmp	r5, #12
 8009f62:	bf38      	it	cc
 8009f64:	250c      	movcc	r5, #12
 8009f66:	2d00      	cmp	r5, #0
 8009f68:	4607      	mov	r7, r0
 8009f6a:	db01      	blt.n	8009f70 <_malloc_r+0x1c>
 8009f6c:	42a9      	cmp	r1, r5
 8009f6e:	d905      	bls.n	8009f7c <_malloc_r+0x28>
 8009f70:	230c      	movs	r3, #12
 8009f72:	603b      	str	r3, [r7, #0]
 8009f74:	2600      	movs	r6, #0
 8009f76:	4630      	mov	r0, r6
 8009f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a050 <_malloc_r+0xfc>
 8009f80:	f000 f916 	bl	800a1b0 <__malloc_lock>
 8009f84:	f8d8 3000 	ldr.w	r3, [r8]
 8009f88:	461c      	mov	r4, r3
 8009f8a:	bb5c      	cbnz	r4, 8009fe4 <_malloc_r+0x90>
 8009f8c:	4629      	mov	r1, r5
 8009f8e:	4638      	mov	r0, r7
 8009f90:	f7ff ffc0 	bl	8009f14 <sbrk_aligned>
 8009f94:	1c43      	adds	r3, r0, #1
 8009f96:	4604      	mov	r4, r0
 8009f98:	d155      	bne.n	800a046 <_malloc_r+0xf2>
 8009f9a:	f8d8 4000 	ldr.w	r4, [r8]
 8009f9e:	4626      	mov	r6, r4
 8009fa0:	2e00      	cmp	r6, #0
 8009fa2:	d145      	bne.n	800a030 <_malloc_r+0xdc>
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	d048      	beq.n	800a03a <_malloc_r+0xe6>
 8009fa8:	6823      	ldr	r3, [r4, #0]
 8009faa:	4631      	mov	r1, r6
 8009fac:	4638      	mov	r0, r7
 8009fae:	eb04 0903 	add.w	r9, r4, r3
 8009fb2:	f000 fe15 	bl	800abe0 <_sbrk_r>
 8009fb6:	4581      	cmp	r9, r0
 8009fb8:	d13f      	bne.n	800a03a <_malloc_r+0xe6>
 8009fba:	6821      	ldr	r1, [r4, #0]
 8009fbc:	1a6d      	subs	r5, r5, r1
 8009fbe:	4629      	mov	r1, r5
 8009fc0:	4638      	mov	r0, r7
 8009fc2:	f7ff ffa7 	bl	8009f14 <sbrk_aligned>
 8009fc6:	3001      	adds	r0, #1
 8009fc8:	d037      	beq.n	800a03a <_malloc_r+0xe6>
 8009fca:	6823      	ldr	r3, [r4, #0]
 8009fcc:	442b      	add	r3, r5
 8009fce:	6023      	str	r3, [r4, #0]
 8009fd0:	f8d8 3000 	ldr.w	r3, [r8]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d038      	beq.n	800a04a <_malloc_r+0xf6>
 8009fd8:	685a      	ldr	r2, [r3, #4]
 8009fda:	42a2      	cmp	r2, r4
 8009fdc:	d12b      	bne.n	800a036 <_malloc_r+0xe2>
 8009fde:	2200      	movs	r2, #0
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	e00f      	b.n	800a004 <_malloc_r+0xb0>
 8009fe4:	6822      	ldr	r2, [r4, #0]
 8009fe6:	1b52      	subs	r2, r2, r5
 8009fe8:	d41f      	bmi.n	800a02a <_malloc_r+0xd6>
 8009fea:	2a0b      	cmp	r2, #11
 8009fec:	d917      	bls.n	800a01e <_malloc_r+0xca>
 8009fee:	1961      	adds	r1, r4, r5
 8009ff0:	42a3      	cmp	r3, r4
 8009ff2:	6025      	str	r5, [r4, #0]
 8009ff4:	bf18      	it	ne
 8009ff6:	6059      	strne	r1, [r3, #4]
 8009ff8:	6863      	ldr	r3, [r4, #4]
 8009ffa:	bf08      	it	eq
 8009ffc:	f8c8 1000 	streq.w	r1, [r8]
 800a000:	5162      	str	r2, [r4, r5]
 800a002:	604b      	str	r3, [r1, #4]
 800a004:	4638      	mov	r0, r7
 800a006:	f104 060b 	add.w	r6, r4, #11
 800a00a:	f000 f8d7 	bl	800a1bc <__malloc_unlock>
 800a00e:	f026 0607 	bic.w	r6, r6, #7
 800a012:	1d23      	adds	r3, r4, #4
 800a014:	1af2      	subs	r2, r6, r3
 800a016:	d0ae      	beq.n	8009f76 <_malloc_r+0x22>
 800a018:	1b9b      	subs	r3, r3, r6
 800a01a:	50a3      	str	r3, [r4, r2]
 800a01c:	e7ab      	b.n	8009f76 <_malloc_r+0x22>
 800a01e:	42a3      	cmp	r3, r4
 800a020:	6862      	ldr	r2, [r4, #4]
 800a022:	d1dd      	bne.n	8009fe0 <_malloc_r+0x8c>
 800a024:	f8c8 2000 	str.w	r2, [r8]
 800a028:	e7ec      	b.n	800a004 <_malloc_r+0xb0>
 800a02a:	4623      	mov	r3, r4
 800a02c:	6864      	ldr	r4, [r4, #4]
 800a02e:	e7ac      	b.n	8009f8a <_malloc_r+0x36>
 800a030:	4634      	mov	r4, r6
 800a032:	6876      	ldr	r6, [r6, #4]
 800a034:	e7b4      	b.n	8009fa0 <_malloc_r+0x4c>
 800a036:	4613      	mov	r3, r2
 800a038:	e7cc      	b.n	8009fd4 <_malloc_r+0x80>
 800a03a:	230c      	movs	r3, #12
 800a03c:	603b      	str	r3, [r7, #0]
 800a03e:	4638      	mov	r0, r7
 800a040:	f000 f8bc 	bl	800a1bc <__malloc_unlock>
 800a044:	e797      	b.n	8009f76 <_malloc_r+0x22>
 800a046:	6025      	str	r5, [r4, #0]
 800a048:	e7dc      	b.n	800a004 <_malloc_r+0xb0>
 800a04a:	605b      	str	r3, [r3, #4]
 800a04c:	deff      	udf	#255	; 0xff
 800a04e:	bf00      	nop
 800a050:	20000824 	.word	0x20000824

0800a054 <__sflush_r>:
 800a054:	898a      	ldrh	r2, [r1, #12]
 800a056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a05a:	4605      	mov	r5, r0
 800a05c:	0710      	lsls	r0, r2, #28
 800a05e:	460c      	mov	r4, r1
 800a060:	d458      	bmi.n	800a114 <__sflush_r+0xc0>
 800a062:	684b      	ldr	r3, [r1, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	dc05      	bgt.n	800a074 <__sflush_r+0x20>
 800a068:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	dc02      	bgt.n	800a074 <__sflush_r+0x20>
 800a06e:	2000      	movs	r0, #0
 800a070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a076:	2e00      	cmp	r6, #0
 800a078:	d0f9      	beq.n	800a06e <__sflush_r+0x1a>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a080:	682f      	ldr	r7, [r5, #0]
 800a082:	6a21      	ldr	r1, [r4, #32]
 800a084:	602b      	str	r3, [r5, #0]
 800a086:	d032      	beq.n	800a0ee <__sflush_r+0x9a>
 800a088:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a08a:	89a3      	ldrh	r3, [r4, #12]
 800a08c:	075a      	lsls	r2, r3, #29
 800a08e:	d505      	bpl.n	800a09c <__sflush_r+0x48>
 800a090:	6863      	ldr	r3, [r4, #4]
 800a092:	1ac0      	subs	r0, r0, r3
 800a094:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a096:	b10b      	cbz	r3, 800a09c <__sflush_r+0x48>
 800a098:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a09a:	1ac0      	subs	r0, r0, r3
 800a09c:	2300      	movs	r3, #0
 800a09e:	4602      	mov	r2, r0
 800a0a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0a2:	6a21      	ldr	r1, [r4, #32]
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	47b0      	blx	r6
 800a0a8:	1c43      	adds	r3, r0, #1
 800a0aa:	89a3      	ldrh	r3, [r4, #12]
 800a0ac:	d106      	bne.n	800a0bc <__sflush_r+0x68>
 800a0ae:	6829      	ldr	r1, [r5, #0]
 800a0b0:	291d      	cmp	r1, #29
 800a0b2:	d82b      	bhi.n	800a10c <__sflush_r+0xb8>
 800a0b4:	4a29      	ldr	r2, [pc, #164]	; (800a15c <__sflush_r+0x108>)
 800a0b6:	410a      	asrs	r2, r1
 800a0b8:	07d6      	lsls	r6, r2, #31
 800a0ba:	d427      	bmi.n	800a10c <__sflush_r+0xb8>
 800a0bc:	2200      	movs	r2, #0
 800a0be:	6062      	str	r2, [r4, #4]
 800a0c0:	04d9      	lsls	r1, r3, #19
 800a0c2:	6922      	ldr	r2, [r4, #16]
 800a0c4:	6022      	str	r2, [r4, #0]
 800a0c6:	d504      	bpl.n	800a0d2 <__sflush_r+0x7e>
 800a0c8:	1c42      	adds	r2, r0, #1
 800a0ca:	d101      	bne.n	800a0d0 <__sflush_r+0x7c>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	b903      	cbnz	r3, 800a0d2 <__sflush_r+0x7e>
 800a0d0:	6560      	str	r0, [r4, #84]	; 0x54
 800a0d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d4:	602f      	str	r7, [r5, #0]
 800a0d6:	2900      	cmp	r1, #0
 800a0d8:	d0c9      	beq.n	800a06e <__sflush_r+0x1a>
 800a0da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0de:	4299      	cmp	r1, r3
 800a0e0:	d002      	beq.n	800a0e8 <__sflush_r+0x94>
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 fdd2 	bl	800ac8c <_free_r>
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	6360      	str	r0, [r4, #52]	; 0x34
 800a0ec:	e7c0      	b.n	800a070 <__sflush_r+0x1c>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	4628      	mov	r0, r5
 800a0f2:	47b0      	blx	r6
 800a0f4:	1c41      	adds	r1, r0, #1
 800a0f6:	d1c8      	bne.n	800a08a <__sflush_r+0x36>
 800a0f8:	682b      	ldr	r3, [r5, #0]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d0c5      	beq.n	800a08a <__sflush_r+0x36>
 800a0fe:	2b1d      	cmp	r3, #29
 800a100:	d001      	beq.n	800a106 <__sflush_r+0xb2>
 800a102:	2b16      	cmp	r3, #22
 800a104:	d101      	bne.n	800a10a <__sflush_r+0xb6>
 800a106:	602f      	str	r7, [r5, #0]
 800a108:	e7b1      	b.n	800a06e <__sflush_r+0x1a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a110:	81a3      	strh	r3, [r4, #12]
 800a112:	e7ad      	b.n	800a070 <__sflush_r+0x1c>
 800a114:	690f      	ldr	r7, [r1, #16]
 800a116:	2f00      	cmp	r7, #0
 800a118:	d0a9      	beq.n	800a06e <__sflush_r+0x1a>
 800a11a:	0793      	lsls	r3, r2, #30
 800a11c:	680e      	ldr	r6, [r1, #0]
 800a11e:	bf08      	it	eq
 800a120:	694b      	ldreq	r3, [r1, #20]
 800a122:	600f      	str	r7, [r1, #0]
 800a124:	bf18      	it	ne
 800a126:	2300      	movne	r3, #0
 800a128:	eba6 0807 	sub.w	r8, r6, r7
 800a12c:	608b      	str	r3, [r1, #8]
 800a12e:	f1b8 0f00 	cmp.w	r8, #0
 800a132:	dd9c      	ble.n	800a06e <__sflush_r+0x1a>
 800a134:	6a21      	ldr	r1, [r4, #32]
 800a136:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a138:	4643      	mov	r3, r8
 800a13a:	463a      	mov	r2, r7
 800a13c:	4628      	mov	r0, r5
 800a13e:	47b0      	blx	r6
 800a140:	2800      	cmp	r0, #0
 800a142:	dc06      	bgt.n	800a152 <__sflush_r+0xfe>
 800a144:	89a3      	ldrh	r3, [r4, #12]
 800a146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a150:	e78e      	b.n	800a070 <__sflush_r+0x1c>
 800a152:	4407      	add	r7, r0
 800a154:	eba8 0800 	sub.w	r8, r8, r0
 800a158:	e7e9      	b.n	800a12e <__sflush_r+0xda>
 800a15a:	bf00      	nop
 800a15c:	dfbffffe 	.word	0xdfbffffe

0800a160 <_fflush_r>:
 800a160:	b538      	push	{r3, r4, r5, lr}
 800a162:	690b      	ldr	r3, [r1, #16]
 800a164:	4605      	mov	r5, r0
 800a166:	460c      	mov	r4, r1
 800a168:	b913      	cbnz	r3, 800a170 <_fflush_r+0x10>
 800a16a:	2500      	movs	r5, #0
 800a16c:	4628      	mov	r0, r5
 800a16e:	bd38      	pop	{r3, r4, r5, pc}
 800a170:	b118      	cbz	r0, 800a17a <_fflush_r+0x1a>
 800a172:	6a03      	ldr	r3, [r0, #32]
 800a174:	b90b      	cbnz	r3, 800a17a <_fflush_r+0x1a>
 800a176:	f7fe fe75 	bl	8008e64 <__sinit>
 800a17a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d0f3      	beq.n	800a16a <_fflush_r+0xa>
 800a182:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a184:	07d0      	lsls	r0, r2, #31
 800a186:	d404      	bmi.n	800a192 <_fflush_r+0x32>
 800a188:	0599      	lsls	r1, r3, #22
 800a18a:	d402      	bmi.n	800a192 <_fflush_r+0x32>
 800a18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a18e:	f7fe fee8 	bl	8008f62 <__retarget_lock_acquire_recursive>
 800a192:	4628      	mov	r0, r5
 800a194:	4621      	mov	r1, r4
 800a196:	f7ff ff5d 	bl	800a054 <__sflush_r>
 800a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a19c:	07da      	lsls	r2, r3, #31
 800a19e:	4605      	mov	r5, r0
 800a1a0:	d4e4      	bmi.n	800a16c <_fflush_r+0xc>
 800a1a2:	89a3      	ldrh	r3, [r4, #12]
 800a1a4:	059b      	lsls	r3, r3, #22
 800a1a6:	d4e1      	bmi.n	800a16c <_fflush_r+0xc>
 800a1a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1aa:	f7fe fedb 	bl	8008f64 <__retarget_lock_release_recursive>
 800a1ae:	e7dd      	b.n	800a16c <_fflush_r+0xc>

0800a1b0 <__malloc_lock>:
 800a1b0:	4801      	ldr	r0, [pc, #4]	; (800a1b8 <__malloc_lock+0x8>)
 800a1b2:	f7fe bed6 	b.w	8008f62 <__retarget_lock_acquire_recursive>
 800a1b6:	bf00      	nop
 800a1b8:	20000820 	.word	0x20000820

0800a1bc <__malloc_unlock>:
 800a1bc:	4801      	ldr	r0, [pc, #4]	; (800a1c4 <__malloc_unlock+0x8>)
 800a1be:	f7fe bed1 	b.w	8008f64 <__retarget_lock_release_recursive>
 800a1c2:	bf00      	nop
 800a1c4:	20000820 	.word	0x20000820

0800a1c8 <_Balloc>:
 800a1c8:	b570      	push	{r4, r5, r6, lr}
 800a1ca:	69c6      	ldr	r6, [r0, #28]
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	b976      	cbnz	r6, 800a1f0 <_Balloc+0x28>
 800a1d2:	2010      	movs	r0, #16
 800a1d4:	f7ff fe96 	bl	8009f04 <malloc>
 800a1d8:	4602      	mov	r2, r0
 800a1da:	61e0      	str	r0, [r4, #28]
 800a1dc:	b920      	cbnz	r0, 800a1e8 <_Balloc+0x20>
 800a1de:	4b18      	ldr	r3, [pc, #96]	; (800a240 <_Balloc+0x78>)
 800a1e0:	4818      	ldr	r0, [pc, #96]	; (800a244 <_Balloc+0x7c>)
 800a1e2:	216b      	movs	r1, #107	; 0x6b
 800a1e4:	f000 fd1e 	bl	800ac24 <__assert_func>
 800a1e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a1ec:	6006      	str	r6, [r0, #0]
 800a1ee:	60c6      	str	r6, [r0, #12]
 800a1f0:	69e6      	ldr	r6, [r4, #28]
 800a1f2:	68f3      	ldr	r3, [r6, #12]
 800a1f4:	b183      	cbz	r3, 800a218 <_Balloc+0x50>
 800a1f6:	69e3      	ldr	r3, [r4, #28]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a1fe:	b9b8      	cbnz	r0, 800a230 <_Balloc+0x68>
 800a200:	2101      	movs	r1, #1
 800a202:	fa01 f605 	lsl.w	r6, r1, r5
 800a206:	1d72      	adds	r2, r6, #5
 800a208:	0092      	lsls	r2, r2, #2
 800a20a:	4620      	mov	r0, r4
 800a20c:	f000 fd28 	bl	800ac60 <_calloc_r>
 800a210:	b160      	cbz	r0, 800a22c <_Balloc+0x64>
 800a212:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a216:	e00e      	b.n	800a236 <_Balloc+0x6e>
 800a218:	2221      	movs	r2, #33	; 0x21
 800a21a:	2104      	movs	r1, #4
 800a21c:	4620      	mov	r0, r4
 800a21e:	f000 fd1f 	bl	800ac60 <_calloc_r>
 800a222:	69e3      	ldr	r3, [r4, #28]
 800a224:	60f0      	str	r0, [r6, #12]
 800a226:	68db      	ldr	r3, [r3, #12]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d1e4      	bne.n	800a1f6 <_Balloc+0x2e>
 800a22c:	2000      	movs	r0, #0
 800a22e:	bd70      	pop	{r4, r5, r6, pc}
 800a230:	6802      	ldr	r2, [r0, #0]
 800a232:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a236:	2300      	movs	r3, #0
 800a238:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a23c:	e7f7      	b.n	800a22e <_Balloc+0x66>
 800a23e:	bf00      	nop
 800a240:	0800bfd5 	.word	0x0800bfd5
 800a244:	0800c066 	.word	0x0800c066

0800a248 <_Bfree>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	69c6      	ldr	r6, [r0, #28]
 800a24c:	4605      	mov	r5, r0
 800a24e:	460c      	mov	r4, r1
 800a250:	b976      	cbnz	r6, 800a270 <_Bfree+0x28>
 800a252:	2010      	movs	r0, #16
 800a254:	f7ff fe56 	bl	8009f04 <malloc>
 800a258:	4602      	mov	r2, r0
 800a25a:	61e8      	str	r0, [r5, #28]
 800a25c:	b920      	cbnz	r0, 800a268 <_Bfree+0x20>
 800a25e:	4b09      	ldr	r3, [pc, #36]	; (800a284 <_Bfree+0x3c>)
 800a260:	4809      	ldr	r0, [pc, #36]	; (800a288 <_Bfree+0x40>)
 800a262:	218f      	movs	r1, #143	; 0x8f
 800a264:	f000 fcde 	bl	800ac24 <__assert_func>
 800a268:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a26c:	6006      	str	r6, [r0, #0]
 800a26e:	60c6      	str	r6, [r0, #12]
 800a270:	b13c      	cbz	r4, 800a282 <_Bfree+0x3a>
 800a272:	69eb      	ldr	r3, [r5, #28]
 800a274:	6862      	ldr	r2, [r4, #4]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a27c:	6021      	str	r1, [r4, #0]
 800a27e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a282:	bd70      	pop	{r4, r5, r6, pc}
 800a284:	0800bfd5 	.word	0x0800bfd5
 800a288:	0800c066 	.word	0x0800c066

0800a28c <__multadd>:
 800a28c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a290:	690d      	ldr	r5, [r1, #16]
 800a292:	4607      	mov	r7, r0
 800a294:	460c      	mov	r4, r1
 800a296:	461e      	mov	r6, r3
 800a298:	f101 0c14 	add.w	ip, r1, #20
 800a29c:	2000      	movs	r0, #0
 800a29e:	f8dc 3000 	ldr.w	r3, [ip]
 800a2a2:	b299      	uxth	r1, r3
 800a2a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a2a8:	0c1e      	lsrs	r6, r3, #16
 800a2aa:	0c0b      	lsrs	r3, r1, #16
 800a2ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a2b0:	b289      	uxth	r1, r1
 800a2b2:	3001      	adds	r0, #1
 800a2b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a2b8:	4285      	cmp	r5, r0
 800a2ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a2be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a2c2:	dcec      	bgt.n	800a29e <__multadd+0x12>
 800a2c4:	b30e      	cbz	r6, 800a30a <__multadd+0x7e>
 800a2c6:	68a3      	ldr	r3, [r4, #8]
 800a2c8:	42ab      	cmp	r3, r5
 800a2ca:	dc19      	bgt.n	800a300 <__multadd+0x74>
 800a2cc:	6861      	ldr	r1, [r4, #4]
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	3101      	adds	r1, #1
 800a2d2:	f7ff ff79 	bl	800a1c8 <_Balloc>
 800a2d6:	4680      	mov	r8, r0
 800a2d8:	b928      	cbnz	r0, 800a2e6 <__multadd+0x5a>
 800a2da:	4602      	mov	r2, r0
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	; (800a310 <__multadd+0x84>)
 800a2de:	480d      	ldr	r0, [pc, #52]	; (800a314 <__multadd+0x88>)
 800a2e0:	21ba      	movs	r1, #186	; 0xba
 800a2e2:	f000 fc9f 	bl	800ac24 <__assert_func>
 800a2e6:	6922      	ldr	r2, [r4, #16]
 800a2e8:	3202      	adds	r2, #2
 800a2ea:	f104 010c 	add.w	r1, r4, #12
 800a2ee:	0092      	lsls	r2, r2, #2
 800a2f0:	300c      	adds	r0, #12
 800a2f2:	f7fe fe38 	bl	8008f66 <memcpy>
 800a2f6:	4621      	mov	r1, r4
 800a2f8:	4638      	mov	r0, r7
 800a2fa:	f7ff ffa5 	bl	800a248 <_Bfree>
 800a2fe:	4644      	mov	r4, r8
 800a300:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a304:	3501      	adds	r5, #1
 800a306:	615e      	str	r6, [r3, #20]
 800a308:	6125      	str	r5, [r4, #16]
 800a30a:	4620      	mov	r0, r4
 800a30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a310:	0800c044 	.word	0x0800c044
 800a314:	0800c066 	.word	0x0800c066

0800a318 <__hi0bits>:
 800a318:	0c03      	lsrs	r3, r0, #16
 800a31a:	041b      	lsls	r3, r3, #16
 800a31c:	b9d3      	cbnz	r3, 800a354 <__hi0bits+0x3c>
 800a31e:	0400      	lsls	r0, r0, #16
 800a320:	2310      	movs	r3, #16
 800a322:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a326:	bf04      	itt	eq
 800a328:	0200      	lsleq	r0, r0, #8
 800a32a:	3308      	addeq	r3, #8
 800a32c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a330:	bf04      	itt	eq
 800a332:	0100      	lsleq	r0, r0, #4
 800a334:	3304      	addeq	r3, #4
 800a336:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a33a:	bf04      	itt	eq
 800a33c:	0080      	lsleq	r0, r0, #2
 800a33e:	3302      	addeq	r3, #2
 800a340:	2800      	cmp	r0, #0
 800a342:	db05      	blt.n	800a350 <__hi0bits+0x38>
 800a344:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a348:	f103 0301 	add.w	r3, r3, #1
 800a34c:	bf08      	it	eq
 800a34e:	2320      	moveq	r3, #32
 800a350:	4618      	mov	r0, r3
 800a352:	4770      	bx	lr
 800a354:	2300      	movs	r3, #0
 800a356:	e7e4      	b.n	800a322 <__hi0bits+0xa>

0800a358 <__lo0bits>:
 800a358:	6803      	ldr	r3, [r0, #0]
 800a35a:	f013 0207 	ands.w	r2, r3, #7
 800a35e:	d00c      	beq.n	800a37a <__lo0bits+0x22>
 800a360:	07d9      	lsls	r1, r3, #31
 800a362:	d422      	bmi.n	800a3aa <__lo0bits+0x52>
 800a364:	079a      	lsls	r2, r3, #30
 800a366:	bf49      	itett	mi
 800a368:	085b      	lsrmi	r3, r3, #1
 800a36a:	089b      	lsrpl	r3, r3, #2
 800a36c:	6003      	strmi	r3, [r0, #0]
 800a36e:	2201      	movmi	r2, #1
 800a370:	bf5c      	itt	pl
 800a372:	6003      	strpl	r3, [r0, #0]
 800a374:	2202      	movpl	r2, #2
 800a376:	4610      	mov	r0, r2
 800a378:	4770      	bx	lr
 800a37a:	b299      	uxth	r1, r3
 800a37c:	b909      	cbnz	r1, 800a382 <__lo0bits+0x2a>
 800a37e:	0c1b      	lsrs	r3, r3, #16
 800a380:	2210      	movs	r2, #16
 800a382:	b2d9      	uxtb	r1, r3
 800a384:	b909      	cbnz	r1, 800a38a <__lo0bits+0x32>
 800a386:	3208      	adds	r2, #8
 800a388:	0a1b      	lsrs	r3, r3, #8
 800a38a:	0719      	lsls	r1, r3, #28
 800a38c:	bf04      	itt	eq
 800a38e:	091b      	lsreq	r3, r3, #4
 800a390:	3204      	addeq	r2, #4
 800a392:	0799      	lsls	r1, r3, #30
 800a394:	bf04      	itt	eq
 800a396:	089b      	lsreq	r3, r3, #2
 800a398:	3202      	addeq	r2, #2
 800a39a:	07d9      	lsls	r1, r3, #31
 800a39c:	d403      	bmi.n	800a3a6 <__lo0bits+0x4e>
 800a39e:	085b      	lsrs	r3, r3, #1
 800a3a0:	f102 0201 	add.w	r2, r2, #1
 800a3a4:	d003      	beq.n	800a3ae <__lo0bits+0x56>
 800a3a6:	6003      	str	r3, [r0, #0]
 800a3a8:	e7e5      	b.n	800a376 <__lo0bits+0x1e>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	e7e3      	b.n	800a376 <__lo0bits+0x1e>
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	e7e1      	b.n	800a376 <__lo0bits+0x1e>
	...

0800a3b4 <__i2b>:
 800a3b4:	b510      	push	{r4, lr}
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	f7ff ff05 	bl	800a1c8 <_Balloc>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	b928      	cbnz	r0, 800a3ce <__i2b+0x1a>
 800a3c2:	4b05      	ldr	r3, [pc, #20]	; (800a3d8 <__i2b+0x24>)
 800a3c4:	4805      	ldr	r0, [pc, #20]	; (800a3dc <__i2b+0x28>)
 800a3c6:	f240 1145 	movw	r1, #325	; 0x145
 800a3ca:	f000 fc2b 	bl	800ac24 <__assert_func>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	6144      	str	r4, [r0, #20]
 800a3d2:	6103      	str	r3, [r0, #16]
 800a3d4:	bd10      	pop	{r4, pc}
 800a3d6:	bf00      	nop
 800a3d8:	0800c044 	.word	0x0800c044
 800a3dc:	0800c066 	.word	0x0800c066

0800a3e0 <__multiply>:
 800a3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e4:	4691      	mov	r9, r2
 800a3e6:	690a      	ldr	r2, [r1, #16]
 800a3e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3ec:	429a      	cmp	r2, r3
 800a3ee:	bfb8      	it	lt
 800a3f0:	460b      	movlt	r3, r1
 800a3f2:	460c      	mov	r4, r1
 800a3f4:	bfbc      	itt	lt
 800a3f6:	464c      	movlt	r4, r9
 800a3f8:	4699      	movlt	r9, r3
 800a3fa:	6927      	ldr	r7, [r4, #16]
 800a3fc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a400:	68a3      	ldr	r3, [r4, #8]
 800a402:	6861      	ldr	r1, [r4, #4]
 800a404:	eb07 060a 	add.w	r6, r7, sl
 800a408:	42b3      	cmp	r3, r6
 800a40a:	b085      	sub	sp, #20
 800a40c:	bfb8      	it	lt
 800a40e:	3101      	addlt	r1, #1
 800a410:	f7ff feda 	bl	800a1c8 <_Balloc>
 800a414:	b930      	cbnz	r0, 800a424 <__multiply+0x44>
 800a416:	4602      	mov	r2, r0
 800a418:	4b44      	ldr	r3, [pc, #272]	; (800a52c <__multiply+0x14c>)
 800a41a:	4845      	ldr	r0, [pc, #276]	; (800a530 <__multiply+0x150>)
 800a41c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a420:	f000 fc00 	bl	800ac24 <__assert_func>
 800a424:	f100 0514 	add.w	r5, r0, #20
 800a428:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a42c:	462b      	mov	r3, r5
 800a42e:	2200      	movs	r2, #0
 800a430:	4543      	cmp	r3, r8
 800a432:	d321      	bcc.n	800a478 <__multiply+0x98>
 800a434:	f104 0314 	add.w	r3, r4, #20
 800a438:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a43c:	f109 0314 	add.w	r3, r9, #20
 800a440:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a444:	9202      	str	r2, [sp, #8]
 800a446:	1b3a      	subs	r2, r7, r4
 800a448:	3a15      	subs	r2, #21
 800a44a:	f022 0203 	bic.w	r2, r2, #3
 800a44e:	3204      	adds	r2, #4
 800a450:	f104 0115 	add.w	r1, r4, #21
 800a454:	428f      	cmp	r7, r1
 800a456:	bf38      	it	cc
 800a458:	2204      	movcc	r2, #4
 800a45a:	9201      	str	r2, [sp, #4]
 800a45c:	9a02      	ldr	r2, [sp, #8]
 800a45e:	9303      	str	r3, [sp, #12]
 800a460:	429a      	cmp	r2, r3
 800a462:	d80c      	bhi.n	800a47e <__multiply+0x9e>
 800a464:	2e00      	cmp	r6, #0
 800a466:	dd03      	ble.n	800a470 <__multiply+0x90>
 800a468:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d05b      	beq.n	800a528 <__multiply+0x148>
 800a470:	6106      	str	r6, [r0, #16]
 800a472:	b005      	add	sp, #20
 800a474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a478:	f843 2b04 	str.w	r2, [r3], #4
 800a47c:	e7d8      	b.n	800a430 <__multiply+0x50>
 800a47e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a482:	f1ba 0f00 	cmp.w	sl, #0
 800a486:	d024      	beq.n	800a4d2 <__multiply+0xf2>
 800a488:	f104 0e14 	add.w	lr, r4, #20
 800a48c:	46a9      	mov	r9, r5
 800a48e:	f04f 0c00 	mov.w	ip, #0
 800a492:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a496:	f8d9 1000 	ldr.w	r1, [r9]
 800a49a:	fa1f fb82 	uxth.w	fp, r2
 800a49e:	b289      	uxth	r1, r1
 800a4a0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a4a4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a4a8:	f8d9 2000 	ldr.w	r2, [r9]
 800a4ac:	4461      	add	r1, ip
 800a4ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4b2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a4b6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a4ba:	b289      	uxth	r1, r1
 800a4bc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a4c0:	4577      	cmp	r7, lr
 800a4c2:	f849 1b04 	str.w	r1, [r9], #4
 800a4c6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a4ca:	d8e2      	bhi.n	800a492 <__multiply+0xb2>
 800a4cc:	9a01      	ldr	r2, [sp, #4]
 800a4ce:	f845 c002 	str.w	ip, [r5, r2]
 800a4d2:	9a03      	ldr	r2, [sp, #12]
 800a4d4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a4d8:	3304      	adds	r3, #4
 800a4da:	f1b9 0f00 	cmp.w	r9, #0
 800a4de:	d021      	beq.n	800a524 <__multiply+0x144>
 800a4e0:	6829      	ldr	r1, [r5, #0]
 800a4e2:	f104 0c14 	add.w	ip, r4, #20
 800a4e6:	46ae      	mov	lr, r5
 800a4e8:	f04f 0a00 	mov.w	sl, #0
 800a4ec:	f8bc b000 	ldrh.w	fp, [ip]
 800a4f0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4f4:	fb09 220b 	mla	r2, r9, fp, r2
 800a4f8:	4452      	add	r2, sl
 800a4fa:	b289      	uxth	r1, r1
 800a4fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a500:	f84e 1b04 	str.w	r1, [lr], #4
 800a504:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a508:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a50c:	f8be 1000 	ldrh.w	r1, [lr]
 800a510:	fb09 110a 	mla	r1, r9, sl, r1
 800a514:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a518:	4567      	cmp	r7, ip
 800a51a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a51e:	d8e5      	bhi.n	800a4ec <__multiply+0x10c>
 800a520:	9a01      	ldr	r2, [sp, #4]
 800a522:	50a9      	str	r1, [r5, r2]
 800a524:	3504      	adds	r5, #4
 800a526:	e799      	b.n	800a45c <__multiply+0x7c>
 800a528:	3e01      	subs	r6, #1
 800a52a:	e79b      	b.n	800a464 <__multiply+0x84>
 800a52c:	0800c044 	.word	0x0800c044
 800a530:	0800c066 	.word	0x0800c066

0800a534 <__pow5mult>:
 800a534:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a538:	4615      	mov	r5, r2
 800a53a:	f012 0203 	ands.w	r2, r2, #3
 800a53e:	4606      	mov	r6, r0
 800a540:	460f      	mov	r7, r1
 800a542:	d007      	beq.n	800a554 <__pow5mult+0x20>
 800a544:	4c25      	ldr	r4, [pc, #148]	; (800a5dc <__pow5mult+0xa8>)
 800a546:	3a01      	subs	r2, #1
 800a548:	2300      	movs	r3, #0
 800a54a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a54e:	f7ff fe9d 	bl	800a28c <__multadd>
 800a552:	4607      	mov	r7, r0
 800a554:	10ad      	asrs	r5, r5, #2
 800a556:	d03d      	beq.n	800a5d4 <__pow5mult+0xa0>
 800a558:	69f4      	ldr	r4, [r6, #28]
 800a55a:	b97c      	cbnz	r4, 800a57c <__pow5mult+0x48>
 800a55c:	2010      	movs	r0, #16
 800a55e:	f7ff fcd1 	bl	8009f04 <malloc>
 800a562:	4602      	mov	r2, r0
 800a564:	61f0      	str	r0, [r6, #28]
 800a566:	b928      	cbnz	r0, 800a574 <__pow5mult+0x40>
 800a568:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <__pow5mult+0xac>)
 800a56a:	481e      	ldr	r0, [pc, #120]	; (800a5e4 <__pow5mult+0xb0>)
 800a56c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a570:	f000 fb58 	bl	800ac24 <__assert_func>
 800a574:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a578:	6004      	str	r4, [r0, #0]
 800a57a:	60c4      	str	r4, [r0, #12]
 800a57c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a580:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a584:	b94c      	cbnz	r4, 800a59a <__pow5mult+0x66>
 800a586:	f240 2171 	movw	r1, #625	; 0x271
 800a58a:	4630      	mov	r0, r6
 800a58c:	f7ff ff12 	bl	800a3b4 <__i2b>
 800a590:	2300      	movs	r3, #0
 800a592:	f8c8 0008 	str.w	r0, [r8, #8]
 800a596:	4604      	mov	r4, r0
 800a598:	6003      	str	r3, [r0, #0]
 800a59a:	f04f 0900 	mov.w	r9, #0
 800a59e:	07eb      	lsls	r3, r5, #31
 800a5a0:	d50a      	bpl.n	800a5b8 <__pow5mult+0x84>
 800a5a2:	4639      	mov	r1, r7
 800a5a4:	4622      	mov	r2, r4
 800a5a6:	4630      	mov	r0, r6
 800a5a8:	f7ff ff1a 	bl	800a3e0 <__multiply>
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	4680      	mov	r8, r0
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	f7ff fe49 	bl	800a248 <_Bfree>
 800a5b6:	4647      	mov	r7, r8
 800a5b8:	106d      	asrs	r5, r5, #1
 800a5ba:	d00b      	beq.n	800a5d4 <__pow5mult+0xa0>
 800a5bc:	6820      	ldr	r0, [r4, #0]
 800a5be:	b938      	cbnz	r0, 800a5d0 <__pow5mult+0x9c>
 800a5c0:	4622      	mov	r2, r4
 800a5c2:	4621      	mov	r1, r4
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7ff ff0b 	bl	800a3e0 <__multiply>
 800a5ca:	6020      	str	r0, [r4, #0]
 800a5cc:	f8c0 9000 	str.w	r9, [r0]
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	e7e4      	b.n	800a59e <__pow5mult+0x6a>
 800a5d4:	4638      	mov	r0, r7
 800a5d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5da:	bf00      	nop
 800a5dc:	0800c1b0 	.word	0x0800c1b0
 800a5e0:	0800bfd5 	.word	0x0800bfd5
 800a5e4:	0800c066 	.word	0x0800c066

0800a5e8 <__lshift>:
 800a5e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5ec:	460c      	mov	r4, r1
 800a5ee:	6849      	ldr	r1, [r1, #4]
 800a5f0:	6923      	ldr	r3, [r4, #16]
 800a5f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5f6:	68a3      	ldr	r3, [r4, #8]
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	4691      	mov	r9, r2
 800a5fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a600:	f108 0601 	add.w	r6, r8, #1
 800a604:	42b3      	cmp	r3, r6
 800a606:	db0b      	blt.n	800a620 <__lshift+0x38>
 800a608:	4638      	mov	r0, r7
 800a60a:	f7ff fddd 	bl	800a1c8 <_Balloc>
 800a60e:	4605      	mov	r5, r0
 800a610:	b948      	cbnz	r0, 800a626 <__lshift+0x3e>
 800a612:	4602      	mov	r2, r0
 800a614:	4b28      	ldr	r3, [pc, #160]	; (800a6b8 <__lshift+0xd0>)
 800a616:	4829      	ldr	r0, [pc, #164]	; (800a6bc <__lshift+0xd4>)
 800a618:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a61c:	f000 fb02 	bl	800ac24 <__assert_func>
 800a620:	3101      	adds	r1, #1
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	e7ee      	b.n	800a604 <__lshift+0x1c>
 800a626:	2300      	movs	r3, #0
 800a628:	f100 0114 	add.w	r1, r0, #20
 800a62c:	f100 0210 	add.w	r2, r0, #16
 800a630:	4618      	mov	r0, r3
 800a632:	4553      	cmp	r3, sl
 800a634:	db33      	blt.n	800a69e <__lshift+0xb6>
 800a636:	6920      	ldr	r0, [r4, #16]
 800a638:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a63c:	f104 0314 	add.w	r3, r4, #20
 800a640:	f019 091f 	ands.w	r9, r9, #31
 800a644:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a648:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a64c:	d02b      	beq.n	800a6a6 <__lshift+0xbe>
 800a64e:	f1c9 0e20 	rsb	lr, r9, #32
 800a652:	468a      	mov	sl, r1
 800a654:	2200      	movs	r2, #0
 800a656:	6818      	ldr	r0, [r3, #0]
 800a658:	fa00 f009 	lsl.w	r0, r0, r9
 800a65c:	4310      	orrs	r0, r2
 800a65e:	f84a 0b04 	str.w	r0, [sl], #4
 800a662:	f853 2b04 	ldr.w	r2, [r3], #4
 800a666:	459c      	cmp	ip, r3
 800a668:	fa22 f20e 	lsr.w	r2, r2, lr
 800a66c:	d8f3      	bhi.n	800a656 <__lshift+0x6e>
 800a66e:	ebac 0304 	sub.w	r3, ip, r4
 800a672:	3b15      	subs	r3, #21
 800a674:	f023 0303 	bic.w	r3, r3, #3
 800a678:	3304      	adds	r3, #4
 800a67a:	f104 0015 	add.w	r0, r4, #21
 800a67e:	4584      	cmp	ip, r0
 800a680:	bf38      	it	cc
 800a682:	2304      	movcc	r3, #4
 800a684:	50ca      	str	r2, [r1, r3]
 800a686:	b10a      	cbz	r2, 800a68c <__lshift+0xa4>
 800a688:	f108 0602 	add.w	r6, r8, #2
 800a68c:	3e01      	subs	r6, #1
 800a68e:	4638      	mov	r0, r7
 800a690:	612e      	str	r6, [r5, #16]
 800a692:	4621      	mov	r1, r4
 800a694:	f7ff fdd8 	bl	800a248 <_Bfree>
 800a698:	4628      	mov	r0, r5
 800a69a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a69e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	e7c5      	b.n	800a632 <__lshift+0x4a>
 800a6a6:	3904      	subs	r1, #4
 800a6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800a6b0:	459c      	cmp	ip, r3
 800a6b2:	d8f9      	bhi.n	800a6a8 <__lshift+0xc0>
 800a6b4:	e7ea      	b.n	800a68c <__lshift+0xa4>
 800a6b6:	bf00      	nop
 800a6b8:	0800c044 	.word	0x0800c044
 800a6bc:	0800c066 	.word	0x0800c066

0800a6c0 <__mcmp>:
 800a6c0:	b530      	push	{r4, r5, lr}
 800a6c2:	6902      	ldr	r2, [r0, #16]
 800a6c4:	690c      	ldr	r4, [r1, #16]
 800a6c6:	1b12      	subs	r2, r2, r4
 800a6c8:	d10e      	bne.n	800a6e8 <__mcmp+0x28>
 800a6ca:	f100 0314 	add.w	r3, r0, #20
 800a6ce:	3114      	adds	r1, #20
 800a6d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6e0:	42a5      	cmp	r5, r4
 800a6e2:	d003      	beq.n	800a6ec <__mcmp+0x2c>
 800a6e4:	d305      	bcc.n	800a6f2 <__mcmp+0x32>
 800a6e6:	2201      	movs	r2, #1
 800a6e8:	4610      	mov	r0, r2
 800a6ea:	bd30      	pop	{r4, r5, pc}
 800a6ec:	4283      	cmp	r3, r0
 800a6ee:	d3f3      	bcc.n	800a6d8 <__mcmp+0x18>
 800a6f0:	e7fa      	b.n	800a6e8 <__mcmp+0x28>
 800a6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a6f6:	e7f7      	b.n	800a6e8 <__mcmp+0x28>

0800a6f8 <__mdiff>:
 800a6f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	4606      	mov	r6, r0
 800a700:	4611      	mov	r1, r2
 800a702:	4620      	mov	r0, r4
 800a704:	4690      	mov	r8, r2
 800a706:	f7ff ffdb 	bl	800a6c0 <__mcmp>
 800a70a:	1e05      	subs	r5, r0, #0
 800a70c:	d110      	bne.n	800a730 <__mdiff+0x38>
 800a70e:	4629      	mov	r1, r5
 800a710:	4630      	mov	r0, r6
 800a712:	f7ff fd59 	bl	800a1c8 <_Balloc>
 800a716:	b930      	cbnz	r0, 800a726 <__mdiff+0x2e>
 800a718:	4b3a      	ldr	r3, [pc, #232]	; (800a804 <__mdiff+0x10c>)
 800a71a:	4602      	mov	r2, r0
 800a71c:	f240 2137 	movw	r1, #567	; 0x237
 800a720:	4839      	ldr	r0, [pc, #228]	; (800a808 <__mdiff+0x110>)
 800a722:	f000 fa7f 	bl	800ac24 <__assert_func>
 800a726:	2301      	movs	r3, #1
 800a728:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a72c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a730:	bfa4      	itt	ge
 800a732:	4643      	movge	r3, r8
 800a734:	46a0      	movge	r8, r4
 800a736:	4630      	mov	r0, r6
 800a738:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a73c:	bfa6      	itte	ge
 800a73e:	461c      	movge	r4, r3
 800a740:	2500      	movge	r5, #0
 800a742:	2501      	movlt	r5, #1
 800a744:	f7ff fd40 	bl	800a1c8 <_Balloc>
 800a748:	b920      	cbnz	r0, 800a754 <__mdiff+0x5c>
 800a74a:	4b2e      	ldr	r3, [pc, #184]	; (800a804 <__mdiff+0x10c>)
 800a74c:	4602      	mov	r2, r0
 800a74e:	f240 2145 	movw	r1, #581	; 0x245
 800a752:	e7e5      	b.n	800a720 <__mdiff+0x28>
 800a754:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a758:	6926      	ldr	r6, [r4, #16]
 800a75a:	60c5      	str	r5, [r0, #12]
 800a75c:	f104 0914 	add.w	r9, r4, #20
 800a760:	f108 0514 	add.w	r5, r8, #20
 800a764:	f100 0e14 	add.w	lr, r0, #20
 800a768:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a76c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a770:	f108 0210 	add.w	r2, r8, #16
 800a774:	46f2      	mov	sl, lr
 800a776:	2100      	movs	r1, #0
 800a778:	f859 3b04 	ldr.w	r3, [r9], #4
 800a77c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a780:	fa11 f88b 	uxtah	r8, r1, fp
 800a784:	b299      	uxth	r1, r3
 800a786:	0c1b      	lsrs	r3, r3, #16
 800a788:	eba8 0801 	sub.w	r8, r8, r1
 800a78c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a790:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a794:	fa1f f888 	uxth.w	r8, r8
 800a798:	1419      	asrs	r1, r3, #16
 800a79a:	454e      	cmp	r6, r9
 800a79c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a7a0:	f84a 3b04 	str.w	r3, [sl], #4
 800a7a4:	d8e8      	bhi.n	800a778 <__mdiff+0x80>
 800a7a6:	1b33      	subs	r3, r6, r4
 800a7a8:	3b15      	subs	r3, #21
 800a7aa:	f023 0303 	bic.w	r3, r3, #3
 800a7ae:	3304      	adds	r3, #4
 800a7b0:	3415      	adds	r4, #21
 800a7b2:	42a6      	cmp	r6, r4
 800a7b4:	bf38      	it	cc
 800a7b6:	2304      	movcc	r3, #4
 800a7b8:	441d      	add	r5, r3
 800a7ba:	4473      	add	r3, lr
 800a7bc:	469e      	mov	lr, r3
 800a7be:	462e      	mov	r6, r5
 800a7c0:	4566      	cmp	r6, ip
 800a7c2:	d30e      	bcc.n	800a7e2 <__mdiff+0xea>
 800a7c4:	f10c 0203 	add.w	r2, ip, #3
 800a7c8:	1b52      	subs	r2, r2, r5
 800a7ca:	f022 0203 	bic.w	r2, r2, #3
 800a7ce:	3d03      	subs	r5, #3
 800a7d0:	45ac      	cmp	ip, r5
 800a7d2:	bf38      	it	cc
 800a7d4:	2200      	movcc	r2, #0
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a7dc:	b17a      	cbz	r2, 800a7fe <__mdiff+0x106>
 800a7de:	6107      	str	r7, [r0, #16]
 800a7e0:	e7a4      	b.n	800a72c <__mdiff+0x34>
 800a7e2:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7e6:	fa11 f288 	uxtah	r2, r1, r8
 800a7ea:	1414      	asrs	r4, r2, #16
 800a7ec:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7f6:	f84e 2b04 	str.w	r2, [lr], #4
 800a7fa:	1421      	asrs	r1, r4, #16
 800a7fc:	e7e0      	b.n	800a7c0 <__mdiff+0xc8>
 800a7fe:	3f01      	subs	r7, #1
 800a800:	e7ea      	b.n	800a7d8 <__mdiff+0xe0>
 800a802:	bf00      	nop
 800a804:	0800c044 	.word	0x0800c044
 800a808:	0800c066 	.word	0x0800c066

0800a80c <__d2b>:
 800a80c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a810:	460f      	mov	r7, r1
 800a812:	2101      	movs	r1, #1
 800a814:	ec59 8b10 	vmov	r8, r9, d0
 800a818:	4616      	mov	r6, r2
 800a81a:	f7ff fcd5 	bl	800a1c8 <_Balloc>
 800a81e:	4604      	mov	r4, r0
 800a820:	b930      	cbnz	r0, 800a830 <__d2b+0x24>
 800a822:	4602      	mov	r2, r0
 800a824:	4b24      	ldr	r3, [pc, #144]	; (800a8b8 <__d2b+0xac>)
 800a826:	4825      	ldr	r0, [pc, #148]	; (800a8bc <__d2b+0xb0>)
 800a828:	f240 310f 	movw	r1, #783	; 0x30f
 800a82c:	f000 f9fa 	bl	800ac24 <__assert_func>
 800a830:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a834:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a838:	bb2d      	cbnz	r5, 800a886 <__d2b+0x7a>
 800a83a:	9301      	str	r3, [sp, #4]
 800a83c:	f1b8 0300 	subs.w	r3, r8, #0
 800a840:	d026      	beq.n	800a890 <__d2b+0x84>
 800a842:	4668      	mov	r0, sp
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	f7ff fd87 	bl	800a358 <__lo0bits>
 800a84a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a84e:	b1e8      	cbz	r0, 800a88c <__d2b+0x80>
 800a850:	f1c0 0320 	rsb	r3, r0, #32
 800a854:	fa02 f303 	lsl.w	r3, r2, r3
 800a858:	430b      	orrs	r3, r1
 800a85a:	40c2      	lsrs	r2, r0
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	9201      	str	r2, [sp, #4]
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	61a3      	str	r3, [r4, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	bf14      	ite	ne
 800a868:	2202      	movne	r2, #2
 800a86a:	2201      	moveq	r2, #1
 800a86c:	6122      	str	r2, [r4, #16]
 800a86e:	b1bd      	cbz	r5, 800a8a0 <__d2b+0x94>
 800a870:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a874:	4405      	add	r5, r0
 800a876:	603d      	str	r5, [r7, #0]
 800a878:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a87c:	6030      	str	r0, [r6, #0]
 800a87e:	4620      	mov	r0, r4
 800a880:	b003      	add	sp, #12
 800a882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a886:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a88a:	e7d6      	b.n	800a83a <__d2b+0x2e>
 800a88c:	6161      	str	r1, [r4, #20]
 800a88e:	e7e7      	b.n	800a860 <__d2b+0x54>
 800a890:	a801      	add	r0, sp, #4
 800a892:	f7ff fd61 	bl	800a358 <__lo0bits>
 800a896:	9b01      	ldr	r3, [sp, #4]
 800a898:	6163      	str	r3, [r4, #20]
 800a89a:	3020      	adds	r0, #32
 800a89c:	2201      	movs	r2, #1
 800a89e:	e7e5      	b.n	800a86c <__d2b+0x60>
 800a8a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a8a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a8a8:	6038      	str	r0, [r7, #0]
 800a8aa:	6918      	ldr	r0, [r3, #16]
 800a8ac:	f7ff fd34 	bl	800a318 <__hi0bits>
 800a8b0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a8b4:	e7e2      	b.n	800a87c <__d2b+0x70>
 800a8b6:	bf00      	nop
 800a8b8:	0800c044 	.word	0x0800c044
 800a8bc:	0800c066 	.word	0x0800c066

0800a8c0 <__sread>:
 800a8c0:	b510      	push	{r4, lr}
 800a8c2:	460c      	mov	r4, r1
 800a8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c8:	f000 f978 	bl	800abbc <_read_r>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	bfab      	itete	ge
 800a8d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a8d2:	89a3      	ldrhlt	r3, [r4, #12]
 800a8d4:	181b      	addge	r3, r3, r0
 800a8d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8da:	bfac      	ite	ge
 800a8dc:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8de:	81a3      	strhlt	r3, [r4, #12]
 800a8e0:	bd10      	pop	{r4, pc}

0800a8e2 <__swrite>:
 800a8e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e6:	461f      	mov	r7, r3
 800a8e8:	898b      	ldrh	r3, [r1, #12]
 800a8ea:	05db      	lsls	r3, r3, #23
 800a8ec:	4605      	mov	r5, r0
 800a8ee:	460c      	mov	r4, r1
 800a8f0:	4616      	mov	r6, r2
 800a8f2:	d505      	bpl.n	800a900 <__swrite+0x1e>
 800a8f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8f8:	2302      	movs	r3, #2
 800a8fa:	2200      	movs	r2, #0
 800a8fc:	f000 f94c 	bl	800ab98 <_lseek_r>
 800a900:	89a3      	ldrh	r3, [r4, #12]
 800a902:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a906:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a90a:	81a3      	strh	r3, [r4, #12]
 800a90c:	4632      	mov	r2, r6
 800a90e:	463b      	mov	r3, r7
 800a910:	4628      	mov	r0, r5
 800a912:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a916:	f000 b973 	b.w	800ac00 <_write_r>

0800a91a <__sseek>:
 800a91a:	b510      	push	{r4, lr}
 800a91c:	460c      	mov	r4, r1
 800a91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a922:	f000 f939 	bl	800ab98 <_lseek_r>
 800a926:	1c43      	adds	r3, r0, #1
 800a928:	89a3      	ldrh	r3, [r4, #12]
 800a92a:	bf15      	itete	ne
 800a92c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a92e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a932:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a936:	81a3      	strheq	r3, [r4, #12]
 800a938:	bf18      	it	ne
 800a93a:	81a3      	strhne	r3, [r4, #12]
 800a93c:	bd10      	pop	{r4, pc}

0800a93e <__sclose>:
 800a93e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a942:	f000 b8f7 	b.w	800ab34 <_close_r>

0800a946 <__swbuf_r>:
 800a946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a948:	460e      	mov	r6, r1
 800a94a:	4614      	mov	r4, r2
 800a94c:	4605      	mov	r5, r0
 800a94e:	b118      	cbz	r0, 800a958 <__swbuf_r+0x12>
 800a950:	6a03      	ldr	r3, [r0, #32]
 800a952:	b90b      	cbnz	r3, 800a958 <__swbuf_r+0x12>
 800a954:	f7fe fa86 	bl	8008e64 <__sinit>
 800a958:	69a3      	ldr	r3, [r4, #24]
 800a95a:	60a3      	str	r3, [r4, #8]
 800a95c:	89a3      	ldrh	r3, [r4, #12]
 800a95e:	071a      	lsls	r2, r3, #28
 800a960:	d525      	bpl.n	800a9ae <__swbuf_r+0x68>
 800a962:	6923      	ldr	r3, [r4, #16]
 800a964:	b31b      	cbz	r3, 800a9ae <__swbuf_r+0x68>
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	6922      	ldr	r2, [r4, #16]
 800a96a:	1a98      	subs	r0, r3, r2
 800a96c:	6963      	ldr	r3, [r4, #20]
 800a96e:	b2f6      	uxtb	r6, r6
 800a970:	4283      	cmp	r3, r0
 800a972:	4637      	mov	r7, r6
 800a974:	dc04      	bgt.n	800a980 <__swbuf_r+0x3a>
 800a976:	4621      	mov	r1, r4
 800a978:	4628      	mov	r0, r5
 800a97a:	f7ff fbf1 	bl	800a160 <_fflush_r>
 800a97e:	b9e0      	cbnz	r0, 800a9ba <__swbuf_r+0x74>
 800a980:	68a3      	ldr	r3, [r4, #8]
 800a982:	3b01      	subs	r3, #1
 800a984:	60a3      	str	r3, [r4, #8]
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	1c5a      	adds	r2, r3, #1
 800a98a:	6022      	str	r2, [r4, #0]
 800a98c:	701e      	strb	r6, [r3, #0]
 800a98e:	6962      	ldr	r2, [r4, #20]
 800a990:	1c43      	adds	r3, r0, #1
 800a992:	429a      	cmp	r2, r3
 800a994:	d004      	beq.n	800a9a0 <__swbuf_r+0x5a>
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	07db      	lsls	r3, r3, #31
 800a99a:	d506      	bpl.n	800a9aa <__swbuf_r+0x64>
 800a99c:	2e0a      	cmp	r6, #10
 800a99e:	d104      	bne.n	800a9aa <__swbuf_r+0x64>
 800a9a0:	4621      	mov	r1, r4
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f7ff fbdc 	bl	800a160 <_fflush_r>
 800a9a8:	b938      	cbnz	r0, 800a9ba <__swbuf_r+0x74>
 800a9aa:	4638      	mov	r0, r7
 800a9ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9ae:	4621      	mov	r1, r4
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f000 f805 	bl	800a9c0 <__swsetup_r>
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	d0d5      	beq.n	800a966 <__swbuf_r+0x20>
 800a9ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a9be:	e7f4      	b.n	800a9aa <__swbuf_r+0x64>

0800a9c0 <__swsetup_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4b2a      	ldr	r3, [pc, #168]	; (800aa6c <__swsetup_r+0xac>)
 800a9c4:	4605      	mov	r5, r0
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	b118      	cbz	r0, 800a9d4 <__swsetup_r+0x14>
 800a9cc:	6a03      	ldr	r3, [r0, #32]
 800a9ce:	b90b      	cbnz	r3, 800a9d4 <__swsetup_r+0x14>
 800a9d0:	f7fe fa48 	bl	8008e64 <__sinit>
 800a9d4:	89a3      	ldrh	r3, [r4, #12]
 800a9d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a9da:	0718      	lsls	r0, r3, #28
 800a9dc:	d422      	bmi.n	800aa24 <__swsetup_r+0x64>
 800a9de:	06d9      	lsls	r1, r3, #27
 800a9e0:	d407      	bmi.n	800a9f2 <__swsetup_r+0x32>
 800a9e2:	2309      	movs	r3, #9
 800a9e4:	602b      	str	r3, [r5, #0]
 800a9e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a9ea:	81a3      	strh	r3, [r4, #12]
 800a9ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a9f0:	e034      	b.n	800aa5c <__swsetup_r+0x9c>
 800a9f2:	0758      	lsls	r0, r3, #29
 800a9f4:	d512      	bpl.n	800aa1c <__swsetup_r+0x5c>
 800a9f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a9f8:	b141      	cbz	r1, 800aa0c <__swsetup_r+0x4c>
 800a9fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a9fe:	4299      	cmp	r1, r3
 800aa00:	d002      	beq.n	800aa08 <__swsetup_r+0x48>
 800aa02:	4628      	mov	r0, r5
 800aa04:	f000 f942 	bl	800ac8c <_free_r>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	6363      	str	r3, [r4, #52]	; 0x34
 800aa0c:	89a3      	ldrh	r3, [r4, #12]
 800aa0e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aa12:	81a3      	strh	r3, [r4, #12]
 800aa14:	2300      	movs	r3, #0
 800aa16:	6063      	str	r3, [r4, #4]
 800aa18:	6923      	ldr	r3, [r4, #16]
 800aa1a:	6023      	str	r3, [r4, #0]
 800aa1c:	89a3      	ldrh	r3, [r4, #12]
 800aa1e:	f043 0308 	orr.w	r3, r3, #8
 800aa22:	81a3      	strh	r3, [r4, #12]
 800aa24:	6923      	ldr	r3, [r4, #16]
 800aa26:	b94b      	cbnz	r3, 800aa3c <__swsetup_r+0x7c>
 800aa28:	89a3      	ldrh	r3, [r4, #12]
 800aa2a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aa2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa32:	d003      	beq.n	800aa3c <__swsetup_r+0x7c>
 800aa34:	4621      	mov	r1, r4
 800aa36:	4628      	mov	r0, r5
 800aa38:	f000 f840 	bl	800aabc <__smakebuf_r>
 800aa3c:	89a0      	ldrh	r0, [r4, #12]
 800aa3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa42:	f010 0301 	ands.w	r3, r0, #1
 800aa46:	d00a      	beq.n	800aa5e <__swsetup_r+0x9e>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	60a3      	str	r3, [r4, #8]
 800aa4c:	6963      	ldr	r3, [r4, #20]
 800aa4e:	425b      	negs	r3, r3
 800aa50:	61a3      	str	r3, [r4, #24]
 800aa52:	6923      	ldr	r3, [r4, #16]
 800aa54:	b943      	cbnz	r3, 800aa68 <__swsetup_r+0xa8>
 800aa56:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aa5a:	d1c4      	bne.n	800a9e6 <__swsetup_r+0x26>
 800aa5c:	bd38      	pop	{r3, r4, r5, pc}
 800aa5e:	0781      	lsls	r1, r0, #30
 800aa60:	bf58      	it	pl
 800aa62:	6963      	ldrpl	r3, [r4, #20]
 800aa64:	60a3      	str	r3, [r4, #8]
 800aa66:	e7f4      	b.n	800aa52 <__swsetup_r+0x92>
 800aa68:	2000      	movs	r0, #0
 800aa6a:	e7f7      	b.n	800aa5c <__swsetup_r+0x9c>
 800aa6c:	20000064 	.word	0x20000064

0800aa70 <__swhatbuf_r>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	460c      	mov	r4, r1
 800aa74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa78:	2900      	cmp	r1, #0
 800aa7a:	b096      	sub	sp, #88	; 0x58
 800aa7c:	4615      	mov	r5, r2
 800aa7e:	461e      	mov	r6, r3
 800aa80:	da0d      	bge.n	800aa9e <__swhatbuf_r+0x2e>
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa88:	f04f 0100 	mov.w	r1, #0
 800aa8c:	bf0c      	ite	eq
 800aa8e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa92:	2340      	movne	r3, #64	; 0x40
 800aa94:	2000      	movs	r0, #0
 800aa96:	6031      	str	r1, [r6, #0]
 800aa98:	602b      	str	r3, [r5, #0]
 800aa9a:	b016      	add	sp, #88	; 0x58
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
 800aa9e:	466a      	mov	r2, sp
 800aaa0:	f000 f858 	bl	800ab54 <_fstat_r>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	dbec      	blt.n	800aa82 <__swhatbuf_r+0x12>
 800aaa8:	9901      	ldr	r1, [sp, #4]
 800aaaa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aaae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aab2:	4259      	negs	r1, r3
 800aab4:	4159      	adcs	r1, r3
 800aab6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aaba:	e7eb      	b.n	800aa94 <__swhatbuf_r+0x24>

0800aabc <__smakebuf_r>:
 800aabc:	898b      	ldrh	r3, [r1, #12]
 800aabe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aac0:	079d      	lsls	r5, r3, #30
 800aac2:	4606      	mov	r6, r0
 800aac4:	460c      	mov	r4, r1
 800aac6:	d507      	bpl.n	800aad8 <__smakebuf_r+0x1c>
 800aac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aacc:	6023      	str	r3, [r4, #0]
 800aace:	6123      	str	r3, [r4, #16]
 800aad0:	2301      	movs	r3, #1
 800aad2:	6163      	str	r3, [r4, #20]
 800aad4:	b002      	add	sp, #8
 800aad6:	bd70      	pop	{r4, r5, r6, pc}
 800aad8:	ab01      	add	r3, sp, #4
 800aada:	466a      	mov	r2, sp
 800aadc:	f7ff ffc8 	bl	800aa70 <__swhatbuf_r>
 800aae0:	9900      	ldr	r1, [sp, #0]
 800aae2:	4605      	mov	r5, r0
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7ff fa35 	bl	8009f54 <_malloc_r>
 800aaea:	b948      	cbnz	r0, 800ab00 <__smakebuf_r+0x44>
 800aaec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaf0:	059a      	lsls	r2, r3, #22
 800aaf2:	d4ef      	bmi.n	800aad4 <__smakebuf_r+0x18>
 800aaf4:	f023 0303 	bic.w	r3, r3, #3
 800aaf8:	f043 0302 	orr.w	r3, r3, #2
 800aafc:	81a3      	strh	r3, [r4, #12]
 800aafe:	e7e3      	b.n	800aac8 <__smakebuf_r+0xc>
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	6020      	str	r0, [r4, #0]
 800ab04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab08:	81a3      	strh	r3, [r4, #12]
 800ab0a:	9b00      	ldr	r3, [sp, #0]
 800ab0c:	6163      	str	r3, [r4, #20]
 800ab0e:	9b01      	ldr	r3, [sp, #4]
 800ab10:	6120      	str	r0, [r4, #16]
 800ab12:	b15b      	cbz	r3, 800ab2c <__smakebuf_r+0x70>
 800ab14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f000 f82d 	bl	800ab78 <_isatty_r>
 800ab1e:	b128      	cbz	r0, 800ab2c <__smakebuf_r+0x70>
 800ab20:	89a3      	ldrh	r3, [r4, #12]
 800ab22:	f023 0303 	bic.w	r3, r3, #3
 800ab26:	f043 0301 	orr.w	r3, r3, #1
 800ab2a:	81a3      	strh	r3, [r4, #12]
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	431d      	orrs	r5, r3
 800ab30:	81a5      	strh	r5, [r4, #12]
 800ab32:	e7cf      	b.n	800aad4 <__smakebuf_r+0x18>

0800ab34 <_close_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	; (800ab50 <_close_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7f7 ffa8 	bl	8002a94 <_close>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_close_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_close_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	2000082c 	.word	0x2000082c

0800ab54 <_fstat_r>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4d07      	ldr	r5, [pc, #28]	; (800ab74 <_fstat_r+0x20>)
 800ab58:	2300      	movs	r3, #0
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	4608      	mov	r0, r1
 800ab5e:	4611      	mov	r1, r2
 800ab60:	602b      	str	r3, [r5, #0]
 800ab62:	f7f7 ffa3 	bl	8002aac <_fstat>
 800ab66:	1c43      	adds	r3, r0, #1
 800ab68:	d102      	bne.n	800ab70 <_fstat_r+0x1c>
 800ab6a:	682b      	ldr	r3, [r5, #0]
 800ab6c:	b103      	cbz	r3, 800ab70 <_fstat_r+0x1c>
 800ab6e:	6023      	str	r3, [r4, #0]
 800ab70:	bd38      	pop	{r3, r4, r5, pc}
 800ab72:	bf00      	nop
 800ab74:	2000082c 	.word	0x2000082c

0800ab78 <_isatty_r>:
 800ab78:	b538      	push	{r3, r4, r5, lr}
 800ab7a:	4d06      	ldr	r5, [pc, #24]	; (800ab94 <_isatty_r+0x1c>)
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	4604      	mov	r4, r0
 800ab80:	4608      	mov	r0, r1
 800ab82:	602b      	str	r3, [r5, #0]
 800ab84:	f7f7 ffa2 	bl	8002acc <_isatty>
 800ab88:	1c43      	adds	r3, r0, #1
 800ab8a:	d102      	bne.n	800ab92 <_isatty_r+0x1a>
 800ab8c:	682b      	ldr	r3, [r5, #0]
 800ab8e:	b103      	cbz	r3, 800ab92 <_isatty_r+0x1a>
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	bd38      	pop	{r3, r4, r5, pc}
 800ab94:	2000082c 	.word	0x2000082c

0800ab98 <_lseek_r>:
 800ab98:	b538      	push	{r3, r4, r5, lr}
 800ab9a:	4d07      	ldr	r5, [pc, #28]	; (800abb8 <_lseek_r+0x20>)
 800ab9c:	4604      	mov	r4, r0
 800ab9e:	4608      	mov	r0, r1
 800aba0:	4611      	mov	r1, r2
 800aba2:	2200      	movs	r2, #0
 800aba4:	602a      	str	r2, [r5, #0]
 800aba6:	461a      	mov	r2, r3
 800aba8:	f7f7 ff9b 	bl	8002ae2 <_lseek>
 800abac:	1c43      	adds	r3, r0, #1
 800abae:	d102      	bne.n	800abb6 <_lseek_r+0x1e>
 800abb0:	682b      	ldr	r3, [r5, #0]
 800abb2:	b103      	cbz	r3, 800abb6 <_lseek_r+0x1e>
 800abb4:	6023      	str	r3, [r4, #0]
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	2000082c 	.word	0x2000082c

0800abbc <_read_r>:
 800abbc:	b538      	push	{r3, r4, r5, lr}
 800abbe:	4d07      	ldr	r5, [pc, #28]	; (800abdc <_read_r+0x20>)
 800abc0:	4604      	mov	r4, r0
 800abc2:	4608      	mov	r0, r1
 800abc4:	4611      	mov	r1, r2
 800abc6:	2200      	movs	r2, #0
 800abc8:	602a      	str	r2, [r5, #0]
 800abca:	461a      	mov	r2, r3
 800abcc:	f7f7 ff29 	bl	8002a22 <_read>
 800abd0:	1c43      	adds	r3, r0, #1
 800abd2:	d102      	bne.n	800abda <_read_r+0x1e>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	b103      	cbz	r3, 800abda <_read_r+0x1e>
 800abd8:	6023      	str	r3, [r4, #0]
 800abda:	bd38      	pop	{r3, r4, r5, pc}
 800abdc:	2000082c 	.word	0x2000082c

0800abe0 <_sbrk_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4d06      	ldr	r5, [pc, #24]	; (800abfc <_sbrk_r+0x1c>)
 800abe4:	2300      	movs	r3, #0
 800abe6:	4604      	mov	r4, r0
 800abe8:	4608      	mov	r0, r1
 800abea:	602b      	str	r3, [r5, #0]
 800abec:	f7f7 ff86 	bl	8002afc <_sbrk>
 800abf0:	1c43      	adds	r3, r0, #1
 800abf2:	d102      	bne.n	800abfa <_sbrk_r+0x1a>
 800abf4:	682b      	ldr	r3, [r5, #0]
 800abf6:	b103      	cbz	r3, 800abfa <_sbrk_r+0x1a>
 800abf8:	6023      	str	r3, [r4, #0]
 800abfa:	bd38      	pop	{r3, r4, r5, pc}
 800abfc:	2000082c 	.word	0x2000082c

0800ac00 <_write_r>:
 800ac00:	b538      	push	{r3, r4, r5, lr}
 800ac02:	4d07      	ldr	r5, [pc, #28]	; (800ac20 <_write_r+0x20>)
 800ac04:	4604      	mov	r4, r0
 800ac06:	4608      	mov	r0, r1
 800ac08:	4611      	mov	r1, r2
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	602a      	str	r2, [r5, #0]
 800ac0e:	461a      	mov	r2, r3
 800ac10:	f7f7 ff24 	bl	8002a5c <_write>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	d102      	bne.n	800ac1e <_write_r+0x1e>
 800ac18:	682b      	ldr	r3, [r5, #0]
 800ac1a:	b103      	cbz	r3, 800ac1e <_write_r+0x1e>
 800ac1c:	6023      	str	r3, [r4, #0]
 800ac1e:	bd38      	pop	{r3, r4, r5, pc}
 800ac20:	2000082c 	.word	0x2000082c

0800ac24 <__assert_func>:
 800ac24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac26:	4614      	mov	r4, r2
 800ac28:	461a      	mov	r2, r3
 800ac2a:	4b09      	ldr	r3, [pc, #36]	; (800ac50 <__assert_func+0x2c>)
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4605      	mov	r5, r0
 800ac30:	68d8      	ldr	r0, [r3, #12]
 800ac32:	b14c      	cbz	r4, 800ac48 <__assert_func+0x24>
 800ac34:	4b07      	ldr	r3, [pc, #28]	; (800ac54 <__assert_func+0x30>)
 800ac36:	9100      	str	r1, [sp, #0]
 800ac38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac3c:	4906      	ldr	r1, [pc, #24]	; (800ac58 <__assert_func+0x34>)
 800ac3e:	462b      	mov	r3, r5
 800ac40:	f000 f882 	bl	800ad48 <fiprintf>
 800ac44:	f000 f89f 	bl	800ad86 <abort>
 800ac48:	4b04      	ldr	r3, [pc, #16]	; (800ac5c <__assert_func+0x38>)
 800ac4a:	461c      	mov	r4, r3
 800ac4c:	e7f3      	b.n	800ac36 <__assert_func+0x12>
 800ac4e:	bf00      	nop
 800ac50:	20000064 	.word	0x20000064
 800ac54:	0800c2c7 	.word	0x0800c2c7
 800ac58:	0800c2d4 	.word	0x0800c2d4
 800ac5c:	0800c302 	.word	0x0800c302

0800ac60 <_calloc_r>:
 800ac60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac62:	fba1 2402 	umull	r2, r4, r1, r2
 800ac66:	b94c      	cbnz	r4, 800ac7c <_calloc_r+0x1c>
 800ac68:	4611      	mov	r1, r2
 800ac6a:	9201      	str	r2, [sp, #4]
 800ac6c:	f7ff f972 	bl	8009f54 <_malloc_r>
 800ac70:	9a01      	ldr	r2, [sp, #4]
 800ac72:	4605      	mov	r5, r0
 800ac74:	b930      	cbnz	r0, 800ac84 <_calloc_r+0x24>
 800ac76:	4628      	mov	r0, r5
 800ac78:	b003      	add	sp, #12
 800ac7a:	bd30      	pop	{r4, r5, pc}
 800ac7c:	220c      	movs	r2, #12
 800ac7e:	6002      	str	r2, [r0, #0]
 800ac80:	2500      	movs	r5, #0
 800ac82:	e7f8      	b.n	800ac76 <_calloc_r+0x16>
 800ac84:	4621      	mov	r1, r4
 800ac86:	f7fe f935 	bl	8008ef4 <memset>
 800ac8a:	e7f4      	b.n	800ac76 <_calloc_r+0x16>

0800ac8c <_free_r>:
 800ac8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac8e:	2900      	cmp	r1, #0
 800ac90:	d044      	beq.n	800ad1c <_free_r+0x90>
 800ac92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac96:	9001      	str	r0, [sp, #4]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac9e:	bfb8      	it	lt
 800aca0:	18e4      	addlt	r4, r4, r3
 800aca2:	f7ff fa85 	bl	800a1b0 <__malloc_lock>
 800aca6:	4a1e      	ldr	r2, [pc, #120]	; (800ad20 <_free_r+0x94>)
 800aca8:	9801      	ldr	r0, [sp, #4]
 800acaa:	6813      	ldr	r3, [r2, #0]
 800acac:	b933      	cbnz	r3, 800acbc <_free_r+0x30>
 800acae:	6063      	str	r3, [r4, #4]
 800acb0:	6014      	str	r4, [r2, #0]
 800acb2:	b003      	add	sp, #12
 800acb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acb8:	f7ff ba80 	b.w	800a1bc <__malloc_unlock>
 800acbc:	42a3      	cmp	r3, r4
 800acbe:	d908      	bls.n	800acd2 <_free_r+0x46>
 800acc0:	6825      	ldr	r5, [r4, #0]
 800acc2:	1961      	adds	r1, r4, r5
 800acc4:	428b      	cmp	r3, r1
 800acc6:	bf01      	itttt	eq
 800acc8:	6819      	ldreq	r1, [r3, #0]
 800acca:	685b      	ldreq	r3, [r3, #4]
 800accc:	1949      	addeq	r1, r1, r5
 800acce:	6021      	streq	r1, [r4, #0]
 800acd0:	e7ed      	b.n	800acae <_free_r+0x22>
 800acd2:	461a      	mov	r2, r3
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	b10b      	cbz	r3, 800acdc <_free_r+0x50>
 800acd8:	42a3      	cmp	r3, r4
 800acda:	d9fa      	bls.n	800acd2 <_free_r+0x46>
 800acdc:	6811      	ldr	r1, [r2, #0]
 800acde:	1855      	adds	r5, r2, r1
 800ace0:	42a5      	cmp	r5, r4
 800ace2:	d10b      	bne.n	800acfc <_free_r+0x70>
 800ace4:	6824      	ldr	r4, [r4, #0]
 800ace6:	4421      	add	r1, r4
 800ace8:	1854      	adds	r4, r2, r1
 800acea:	42a3      	cmp	r3, r4
 800acec:	6011      	str	r1, [r2, #0]
 800acee:	d1e0      	bne.n	800acb2 <_free_r+0x26>
 800acf0:	681c      	ldr	r4, [r3, #0]
 800acf2:	685b      	ldr	r3, [r3, #4]
 800acf4:	6053      	str	r3, [r2, #4]
 800acf6:	440c      	add	r4, r1
 800acf8:	6014      	str	r4, [r2, #0]
 800acfa:	e7da      	b.n	800acb2 <_free_r+0x26>
 800acfc:	d902      	bls.n	800ad04 <_free_r+0x78>
 800acfe:	230c      	movs	r3, #12
 800ad00:	6003      	str	r3, [r0, #0]
 800ad02:	e7d6      	b.n	800acb2 <_free_r+0x26>
 800ad04:	6825      	ldr	r5, [r4, #0]
 800ad06:	1961      	adds	r1, r4, r5
 800ad08:	428b      	cmp	r3, r1
 800ad0a:	bf04      	itt	eq
 800ad0c:	6819      	ldreq	r1, [r3, #0]
 800ad0e:	685b      	ldreq	r3, [r3, #4]
 800ad10:	6063      	str	r3, [r4, #4]
 800ad12:	bf04      	itt	eq
 800ad14:	1949      	addeq	r1, r1, r5
 800ad16:	6021      	streq	r1, [r4, #0]
 800ad18:	6054      	str	r4, [r2, #4]
 800ad1a:	e7ca      	b.n	800acb2 <_free_r+0x26>
 800ad1c:	b003      	add	sp, #12
 800ad1e:	bd30      	pop	{r4, r5, pc}
 800ad20:	20000824 	.word	0x20000824

0800ad24 <__ascii_mbtowc>:
 800ad24:	b082      	sub	sp, #8
 800ad26:	b901      	cbnz	r1, 800ad2a <__ascii_mbtowc+0x6>
 800ad28:	a901      	add	r1, sp, #4
 800ad2a:	b142      	cbz	r2, 800ad3e <__ascii_mbtowc+0x1a>
 800ad2c:	b14b      	cbz	r3, 800ad42 <__ascii_mbtowc+0x1e>
 800ad2e:	7813      	ldrb	r3, [r2, #0]
 800ad30:	600b      	str	r3, [r1, #0]
 800ad32:	7812      	ldrb	r2, [r2, #0]
 800ad34:	1e10      	subs	r0, r2, #0
 800ad36:	bf18      	it	ne
 800ad38:	2001      	movne	r0, #1
 800ad3a:	b002      	add	sp, #8
 800ad3c:	4770      	bx	lr
 800ad3e:	4610      	mov	r0, r2
 800ad40:	e7fb      	b.n	800ad3a <__ascii_mbtowc+0x16>
 800ad42:	f06f 0001 	mvn.w	r0, #1
 800ad46:	e7f8      	b.n	800ad3a <__ascii_mbtowc+0x16>

0800ad48 <fiprintf>:
 800ad48:	b40e      	push	{r1, r2, r3}
 800ad4a:	b503      	push	{r0, r1, lr}
 800ad4c:	4601      	mov	r1, r0
 800ad4e:	ab03      	add	r3, sp, #12
 800ad50:	4805      	ldr	r0, [pc, #20]	; (800ad68 <fiprintf+0x20>)
 800ad52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad56:	6800      	ldr	r0, [r0, #0]
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	f7fe ffb9 	bl	8009cd0 <_vfiprintf_r>
 800ad5e:	b002      	add	sp, #8
 800ad60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad64:	b003      	add	sp, #12
 800ad66:	4770      	bx	lr
 800ad68:	20000064 	.word	0x20000064

0800ad6c <__ascii_wctomb>:
 800ad6c:	b149      	cbz	r1, 800ad82 <__ascii_wctomb+0x16>
 800ad6e:	2aff      	cmp	r2, #255	; 0xff
 800ad70:	bf85      	ittet	hi
 800ad72:	238a      	movhi	r3, #138	; 0x8a
 800ad74:	6003      	strhi	r3, [r0, #0]
 800ad76:	700a      	strbls	r2, [r1, #0]
 800ad78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ad7c:	bf98      	it	ls
 800ad7e:	2001      	movls	r0, #1
 800ad80:	4770      	bx	lr
 800ad82:	4608      	mov	r0, r1
 800ad84:	4770      	bx	lr

0800ad86 <abort>:
 800ad86:	b508      	push	{r3, lr}
 800ad88:	2006      	movs	r0, #6
 800ad8a:	f000 f82b 	bl	800ade4 <raise>
 800ad8e:	2001      	movs	r0, #1
 800ad90:	f7f7 fe3d 	bl	8002a0e <_exit>

0800ad94 <_raise_r>:
 800ad94:	291f      	cmp	r1, #31
 800ad96:	b538      	push	{r3, r4, r5, lr}
 800ad98:	4604      	mov	r4, r0
 800ad9a:	460d      	mov	r5, r1
 800ad9c:	d904      	bls.n	800ada8 <_raise_r+0x14>
 800ad9e:	2316      	movs	r3, #22
 800ada0:	6003      	str	r3, [r0, #0]
 800ada2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800adaa:	b112      	cbz	r2, 800adb2 <_raise_r+0x1e>
 800adac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adb0:	b94b      	cbnz	r3, 800adc6 <_raise_r+0x32>
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 f830 	bl	800ae18 <_getpid_r>
 800adb8:	462a      	mov	r2, r5
 800adba:	4601      	mov	r1, r0
 800adbc:	4620      	mov	r0, r4
 800adbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adc2:	f000 b817 	b.w	800adf4 <_kill_r>
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d00a      	beq.n	800ade0 <_raise_r+0x4c>
 800adca:	1c59      	adds	r1, r3, #1
 800adcc:	d103      	bne.n	800add6 <_raise_r+0x42>
 800adce:	2316      	movs	r3, #22
 800add0:	6003      	str	r3, [r0, #0]
 800add2:	2001      	movs	r0, #1
 800add4:	e7e7      	b.n	800ada6 <_raise_r+0x12>
 800add6:	2400      	movs	r4, #0
 800add8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800addc:	4628      	mov	r0, r5
 800adde:	4798      	blx	r3
 800ade0:	2000      	movs	r0, #0
 800ade2:	e7e0      	b.n	800ada6 <_raise_r+0x12>

0800ade4 <raise>:
 800ade4:	4b02      	ldr	r3, [pc, #8]	; (800adf0 <raise+0xc>)
 800ade6:	4601      	mov	r1, r0
 800ade8:	6818      	ldr	r0, [r3, #0]
 800adea:	f7ff bfd3 	b.w	800ad94 <_raise_r>
 800adee:	bf00      	nop
 800adf0:	20000064 	.word	0x20000064

0800adf4 <_kill_r>:
 800adf4:	b538      	push	{r3, r4, r5, lr}
 800adf6:	4d07      	ldr	r5, [pc, #28]	; (800ae14 <_kill_r+0x20>)
 800adf8:	2300      	movs	r3, #0
 800adfa:	4604      	mov	r4, r0
 800adfc:	4608      	mov	r0, r1
 800adfe:	4611      	mov	r1, r2
 800ae00:	602b      	str	r3, [r5, #0]
 800ae02:	f7f7 fdf4 	bl	80029ee <_kill>
 800ae06:	1c43      	adds	r3, r0, #1
 800ae08:	d102      	bne.n	800ae10 <_kill_r+0x1c>
 800ae0a:	682b      	ldr	r3, [r5, #0]
 800ae0c:	b103      	cbz	r3, 800ae10 <_kill_r+0x1c>
 800ae0e:	6023      	str	r3, [r4, #0]
 800ae10:	bd38      	pop	{r3, r4, r5, pc}
 800ae12:	bf00      	nop
 800ae14:	2000082c 	.word	0x2000082c

0800ae18 <_getpid_r>:
 800ae18:	f7f7 bde1 	b.w	80029de <_getpid>

0800ae1c <sqrtf>:
 800ae1c:	b508      	push	{r3, lr}
 800ae1e:	ed2d 8b02 	vpush	{d8}
 800ae22:	eeb0 8a40 	vmov.f32	s16, s0
 800ae26:	f000 f999 	bl	800b15c <__ieee754_sqrtf>
 800ae2a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ae2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae32:	d60c      	bvs.n	800ae4e <sqrtf+0x32>
 800ae34:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ae54 <sqrtf+0x38>
 800ae38:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ae3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae40:	d505      	bpl.n	800ae4e <sqrtf+0x32>
 800ae42:	f7fe f863 	bl	8008f0c <__errno>
 800ae46:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ae4a:	2321      	movs	r3, #33	; 0x21
 800ae4c:	6003      	str	r3, [r0, #0]
 800ae4e:	ecbd 8b02 	vpop	{d8}
 800ae52:	bd08      	pop	{r3, pc}
 800ae54:	00000000 	.word	0x00000000

0800ae58 <pow>:
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae5a:	ed2d 8b02 	vpush	{d8}
 800ae5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae62:	eef0 8a60 	vmov.f32	s17, s1
 800ae66:	ec55 4b11 	vmov	r4, r5, d1
 800ae6a:	f000 f97d 	bl	800b168 <__ieee754_pow>
 800ae6e:	4622      	mov	r2, r4
 800ae70:	462b      	mov	r3, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	4629      	mov	r1, r5
 800ae76:	ec57 6b10 	vmov	r6, r7, d0
 800ae7a:	f7f5 fe6f 	bl	8000b5c <__aeabi_dcmpun>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d13b      	bne.n	800aefa <pow+0xa2>
 800ae82:	ec51 0b18 	vmov	r0, r1, d8
 800ae86:	2200      	movs	r2, #0
 800ae88:	2300      	movs	r3, #0
 800ae8a:	f7f5 fe35 	bl	8000af8 <__aeabi_dcmpeq>
 800ae8e:	b1b8      	cbz	r0, 800aec0 <pow+0x68>
 800ae90:	2200      	movs	r2, #0
 800ae92:	2300      	movs	r3, #0
 800ae94:	4620      	mov	r0, r4
 800ae96:	4629      	mov	r1, r5
 800ae98:	f7f5 fe2e 	bl	8000af8 <__aeabi_dcmpeq>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	d146      	bne.n	800af2e <pow+0xd6>
 800aea0:	ec45 4b10 	vmov	d0, r4, r5
 800aea4:	f000 f874 	bl	800af90 <finite>
 800aea8:	b338      	cbz	r0, 800aefa <pow+0xa2>
 800aeaa:	2200      	movs	r2, #0
 800aeac:	2300      	movs	r3, #0
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fe2b 	bl	8000b0c <__aeabi_dcmplt>
 800aeb6:	b300      	cbz	r0, 800aefa <pow+0xa2>
 800aeb8:	f7fe f828 	bl	8008f0c <__errno>
 800aebc:	2322      	movs	r3, #34	; 0x22
 800aebe:	e01b      	b.n	800aef8 <pow+0xa0>
 800aec0:	ec47 6b10 	vmov	d0, r6, r7
 800aec4:	f000 f864 	bl	800af90 <finite>
 800aec8:	b9e0      	cbnz	r0, 800af04 <pow+0xac>
 800aeca:	eeb0 0a48 	vmov.f32	s0, s16
 800aece:	eef0 0a68 	vmov.f32	s1, s17
 800aed2:	f000 f85d 	bl	800af90 <finite>
 800aed6:	b1a8      	cbz	r0, 800af04 <pow+0xac>
 800aed8:	ec45 4b10 	vmov	d0, r4, r5
 800aedc:	f000 f858 	bl	800af90 <finite>
 800aee0:	b180      	cbz	r0, 800af04 <pow+0xac>
 800aee2:	4632      	mov	r2, r6
 800aee4:	463b      	mov	r3, r7
 800aee6:	4630      	mov	r0, r6
 800aee8:	4639      	mov	r1, r7
 800aeea:	f7f5 fe37 	bl	8000b5c <__aeabi_dcmpun>
 800aeee:	2800      	cmp	r0, #0
 800aef0:	d0e2      	beq.n	800aeb8 <pow+0x60>
 800aef2:	f7fe f80b 	bl	8008f0c <__errno>
 800aef6:	2321      	movs	r3, #33	; 0x21
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	ecbd 8b02 	vpop	{d8}
 800aefe:	ec47 6b10 	vmov	d0, r6, r7
 800af02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af04:	2200      	movs	r2, #0
 800af06:	2300      	movs	r3, #0
 800af08:	4630      	mov	r0, r6
 800af0a:	4639      	mov	r1, r7
 800af0c:	f7f5 fdf4 	bl	8000af8 <__aeabi_dcmpeq>
 800af10:	2800      	cmp	r0, #0
 800af12:	d0f2      	beq.n	800aefa <pow+0xa2>
 800af14:	eeb0 0a48 	vmov.f32	s0, s16
 800af18:	eef0 0a68 	vmov.f32	s1, s17
 800af1c:	f000 f838 	bl	800af90 <finite>
 800af20:	2800      	cmp	r0, #0
 800af22:	d0ea      	beq.n	800aefa <pow+0xa2>
 800af24:	ec45 4b10 	vmov	d0, r4, r5
 800af28:	f000 f832 	bl	800af90 <finite>
 800af2c:	e7c3      	b.n	800aeb6 <pow+0x5e>
 800af2e:	4f01      	ldr	r7, [pc, #4]	; (800af34 <pow+0xdc>)
 800af30:	2600      	movs	r6, #0
 800af32:	e7e2      	b.n	800aefa <pow+0xa2>
 800af34:	3ff00000 	.word	0x3ff00000

0800af38 <sqrt>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	ed2d 8b02 	vpush	{d8}
 800af3e:	ec55 4b10 	vmov	r4, r5, d0
 800af42:	f000 f831 	bl	800afa8 <__ieee754_sqrt>
 800af46:	4622      	mov	r2, r4
 800af48:	462b      	mov	r3, r5
 800af4a:	4620      	mov	r0, r4
 800af4c:	4629      	mov	r1, r5
 800af4e:	eeb0 8a40 	vmov.f32	s16, s0
 800af52:	eef0 8a60 	vmov.f32	s17, s1
 800af56:	f7f5 fe01 	bl	8000b5c <__aeabi_dcmpun>
 800af5a:	b990      	cbnz	r0, 800af82 <sqrt+0x4a>
 800af5c:	2200      	movs	r2, #0
 800af5e:	2300      	movs	r3, #0
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 fdd2 	bl	8000b0c <__aeabi_dcmplt>
 800af68:	b158      	cbz	r0, 800af82 <sqrt+0x4a>
 800af6a:	f7fd ffcf 	bl	8008f0c <__errno>
 800af6e:	2321      	movs	r3, #33	; 0x21
 800af70:	6003      	str	r3, [r0, #0]
 800af72:	2200      	movs	r2, #0
 800af74:	2300      	movs	r3, #0
 800af76:	4610      	mov	r0, r2
 800af78:	4619      	mov	r1, r3
 800af7a:	f7f5 fc7f 	bl	800087c <__aeabi_ddiv>
 800af7e:	ec41 0b18 	vmov	d8, r0, r1
 800af82:	eeb0 0a48 	vmov.f32	s0, s16
 800af86:	eef0 0a68 	vmov.f32	s1, s17
 800af8a:	ecbd 8b02 	vpop	{d8}
 800af8e:	bd38      	pop	{r3, r4, r5, pc}

0800af90 <finite>:
 800af90:	b082      	sub	sp, #8
 800af92:	ed8d 0b00 	vstr	d0, [sp]
 800af96:	9801      	ldr	r0, [sp, #4]
 800af98:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800af9c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800afa0:	0fc0      	lsrs	r0, r0, #31
 800afa2:	b002      	add	sp, #8
 800afa4:	4770      	bx	lr
	...

0800afa8 <__ieee754_sqrt>:
 800afa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	ec55 4b10 	vmov	r4, r5, d0
 800afb0:	4e67      	ldr	r6, [pc, #412]	; (800b150 <__ieee754_sqrt+0x1a8>)
 800afb2:	43ae      	bics	r6, r5
 800afb4:	ee10 0a10 	vmov	r0, s0
 800afb8:	ee10 2a10 	vmov	r2, s0
 800afbc:	4629      	mov	r1, r5
 800afbe:	462b      	mov	r3, r5
 800afc0:	d10d      	bne.n	800afde <__ieee754_sqrt+0x36>
 800afc2:	f7f5 fb31 	bl	8000628 <__aeabi_dmul>
 800afc6:	4602      	mov	r2, r0
 800afc8:	460b      	mov	r3, r1
 800afca:	4620      	mov	r0, r4
 800afcc:	4629      	mov	r1, r5
 800afce:	f7f5 f975 	bl	80002bc <__adddf3>
 800afd2:	4604      	mov	r4, r0
 800afd4:	460d      	mov	r5, r1
 800afd6:	ec45 4b10 	vmov	d0, r4, r5
 800afda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afde:	2d00      	cmp	r5, #0
 800afe0:	dc0b      	bgt.n	800affa <__ieee754_sqrt+0x52>
 800afe2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800afe6:	4326      	orrs	r6, r4
 800afe8:	d0f5      	beq.n	800afd6 <__ieee754_sqrt+0x2e>
 800afea:	b135      	cbz	r5, 800affa <__ieee754_sqrt+0x52>
 800afec:	f7f5 f964 	bl	80002b8 <__aeabi_dsub>
 800aff0:	4602      	mov	r2, r0
 800aff2:	460b      	mov	r3, r1
 800aff4:	f7f5 fc42 	bl	800087c <__aeabi_ddiv>
 800aff8:	e7eb      	b.n	800afd2 <__ieee754_sqrt+0x2a>
 800affa:	1509      	asrs	r1, r1, #20
 800affc:	f000 808d 	beq.w	800b11a <__ieee754_sqrt+0x172>
 800b000:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b004:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b008:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b00c:	07c9      	lsls	r1, r1, #31
 800b00e:	bf5c      	itt	pl
 800b010:	005b      	lslpl	r3, r3, #1
 800b012:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b016:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b01a:	bf58      	it	pl
 800b01c:	0052      	lslpl	r2, r2, #1
 800b01e:	2500      	movs	r5, #0
 800b020:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b024:	1076      	asrs	r6, r6, #1
 800b026:	0052      	lsls	r2, r2, #1
 800b028:	f04f 0e16 	mov.w	lr, #22
 800b02c:	46ac      	mov	ip, r5
 800b02e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b032:	eb0c 0001 	add.w	r0, ip, r1
 800b036:	4298      	cmp	r0, r3
 800b038:	bfde      	ittt	le
 800b03a:	1a1b      	suble	r3, r3, r0
 800b03c:	eb00 0c01 	addle.w	ip, r0, r1
 800b040:	186d      	addle	r5, r5, r1
 800b042:	005b      	lsls	r3, r3, #1
 800b044:	f1be 0e01 	subs.w	lr, lr, #1
 800b048:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b04c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b050:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b054:	d1ed      	bne.n	800b032 <__ieee754_sqrt+0x8a>
 800b056:	4674      	mov	r4, lr
 800b058:	2720      	movs	r7, #32
 800b05a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b05e:	4563      	cmp	r3, ip
 800b060:	eb01 000e 	add.w	r0, r1, lr
 800b064:	dc02      	bgt.n	800b06c <__ieee754_sqrt+0xc4>
 800b066:	d113      	bne.n	800b090 <__ieee754_sqrt+0xe8>
 800b068:	4290      	cmp	r0, r2
 800b06a:	d811      	bhi.n	800b090 <__ieee754_sqrt+0xe8>
 800b06c:	2800      	cmp	r0, #0
 800b06e:	eb00 0e01 	add.w	lr, r0, r1
 800b072:	da57      	bge.n	800b124 <__ieee754_sqrt+0x17c>
 800b074:	f1be 0f00 	cmp.w	lr, #0
 800b078:	db54      	blt.n	800b124 <__ieee754_sqrt+0x17c>
 800b07a:	f10c 0801 	add.w	r8, ip, #1
 800b07e:	eba3 030c 	sub.w	r3, r3, ip
 800b082:	4290      	cmp	r0, r2
 800b084:	bf88      	it	hi
 800b086:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800b08a:	1a12      	subs	r2, r2, r0
 800b08c:	440c      	add	r4, r1
 800b08e:	46c4      	mov	ip, r8
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	3f01      	subs	r7, #1
 800b094:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b098:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b09c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b0a0:	d1dd      	bne.n	800b05e <__ieee754_sqrt+0xb6>
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	d01b      	beq.n	800b0de <__ieee754_sqrt+0x136>
 800b0a6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b154 <__ieee754_sqrt+0x1ac>
 800b0aa:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b158 <__ieee754_sqrt+0x1b0>
 800b0ae:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0b2:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0b6:	f7f5 f8ff 	bl	80002b8 <__aeabi_dsub>
 800b0ba:	e9da 8900 	ldrd	r8, r9, [sl]
 800b0be:	4602      	mov	r2, r0
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	4640      	mov	r0, r8
 800b0c4:	4649      	mov	r1, r9
 800b0c6:	f7f5 fd2b 	bl	8000b20 <__aeabi_dcmple>
 800b0ca:	b140      	cbz	r0, 800b0de <__ieee754_sqrt+0x136>
 800b0cc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 800b0d0:	e9da 0100 	ldrd	r0, r1, [sl]
 800b0d4:	e9db 2300 	ldrd	r2, r3, [fp]
 800b0d8:	d126      	bne.n	800b128 <__ieee754_sqrt+0x180>
 800b0da:	3501      	adds	r5, #1
 800b0dc:	463c      	mov	r4, r7
 800b0de:	106a      	asrs	r2, r5, #1
 800b0e0:	0863      	lsrs	r3, r4, #1
 800b0e2:	07e9      	lsls	r1, r5, #31
 800b0e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b0e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b0ec:	bf48      	it	mi
 800b0ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b0f2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b0f6:	461c      	mov	r4, r3
 800b0f8:	e76d      	b.n	800afd6 <__ieee754_sqrt+0x2e>
 800b0fa:	0ad3      	lsrs	r3, r2, #11
 800b0fc:	3815      	subs	r0, #21
 800b0fe:	0552      	lsls	r2, r2, #21
 800b100:	2b00      	cmp	r3, #0
 800b102:	d0fa      	beq.n	800b0fa <__ieee754_sqrt+0x152>
 800b104:	02dc      	lsls	r4, r3, #11
 800b106:	d50a      	bpl.n	800b11e <__ieee754_sqrt+0x176>
 800b108:	f1c1 0420 	rsb	r4, r1, #32
 800b10c:	fa22 f404 	lsr.w	r4, r2, r4
 800b110:	1e4d      	subs	r5, r1, #1
 800b112:	408a      	lsls	r2, r1
 800b114:	4323      	orrs	r3, r4
 800b116:	1b41      	subs	r1, r0, r5
 800b118:	e772      	b.n	800b000 <__ieee754_sqrt+0x58>
 800b11a:	4608      	mov	r0, r1
 800b11c:	e7f0      	b.n	800b100 <__ieee754_sqrt+0x158>
 800b11e:	005b      	lsls	r3, r3, #1
 800b120:	3101      	adds	r1, #1
 800b122:	e7ef      	b.n	800b104 <__ieee754_sqrt+0x15c>
 800b124:	46e0      	mov	r8, ip
 800b126:	e7aa      	b.n	800b07e <__ieee754_sqrt+0xd6>
 800b128:	f7f5 f8c8 	bl	80002bc <__adddf3>
 800b12c:	e9da 8900 	ldrd	r8, r9, [sl]
 800b130:	4602      	mov	r2, r0
 800b132:	460b      	mov	r3, r1
 800b134:	4640      	mov	r0, r8
 800b136:	4649      	mov	r1, r9
 800b138:	f7f5 fce8 	bl	8000b0c <__aeabi_dcmplt>
 800b13c:	b120      	cbz	r0, 800b148 <__ieee754_sqrt+0x1a0>
 800b13e:	1ca0      	adds	r0, r4, #2
 800b140:	bf08      	it	eq
 800b142:	3501      	addeq	r5, #1
 800b144:	3402      	adds	r4, #2
 800b146:	e7ca      	b.n	800b0de <__ieee754_sqrt+0x136>
 800b148:	3401      	adds	r4, #1
 800b14a:	f024 0401 	bic.w	r4, r4, #1
 800b14e:	e7c6      	b.n	800b0de <__ieee754_sqrt+0x136>
 800b150:	7ff00000 	.word	0x7ff00000
 800b154:	200001d8 	.word	0x200001d8
 800b158:	200001e0 	.word	0x200001e0

0800b15c <__ieee754_sqrtf>:
 800b15c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b160:	4770      	bx	lr
 800b162:	0000      	movs	r0, r0
 800b164:	0000      	movs	r0, r0
	...

0800b168 <__ieee754_pow>:
 800b168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b16c:	ed2d 8b06 	vpush	{d8-d10}
 800b170:	b089      	sub	sp, #36	; 0x24
 800b172:	ed8d 1b00 	vstr	d1, [sp]
 800b176:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b17a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b17e:	ea58 0102 	orrs.w	r1, r8, r2
 800b182:	ec57 6b10 	vmov	r6, r7, d0
 800b186:	d115      	bne.n	800b1b4 <__ieee754_pow+0x4c>
 800b188:	19b3      	adds	r3, r6, r6
 800b18a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b18e:	4152      	adcs	r2, r2
 800b190:	4299      	cmp	r1, r3
 800b192:	4b89      	ldr	r3, [pc, #548]	; (800b3b8 <__ieee754_pow+0x250>)
 800b194:	4193      	sbcs	r3, r2
 800b196:	f080 84d1 	bcs.w	800bb3c <__ieee754_pow+0x9d4>
 800b19a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b19e:	4630      	mov	r0, r6
 800b1a0:	4639      	mov	r1, r7
 800b1a2:	f7f5 f88b 	bl	80002bc <__adddf3>
 800b1a6:	ec41 0b10 	vmov	d0, r0, r1
 800b1aa:	b009      	add	sp, #36	; 0x24
 800b1ac:	ecbd 8b06 	vpop	{d8-d10}
 800b1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b4:	4b81      	ldr	r3, [pc, #516]	; (800b3bc <__ieee754_pow+0x254>)
 800b1b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b1ba:	429c      	cmp	r4, r3
 800b1bc:	ee10 aa10 	vmov	sl, s0
 800b1c0:	463d      	mov	r5, r7
 800b1c2:	dc06      	bgt.n	800b1d2 <__ieee754_pow+0x6a>
 800b1c4:	d101      	bne.n	800b1ca <__ieee754_pow+0x62>
 800b1c6:	2e00      	cmp	r6, #0
 800b1c8:	d1e7      	bne.n	800b19a <__ieee754_pow+0x32>
 800b1ca:	4598      	cmp	r8, r3
 800b1cc:	dc01      	bgt.n	800b1d2 <__ieee754_pow+0x6a>
 800b1ce:	d10f      	bne.n	800b1f0 <__ieee754_pow+0x88>
 800b1d0:	b172      	cbz	r2, 800b1f0 <__ieee754_pow+0x88>
 800b1d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b1d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b1da:	ea55 050a 	orrs.w	r5, r5, sl
 800b1de:	d1dc      	bne.n	800b19a <__ieee754_pow+0x32>
 800b1e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b1e4:	18db      	adds	r3, r3, r3
 800b1e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b1ea:	4152      	adcs	r2, r2
 800b1ec:	429d      	cmp	r5, r3
 800b1ee:	e7d0      	b.n	800b192 <__ieee754_pow+0x2a>
 800b1f0:	2d00      	cmp	r5, #0
 800b1f2:	da3b      	bge.n	800b26c <__ieee754_pow+0x104>
 800b1f4:	4b72      	ldr	r3, [pc, #456]	; (800b3c0 <__ieee754_pow+0x258>)
 800b1f6:	4598      	cmp	r8, r3
 800b1f8:	dc51      	bgt.n	800b29e <__ieee754_pow+0x136>
 800b1fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b1fe:	4598      	cmp	r8, r3
 800b200:	f340 84ab 	ble.w	800bb5a <__ieee754_pow+0x9f2>
 800b204:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b208:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b20c:	2b14      	cmp	r3, #20
 800b20e:	dd0f      	ble.n	800b230 <__ieee754_pow+0xc8>
 800b210:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b214:	fa22 f103 	lsr.w	r1, r2, r3
 800b218:	fa01 f303 	lsl.w	r3, r1, r3
 800b21c:	4293      	cmp	r3, r2
 800b21e:	f040 849c 	bne.w	800bb5a <__ieee754_pow+0x9f2>
 800b222:	f001 0101 	and.w	r1, r1, #1
 800b226:	f1c1 0302 	rsb	r3, r1, #2
 800b22a:	9304      	str	r3, [sp, #16]
 800b22c:	b182      	cbz	r2, 800b250 <__ieee754_pow+0xe8>
 800b22e:	e05f      	b.n	800b2f0 <__ieee754_pow+0x188>
 800b230:	2a00      	cmp	r2, #0
 800b232:	d15b      	bne.n	800b2ec <__ieee754_pow+0x184>
 800b234:	f1c3 0314 	rsb	r3, r3, #20
 800b238:	fa48 f103 	asr.w	r1, r8, r3
 800b23c:	fa01 f303 	lsl.w	r3, r1, r3
 800b240:	4543      	cmp	r3, r8
 800b242:	f040 8487 	bne.w	800bb54 <__ieee754_pow+0x9ec>
 800b246:	f001 0101 	and.w	r1, r1, #1
 800b24a:	f1c1 0302 	rsb	r3, r1, #2
 800b24e:	9304      	str	r3, [sp, #16]
 800b250:	4b5c      	ldr	r3, [pc, #368]	; (800b3c4 <__ieee754_pow+0x25c>)
 800b252:	4598      	cmp	r8, r3
 800b254:	d132      	bne.n	800b2bc <__ieee754_pow+0x154>
 800b256:	f1b9 0f00 	cmp.w	r9, #0
 800b25a:	f280 8477 	bge.w	800bb4c <__ieee754_pow+0x9e4>
 800b25e:	4959      	ldr	r1, [pc, #356]	; (800b3c4 <__ieee754_pow+0x25c>)
 800b260:	4632      	mov	r2, r6
 800b262:	463b      	mov	r3, r7
 800b264:	2000      	movs	r0, #0
 800b266:	f7f5 fb09 	bl	800087c <__aeabi_ddiv>
 800b26a:	e79c      	b.n	800b1a6 <__ieee754_pow+0x3e>
 800b26c:	2300      	movs	r3, #0
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	2a00      	cmp	r2, #0
 800b272:	d13d      	bne.n	800b2f0 <__ieee754_pow+0x188>
 800b274:	4b51      	ldr	r3, [pc, #324]	; (800b3bc <__ieee754_pow+0x254>)
 800b276:	4598      	cmp	r8, r3
 800b278:	d1ea      	bne.n	800b250 <__ieee754_pow+0xe8>
 800b27a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b27e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b282:	ea53 030a 	orrs.w	r3, r3, sl
 800b286:	f000 8459 	beq.w	800bb3c <__ieee754_pow+0x9d4>
 800b28a:	4b4f      	ldr	r3, [pc, #316]	; (800b3c8 <__ieee754_pow+0x260>)
 800b28c:	429c      	cmp	r4, r3
 800b28e:	dd08      	ble.n	800b2a2 <__ieee754_pow+0x13a>
 800b290:	f1b9 0f00 	cmp.w	r9, #0
 800b294:	f2c0 8456 	blt.w	800bb44 <__ieee754_pow+0x9dc>
 800b298:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b29c:	e783      	b.n	800b1a6 <__ieee754_pow+0x3e>
 800b29e:	2302      	movs	r3, #2
 800b2a0:	e7e5      	b.n	800b26e <__ieee754_pow+0x106>
 800b2a2:	f1b9 0f00 	cmp.w	r9, #0
 800b2a6:	f04f 0000 	mov.w	r0, #0
 800b2aa:	f04f 0100 	mov.w	r1, #0
 800b2ae:	f6bf af7a 	bge.w	800b1a6 <__ieee754_pow+0x3e>
 800b2b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b2b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b2ba:	e774      	b.n	800b1a6 <__ieee754_pow+0x3e>
 800b2bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b2c0:	d106      	bne.n	800b2d0 <__ieee754_pow+0x168>
 800b2c2:	4632      	mov	r2, r6
 800b2c4:	463b      	mov	r3, r7
 800b2c6:	4630      	mov	r0, r6
 800b2c8:	4639      	mov	r1, r7
 800b2ca:	f7f5 f9ad 	bl	8000628 <__aeabi_dmul>
 800b2ce:	e76a      	b.n	800b1a6 <__ieee754_pow+0x3e>
 800b2d0:	4b3e      	ldr	r3, [pc, #248]	; (800b3cc <__ieee754_pow+0x264>)
 800b2d2:	4599      	cmp	r9, r3
 800b2d4:	d10c      	bne.n	800b2f0 <__ieee754_pow+0x188>
 800b2d6:	2d00      	cmp	r5, #0
 800b2d8:	db0a      	blt.n	800b2f0 <__ieee754_pow+0x188>
 800b2da:	ec47 6b10 	vmov	d0, r6, r7
 800b2de:	b009      	add	sp, #36	; 0x24
 800b2e0:	ecbd 8b06 	vpop	{d8-d10}
 800b2e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e8:	f7ff be5e 	b.w	800afa8 <__ieee754_sqrt>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9304      	str	r3, [sp, #16]
 800b2f0:	ec47 6b10 	vmov	d0, r6, r7
 800b2f4:	f000 fc92 	bl	800bc1c <fabs>
 800b2f8:	ec51 0b10 	vmov	r0, r1, d0
 800b2fc:	f1ba 0f00 	cmp.w	sl, #0
 800b300:	d129      	bne.n	800b356 <__ieee754_pow+0x1ee>
 800b302:	b124      	cbz	r4, 800b30e <__ieee754_pow+0x1a6>
 800b304:	4b2f      	ldr	r3, [pc, #188]	; (800b3c4 <__ieee754_pow+0x25c>)
 800b306:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d123      	bne.n	800b356 <__ieee754_pow+0x1ee>
 800b30e:	f1b9 0f00 	cmp.w	r9, #0
 800b312:	da05      	bge.n	800b320 <__ieee754_pow+0x1b8>
 800b314:	4602      	mov	r2, r0
 800b316:	460b      	mov	r3, r1
 800b318:	2000      	movs	r0, #0
 800b31a:	492a      	ldr	r1, [pc, #168]	; (800b3c4 <__ieee754_pow+0x25c>)
 800b31c:	f7f5 faae 	bl	800087c <__aeabi_ddiv>
 800b320:	2d00      	cmp	r5, #0
 800b322:	f6bf af40 	bge.w	800b1a6 <__ieee754_pow+0x3e>
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b32c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b330:	431c      	orrs	r4, r3
 800b332:	d108      	bne.n	800b346 <__ieee754_pow+0x1de>
 800b334:	4602      	mov	r2, r0
 800b336:	460b      	mov	r3, r1
 800b338:	4610      	mov	r0, r2
 800b33a:	4619      	mov	r1, r3
 800b33c:	f7f4 ffbc 	bl	80002b8 <__aeabi_dsub>
 800b340:	4602      	mov	r2, r0
 800b342:	460b      	mov	r3, r1
 800b344:	e78f      	b.n	800b266 <__ieee754_pow+0xfe>
 800b346:	9b04      	ldr	r3, [sp, #16]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	f47f af2c 	bne.w	800b1a6 <__ieee754_pow+0x3e>
 800b34e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b352:	4619      	mov	r1, r3
 800b354:	e727      	b.n	800b1a6 <__ieee754_pow+0x3e>
 800b356:	0feb      	lsrs	r3, r5, #31
 800b358:	3b01      	subs	r3, #1
 800b35a:	9306      	str	r3, [sp, #24]
 800b35c:	9a06      	ldr	r2, [sp, #24]
 800b35e:	9b04      	ldr	r3, [sp, #16]
 800b360:	4313      	orrs	r3, r2
 800b362:	d102      	bne.n	800b36a <__ieee754_pow+0x202>
 800b364:	4632      	mov	r2, r6
 800b366:	463b      	mov	r3, r7
 800b368:	e7e6      	b.n	800b338 <__ieee754_pow+0x1d0>
 800b36a:	4b19      	ldr	r3, [pc, #100]	; (800b3d0 <__ieee754_pow+0x268>)
 800b36c:	4598      	cmp	r8, r3
 800b36e:	f340 80fb 	ble.w	800b568 <__ieee754_pow+0x400>
 800b372:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b376:	4598      	cmp	r8, r3
 800b378:	4b13      	ldr	r3, [pc, #76]	; (800b3c8 <__ieee754_pow+0x260>)
 800b37a:	dd0c      	ble.n	800b396 <__ieee754_pow+0x22e>
 800b37c:	429c      	cmp	r4, r3
 800b37e:	dc0f      	bgt.n	800b3a0 <__ieee754_pow+0x238>
 800b380:	f1b9 0f00 	cmp.w	r9, #0
 800b384:	da0f      	bge.n	800b3a6 <__ieee754_pow+0x23e>
 800b386:	2000      	movs	r0, #0
 800b388:	b009      	add	sp, #36	; 0x24
 800b38a:	ecbd 8b06 	vpop	{d8-d10}
 800b38e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b392:	f000 bc3a 	b.w	800bc0a <__math_oflow>
 800b396:	429c      	cmp	r4, r3
 800b398:	dbf2      	blt.n	800b380 <__ieee754_pow+0x218>
 800b39a:	4b0a      	ldr	r3, [pc, #40]	; (800b3c4 <__ieee754_pow+0x25c>)
 800b39c:	429c      	cmp	r4, r3
 800b39e:	dd19      	ble.n	800b3d4 <__ieee754_pow+0x26c>
 800b3a0:	f1b9 0f00 	cmp.w	r9, #0
 800b3a4:	dcef      	bgt.n	800b386 <__ieee754_pow+0x21e>
 800b3a6:	2000      	movs	r0, #0
 800b3a8:	b009      	add	sp, #36	; 0x24
 800b3aa:	ecbd 8b06 	vpop	{d8-d10}
 800b3ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b2:	f000 bc21 	b.w	800bbf8 <__math_uflow>
 800b3b6:	bf00      	nop
 800b3b8:	fff00000 	.word	0xfff00000
 800b3bc:	7ff00000 	.word	0x7ff00000
 800b3c0:	433fffff 	.word	0x433fffff
 800b3c4:	3ff00000 	.word	0x3ff00000
 800b3c8:	3fefffff 	.word	0x3fefffff
 800b3cc:	3fe00000 	.word	0x3fe00000
 800b3d0:	41e00000 	.word	0x41e00000
 800b3d4:	4b60      	ldr	r3, [pc, #384]	; (800b558 <__ieee754_pow+0x3f0>)
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	f7f4 ff6e 	bl	80002b8 <__aeabi_dsub>
 800b3dc:	a354      	add	r3, pc, #336	; (adr r3, 800b530 <__ieee754_pow+0x3c8>)
 800b3de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	f7f5 f91f 	bl	8000628 <__aeabi_dmul>
 800b3ea:	a353      	add	r3, pc, #332	; (adr r3, 800b538 <__ieee754_pow+0x3d0>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	4606      	mov	r6, r0
 800b3f2:	460f      	mov	r7, r1
 800b3f4:	4620      	mov	r0, r4
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	f7f5 f916 	bl	8000628 <__aeabi_dmul>
 800b3fc:	4b57      	ldr	r3, [pc, #348]	; (800b55c <__ieee754_pow+0x3f4>)
 800b3fe:	4682      	mov	sl, r0
 800b400:	468b      	mov	fp, r1
 800b402:	2200      	movs	r2, #0
 800b404:	4620      	mov	r0, r4
 800b406:	4629      	mov	r1, r5
 800b408:	f7f5 f90e 	bl	8000628 <__aeabi_dmul>
 800b40c:	4602      	mov	r2, r0
 800b40e:	460b      	mov	r3, r1
 800b410:	a14b      	add	r1, pc, #300	; (adr r1, 800b540 <__ieee754_pow+0x3d8>)
 800b412:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b416:	f7f4 ff4f 	bl	80002b8 <__aeabi_dsub>
 800b41a:	4622      	mov	r2, r4
 800b41c:	462b      	mov	r3, r5
 800b41e:	f7f5 f903 	bl	8000628 <__aeabi_dmul>
 800b422:	4602      	mov	r2, r0
 800b424:	460b      	mov	r3, r1
 800b426:	2000      	movs	r0, #0
 800b428:	494d      	ldr	r1, [pc, #308]	; (800b560 <__ieee754_pow+0x3f8>)
 800b42a:	f7f4 ff45 	bl	80002b8 <__aeabi_dsub>
 800b42e:	4622      	mov	r2, r4
 800b430:	4680      	mov	r8, r0
 800b432:	4689      	mov	r9, r1
 800b434:	462b      	mov	r3, r5
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f5 f8f5 	bl	8000628 <__aeabi_dmul>
 800b43e:	4602      	mov	r2, r0
 800b440:	460b      	mov	r3, r1
 800b442:	4640      	mov	r0, r8
 800b444:	4649      	mov	r1, r9
 800b446:	f7f5 f8ef 	bl	8000628 <__aeabi_dmul>
 800b44a:	a33f      	add	r3, pc, #252	; (adr r3, 800b548 <__ieee754_pow+0x3e0>)
 800b44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b450:	f7f5 f8ea 	bl	8000628 <__aeabi_dmul>
 800b454:	4602      	mov	r2, r0
 800b456:	460b      	mov	r3, r1
 800b458:	4650      	mov	r0, sl
 800b45a:	4659      	mov	r1, fp
 800b45c:	f7f4 ff2c 	bl	80002b8 <__aeabi_dsub>
 800b460:	4602      	mov	r2, r0
 800b462:	460b      	mov	r3, r1
 800b464:	4680      	mov	r8, r0
 800b466:	4689      	mov	r9, r1
 800b468:	4630      	mov	r0, r6
 800b46a:	4639      	mov	r1, r7
 800b46c:	f7f4 ff26 	bl	80002bc <__adddf3>
 800b470:	2000      	movs	r0, #0
 800b472:	4632      	mov	r2, r6
 800b474:	463b      	mov	r3, r7
 800b476:	4604      	mov	r4, r0
 800b478:	460d      	mov	r5, r1
 800b47a:	f7f4 ff1d 	bl	80002b8 <__aeabi_dsub>
 800b47e:	4602      	mov	r2, r0
 800b480:	460b      	mov	r3, r1
 800b482:	4640      	mov	r0, r8
 800b484:	4649      	mov	r1, r9
 800b486:	f7f4 ff17 	bl	80002b8 <__aeabi_dsub>
 800b48a:	9b04      	ldr	r3, [sp, #16]
 800b48c:	9a06      	ldr	r2, [sp, #24]
 800b48e:	3b01      	subs	r3, #1
 800b490:	4313      	orrs	r3, r2
 800b492:	4682      	mov	sl, r0
 800b494:	468b      	mov	fp, r1
 800b496:	f040 81e7 	bne.w	800b868 <__ieee754_pow+0x700>
 800b49a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800b550 <__ieee754_pow+0x3e8>
 800b49e:	eeb0 8a47 	vmov.f32	s16, s14
 800b4a2:	eef0 8a67 	vmov.f32	s17, s15
 800b4a6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b4aa:	2600      	movs	r6, #0
 800b4ac:	4632      	mov	r2, r6
 800b4ae:	463b      	mov	r3, r7
 800b4b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4b4:	f7f4 ff00 	bl	80002b8 <__aeabi_dsub>
 800b4b8:	4622      	mov	r2, r4
 800b4ba:	462b      	mov	r3, r5
 800b4bc:	f7f5 f8b4 	bl	8000628 <__aeabi_dmul>
 800b4c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b4c4:	4680      	mov	r8, r0
 800b4c6:	4689      	mov	r9, r1
 800b4c8:	4650      	mov	r0, sl
 800b4ca:	4659      	mov	r1, fp
 800b4cc:	f7f5 f8ac 	bl	8000628 <__aeabi_dmul>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4640      	mov	r0, r8
 800b4d6:	4649      	mov	r1, r9
 800b4d8:	f7f4 fef0 	bl	80002bc <__adddf3>
 800b4dc:	4632      	mov	r2, r6
 800b4de:	463b      	mov	r3, r7
 800b4e0:	4680      	mov	r8, r0
 800b4e2:	4689      	mov	r9, r1
 800b4e4:	4620      	mov	r0, r4
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f5 f89e 	bl	8000628 <__aeabi_dmul>
 800b4ec:	460b      	mov	r3, r1
 800b4ee:	4604      	mov	r4, r0
 800b4f0:	460d      	mov	r5, r1
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	4649      	mov	r1, r9
 800b4f6:	4640      	mov	r0, r8
 800b4f8:	f7f4 fee0 	bl	80002bc <__adddf3>
 800b4fc:	4b19      	ldr	r3, [pc, #100]	; (800b564 <__ieee754_pow+0x3fc>)
 800b4fe:	4299      	cmp	r1, r3
 800b500:	ec45 4b19 	vmov	d9, r4, r5
 800b504:	4606      	mov	r6, r0
 800b506:	460f      	mov	r7, r1
 800b508:	468b      	mov	fp, r1
 800b50a:	f340 82f0 	ble.w	800baee <__ieee754_pow+0x986>
 800b50e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b512:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b516:	4303      	orrs	r3, r0
 800b518:	f000 81e4 	beq.w	800b8e4 <__ieee754_pow+0x77c>
 800b51c:	ec51 0b18 	vmov	r0, r1, d8
 800b520:	2200      	movs	r2, #0
 800b522:	2300      	movs	r3, #0
 800b524:	f7f5 faf2 	bl	8000b0c <__aeabi_dcmplt>
 800b528:	3800      	subs	r0, #0
 800b52a:	bf18      	it	ne
 800b52c:	2001      	movne	r0, #1
 800b52e:	e72b      	b.n	800b388 <__ieee754_pow+0x220>
 800b530:	60000000 	.word	0x60000000
 800b534:	3ff71547 	.word	0x3ff71547
 800b538:	f85ddf44 	.word	0xf85ddf44
 800b53c:	3e54ae0b 	.word	0x3e54ae0b
 800b540:	55555555 	.word	0x55555555
 800b544:	3fd55555 	.word	0x3fd55555
 800b548:	652b82fe 	.word	0x652b82fe
 800b54c:	3ff71547 	.word	0x3ff71547
 800b550:	00000000 	.word	0x00000000
 800b554:	bff00000 	.word	0xbff00000
 800b558:	3ff00000 	.word	0x3ff00000
 800b55c:	3fd00000 	.word	0x3fd00000
 800b560:	3fe00000 	.word	0x3fe00000
 800b564:	408fffff 	.word	0x408fffff
 800b568:	4bd5      	ldr	r3, [pc, #852]	; (800b8c0 <__ieee754_pow+0x758>)
 800b56a:	402b      	ands	r3, r5
 800b56c:	2200      	movs	r2, #0
 800b56e:	b92b      	cbnz	r3, 800b57c <__ieee754_pow+0x414>
 800b570:	4bd4      	ldr	r3, [pc, #848]	; (800b8c4 <__ieee754_pow+0x75c>)
 800b572:	f7f5 f859 	bl	8000628 <__aeabi_dmul>
 800b576:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b57a:	460c      	mov	r4, r1
 800b57c:	1523      	asrs	r3, r4, #20
 800b57e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b582:	4413      	add	r3, r2
 800b584:	9305      	str	r3, [sp, #20]
 800b586:	4bd0      	ldr	r3, [pc, #832]	; (800b8c8 <__ieee754_pow+0x760>)
 800b588:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b58c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b590:	429c      	cmp	r4, r3
 800b592:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b596:	dd08      	ble.n	800b5aa <__ieee754_pow+0x442>
 800b598:	4bcc      	ldr	r3, [pc, #816]	; (800b8cc <__ieee754_pow+0x764>)
 800b59a:	429c      	cmp	r4, r3
 800b59c:	f340 8162 	ble.w	800b864 <__ieee754_pow+0x6fc>
 800b5a0:	9b05      	ldr	r3, [sp, #20]
 800b5a2:	3301      	adds	r3, #1
 800b5a4:	9305      	str	r3, [sp, #20]
 800b5a6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b5aa:	2400      	movs	r4, #0
 800b5ac:	00e3      	lsls	r3, r4, #3
 800b5ae:	9307      	str	r3, [sp, #28]
 800b5b0:	4bc7      	ldr	r3, [pc, #796]	; (800b8d0 <__ieee754_pow+0x768>)
 800b5b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5b6:	ed93 7b00 	vldr	d7, [r3]
 800b5ba:	4629      	mov	r1, r5
 800b5bc:	ec53 2b17 	vmov	r2, r3, d7
 800b5c0:	eeb0 9a47 	vmov.f32	s18, s14
 800b5c4:	eef0 9a67 	vmov.f32	s19, s15
 800b5c8:	4682      	mov	sl, r0
 800b5ca:	f7f4 fe75 	bl	80002b8 <__aeabi_dsub>
 800b5ce:	4652      	mov	r2, sl
 800b5d0:	4606      	mov	r6, r0
 800b5d2:	460f      	mov	r7, r1
 800b5d4:	462b      	mov	r3, r5
 800b5d6:	ec51 0b19 	vmov	r0, r1, d9
 800b5da:	f7f4 fe6f 	bl	80002bc <__adddf3>
 800b5de:	4602      	mov	r2, r0
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	49bb      	ldr	r1, [pc, #748]	; (800b8d4 <__ieee754_pow+0x76c>)
 800b5e6:	f7f5 f949 	bl	800087c <__aeabi_ddiv>
 800b5ea:	ec41 0b1a 	vmov	d10, r0, r1
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	4630      	mov	r0, r6
 800b5f4:	4639      	mov	r1, r7
 800b5f6:	f7f5 f817 	bl	8000628 <__aeabi_dmul>
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b600:	9302      	str	r3, [sp, #8]
 800b602:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b606:	46ab      	mov	fp, r5
 800b608:	106d      	asrs	r5, r5, #1
 800b60a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b60e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b612:	ec41 0b18 	vmov	d8, r0, r1
 800b616:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800b61a:	2200      	movs	r2, #0
 800b61c:	4640      	mov	r0, r8
 800b61e:	4649      	mov	r1, r9
 800b620:	4614      	mov	r4, r2
 800b622:	461d      	mov	r5, r3
 800b624:	f7f5 f800 	bl	8000628 <__aeabi_dmul>
 800b628:	4602      	mov	r2, r0
 800b62a:	460b      	mov	r3, r1
 800b62c:	4630      	mov	r0, r6
 800b62e:	4639      	mov	r1, r7
 800b630:	f7f4 fe42 	bl	80002b8 <__aeabi_dsub>
 800b634:	ec53 2b19 	vmov	r2, r3, d9
 800b638:	4606      	mov	r6, r0
 800b63a:	460f      	mov	r7, r1
 800b63c:	4620      	mov	r0, r4
 800b63e:	4629      	mov	r1, r5
 800b640:	f7f4 fe3a 	bl	80002b8 <__aeabi_dsub>
 800b644:	4602      	mov	r2, r0
 800b646:	460b      	mov	r3, r1
 800b648:	4650      	mov	r0, sl
 800b64a:	4659      	mov	r1, fp
 800b64c:	f7f4 fe34 	bl	80002b8 <__aeabi_dsub>
 800b650:	4642      	mov	r2, r8
 800b652:	464b      	mov	r3, r9
 800b654:	f7f4 ffe8 	bl	8000628 <__aeabi_dmul>
 800b658:	4602      	mov	r2, r0
 800b65a:	460b      	mov	r3, r1
 800b65c:	4630      	mov	r0, r6
 800b65e:	4639      	mov	r1, r7
 800b660:	f7f4 fe2a 	bl	80002b8 <__aeabi_dsub>
 800b664:	ec53 2b1a 	vmov	r2, r3, d10
 800b668:	f7f4 ffde 	bl	8000628 <__aeabi_dmul>
 800b66c:	ec53 2b18 	vmov	r2, r3, d8
 800b670:	ec41 0b19 	vmov	d9, r0, r1
 800b674:	ec51 0b18 	vmov	r0, r1, d8
 800b678:	f7f4 ffd6 	bl	8000628 <__aeabi_dmul>
 800b67c:	a37c      	add	r3, pc, #496	; (adr r3, 800b870 <__ieee754_pow+0x708>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	4604      	mov	r4, r0
 800b684:	460d      	mov	r5, r1
 800b686:	f7f4 ffcf 	bl	8000628 <__aeabi_dmul>
 800b68a:	a37b      	add	r3, pc, #492	; (adr r3, 800b878 <__ieee754_pow+0x710>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f7f4 fe14 	bl	80002bc <__adddf3>
 800b694:	4622      	mov	r2, r4
 800b696:	462b      	mov	r3, r5
 800b698:	f7f4 ffc6 	bl	8000628 <__aeabi_dmul>
 800b69c:	a378      	add	r3, pc, #480	; (adr r3, 800b880 <__ieee754_pow+0x718>)
 800b69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a2:	f7f4 fe0b 	bl	80002bc <__adddf3>
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	462b      	mov	r3, r5
 800b6aa:	f7f4 ffbd 	bl	8000628 <__aeabi_dmul>
 800b6ae:	a376      	add	r3, pc, #472	; (adr r3, 800b888 <__ieee754_pow+0x720>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 fe02 	bl	80002bc <__adddf3>
 800b6b8:	4622      	mov	r2, r4
 800b6ba:	462b      	mov	r3, r5
 800b6bc:	f7f4 ffb4 	bl	8000628 <__aeabi_dmul>
 800b6c0:	a373      	add	r3, pc, #460	; (adr r3, 800b890 <__ieee754_pow+0x728>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7f4 fdf9 	bl	80002bc <__adddf3>
 800b6ca:	4622      	mov	r2, r4
 800b6cc:	462b      	mov	r3, r5
 800b6ce:	f7f4 ffab 	bl	8000628 <__aeabi_dmul>
 800b6d2:	a371      	add	r3, pc, #452	; (adr r3, 800b898 <__ieee754_pow+0x730>)
 800b6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d8:	f7f4 fdf0 	bl	80002bc <__adddf3>
 800b6dc:	4622      	mov	r2, r4
 800b6de:	4606      	mov	r6, r0
 800b6e0:	460f      	mov	r7, r1
 800b6e2:	462b      	mov	r3, r5
 800b6e4:	4620      	mov	r0, r4
 800b6e6:	4629      	mov	r1, r5
 800b6e8:	f7f4 ff9e 	bl	8000628 <__aeabi_dmul>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	460b      	mov	r3, r1
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f4 ff98 	bl	8000628 <__aeabi_dmul>
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	460d      	mov	r5, r1
 800b6fe:	464b      	mov	r3, r9
 800b700:	ec51 0b18 	vmov	r0, r1, d8
 800b704:	f7f4 fdda 	bl	80002bc <__adddf3>
 800b708:	ec53 2b19 	vmov	r2, r3, d9
 800b70c:	f7f4 ff8c 	bl	8000628 <__aeabi_dmul>
 800b710:	4622      	mov	r2, r4
 800b712:	462b      	mov	r3, r5
 800b714:	f7f4 fdd2 	bl	80002bc <__adddf3>
 800b718:	4642      	mov	r2, r8
 800b71a:	4682      	mov	sl, r0
 800b71c:	468b      	mov	fp, r1
 800b71e:	464b      	mov	r3, r9
 800b720:	4640      	mov	r0, r8
 800b722:	4649      	mov	r1, r9
 800b724:	f7f4 ff80 	bl	8000628 <__aeabi_dmul>
 800b728:	4b6b      	ldr	r3, [pc, #428]	; (800b8d8 <__ieee754_pow+0x770>)
 800b72a:	2200      	movs	r2, #0
 800b72c:	4606      	mov	r6, r0
 800b72e:	460f      	mov	r7, r1
 800b730:	f7f4 fdc4 	bl	80002bc <__adddf3>
 800b734:	4652      	mov	r2, sl
 800b736:	465b      	mov	r3, fp
 800b738:	f7f4 fdc0 	bl	80002bc <__adddf3>
 800b73c:	2000      	movs	r0, #0
 800b73e:	4604      	mov	r4, r0
 800b740:	460d      	mov	r5, r1
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	4640      	mov	r0, r8
 800b748:	4649      	mov	r1, r9
 800b74a:	f7f4 ff6d 	bl	8000628 <__aeabi_dmul>
 800b74e:	4b62      	ldr	r3, [pc, #392]	; (800b8d8 <__ieee754_pow+0x770>)
 800b750:	4680      	mov	r8, r0
 800b752:	4689      	mov	r9, r1
 800b754:	2200      	movs	r2, #0
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f4 fdad 	bl	80002b8 <__aeabi_dsub>
 800b75e:	4632      	mov	r2, r6
 800b760:	463b      	mov	r3, r7
 800b762:	f7f4 fda9 	bl	80002b8 <__aeabi_dsub>
 800b766:	4602      	mov	r2, r0
 800b768:	460b      	mov	r3, r1
 800b76a:	4650      	mov	r0, sl
 800b76c:	4659      	mov	r1, fp
 800b76e:	f7f4 fda3 	bl	80002b8 <__aeabi_dsub>
 800b772:	ec53 2b18 	vmov	r2, r3, d8
 800b776:	f7f4 ff57 	bl	8000628 <__aeabi_dmul>
 800b77a:	4622      	mov	r2, r4
 800b77c:	4606      	mov	r6, r0
 800b77e:	460f      	mov	r7, r1
 800b780:	462b      	mov	r3, r5
 800b782:	ec51 0b19 	vmov	r0, r1, d9
 800b786:	f7f4 ff4f 	bl	8000628 <__aeabi_dmul>
 800b78a:	4602      	mov	r2, r0
 800b78c:	460b      	mov	r3, r1
 800b78e:	4630      	mov	r0, r6
 800b790:	4639      	mov	r1, r7
 800b792:	f7f4 fd93 	bl	80002bc <__adddf3>
 800b796:	4606      	mov	r6, r0
 800b798:	460f      	mov	r7, r1
 800b79a:	4602      	mov	r2, r0
 800b79c:	460b      	mov	r3, r1
 800b79e:	4640      	mov	r0, r8
 800b7a0:	4649      	mov	r1, r9
 800b7a2:	f7f4 fd8b 	bl	80002bc <__adddf3>
 800b7a6:	a33e      	add	r3, pc, #248	; (adr r3, 800b8a0 <__ieee754_pow+0x738>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	4604      	mov	r4, r0
 800b7b0:	460d      	mov	r5, r1
 800b7b2:	f7f4 ff39 	bl	8000628 <__aeabi_dmul>
 800b7b6:	4642      	mov	r2, r8
 800b7b8:	ec41 0b18 	vmov	d8, r0, r1
 800b7bc:	464b      	mov	r3, r9
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	f7f4 fd79 	bl	80002b8 <__aeabi_dsub>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	4639      	mov	r1, r7
 800b7ce:	f7f4 fd73 	bl	80002b8 <__aeabi_dsub>
 800b7d2:	a335      	add	r3, pc, #212	; (adr r3, 800b8a8 <__ieee754_pow+0x740>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	f7f4 ff26 	bl	8000628 <__aeabi_dmul>
 800b7dc:	a334      	add	r3, pc, #208	; (adr r3, 800b8b0 <__ieee754_pow+0x748>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	4606      	mov	r6, r0
 800b7e4:	460f      	mov	r7, r1
 800b7e6:	4620      	mov	r0, r4
 800b7e8:	4629      	mov	r1, r5
 800b7ea:	f7f4 ff1d 	bl	8000628 <__aeabi_dmul>
 800b7ee:	4602      	mov	r2, r0
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7f4 fd61 	bl	80002bc <__adddf3>
 800b7fa:	9a07      	ldr	r2, [sp, #28]
 800b7fc:	4b37      	ldr	r3, [pc, #220]	; (800b8dc <__ieee754_pow+0x774>)
 800b7fe:	4413      	add	r3, r2
 800b800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b804:	f7f4 fd5a 	bl	80002bc <__adddf3>
 800b808:	4682      	mov	sl, r0
 800b80a:	9805      	ldr	r0, [sp, #20]
 800b80c:	468b      	mov	fp, r1
 800b80e:	f7f4 fea1 	bl	8000554 <__aeabi_i2d>
 800b812:	9a07      	ldr	r2, [sp, #28]
 800b814:	4b32      	ldr	r3, [pc, #200]	; (800b8e0 <__ieee754_pow+0x778>)
 800b816:	4413      	add	r3, r2
 800b818:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b81c:	4606      	mov	r6, r0
 800b81e:	460f      	mov	r7, r1
 800b820:	4652      	mov	r2, sl
 800b822:	465b      	mov	r3, fp
 800b824:	ec51 0b18 	vmov	r0, r1, d8
 800b828:	f7f4 fd48 	bl	80002bc <__adddf3>
 800b82c:	4642      	mov	r2, r8
 800b82e:	464b      	mov	r3, r9
 800b830:	f7f4 fd44 	bl	80002bc <__adddf3>
 800b834:	4632      	mov	r2, r6
 800b836:	463b      	mov	r3, r7
 800b838:	f7f4 fd40 	bl	80002bc <__adddf3>
 800b83c:	2000      	movs	r0, #0
 800b83e:	4632      	mov	r2, r6
 800b840:	463b      	mov	r3, r7
 800b842:	4604      	mov	r4, r0
 800b844:	460d      	mov	r5, r1
 800b846:	f7f4 fd37 	bl	80002b8 <__aeabi_dsub>
 800b84a:	4642      	mov	r2, r8
 800b84c:	464b      	mov	r3, r9
 800b84e:	f7f4 fd33 	bl	80002b8 <__aeabi_dsub>
 800b852:	ec53 2b18 	vmov	r2, r3, d8
 800b856:	f7f4 fd2f 	bl	80002b8 <__aeabi_dsub>
 800b85a:	4602      	mov	r2, r0
 800b85c:	460b      	mov	r3, r1
 800b85e:	4650      	mov	r0, sl
 800b860:	4659      	mov	r1, fp
 800b862:	e610      	b.n	800b486 <__ieee754_pow+0x31e>
 800b864:	2401      	movs	r4, #1
 800b866:	e6a1      	b.n	800b5ac <__ieee754_pow+0x444>
 800b868:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800b8b8 <__ieee754_pow+0x750>
 800b86c:	e617      	b.n	800b49e <__ieee754_pow+0x336>
 800b86e:	bf00      	nop
 800b870:	4a454eef 	.word	0x4a454eef
 800b874:	3fca7e28 	.word	0x3fca7e28
 800b878:	93c9db65 	.word	0x93c9db65
 800b87c:	3fcd864a 	.word	0x3fcd864a
 800b880:	a91d4101 	.word	0xa91d4101
 800b884:	3fd17460 	.word	0x3fd17460
 800b888:	518f264d 	.word	0x518f264d
 800b88c:	3fd55555 	.word	0x3fd55555
 800b890:	db6fabff 	.word	0xdb6fabff
 800b894:	3fdb6db6 	.word	0x3fdb6db6
 800b898:	33333303 	.word	0x33333303
 800b89c:	3fe33333 	.word	0x3fe33333
 800b8a0:	e0000000 	.word	0xe0000000
 800b8a4:	3feec709 	.word	0x3feec709
 800b8a8:	dc3a03fd 	.word	0xdc3a03fd
 800b8ac:	3feec709 	.word	0x3feec709
 800b8b0:	145b01f5 	.word	0x145b01f5
 800b8b4:	be3e2fe0 	.word	0xbe3e2fe0
 800b8b8:	00000000 	.word	0x00000000
 800b8bc:	3ff00000 	.word	0x3ff00000
 800b8c0:	7ff00000 	.word	0x7ff00000
 800b8c4:	43400000 	.word	0x43400000
 800b8c8:	0003988e 	.word	0x0003988e
 800b8cc:	000bb679 	.word	0x000bb679
 800b8d0:	0800c308 	.word	0x0800c308
 800b8d4:	3ff00000 	.word	0x3ff00000
 800b8d8:	40080000 	.word	0x40080000
 800b8dc:	0800c328 	.word	0x0800c328
 800b8e0:	0800c318 	.word	0x0800c318
 800b8e4:	a3b3      	add	r3, pc, #716	; (adr r3, 800bbb4 <__ieee754_pow+0xa4c>)
 800b8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	f7f4 fce5 	bl	80002bc <__adddf3>
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	ec41 0b1a 	vmov	d10, r0, r1
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	4630      	mov	r0, r6
 800b8fc:	4639      	mov	r1, r7
 800b8fe:	f7f4 fcdb 	bl	80002b8 <__aeabi_dsub>
 800b902:	4602      	mov	r2, r0
 800b904:	460b      	mov	r3, r1
 800b906:	ec51 0b1a 	vmov	r0, r1, d10
 800b90a:	f7f5 f91d 	bl	8000b48 <__aeabi_dcmpgt>
 800b90e:	2800      	cmp	r0, #0
 800b910:	f47f ae04 	bne.w	800b51c <__ieee754_pow+0x3b4>
 800b914:	4aa2      	ldr	r2, [pc, #648]	; (800bba0 <__ieee754_pow+0xa38>)
 800b916:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b91a:	4293      	cmp	r3, r2
 800b91c:	f340 8107 	ble.w	800bb2e <__ieee754_pow+0x9c6>
 800b920:	151b      	asrs	r3, r3, #20
 800b922:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b926:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b92a:	fa4a fa03 	asr.w	sl, sl, r3
 800b92e:	44da      	add	sl, fp
 800b930:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800b934:	489b      	ldr	r0, [pc, #620]	; (800bba4 <__ieee754_pow+0xa3c>)
 800b936:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b93a:	4108      	asrs	r0, r1
 800b93c:	ea00 030a 	and.w	r3, r0, sl
 800b940:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800b944:	f1c1 0114 	rsb	r1, r1, #20
 800b948:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b94c:	fa4a fa01 	asr.w	sl, sl, r1
 800b950:	f1bb 0f00 	cmp.w	fp, #0
 800b954:	f04f 0200 	mov.w	r2, #0
 800b958:	4620      	mov	r0, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	bfb8      	it	lt
 800b95e:	f1ca 0a00 	rsblt	sl, sl, #0
 800b962:	f7f4 fca9 	bl	80002b8 <__aeabi_dsub>
 800b966:	ec41 0b19 	vmov	d9, r0, r1
 800b96a:	4642      	mov	r2, r8
 800b96c:	464b      	mov	r3, r9
 800b96e:	ec51 0b19 	vmov	r0, r1, d9
 800b972:	f7f4 fca3 	bl	80002bc <__adddf3>
 800b976:	a37a      	add	r3, pc, #488	; (adr r3, 800bb60 <__ieee754_pow+0x9f8>)
 800b978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b97c:	2000      	movs	r0, #0
 800b97e:	4604      	mov	r4, r0
 800b980:	460d      	mov	r5, r1
 800b982:	f7f4 fe51 	bl	8000628 <__aeabi_dmul>
 800b986:	ec53 2b19 	vmov	r2, r3, d9
 800b98a:	4606      	mov	r6, r0
 800b98c:	460f      	mov	r7, r1
 800b98e:	4620      	mov	r0, r4
 800b990:	4629      	mov	r1, r5
 800b992:	f7f4 fc91 	bl	80002b8 <__aeabi_dsub>
 800b996:	4602      	mov	r2, r0
 800b998:	460b      	mov	r3, r1
 800b99a:	4640      	mov	r0, r8
 800b99c:	4649      	mov	r1, r9
 800b99e:	f7f4 fc8b 	bl	80002b8 <__aeabi_dsub>
 800b9a2:	a371      	add	r3, pc, #452	; (adr r3, 800bb68 <__ieee754_pow+0xa00>)
 800b9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9a8:	f7f4 fe3e 	bl	8000628 <__aeabi_dmul>
 800b9ac:	a370      	add	r3, pc, #448	; (adr r3, 800bb70 <__ieee754_pow+0xa08>)
 800b9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b2:	4680      	mov	r8, r0
 800b9b4:	4689      	mov	r9, r1
 800b9b6:	4620      	mov	r0, r4
 800b9b8:	4629      	mov	r1, r5
 800b9ba:	f7f4 fe35 	bl	8000628 <__aeabi_dmul>
 800b9be:	4602      	mov	r2, r0
 800b9c0:	460b      	mov	r3, r1
 800b9c2:	4640      	mov	r0, r8
 800b9c4:	4649      	mov	r1, r9
 800b9c6:	f7f4 fc79 	bl	80002bc <__adddf3>
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	460d      	mov	r5, r1
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	4630      	mov	r0, r6
 800b9d4:	4639      	mov	r1, r7
 800b9d6:	f7f4 fc71 	bl	80002bc <__adddf3>
 800b9da:	4632      	mov	r2, r6
 800b9dc:	463b      	mov	r3, r7
 800b9de:	4680      	mov	r8, r0
 800b9e0:	4689      	mov	r9, r1
 800b9e2:	f7f4 fc69 	bl	80002b8 <__aeabi_dsub>
 800b9e6:	4602      	mov	r2, r0
 800b9e8:	460b      	mov	r3, r1
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	f7f4 fc63 	bl	80002b8 <__aeabi_dsub>
 800b9f2:	4642      	mov	r2, r8
 800b9f4:	4606      	mov	r6, r0
 800b9f6:	460f      	mov	r7, r1
 800b9f8:	464b      	mov	r3, r9
 800b9fa:	4640      	mov	r0, r8
 800b9fc:	4649      	mov	r1, r9
 800b9fe:	f7f4 fe13 	bl	8000628 <__aeabi_dmul>
 800ba02:	a35d      	add	r3, pc, #372	; (adr r3, 800bb78 <__ieee754_pow+0xa10>)
 800ba04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba08:	4604      	mov	r4, r0
 800ba0a:	460d      	mov	r5, r1
 800ba0c:	f7f4 fe0c 	bl	8000628 <__aeabi_dmul>
 800ba10:	a35b      	add	r3, pc, #364	; (adr r3, 800bb80 <__ieee754_pow+0xa18>)
 800ba12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba16:	f7f4 fc4f 	bl	80002b8 <__aeabi_dsub>
 800ba1a:	4622      	mov	r2, r4
 800ba1c:	462b      	mov	r3, r5
 800ba1e:	f7f4 fe03 	bl	8000628 <__aeabi_dmul>
 800ba22:	a359      	add	r3, pc, #356	; (adr r3, 800bb88 <__ieee754_pow+0xa20>)
 800ba24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba28:	f7f4 fc48 	bl	80002bc <__adddf3>
 800ba2c:	4622      	mov	r2, r4
 800ba2e:	462b      	mov	r3, r5
 800ba30:	f7f4 fdfa 	bl	8000628 <__aeabi_dmul>
 800ba34:	a356      	add	r3, pc, #344	; (adr r3, 800bb90 <__ieee754_pow+0xa28>)
 800ba36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3a:	f7f4 fc3d 	bl	80002b8 <__aeabi_dsub>
 800ba3e:	4622      	mov	r2, r4
 800ba40:	462b      	mov	r3, r5
 800ba42:	f7f4 fdf1 	bl	8000628 <__aeabi_dmul>
 800ba46:	a354      	add	r3, pc, #336	; (adr r3, 800bb98 <__ieee754_pow+0xa30>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	f7f4 fc36 	bl	80002bc <__adddf3>
 800ba50:	4622      	mov	r2, r4
 800ba52:	462b      	mov	r3, r5
 800ba54:	f7f4 fde8 	bl	8000628 <__aeabi_dmul>
 800ba58:	4602      	mov	r2, r0
 800ba5a:	460b      	mov	r3, r1
 800ba5c:	4640      	mov	r0, r8
 800ba5e:	4649      	mov	r1, r9
 800ba60:	f7f4 fc2a 	bl	80002b8 <__aeabi_dsub>
 800ba64:	4604      	mov	r4, r0
 800ba66:	460d      	mov	r5, r1
 800ba68:	4602      	mov	r2, r0
 800ba6a:	460b      	mov	r3, r1
 800ba6c:	4640      	mov	r0, r8
 800ba6e:	4649      	mov	r1, r9
 800ba70:	f7f4 fdda 	bl	8000628 <__aeabi_dmul>
 800ba74:	2200      	movs	r2, #0
 800ba76:	ec41 0b19 	vmov	d9, r0, r1
 800ba7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ba7e:	4620      	mov	r0, r4
 800ba80:	4629      	mov	r1, r5
 800ba82:	f7f4 fc19 	bl	80002b8 <__aeabi_dsub>
 800ba86:	4602      	mov	r2, r0
 800ba88:	460b      	mov	r3, r1
 800ba8a:	ec51 0b19 	vmov	r0, r1, d9
 800ba8e:	f7f4 fef5 	bl	800087c <__aeabi_ddiv>
 800ba92:	4632      	mov	r2, r6
 800ba94:	4604      	mov	r4, r0
 800ba96:	460d      	mov	r5, r1
 800ba98:	463b      	mov	r3, r7
 800ba9a:	4640      	mov	r0, r8
 800ba9c:	4649      	mov	r1, r9
 800ba9e:	f7f4 fdc3 	bl	8000628 <__aeabi_dmul>
 800baa2:	4632      	mov	r2, r6
 800baa4:	463b      	mov	r3, r7
 800baa6:	f7f4 fc09 	bl	80002bc <__adddf3>
 800baaa:	4602      	mov	r2, r0
 800baac:	460b      	mov	r3, r1
 800baae:	4620      	mov	r0, r4
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7f4 fc01 	bl	80002b8 <__aeabi_dsub>
 800bab6:	4642      	mov	r2, r8
 800bab8:	464b      	mov	r3, r9
 800baba:	f7f4 fbfd 	bl	80002b8 <__aeabi_dsub>
 800babe:	460b      	mov	r3, r1
 800bac0:	4602      	mov	r2, r0
 800bac2:	4939      	ldr	r1, [pc, #228]	; (800bba8 <__ieee754_pow+0xa40>)
 800bac4:	2000      	movs	r0, #0
 800bac6:	f7f4 fbf7 	bl	80002b8 <__aeabi_dsub>
 800baca:	ec41 0b10 	vmov	d0, r0, r1
 800bace:	ee10 3a90 	vmov	r3, s1
 800bad2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bad6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bada:	da2b      	bge.n	800bb34 <__ieee754_pow+0x9cc>
 800badc:	4650      	mov	r0, sl
 800bade:	f000 f8a7 	bl	800bc30 <scalbn>
 800bae2:	ec51 0b10 	vmov	r0, r1, d0
 800bae6:	ec53 2b18 	vmov	r2, r3, d8
 800baea:	f7ff bbee 	b.w	800b2ca <__ieee754_pow+0x162>
 800baee:	4b2f      	ldr	r3, [pc, #188]	; (800bbac <__ieee754_pow+0xa44>)
 800baf0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800baf4:	429e      	cmp	r6, r3
 800baf6:	f77f af0d 	ble.w	800b914 <__ieee754_pow+0x7ac>
 800bafa:	4b2d      	ldr	r3, [pc, #180]	; (800bbb0 <__ieee754_pow+0xa48>)
 800bafc:	440b      	add	r3, r1
 800bafe:	4303      	orrs	r3, r0
 800bb00:	d009      	beq.n	800bb16 <__ieee754_pow+0x9ae>
 800bb02:	ec51 0b18 	vmov	r0, r1, d8
 800bb06:	2200      	movs	r2, #0
 800bb08:	2300      	movs	r3, #0
 800bb0a:	f7f4 ffff 	bl	8000b0c <__aeabi_dcmplt>
 800bb0e:	3800      	subs	r0, #0
 800bb10:	bf18      	it	ne
 800bb12:	2001      	movne	r0, #1
 800bb14:	e448      	b.n	800b3a8 <__ieee754_pow+0x240>
 800bb16:	4622      	mov	r2, r4
 800bb18:	462b      	mov	r3, r5
 800bb1a:	f7f4 fbcd 	bl	80002b8 <__aeabi_dsub>
 800bb1e:	4642      	mov	r2, r8
 800bb20:	464b      	mov	r3, r9
 800bb22:	f7f5 f807 	bl	8000b34 <__aeabi_dcmpge>
 800bb26:	2800      	cmp	r0, #0
 800bb28:	f43f aef4 	beq.w	800b914 <__ieee754_pow+0x7ac>
 800bb2c:	e7e9      	b.n	800bb02 <__ieee754_pow+0x99a>
 800bb2e:	f04f 0a00 	mov.w	sl, #0
 800bb32:	e71a      	b.n	800b96a <__ieee754_pow+0x802>
 800bb34:	ec51 0b10 	vmov	r0, r1, d0
 800bb38:	4619      	mov	r1, r3
 800bb3a:	e7d4      	b.n	800bae6 <__ieee754_pow+0x97e>
 800bb3c:	491a      	ldr	r1, [pc, #104]	; (800bba8 <__ieee754_pow+0xa40>)
 800bb3e:	2000      	movs	r0, #0
 800bb40:	f7ff bb31 	b.w	800b1a6 <__ieee754_pow+0x3e>
 800bb44:	2000      	movs	r0, #0
 800bb46:	2100      	movs	r1, #0
 800bb48:	f7ff bb2d 	b.w	800b1a6 <__ieee754_pow+0x3e>
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	4639      	mov	r1, r7
 800bb50:	f7ff bb29 	b.w	800b1a6 <__ieee754_pow+0x3e>
 800bb54:	9204      	str	r2, [sp, #16]
 800bb56:	f7ff bb7b 	b.w	800b250 <__ieee754_pow+0xe8>
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	f7ff bb65 	b.w	800b22a <__ieee754_pow+0xc2>
 800bb60:	00000000 	.word	0x00000000
 800bb64:	3fe62e43 	.word	0x3fe62e43
 800bb68:	fefa39ef 	.word	0xfefa39ef
 800bb6c:	3fe62e42 	.word	0x3fe62e42
 800bb70:	0ca86c39 	.word	0x0ca86c39
 800bb74:	be205c61 	.word	0xbe205c61
 800bb78:	72bea4d0 	.word	0x72bea4d0
 800bb7c:	3e663769 	.word	0x3e663769
 800bb80:	c5d26bf1 	.word	0xc5d26bf1
 800bb84:	3ebbbd41 	.word	0x3ebbbd41
 800bb88:	af25de2c 	.word	0xaf25de2c
 800bb8c:	3f11566a 	.word	0x3f11566a
 800bb90:	16bebd93 	.word	0x16bebd93
 800bb94:	3f66c16c 	.word	0x3f66c16c
 800bb98:	5555553e 	.word	0x5555553e
 800bb9c:	3fc55555 	.word	0x3fc55555
 800bba0:	3fe00000 	.word	0x3fe00000
 800bba4:	fff00000 	.word	0xfff00000
 800bba8:	3ff00000 	.word	0x3ff00000
 800bbac:	4090cbff 	.word	0x4090cbff
 800bbb0:	3f6f3400 	.word	0x3f6f3400
 800bbb4:	652b82fe 	.word	0x652b82fe
 800bbb8:	3c971547 	.word	0x3c971547

0800bbbc <with_errno>:
 800bbbc:	b570      	push	{r4, r5, r6, lr}
 800bbbe:	4604      	mov	r4, r0
 800bbc0:	460d      	mov	r5, r1
 800bbc2:	4616      	mov	r6, r2
 800bbc4:	f7fd f9a2 	bl	8008f0c <__errno>
 800bbc8:	4629      	mov	r1, r5
 800bbca:	6006      	str	r6, [r0, #0]
 800bbcc:	4620      	mov	r0, r4
 800bbce:	bd70      	pop	{r4, r5, r6, pc}

0800bbd0 <xflow>:
 800bbd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbd2:	4614      	mov	r4, r2
 800bbd4:	461d      	mov	r5, r3
 800bbd6:	b108      	cbz	r0, 800bbdc <xflow+0xc>
 800bbd8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800bbdc:	e9cd 2300 	strd	r2, r3, [sp]
 800bbe0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbe4:	4620      	mov	r0, r4
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	f7f4 fd1e 	bl	8000628 <__aeabi_dmul>
 800bbec:	2222      	movs	r2, #34	; 0x22
 800bbee:	b003      	add	sp, #12
 800bbf0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bbf4:	f7ff bfe2 	b.w	800bbbc <with_errno>

0800bbf8 <__math_uflow>:
 800bbf8:	b508      	push	{r3, lr}
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800bc00:	f7ff ffe6 	bl	800bbd0 <xflow>
 800bc04:	ec41 0b10 	vmov	d0, r0, r1
 800bc08:	bd08      	pop	{r3, pc}

0800bc0a <__math_oflow>:
 800bc0a:	b508      	push	{r3, lr}
 800bc0c:	2200      	movs	r2, #0
 800bc0e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800bc12:	f7ff ffdd 	bl	800bbd0 <xflow>
 800bc16:	ec41 0b10 	vmov	d0, r0, r1
 800bc1a:	bd08      	pop	{r3, pc}

0800bc1c <fabs>:
 800bc1c:	ec51 0b10 	vmov	r0, r1, d0
 800bc20:	ee10 2a10 	vmov	r2, s0
 800bc24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bc28:	ec43 2b10 	vmov	d0, r2, r3
 800bc2c:	4770      	bx	lr
	...

0800bc30 <scalbn>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	ec55 4b10 	vmov	r4, r5, d0
 800bc36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bc3a:	4606      	mov	r6, r0
 800bc3c:	462b      	mov	r3, r5
 800bc3e:	b999      	cbnz	r1, 800bc68 <scalbn+0x38>
 800bc40:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800bc44:	4323      	orrs	r3, r4
 800bc46:	d03f      	beq.n	800bcc8 <scalbn+0x98>
 800bc48:	4b35      	ldr	r3, [pc, #212]	; (800bd20 <scalbn+0xf0>)
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	ee10 0a10 	vmov	r0, s0
 800bc50:	2200      	movs	r2, #0
 800bc52:	f7f4 fce9 	bl	8000628 <__aeabi_dmul>
 800bc56:	4b33      	ldr	r3, [pc, #204]	; (800bd24 <scalbn+0xf4>)
 800bc58:	429e      	cmp	r6, r3
 800bc5a:	4604      	mov	r4, r0
 800bc5c:	460d      	mov	r5, r1
 800bc5e:	da10      	bge.n	800bc82 <scalbn+0x52>
 800bc60:	a327      	add	r3, pc, #156	; (adr r3, 800bd00 <scalbn+0xd0>)
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	e01f      	b.n	800bca8 <scalbn+0x78>
 800bc68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bc6c:	4291      	cmp	r1, r2
 800bc6e:	d10c      	bne.n	800bc8a <scalbn+0x5a>
 800bc70:	ee10 2a10 	vmov	r2, s0
 800bc74:	4620      	mov	r0, r4
 800bc76:	4629      	mov	r1, r5
 800bc78:	f7f4 fb20 	bl	80002bc <__adddf3>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	460d      	mov	r5, r1
 800bc80:	e022      	b.n	800bcc8 <scalbn+0x98>
 800bc82:	460b      	mov	r3, r1
 800bc84:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800bc88:	3936      	subs	r1, #54	; 0x36
 800bc8a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800bc8e:	4296      	cmp	r6, r2
 800bc90:	dd0d      	ble.n	800bcae <scalbn+0x7e>
 800bc92:	2d00      	cmp	r5, #0
 800bc94:	a11c      	add	r1, pc, #112	; (adr r1, 800bd08 <scalbn+0xd8>)
 800bc96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc9a:	da02      	bge.n	800bca2 <scalbn+0x72>
 800bc9c:	a11c      	add	r1, pc, #112	; (adr r1, 800bd10 <scalbn+0xe0>)
 800bc9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bca2:	a319      	add	r3, pc, #100	; (adr r3, 800bd08 <scalbn+0xd8>)
 800bca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bca8:	f7f4 fcbe 	bl	8000628 <__aeabi_dmul>
 800bcac:	e7e6      	b.n	800bc7c <scalbn+0x4c>
 800bcae:	1872      	adds	r2, r6, r1
 800bcb0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bcb4:	428a      	cmp	r2, r1
 800bcb6:	dcec      	bgt.n	800bc92 <scalbn+0x62>
 800bcb8:	2a00      	cmp	r2, #0
 800bcba:	dd08      	ble.n	800bcce <scalbn+0x9e>
 800bcbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800bcc8:	ec45 4b10 	vmov	d0, r4, r5
 800bccc:	bd70      	pop	{r4, r5, r6, pc}
 800bcce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bcd2:	da08      	bge.n	800bce6 <scalbn+0xb6>
 800bcd4:	2d00      	cmp	r5, #0
 800bcd6:	a10a      	add	r1, pc, #40	; (adr r1, 800bd00 <scalbn+0xd0>)
 800bcd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcdc:	dac0      	bge.n	800bc60 <scalbn+0x30>
 800bcde:	a10e      	add	r1, pc, #56	; (adr r1, 800bd18 <scalbn+0xe8>)
 800bce0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bce4:	e7bc      	b.n	800bc60 <scalbn+0x30>
 800bce6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bcea:	3236      	adds	r2, #54	; 0x36
 800bcec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bcf0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	4b0c      	ldr	r3, [pc, #48]	; (800bd28 <scalbn+0xf8>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	e7d5      	b.n	800bca8 <scalbn+0x78>
 800bcfc:	f3af 8000 	nop.w
 800bd00:	c2f8f359 	.word	0xc2f8f359
 800bd04:	01a56e1f 	.word	0x01a56e1f
 800bd08:	8800759c 	.word	0x8800759c
 800bd0c:	7e37e43c 	.word	0x7e37e43c
 800bd10:	8800759c 	.word	0x8800759c
 800bd14:	fe37e43c 	.word	0xfe37e43c
 800bd18:	c2f8f359 	.word	0xc2f8f359
 800bd1c:	81a56e1f 	.word	0x81a56e1f
 800bd20:	43500000 	.word	0x43500000
 800bd24:	ffff3cb0 	.word	0xffff3cb0
 800bd28:	3c900000 	.word	0x3c900000

0800bd2c <_init>:
 800bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2e:	bf00      	nop
 800bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd32:	bc08      	pop	{r3}
 800bd34:	469e      	mov	lr, r3
 800bd36:	4770      	bx	lr

0800bd38 <_fini>:
 800bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd3a:	bf00      	nop
 800bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd3e:	bc08      	pop	{r3}
 800bd40:	469e      	mov	lr, r3
 800bd42:	4770      	bx	lr
