
KalmanLab.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095e0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  080097a0  080097a0  000197a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d3c  08009d3c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009d3c  08009d3c  00019d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d44  08009d44  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d44  08009d44  00019d44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d48  08009d48  00019d48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009d4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  200001d4  08009f20  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  08009f20  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001a9c1  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000088  00000000  00000000  0003ac08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00019b2a  00000000  00000000  0003ac90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002ebb  00000000  00000000  000547ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001698  00000000  00000000  00057678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011e7a8  00000000  00000000  00058d10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001178  00000000  00000000  001774b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002da9b  00000000  00000000  00178630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000703c  00000000  00000000  001a60cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d4 	.word	0x200001d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009788 	.word	0x08009788

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	08009788 	.word	0x08009788

08000200 <kalman>:
.syntax unified
.global kalman


kalman:
    VPUSH.32 {s4, s5, s6}
 8000200:	ed2d 2a03 	vpush	{s4-s6}

    // calculate p
    VLDR.32 s4, [r0, #12]     // load p in s4
 8000204:	ed90 2a03 	vldr	s4, [r0, #12]
    VLDR.32 s5, [r0]         // load q in S5
 8000208:	edd0 2a00 	vldr	s5, [r0]
    VADD.F32 s4, s4, s5        // calculate p = p + q, result in s4
 800020c:	ee32 2a22 	vadd.f32	s4, s4, s5
    VSTR.32 s4, [r0, #12]     // save new p in struct
 8000210:	ed80 2a03 	vstr	s4, [r0, #12]

    // calculate k
    VLDR.32 s5, [r0, #4]     // load r in s5, new p already in s4
 8000214:	edd0 2a01 	vldr	s5, [r0, #4]
    VADD.F32 s5, s4, s5        // calculate p + r, result in s5
 8000218:	ee72 2a22 	vadd.f32	s5, s4, s5
    VDIV.F32 s5, s4, s5        // calculate k = p / (p+r) , result in s5
 800021c:	eec2 2a22 	vdiv.f32	s5, s4, s5
    VSTR.32 s5, [r0, #16]    // save new k in struct
 8000220:	edc0 2a04 	vstr	s5, [r0, #16]

    // calculate x
    VLDR.32 s4, [r0, #8]    // load x in s4
 8000224:	ed90 2a02 	vldr	s4, [r0, #8]
    VSUB.F32 s5, s0, s4        // calculate measurement - x, result in s5
 8000228:	ee70 2a42 	vsub.f32	s5, s0, s4
    VLDR.32 s6, [r0, #16]    // load k in s6
 800022c:	ed90 3a04 	vldr	s6, [r0, #16]
    VMUL.F32 s5, s6, s5        // calculate k * (measurement-x), result in s5
 8000230:	ee63 2a22 	vmul.f32	s5, s6, s5
    VADD.F32 s4, s4, s5        // calculate x + s5, result in s4
 8000234:	ee32 2a22 	vadd.f32	s4, s4, s5
    VSTR.32 s4, [r0, #8]    // save new x in struct
 8000238:	ed80 2a02 	vstr	s4, [r0, #8]

    // calculate p again

    VMOV.F32 S4, #1.0   // load 1.0 in s4
 800023c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
    VLDR.32 s5, [r0, #16]   // load k in s5
 8000240:	edd0 2a04 	vldr	s5, [r0, #16]
    VSUB.F32 s5, s4, s5        // 1.0 - k, result in s5
 8000244:	ee72 2a62 	vsub.f32	s5, s4, s5
    VLDR.32 s4, [r0, #12]     // load p in s4
 8000248:	ed90 2a03 	vldr	s4, [r0, #12]
    VMUL.F32 s4, s5, s4        // p = (1-k) * p, result in s4
 800024c:	ee22 2a82 	vmul.f32	s4, s5, s4
    VSTR.32 s4, [r0, #12]    // save new p in struct
 8000250:	ed80 2a03 	vstr	s4, [r0, #12]

    VPOP.32 {s4, s5, s6}
 8000254:	ecbd 2a03 	vpop	{s4-s6}
    BX LR
 8000258:	4770      	bx	lr
 800025a:	0000      	movs	r0, r0
 800025c:	0000      	movs	r0, r0
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <strlen>:
 8000300:	4603      	mov	r3, r0
 8000302:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000306:	2a00      	cmp	r2, #0
 8000308:	d1fb      	bne.n	8000302 <strlen+0x2>
 800030a:	1a18      	subs	r0, r3, r0
 800030c:	3801      	subs	r0, #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_drsub>:
 8000310:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000314:	e002      	b.n	800031c <__adddf3>
 8000316:	bf00      	nop

08000318 <__aeabi_dsub>:
 8000318:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800031c <__adddf3>:
 800031c:	b530      	push	{r4, r5, lr}
 800031e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000322:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000326:	ea94 0f05 	teq	r4, r5
 800032a:	bf08      	it	eq
 800032c:	ea90 0f02 	teqeq	r0, r2
 8000330:	bf1f      	itttt	ne
 8000332:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000336:	ea55 0c02 	orrsne.w	ip, r5, r2
 800033a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800033e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000342:	f000 80e2 	beq.w	800050a <__adddf3+0x1ee>
 8000346:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800034a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800034e:	bfb8      	it	lt
 8000350:	426d      	neglt	r5, r5
 8000352:	dd0c      	ble.n	800036e <__adddf3+0x52>
 8000354:	442c      	add	r4, r5
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	ea82 0000 	eor.w	r0, r2, r0
 8000362:	ea83 0101 	eor.w	r1, r3, r1
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	2d36      	cmp	r5, #54	; 0x36
 8000370:	bf88      	it	hi
 8000372:	bd30      	pophi	{r4, r5, pc}
 8000374:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000378:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800037c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000380:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000384:	d002      	beq.n	800038c <__adddf3+0x70>
 8000386:	4240      	negs	r0, r0
 8000388:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800038c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000390:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000394:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000398:	d002      	beq.n	80003a0 <__adddf3+0x84>
 800039a:	4252      	negs	r2, r2
 800039c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003a0:	ea94 0f05 	teq	r4, r5
 80003a4:	f000 80a7 	beq.w	80004f6 <__adddf3+0x1da>
 80003a8:	f1a4 0401 	sub.w	r4, r4, #1
 80003ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80003b0:	db0d      	blt.n	80003ce <__adddf3+0xb2>
 80003b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003b6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ba:	1880      	adds	r0, r0, r2
 80003bc:	f141 0100 	adc.w	r1, r1, #0
 80003c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003c4:	1880      	adds	r0, r0, r2
 80003c6:	fa43 f305 	asr.w	r3, r3, r5
 80003ca:	4159      	adcs	r1, r3
 80003cc:	e00e      	b.n	80003ec <__adddf3+0xd0>
 80003ce:	f1a5 0520 	sub.w	r5, r5, #32
 80003d2:	f10e 0e20 	add.w	lr, lr, #32
 80003d6:	2a01      	cmp	r2, #1
 80003d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003dc:	bf28      	it	cs
 80003de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003e2:	fa43 f305 	asr.w	r3, r3, r5
 80003e6:	18c0      	adds	r0, r0, r3
 80003e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003f0:	d507      	bpl.n	8000402 <__adddf3+0xe6>
 80003f2:	f04f 0e00 	mov.w	lr, #0
 80003f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000402:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000406:	d31b      	bcc.n	8000440 <__adddf3+0x124>
 8000408:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800040c:	d30c      	bcc.n	8000428 <__adddf3+0x10c>
 800040e:	0849      	lsrs	r1, r1, #1
 8000410:	ea5f 0030 	movs.w	r0, r0, rrx
 8000414:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000418:	f104 0401 	add.w	r4, r4, #1
 800041c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000420:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000424:	f080 809a 	bcs.w	800055c <__adddf3+0x240>
 8000428:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800042c:	bf08      	it	eq
 800042e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000432:	f150 0000 	adcs.w	r0, r0, #0
 8000436:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800043a:	ea41 0105 	orr.w	r1, r1, r5
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000444:	4140      	adcs	r0, r0
 8000446:	eb41 0101 	adc.w	r1, r1, r1
 800044a:	3c01      	subs	r4, #1
 800044c:	bf28      	it	cs
 800044e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000452:	d2e9      	bcs.n	8000428 <__adddf3+0x10c>
 8000454:	f091 0f00 	teq	r1, #0
 8000458:	bf04      	itt	eq
 800045a:	4601      	moveq	r1, r0
 800045c:	2000      	moveq	r0, #0
 800045e:	fab1 f381 	clz	r3, r1
 8000462:	bf08      	it	eq
 8000464:	3320      	addeq	r3, #32
 8000466:	f1a3 030b 	sub.w	r3, r3, #11
 800046a:	f1b3 0220 	subs.w	r2, r3, #32
 800046e:	da0c      	bge.n	800048a <__adddf3+0x16e>
 8000470:	320c      	adds	r2, #12
 8000472:	dd08      	ble.n	8000486 <__adddf3+0x16a>
 8000474:	f102 0c14 	add.w	ip, r2, #20
 8000478:	f1c2 020c 	rsb	r2, r2, #12
 800047c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000480:	fa21 f102 	lsr.w	r1, r1, r2
 8000484:	e00c      	b.n	80004a0 <__adddf3+0x184>
 8000486:	f102 0214 	add.w	r2, r2, #20
 800048a:	bfd8      	it	le
 800048c:	f1c2 0c20 	rsble	ip, r2, #32
 8000490:	fa01 f102 	lsl.w	r1, r1, r2
 8000494:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000498:	bfdc      	itt	le
 800049a:	ea41 010c 	orrle.w	r1, r1, ip
 800049e:	4090      	lslle	r0, r2
 80004a0:	1ae4      	subs	r4, r4, r3
 80004a2:	bfa2      	ittt	ge
 80004a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004a8:	4329      	orrge	r1, r5
 80004aa:	bd30      	popge	{r4, r5, pc}
 80004ac:	ea6f 0404 	mvn.w	r4, r4
 80004b0:	3c1f      	subs	r4, #31
 80004b2:	da1c      	bge.n	80004ee <__adddf3+0x1d2>
 80004b4:	340c      	adds	r4, #12
 80004b6:	dc0e      	bgt.n	80004d6 <__adddf3+0x1ba>
 80004b8:	f104 0414 	add.w	r4, r4, #20
 80004bc:	f1c4 0220 	rsb	r2, r4, #32
 80004c0:	fa20 f004 	lsr.w	r0, r0, r4
 80004c4:	fa01 f302 	lsl.w	r3, r1, r2
 80004c8:	ea40 0003 	orr.w	r0, r0, r3
 80004cc:	fa21 f304 	lsr.w	r3, r1, r4
 80004d0:	ea45 0103 	orr.w	r1, r5, r3
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f1c4 040c 	rsb	r4, r4, #12
 80004da:	f1c4 0220 	rsb	r2, r4, #32
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 f304 	lsl.w	r3, r1, r4
 80004e6:	ea40 0003 	orr.w	r0, r0, r3
 80004ea:	4629      	mov	r1, r5
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	fa21 f004 	lsr.w	r0, r1, r4
 80004f2:	4629      	mov	r1, r5
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f094 0f00 	teq	r4, #0
 80004fa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004fe:	bf06      	itte	eq
 8000500:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000504:	3401      	addeq	r4, #1
 8000506:	3d01      	subne	r5, #1
 8000508:	e74e      	b.n	80003a8 <__adddf3+0x8c>
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf18      	it	ne
 8000510:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000514:	d029      	beq.n	800056a <__adddf3+0x24e>
 8000516:	ea94 0f05 	teq	r4, r5
 800051a:	bf08      	it	eq
 800051c:	ea90 0f02 	teqeq	r0, r2
 8000520:	d005      	beq.n	800052e <__adddf3+0x212>
 8000522:	ea54 0c00 	orrs.w	ip, r4, r0
 8000526:	bf04      	itt	eq
 8000528:	4619      	moveq	r1, r3
 800052a:	4610      	moveq	r0, r2
 800052c:	bd30      	pop	{r4, r5, pc}
 800052e:	ea91 0f03 	teq	r1, r3
 8000532:	bf1e      	ittt	ne
 8000534:	2100      	movne	r1, #0
 8000536:	2000      	movne	r0, #0
 8000538:	bd30      	popne	{r4, r5, pc}
 800053a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800053e:	d105      	bne.n	800054c <__adddf3+0x230>
 8000540:	0040      	lsls	r0, r0, #1
 8000542:	4149      	adcs	r1, r1
 8000544:	bf28      	it	cs
 8000546:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000550:	bf3c      	itt	cc
 8000552:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000556:	bd30      	popcc	{r4, r5, pc}
 8000558:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800055c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000560:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000564:	f04f 0000 	mov.w	r0, #0
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf1a      	itte	ne
 8000570:	4619      	movne	r1, r3
 8000572:	4610      	movne	r0, r2
 8000574:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000578:	bf1c      	itt	ne
 800057a:	460b      	movne	r3, r1
 800057c:	4602      	movne	r2, r0
 800057e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000582:	bf06      	itte	eq
 8000584:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000588:	ea91 0f03 	teqeq	r1, r3
 800058c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000590:	bd30      	pop	{r4, r5, pc}
 8000592:	bf00      	nop

08000594 <__aeabi_ui2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f04f 0500 	mov.w	r5, #0
 80005ac:	f04f 0100 	mov.w	r1, #0
 80005b0:	e750      	b.n	8000454 <__adddf3+0x138>
 80005b2:	bf00      	nop

080005b4 <__aeabi_i2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005cc:	bf48      	it	mi
 80005ce:	4240      	negmi	r0, r0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e73e      	b.n	8000454 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_f2d>:
 80005d8:	0042      	lsls	r2, r0, #1
 80005da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005de:	ea4f 0131 	mov.w	r1, r1, rrx
 80005e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005e6:	bf1f      	itttt	ne
 80005e8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ec:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005f4:	4770      	bxne	lr
 80005f6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005fa:	bf08      	it	eq
 80005fc:	4770      	bxeq	lr
 80005fe:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000602:	bf04      	itt	eq
 8000604:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000608:	4770      	bxeq	lr
 800060a:	b530      	push	{r4, r5, lr}
 800060c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000610:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000614:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000618:	e71c      	b.n	8000454 <__adddf3+0x138>
 800061a:	bf00      	nop

0800061c <__aeabi_ul2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	e00a      	b.n	8000642 <__aeabi_l2d+0x16>

0800062c <__aeabi_l2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800063a:	d502      	bpl.n	8000642 <__aeabi_l2d+0x16>
 800063c:	4240      	negs	r0, r0
 800063e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000642:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000646:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800064a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800064e:	f43f aed8 	beq.w	8000402 <__adddf3+0xe6>
 8000652:	f04f 0203 	mov.w	r2, #3
 8000656:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800065a:	bf18      	it	ne
 800065c:	3203      	addne	r2, #3
 800065e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000662:	bf18      	it	ne
 8000664:	3203      	addne	r2, #3
 8000666:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800066a:	f1c2 0320 	rsb	r3, r2, #32
 800066e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000672:	fa20 f002 	lsr.w	r0, r0, r2
 8000676:	fa01 fe03 	lsl.w	lr, r1, r3
 800067a:	ea40 000e 	orr.w	r0, r0, lr
 800067e:	fa21 f102 	lsr.w	r1, r1, r2
 8000682:	4414      	add	r4, r2
 8000684:	e6bd      	b.n	8000402 <__adddf3+0xe6>
 8000686:	bf00      	nop

08000688 <__aeabi_dmul>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800068e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000692:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000696:	bf1d      	ittte	ne
 8000698:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800069c:	ea94 0f0c 	teqne	r4, ip
 80006a0:	ea95 0f0c 	teqne	r5, ip
 80006a4:	f000 f8de 	bleq	8000864 <__aeabi_dmul+0x1dc>
 80006a8:	442c      	add	r4, r5
 80006aa:	ea81 0603 	eor.w	r6, r1, r3
 80006ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ba:	bf18      	it	ne
 80006bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006c8:	d038      	beq.n	800073c <__aeabi_dmul+0xb4>
 80006ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ce:	f04f 0500 	mov.w	r5, #0
 80006d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006de:	f04f 0600 	mov.w	r6, #0
 80006e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006e6:	f09c 0f00 	teq	ip, #0
 80006ea:	bf18      	it	ne
 80006ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80006f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006fc:	d204      	bcs.n	8000708 <__aeabi_dmul+0x80>
 80006fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000702:	416d      	adcs	r5, r5
 8000704:	eb46 0606 	adc.w	r6, r6, r6
 8000708:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800070c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000710:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000714:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000718:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800071c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000720:	bf88      	it	hi
 8000722:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000726:	d81e      	bhi.n	8000766 <__aeabi_dmul+0xde>
 8000728:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800072c:	bf08      	it	eq
 800072e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000732:	f150 0000 	adcs.w	r0, r0, #0
 8000736:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000740:	ea46 0101 	orr.w	r1, r6, r1
 8000744:	ea40 0002 	orr.w	r0, r0, r2
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000750:	bfc2      	ittt	gt
 8000752:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000756:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800075a:	bd70      	popgt	{r4, r5, r6, pc}
 800075c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000760:	f04f 0e00 	mov.w	lr, #0
 8000764:	3c01      	subs	r4, #1
 8000766:	f300 80ab 	bgt.w	80008c0 <__aeabi_dmul+0x238>
 800076a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800076e:	bfde      	ittt	le
 8000770:	2000      	movle	r0, #0
 8000772:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000776:	bd70      	pople	{r4, r5, r6, pc}
 8000778:	f1c4 0400 	rsb	r4, r4, #0
 800077c:	3c20      	subs	r4, #32
 800077e:	da35      	bge.n	80007ec <__aeabi_dmul+0x164>
 8000780:	340c      	adds	r4, #12
 8000782:	dc1b      	bgt.n	80007bc <__aeabi_dmul+0x134>
 8000784:	f104 0414 	add.w	r4, r4, #20
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f305 	lsl.w	r3, r0, r5
 8000790:	fa20 f004 	lsr.w	r0, r0, r4
 8000794:	fa01 f205 	lsl.w	r2, r1, r5
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a8:	fa21 f604 	lsr.w	r6, r1, r4
 80007ac:	eb42 0106 	adc.w	r1, r2, r6
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 040c 	rsb	r4, r4, #12
 80007c0:	f1c4 0520 	rsb	r5, r4, #32
 80007c4:	fa00 f304 	lsl.w	r3, r0, r4
 80007c8:	fa20 f005 	lsr.w	r0, r0, r5
 80007cc:	fa01 f204 	lsl.w	r2, r1, r4
 80007d0:	ea40 0002 	orr.w	r0, r0, r2
 80007d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007dc:	f141 0100 	adc.w	r1, r1, #0
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f1c4 0520 	rsb	r5, r4, #32
 80007f0:	fa00 f205 	lsl.w	r2, r0, r5
 80007f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007f8:	fa20 f304 	lsr.w	r3, r0, r4
 80007fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000800:	ea43 0302 	orr.w	r3, r3, r2
 8000804:	fa21 f004 	lsr.w	r0, r1, r4
 8000808:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800080c:	fa21 f204 	lsr.w	r2, r1, r4
 8000810:	ea20 0002 	bic.w	r0, r0, r2
 8000814:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000818:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800081c:	bf08      	it	eq
 800081e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f094 0f00 	teq	r4, #0
 8000828:	d10f      	bne.n	800084a <__aeabi_dmul+0x1c2>
 800082a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800082e:	0040      	lsls	r0, r0, #1
 8000830:	eb41 0101 	adc.w	r1, r1, r1
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3c01      	subeq	r4, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1a6>
 800083e:	ea41 0106 	orr.w	r1, r1, r6
 8000842:	f095 0f00 	teq	r5, #0
 8000846:	bf18      	it	ne
 8000848:	4770      	bxne	lr
 800084a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800084e:	0052      	lsls	r2, r2, #1
 8000850:	eb43 0303 	adc.w	r3, r3, r3
 8000854:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000858:	bf08      	it	eq
 800085a:	3d01      	subeq	r5, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1c6>
 800085e:	ea43 0306 	orr.w	r3, r3, r6
 8000862:	4770      	bx	lr
 8000864:	ea94 0f0c 	teq	r4, ip
 8000868:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800086c:	bf18      	it	ne
 800086e:	ea95 0f0c 	teqne	r5, ip
 8000872:	d00c      	beq.n	800088e <__aeabi_dmul+0x206>
 8000874:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000878:	bf18      	it	ne
 800087a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087e:	d1d1      	bne.n	8000824 <__aeabi_dmul+0x19c>
 8000880:	ea81 0103 	eor.w	r1, r1, r3
 8000884:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000888:	f04f 0000 	mov.w	r0, #0
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000892:	bf06      	itte	eq
 8000894:	4610      	moveq	r0, r2
 8000896:	4619      	moveq	r1, r3
 8000898:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089c:	d019      	beq.n	80008d2 <__aeabi_dmul+0x24a>
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	d102      	bne.n	80008aa <__aeabi_dmul+0x222>
 80008a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008a8:	d113      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	d105      	bne.n	80008bc <__aeabi_dmul+0x234>
 80008b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008b4:	bf1c      	itt	ne
 80008b6:	4610      	movne	r0, r2
 80008b8:	4619      	movne	r1, r3
 80008ba:	d10a      	bne.n	80008d2 <__aeabi_dmul+0x24a>
 80008bc:	ea81 0103 	eor.w	r1, r1, r3
 80008c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008cc:	f04f 0000 	mov.w	r0, #0
 80008d0:	bd70      	pop	{r4, r5, r6, pc}
 80008d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008da:	bd70      	pop	{r4, r5, r6, pc}

080008dc <__aeabi_ddiv>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ea:	bf1d      	ittte	ne
 80008ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008f0:	ea94 0f0c 	teqne	r4, ip
 80008f4:	ea95 0f0c 	teqne	r5, ip
 80008f8:	f000 f8a7 	bleq	8000a4a <__aeabi_ddiv+0x16e>
 80008fc:	eba4 0405 	sub.w	r4, r4, r5
 8000900:	ea81 0e03 	eor.w	lr, r1, r3
 8000904:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000908:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800090c:	f000 8088 	beq.w	8000a20 <__aeabi_ddiv+0x144>
 8000910:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000914:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000918:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800091c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000920:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000924:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000928:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800092c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000930:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000934:	429d      	cmp	r5, r3
 8000936:	bf08      	it	eq
 8000938:	4296      	cmpeq	r6, r2
 800093a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800093e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000942:	d202      	bcs.n	800094a <__aeabi_ddiv+0x6e>
 8000944:	085b      	lsrs	r3, r3, #1
 8000946:	ea4f 0232 	mov.w	r2, r2, rrx
 800094a:	1ab6      	subs	r6, r6, r2
 800094c:	eb65 0503 	sbc.w	r5, r5, r3
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800095a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	ea4f 0232 	mov.w	r2, r2, rrx
 800098e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000992:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000996:	bf22      	ittt	cs
 8000998:	1ab6      	subcs	r6, r6, r2
 800099a:	4675      	movcs	r5, lr
 800099c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009a0:	085b      	lsrs	r3, r3, #1
 80009a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ae:	bf22      	ittt	cs
 80009b0:	1ab6      	subcs	r6, r6, r2
 80009b2:	4675      	movcs	r5, lr
 80009b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009bc:	d018      	beq.n	80009f0 <__aeabi_ddiv+0x114>
 80009be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009da:	d1c0      	bne.n	800095e <__aeabi_ddiv+0x82>
 80009dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e0:	d10b      	bne.n	80009fa <__aeabi_ddiv+0x11e>
 80009e2:	ea41 0100 	orr.w	r1, r1, r0
 80009e6:	f04f 0000 	mov.w	r0, #0
 80009ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ee:	e7b6      	b.n	800095e <__aeabi_ddiv+0x82>
 80009f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009f4:	bf04      	itt	eq
 80009f6:	4301      	orreq	r1, r0
 80009f8:	2000      	moveq	r0, #0
 80009fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009fe:	bf88      	it	hi
 8000a00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a04:	f63f aeaf 	bhi.w	8000766 <__aeabi_dmul+0xde>
 8000a08:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a0c:	bf04      	itt	eq
 8000a0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a16:	f150 0000 	adcs.w	r0, r0, #0
 8000a1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a1e:	bd70      	pop	{r4, r5, r6, pc}
 8000a20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a2c:	bfc2      	ittt	gt
 8000a2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a36:	bd70      	popgt	{r4, r5, r6, pc}
 8000a38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3c:	f04f 0e00 	mov.w	lr, #0
 8000a40:	3c01      	subs	r4, #1
 8000a42:	e690      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a44:	ea45 0e06 	orr.w	lr, r5, r6
 8000a48:	e68d      	b.n	8000766 <__aeabi_dmul+0xde>
 8000a4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a4e:	ea94 0f0c 	teq	r4, ip
 8000a52:	bf08      	it	eq
 8000a54:	ea95 0f0c 	teqeq	r5, ip
 8000a58:	f43f af3b 	beq.w	80008d2 <__aeabi_dmul+0x24a>
 8000a5c:	ea94 0f0c 	teq	r4, ip
 8000a60:	d10a      	bne.n	8000a78 <__aeabi_ddiv+0x19c>
 8000a62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a66:	f47f af34 	bne.w	80008d2 <__aeabi_dmul+0x24a>
 8000a6a:	ea95 0f0c 	teq	r5, ip
 8000a6e:	f47f af25 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	e72c      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a78:	ea95 0f0c 	teq	r5, ip
 8000a7c:	d106      	bne.n	8000a8c <__aeabi_ddiv+0x1b0>
 8000a7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a82:	f43f aefd 	beq.w	8000880 <__aeabi_dmul+0x1f8>
 8000a86:	4610      	mov	r0, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	e722      	b.n	80008d2 <__aeabi_dmul+0x24a>
 8000a8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a96:	f47f aec5 	bne.w	8000824 <__aeabi_dmul+0x19c>
 8000a9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a9e:	f47f af0d 	bne.w	80008bc <__aeabi_dmul+0x234>
 8000aa2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aa6:	f47f aeeb 	bne.w	8000880 <__aeabi_dmul+0x1f8>
 8000aaa:	e712      	b.n	80008d2 <__aeabi_dmul+0x24a>

08000aac <__gedf2>:
 8000aac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ab0:	e006      	b.n	8000ac0 <__cmpdf2+0x4>
 8000ab2:	bf00      	nop

08000ab4 <__ledf2>:
 8000ab4:	f04f 0c01 	mov.w	ip, #1
 8000ab8:	e002      	b.n	8000ac0 <__cmpdf2+0x4>
 8000aba:	bf00      	nop

08000abc <__cmpdf2>:
 8000abc:	f04f 0c01 	mov.w	ip, #1
 8000ac0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad0:	bf18      	it	ne
 8000ad2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ad6:	d01b      	beq.n	8000b10 <__cmpdf2+0x54>
 8000ad8:	b001      	add	sp, #4
 8000ada:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ae4:	ea91 0f03 	teqne	r1, r3
 8000ae8:	bf02      	ittt	eq
 8000aea:	ea90 0f02 	teqeq	r0, r2
 8000aee:	2000      	moveq	r0, #0
 8000af0:	4770      	bxeq	lr
 8000af2:	f110 0f00 	cmn.w	r0, #0
 8000af6:	ea91 0f03 	teq	r1, r3
 8000afa:	bf58      	it	pl
 8000afc:	4299      	cmppl	r1, r3
 8000afe:	bf08      	it	eq
 8000b00:	4290      	cmpeq	r0, r2
 8000b02:	bf2c      	ite	cs
 8000b04:	17d8      	asrcs	r0, r3, #31
 8000b06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b0a:	f040 0001 	orr.w	r0, r0, #1
 8000b0e:	4770      	bx	lr
 8000b10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d102      	bne.n	8000b20 <__cmpdf2+0x64>
 8000b1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b1e:	d107      	bne.n	8000b30 <__cmpdf2+0x74>
 8000b20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d1d6      	bne.n	8000ad8 <__cmpdf2+0x1c>
 8000b2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b2e:	d0d3      	beq.n	8000ad8 <__cmpdf2+0x1c>
 8000b30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdrcmple>:
 8000b38:	4684      	mov	ip, r0
 8000b3a:	4610      	mov	r0, r2
 8000b3c:	4662      	mov	r2, ip
 8000b3e:	468c      	mov	ip, r1
 8000b40:	4619      	mov	r1, r3
 8000b42:	4663      	mov	r3, ip
 8000b44:	e000      	b.n	8000b48 <__aeabi_cdcmpeq>
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdcmpeq>:
 8000b48:	b501      	push	{r0, lr}
 8000b4a:	f7ff ffb7 	bl	8000abc <__cmpdf2>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	bf48      	it	mi
 8000b52:	f110 0f00 	cmnmi.w	r0, #0
 8000b56:	bd01      	pop	{r0, pc}

08000b58 <__aeabi_dcmpeq>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff fff4 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b60:	bf0c      	ite	eq
 8000b62:	2001      	moveq	r0, #1
 8000b64:	2000      	movne	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmplt>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffea 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b74:	bf34      	ite	cc
 8000b76:	2001      	movcc	r0, #1
 8000b78:	2000      	movcs	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmple>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffe0 	bl	8000b48 <__aeabi_cdcmpeq>
 8000b88:	bf94      	ite	ls
 8000b8a:	2001      	movls	r0, #1
 8000b8c:	2000      	movhi	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpge>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffce 	bl	8000b38 <__aeabi_cdrcmple>
 8000b9c:	bf94      	ite	ls
 8000b9e:	2001      	movls	r0, #1
 8000ba0:	2000      	movhi	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_dcmpgt>:
 8000ba8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bac:	f7ff ffc4 	bl	8000b38 <__aeabi_cdrcmple>
 8000bb0:	bf34      	ite	cc
 8000bb2:	2001      	movcc	r0, #1
 8000bb4:	2000      	movcs	r0, #0
 8000bb6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bba:	bf00      	nop

08000bbc <__aeabi_dcmpun>:
 8000bbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x10>
 8000bc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bca:	d10a      	bne.n	8000be2 <__aeabi_dcmpun+0x26>
 8000bcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x20>
 8000bd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_dcmpun+0x26>
 8000bdc:	f04f 0000 	mov.w	r0, #0
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0001 	mov.w	r0, #1
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2iz>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d215      	bcs.n	8000c1e <__aeabi_d2iz+0x36>
 8000bf2:	d511      	bpl.n	8000c18 <__aeabi_d2iz+0x30>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d912      	bls.n	8000c24 <__aeabi_d2iz+0x3c>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c12:	bf18      	it	ne
 8000c14:	4240      	negne	r0, r0
 8000c16:	4770      	bx	lr
 8000c18:	f04f 0000 	mov.w	r0, #0
 8000c1c:	4770      	bx	lr
 8000c1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c22:	d105      	bne.n	8000c30 <__aeabi_d2iz+0x48>
 8000c24:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	bf08      	it	eq
 8000c2a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c4c:	f000 b970 	b.w	8000f30 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f806 	bl	8000c68 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__udivmoddi4>:
 8000c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6c:	9e08      	ldr	r6, [sp, #32]
 8000c6e:	460d      	mov	r5, r1
 8000c70:	4604      	mov	r4, r0
 8000c72:	460f      	mov	r7, r1
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d14a      	bne.n	8000d0e <__udivmoddi4+0xa6>
 8000c78:	428a      	cmp	r2, r1
 8000c7a:	4694      	mov	ip, r2
 8000c7c:	d965      	bls.n	8000d4a <__udivmoddi4+0xe2>
 8000c7e:	fab2 f382 	clz	r3, r2
 8000c82:	b143      	cbz	r3, 8000c96 <__udivmoddi4+0x2e>
 8000c84:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c88:	f1c3 0220 	rsb	r2, r3, #32
 8000c8c:	409f      	lsls	r7, r3
 8000c8e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c92:	4317      	orrs	r7, r2
 8000c94:	409c      	lsls	r4, r3
 8000c96:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c9a:	fa1f f58c 	uxth.w	r5, ip
 8000c9e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ca2:	0c22      	lsrs	r2, r4, #16
 8000ca4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ca8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cac:	fb01 f005 	mul.w	r0, r1, r5
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	d90a      	bls.n	8000cca <__udivmoddi4+0x62>
 8000cb4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000cbc:	f080 811c 	bcs.w	8000ef8 <__udivmoddi4+0x290>
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	f240 8119 	bls.w	8000ef8 <__udivmoddi4+0x290>
 8000cc6:	3902      	subs	r1, #2
 8000cc8:	4462      	add	r2, ip
 8000cca:	1a12      	subs	r2, r2, r0
 8000ccc:	b2a4      	uxth	r4, r4
 8000cce:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cd2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cd6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cda:	fb00 f505 	mul.w	r5, r0, r5
 8000cde:	42a5      	cmp	r5, r4
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x90>
 8000ce2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cea:	f080 8107 	bcs.w	8000efc <__udivmoddi4+0x294>
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	f240 8104 	bls.w	8000efc <__udivmoddi4+0x294>
 8000cf4:	4464      	add	r4, ip
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cfc:	1b64      	subs	r4, r4, r5
 8000cfe:	2100      	movs	r1, #0
 8000d00:	b11e      	cbz	r6, 8000d0a <__udivmoddi4+0xa2>
 8000d02:	40dc      	lsrs	r4, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	e9c6 4300 	strd	r4, r3, [r6]
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0xbc>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	f000 80ed 	beq.w	8000ef2 <__udivmoddi4+0x28a>
 8000d18:	2100      	movs	r1, #0
 8000d1a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d1e:	4608      	mov	r0, r1
 8000d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d24:	fab3 f183 	clz	r1, r3
 8000d28:	2900      	cmp	r1, #0
 8000d2a:	d149      	bne.n	8000dc0 <__udivmoddi4+0x158>
 8000d2c:	42ab      	cmp	r3, r5
 8000d2e:	d302      	bcc.n	8000d36 <__udivmoddi4+0xce>
 8000d30:	4282      	cmp	r2, r0
 8000d32:	f200 80f8 	bhi.w	8000f26 <__udivmoddi4+0x2be>
 8000d36:	1a84      	subs	r4, r0, r2
 8000d38:	eb65 0203 	sbc.w	r2, r5, r3
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	4617      	mov	r7, r2
 8000d40:	2e00      	cmp	r6, #0
 8000d42:	d0e2      	beq.n	8000d0a <__udivmoddi4+0xa2>
 8000d44:	e9c6 4700 	strd	r4, r7, [r6]
 8000d48:	e7df      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000d4a:	b902      	cbnz	r2, 8000d4e <__udivmoddi4+0xe6>
 8000d4c:	deff      	udf	#255	; 0xff
 8000d4e:	fab2 f382 	clz	r3, r2
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f040 8090 	bne.w	8000e78 <__udivmoddi4+0x210>
 8000d58:	1a8a      	subs	r2, r1, r2
 8000d5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5e:	fa1f fe8c 	uxth.w	lr, ip
 8000d62:	2101      	movs	r1, #1
 8000d64:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d68:	fb07 2015 	mls	r0, r7, r5, r2
 8000d6c:	0c22      	lsrs	r2, r4, #16
 8000d6e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d72:	fb0e f005 	mul.w	r0, lr, r5
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d908      	bls.n	8000d8c <__udivmoddi4+0x124>
 8000d7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d7e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d82:	d202      	bcs.n	8000d8a <__udivmoddi4+0x122>
 8000d84:	4290      	cmp	r0, r2
 8000d86:	f200 80cb 	bhi.w	8000f20 <__udivmoddi4+0x2b8>
 8000d8a:	4645      	mov	r5, r8
 8000d8c:	1a12      	subs	r2, r2, r0
 8000d8e:	b2a4      	uxth	r4, r4
 8000d90:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d94:	fb07 2210 	mls	r2, r7, r0, r2
 8000d98:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d9c:	fb0e fe00 	mul.w	lr, lr, r0
 8000da0:	45a6      	cmp	lr, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x14e>
 8000da4:	eb1c 0404 	adds.w	r4, ip, r4
 8000da8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x14c>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f200 80bb 	bhi.w	8000f2a <__udivmoddi4+0x2c2>
 8000db4:	4610      	mov	r0, r2
 8000db6:	eba4 040e 	sub.w	r4, r4, lr
 8000dba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dbe:	e79f      	b.n	8000d00 <__udivmoddi4+0x98>
 8000dc0:	f1c1 0720 	rsb	r7, r1, #32
 8000dc4:	408b      	lsls	r3, r1
 8000dc6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dca:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dce:	fa05 f401 	lsl.w	r4, r5, r1
 8000dd2:	fa20 f307 	lsr.w	r3, r0, r7
 8000dd6:	40fd      	lsrs	r5, r7
 8000dd8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ddc:	4323      	orrs	r3, r4
 8000dde:	fbb5 f8f9 	udiv	r8, r5, r9
 8000de2:	fa1f fe8c 	uxth.w	lr, ip
 8000de6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dea:	0c1c      	lsrs	r4, r3, #16
 8000dec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000df0:	fb08 f50e 	mul.w	r5, r8, lr
 8000df4:	42a5      	cmp	r5, r4
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 f001 	lsl.w	r0, r0, r1
 8000dfe:	d90b      	bls.n	8000e18 <__udivmoddi4+0x1b0>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e08:	f080 8088 	bcs.w	8000f1c <__udivmoddi4+0x2b4>
 8000e0c:	42a5      	cmp	r5, r4
 8000e0e:	f240 8085 	bls.w	8000f1c <__udivmoddi4+0x2b4>
 8000e12:	f1a8 0802 	sub.w	r8, r8, #2
 8000e16:	4464      	add	r4, ip
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	b29d      	uxth	r5, r3
 8000e1c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e20:	fb09 4413 	mls	r4, r9, r3, r4
 8000e24:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e28:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e2c:	45a6      	cmp	lr, r4
 8000e2e:	d908      	bls.n	8000e42 <__udivmoddi4+0x1da>
 8000e30:	eb1c 0404 	adds.w	r4, ip, r4
 8000e34:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e38:	d26c      	bcs.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3a:	45a6      	cmp	lr, r4
 8000e3c:	d96a      	bls.n	8000f14 <__udivmoddi4+0x2ac>
 8000e3e:	3b02      	subs	r3, #2
 8000e40:	4464      	add	r4, ip
 8000e42:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e46:	fba3 9502 	umull	r9, r5, r3, r2
 8000e4a:	eba4 040e 	sub.w	r4, r4, lr
 8000e4e:	42ac      	cmp	r4, r5
 8000e50:	46c8      	mov	r8, r9
 8000e52:	46ae      	mov	lr, r5
 8000e54:	d356      	bcc.n	8000f04 <__udivmoddi4+0x29c>
 8000e56:	d053      	beq.n	8000f00 <__udivmoddi4+0x298>
 8000e58:	b156      	cbz	r6, 8000e70 <__udivmoddi4+0x208>
 8000e5a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e5e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e62:	fa04 f707 	lsl.w	r7, r4, r7
 8000e66:	40ca      	lsrs	r2, r1
 8000e68:	40cc      	lsrs	r4, r1
 8000e6a:	4317      	orrs	r7, r2
 8000e6c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e70:	4618      	mov	r0, r3
 8000e72:	2100      	movs	r1, #0
 8000e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e78:	f1c3 0120 	rsb	r1, r3, #32
 8000e7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e80:	fa20 f201 	lsr.w	r2, r0, r1
 8000e84:	fa25 f101 	lsr.w	r1, r5, r1
 8000e88:	409d      	lsls	r5, r3
 8000e8a:	432a      	orrs	r2, r5
 8000e8c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1510 	mls	r5, r7, r0, r1
 8000e9c:	0c11      	lsrs	r1, r2, #16
 8000e9e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ea2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ea6:	428d      	cmp	r5, r1
 8000ea8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eac:	d908      	bls.n	8000ec0 <__udivmoddi4+0x258>
 8000eae:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000eb6:	d22f      	bcs.n	8000f18 <__udivmoddi4+0x2b0>
 8000eb8:	428d      	cmp	r5, r1
 8000eba:	d92d      	bls.n	8000f18 <__udivmoddi4+0x2b0>
 8000ebc:	3802      	subs	r0, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1b49      	subs	r1, r1, r5
 8000ec2:	b292      	uxth	r2, r2
 8000ec4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ec8:	fb07 1115 	mls	r1, r7, r5, r1
 8000ecc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ed0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ed4:	4291      	cmp	r1, r2
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x282>
 8000ed8:	eb1c 0202 	adds.w	r2, ip, r2
 8000edc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ee0:	d216      	bcs.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee2:	4291      	cmp	r1, r2
 8000ee4:	d914      	bls.n	8000f10 <__udivmoddi4+0x2a8>
 8000ee6:	3d02      	subs	r5, #2
 8000ee8:	4462      	add	r2, ip
 8000eea:	1a52      	subs	r2, r2, r1
 8000eec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ef0:	e738      	b.n	8000d64 <__udivmoddi4+0xfc>
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	e708      	b.n	8000d0a <__udivmoddi4+0xa2>
 8000ef8:	4639      	mov	r1, r7
 8000efa:	e6e6      	b.n	8000cca <__udivmoddi4+0x62>
 8000efc:	4610      	mov	r0, r2
 8000efe:	e6fb      	b.n	8000cf8 <__udivmoddi4+0x90>
 8000f00:	4548      	cmp	r0, r9
 8000f02:	d2a9      	bcs.n	8000e58 <__udivmoddi4+0x1f0>
 8000f04:	ebb9 0802 	subs.w	r8, r9, r2
 8000f08:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	e7a3      	b.n	8000e58 <__udivmoddi4+0x1f0>
 8000f10:	4645      	mov	r5, r8
 8000f12:	e7ea      	b.n	8000eea <__udivmoddi4+0x282>
 8000f14:	462b      	mov	r3, r5
 8000f16:	e794      	b.n	8000e42 <__udivmoddi4+0x1da>
 8000f18:	4640      	mov	r0, r8
 8000f1a:	e7d1      	b.n	8000ec0 <__udivmoddi4+0x258>
 8000f1c:	46d0      	mov	r8, sl
 8000f1e:	e77b      	b.n	8000e18 <__udivmoddi4+0x1b0>
 8000f20:	3d02      	subs	r5, #2
 8000f22:	4462      	add	r2, ip
 8000f24:	e732      	b.n	8000d8c <__udivmoddi4+0x124>
 8000f26:	4608      	mov	r0, r1
 8000f28:	e70a      	b.n	8000d40 <__udivmoddi4+0xd8>
 8000f2a:	4464      	add	r4, ip
 8000f2c:	3802      	subs	r0, #2
 8000f2e:	e742      	b.n	8000db6 <__udivmoddi4+0x14e>

08000f30 <__aeabi_idiv0>:
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop

08000f34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f34:	b5b0      	push	{r4, r5, r7, lr}
 8000f36:	b0f2      	sub	sp, #456	; 0x1c8
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f3a:	f001 fa3c 	bl	80023b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f3e:	f000 f86b 	bl	8001018 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f42:	f000 f8cb 	bl	80010dc <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f46:	f000 fc21 	bl	800178c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f4a:	f000 f8f7 	bl	800113c <MX_ADC1_Init>
  MX_DFSDM1_Init();
 8000f4e:	f000 f959 	bl	8001204 <MX_DFSDM1_Init>
  MX_I2C1_Init();
 8000f52:	f000 f98f 	bl	8001274 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000f56:	f000 f9cd 	bl	80012f4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000f5a:	f000 fa0b 	bl	8001374 <MX_OCTOSPI1_Init>
  MX_SPI1_Init();
 8000f5e:	f000 fa5f 	bl	8001420 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000f62:	f000 fa9b 	bl	800149c <MX_SPI3_Init>
  MX_UART4_Init();
 8000f66:	f000 fad7 	bl	8001518 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000f6a:	f000 fb21 	bl	80015b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000f6e:	f000 fb6b 	bl	8001648 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000f72:	f000 fbb7 	bl	80016e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000f76:	f000 fc01 	bl	800177c <MX_USB_OTG_FS_USB_Init>
  /* USER CODE BEGIN 2 */
  float TEST_ARRAY[] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706,
 8000f7a:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000f7e:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8000f82:	4a22      	ldr	r2, [pc, #136]	; (800100c <main+0xd8>)
 8000f84:	4618      	mov	r0, r3
 8000f86:	4611      	mov	r1, r2
 8000f88:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	f006 fc9e 	bl	80078ce <memcpy>
  					9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087,
  					9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486,
  					10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991,
  					9.5799256668};

  float measurement[] = {0,1,2,3,4};
 8000f92:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000f96:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	; (8001010 <main+0xdc>)
 8000f9c:	461c      	mov	r4, r3
 8000f9e:	4615      	mov	r5, r2
 8000fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	6023      	str	r3, [r4, #0]
	  float x;
	  float p;
	  float k;
  };

  struct KalmanFilter SValue = {0.1,0.1,5,0.1,0};
 8000fa8:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000fac:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8000fb0:	4a18      	ldr	r2, [pc, #96]	; (8001014 <main+0xe0>)
 8000fb2:	461c      	mov	r4, r3
 8000fb4:	4615      	mov	r5, r2
 8000fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fba:	682b      	ldr	r3, [r5, #0]
 8000fbc:	6023      	str	r3, [r4, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    int ArraySize = sizeof(TEST_ARRAY)/sizeof(TEST_ARRAY[0]);
 8000fbe:	2365      	movs	r3, #101	; 0x65
 8000fc0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    int MeasurementSize = sizeof(measurement)/sizeof(measurement[0]);
 8000fc4:	2305      	movs	r3, #5
 8000fc6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
	for (int i = 0; i<MeasurementSize;i++){
 8000fca:	2300      	movs	r3, #0
 8000fcc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fd0:	e014      	b.n	8000ffc <main+0xc8>
		kalman(&SValue, measurement[i]);
 8000fd2:	f507 73e4 	add.w	r3, r7, #456	; 0x1c8
 8000fd6:	f5a3 72da 	sub.w	r2, r3, #436	; 0x1b4
 8000fda:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	edd3 7a00 	vldr	s15, [r3]
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	eeb0 0a67 	vmov.f32	s0, s15
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff f907 	bl	8000200 <kalman>
	for (int i = 0; i<MeasurementSize;i++){
 8000ff2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ffc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8001000:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8001004:	429a      	cmp	r2, r3
 8001006:	dbe4      	blt.n	8000fd2 <main+0x9e>
  {
 8001008:	e7d9      	b.n	8000fbe <main+0x8a>
 800100a:	bf00      	nop
 800100c:	080097a0 	.word	0x080097a0
 8001010:	08009934 	.word	0x08009934
 8001014:	08009948 	.word	0x08009948

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b096      	sub	sp, #88	; 0x58
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	2244      	movs	r2, #68	; 0x44
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f006 fc18 	bl	800785c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	463b      	mov	r3, r7
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]
 8001038:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800103a:	2000      	movs	r0, #0
 800103c:	f003 fb36 	bl	80046ac <HAL_PWREx_ControlVoltageScaling>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001046:	f000 fce3 	bl	8001a10 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800104a:	f003 faff 	bl	800464c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <SystemClock_Config+0xc0>)
 8001050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001054:	4a20      	ldr	r2, [pc, #128]	; (80010d8 <SystemClock_Config+0xc0>)
 8001056:	f023 0318 	bic.w	r3, r3, #24
 800105a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800105e:	2314      	movs	r3, #20
 8001060:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001062:	2301      	movs	r3, #1
 8001064:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001066:	2301      	movs	r3, #1
 8001068:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800106a:	2300      	movs	r3, #0
 800106c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800106e:	2360      	movs	r3, #96	; 0x60
 8001070:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001072:	2302      	movs	r3, #2
 8001074:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001076:	2301      	movs	r3, #1
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800107a:	2301      	movs	r3, #1
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800107e:	233c      	movs	r3, #60	; 0x3c
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001082:	2302      	movs	r3, #2
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001086:	2302      	movs	r3, #2
 8001088:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800108a:	2302      	movs	r3, #2
 800108c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4618      	mov	r0, r3
 8001094:	f003 fbae 	bl	80047f4 <HAL_RCC_OscConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800109e:	f000 fcb7 	bl	8001a10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a2:	230f      	movs	r3, #15
 80010a4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a6:	2303      	movs	r3, #3
 80010a8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010b6:	463b      	mov	r3, r7
 80010b8:	2105      	movs	r1, #5
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 ffb4 	bl	8005028 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010c6:	f000 fca3 	bl	8001a10 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010ca:	f004 fd9b 	bl	8005c04 <HAL_RCCEx_EnableMSIPLLMode>
}
 80010ce:	bf00      	nop
 80010d0:	3758      	adds	r7, #88	; 0x58
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000

080010dc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b0a6      	sub	sp, #152	; 0x98
 80010e0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e2:	1d3b      	adds	r3, r7, #4
 80010e4:	2294      	movs	r2, #148	; 0x94
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f006 fbb7 	bl	800785c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_ADC;
 80010ee:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80010f2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80010f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80010fc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001100:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001102:	2301      	movs	r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001106:	2301      	movs	r3, #1
 8001108:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800110a:	2318      	movs	r3, #24
 800110c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 800110e:	2302      	movs	r3, #2
 8001110:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001112:	2302      	movs	r3, #2
 8001114:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001116:	2302      	movs	r3, #2
 8001118:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 800111a:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 800111e:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4618      	mov	r0, r3
 8001124:	f004 fa3e 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 800112e:	f000 fc6f 	bl	8001a10 <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3798      	adds	r7, #152	; 0x98
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
 8001150:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001152:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001154:	4a29      	ldr	r2, [pc, #164]	; (80011fc <MX_ADC1_Init+0xc0>)
 8001156:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800115a:	2200      	movs	r2, #0
 800115c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115e:	4b26      	ldr	r3, [pc, #152]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001160:	2200      	movs	r2, #0
 8001162:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001166:	2200      	movs	r2, #0
 8001168:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b23      	ldr	r3, [pc, #140]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001172:	2204      	movs	r2, #4
 8001174:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001176:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001178:	2200      	movs	r2, #0
 800117a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800117c:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800117e:	2200      	movs	r2, #0
 8001180:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001182:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001184:	2201      	movs	r2, #1
 8001186:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800118a:	2200      	movs	r2, #0
 800118c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001192:	2200      	movs	r2, #0
 8001194:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_ADC1_Init+0xbc>)
 8001198:	2200      	movs	r2, #0
 800119a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <MX_ADC1_Init+0xbc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011a4:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011aa:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011b4:	f001 fb14 	bl	80027e0 <HAL_ADC_Init>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80011be:	f000 fc27 	bl	8001a10 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011c2:	4b0f      	ldr	r3, [pc, #60]	; (8001200 <MX_ADC1_Init+0xc4>)
 80011c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c6:	2306      	movs	r3, #6
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ce:	237f      	movs	r3, #127	; 0x7f
 80011d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011d2:	2304      	movs	r3, #4
 80011d4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011da:	463b      	mov	r3, r7
 80011dc:	4619      	mov	r1, r3
 80011de:	4806      	ldr	r0, [pc, #24]	; (80011f8 <MX_ADC1_Init+0xbc>)
 80011e0:	f001 fc44 	bl	8002a6c <HAL_ADC_ConfigChannel>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80011ea:	f000 fc11 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	3718      	adds	r7, #24
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	200001f0 	.word	0x200001f0
 80011fc:	50040000 	.word	0x50040000
 8001200:	04300002 	.word	0x04300002

08001204 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8001208:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_DFSDM1_Init+0x68>)
 800120a:	4a19      	ldr	r2, [pc, #100]	; (8001270 <MX_DFSDM1_Init+0x6c>)
 800120c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800120e:	4b17      	ldr	r3, [pc, #92]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001210:	2201      	movs	r2, #1
 8001212:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8001214:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 800121a:	4b14      	ldr	r3, [pc, #80]	; (800126c <MX_DFSDM1_Init+0x68>)
 800121c:	2202      	movs	r2, #2
 800121e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001228:	2200      	movs	r2, #0
 800122a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_DFSDM1_Init+0x68>)
 800122e:	2200      	movs	r2, #0
 8001230:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001234:	2200      	movs	r2, #0
 8001236:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_DFSDM1_Init+0x68>)
 800123a:	2204      	movs	r2, #4
 800123c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800123e:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001240:	2200      	movs	r2, #0
 8001242:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8001244:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001246:	2201      	movs	r2, #1
 8001248:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_DFSDM1_Init+0x68>)
 800124c:	2200      	movs	r2, #0
 800124e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001252:	2200      	movs	r2, #0
 8001254:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	; (800126c <MX_DFSDM1_Init+0x68>)
 8001258:	f002 f916 	bl	8003488 <HAL_DFSDM_ChannelInit>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 8001262:	f000 fbd5 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000258 	.word	0x20000258
 8001270:	40016040 	.word	0x40016040

08001274 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001278:	4b1b      	ldr	r3, [pc, #108]	; (80012e8 <MX_I2C1_Init+0x74>)
 800127a:	4a1c      	ldr	r2, [pc, #112]	; (80012ec <MX_I2C1_Init+0x78>)
 800127c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001280:	4a1b      	ldr	r2, [pc, #108]	; (80012f0 <MX_I2C1_Init+0x7c>)
 8001282:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001284:	4b18      	ldr	r3, [pc, #96]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800128a:	4b17      	ldr	r3, [pc, #92]	; (80012e8 <MX_I2C1_Init+0x74>)
 800128c:	2201      	movs	r2, #1
 800128e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001290:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001296:	4b14      	ldr	r3, [pc, #80]	; (80012e8 <MX_I2C1_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800129c:	4b12      	ldr	r3, [pc, #72]	; (80012e8 <MX_I2C1_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ae:	480e      	ldr	r0, [pc, #56]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012b0:	f002 fbc3 	bl	8003a3a <HAL_I2C_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80012ba:	f000 fba9 	bl	8001a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012be:	2100      	movs	r1, #0
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012c2:	f002 fc55 	bl	8003b70 <HAL_I2CEx_ConfigAnalogFilter>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80012cc:	f000 fba0 	bl	8001a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_I2C1_Init+0x74>)
 80012d4:	f002 fc97 	bl	8003c06 <HAL_I2CEx_ConfigDigitalFilter>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80012de:	f000 fb97 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000290 	.word	0x20000290
 80012ec:	40005400 	.word	0x40005400
 80012f0:	307075b1 	.word	0x307075b1

080012f4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_I2C2_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <MX_I2C2_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_I2C2_Init+0x74>)
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <MX_I2C2_Init+0x7c>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <MX_I2C2_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130a:	4b17      	ldr	r3, [pc, #92]	; (8001368 <MX_I2C2_Init+0x74>)
 800130c:	2201      	movs	r2, #1
 800130e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b15      	ldr	r3, [pc, #84]	; (8001368 <MX_I2C2_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001316:	4b14      	ldr	r3, [pc, #80]	; (8001368 <MX_I2C2_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <MX_I2C2_Init+0x74>)
 800131e:	2200      	movs	r2, #0
 8001320:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <MX_I2C2_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001328:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <MX_I2C2_Init+0x74>)
 800132a:	2200      	movs	r2, #0
 800132c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_I2C2_Init+0x74>)
 8001330:	f002 fb83 	bl	8003a3a <HAL_I2C_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800133a:	f000 fb69 	bl	8001a10 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800133e:	2100      	movs	r1, #0
 8001340:	4809      	ldr	r0, [pc, #36]	; (8001368 <MX_I2C2_Init+0x74>)
 8001342:	f002 fc15 	bl	8003b70 <HAL_I2CEx_ConfigAnalogFilter>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800134c:	f000 fb60 	bl	8001a10 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001350:	2100      	movs	r1, #0
 8001352:	4805      	ldr	r0, [pc, #20]	; (8001368 <MX_I2C2_Init+0x74>)
 8001354:	f002 fc57 	bl	8003c06 <HAL_I2CEx_ConfigDigitalFilter>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800135e:	f000 fb57 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200002e4 	.word	0x200002e4
 800136c:	40005800 	.word	0x40005800
 8001370:	307075b1 	.word	0x307075b1

08001374 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001388:	4b23      	ldr	r3, [pc, #140]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 800138a:	4a24      	ldr	r2, [pc, #144]	; (800141c <MX_OCTOSPI1_Init+0xa8>)
 800138c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 8001390:	2201      	movs	r2, #1
 8001392:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001394:	4b20      	ldr	r3, [pc, #128]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800139a:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 800139c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013a0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80013a2:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013a4:	2220      	movs	r2, #32
 80013a6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013aa:	2201      	movs	r2, #1
 80013ac:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80013ba:	4b17      	ldr	r3, [pc, #92]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013bc:	2201      	movs	r2, #1
 80013be:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80013c0:	4b15      	ldr	r3, [pc, #84]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 80013d2:	4b11      	ldr	r3, [pc, #68]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013d4:	2208      	movs	r2, #8
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80013d8:	480f      	ldr	r0, [pc, #60]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 80013da:	f002 fc61 	bl	8003ca0 <HAL_OSPI_Init>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80013e4:	f000 fb14 	bl	8001a10 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80013f0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80013f4:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_OCTOSPI1_Init+0xa4>)
 8001400:	f002 fd08 	bl	8003e14 <HAL_OSPIM_Config>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800140a:	f000 fb01 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000338 	.word	0x20000338
 800141c:	a0001000 	.word	0xa0001000

08001420 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001424:	4b1b      	ldr	r3, [pc, #108]	; (8001494 <MX_SPI1_Init+0x74>)
 8001426:	4a1c      	ldr	r2, [pc, #112]	; (8001498 <MX_SPI1_Init+0x78>)
 8001428:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_SPI1_Init+0x74>)
 800142c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001430:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001432:	4b18      	ldr	r3, [pc, #96]	; (8001494 <MX_SPI1_Init+0x74>)
 8001434:	2200      	movs	r2, #0
 8001436:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <MX_SPI1_Init+0x74>)
 800143a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800143e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <MX_SPI1_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <MX_SPI1_Init+0x74>)
 8001448:	2200      	movs	r2, #0
 800144a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <MX_SPI1_Init+0x74>)
 800144e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001452:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001454:	4b0f      	ldr	r3, [pc, #60]	; (8001494 <MX_SPI1_Init+0x74>)
 8001456:	2208      	movs	r2, #8
 8001458:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800145a:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <MX_SPI1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <MX_SPI1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <MX_SPI1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <MX_SPI1_Init+0x74>)
 800146e:	2207      	movs	r2, #7
 8001470:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001472:	4b08      	ldr	r3, [pc, #32]	; (8001494 <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <MX_SPI1_Init+0x74>)
 800147a:	2208      	movs	r2, #8
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	; (8001494 <MX_SPI1_Init+0x74>)
 8001480:	f004 fdb8 	bl	8005ff4 <HAL_SPI_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800148a:	f000 fac1 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000388 	.word	0x20000388
 8001498:	40013000 	.word	0x40013000

0800149c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	; (8001510 <MX_SPI3_Init+0x74>)
 80014a2:	4a1c      	ldr	r2, [pc, #112]	; (8001514 <MX_SPI3_Init+0x78>)
 80014a4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	; (8001510 <MX_SPI3_Init+0x74>)
 80014a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014ac:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80014ae:	4b18      	ldr	r3, [pc, #96]	; (8001510 <MX_SPI3_Init+0x74>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80014b4:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_SPI3_Init+0x74>)
 80014b6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80014ba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <MX_SPI3_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_SPI3_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_SPI3_Init+0x74>)
 80014ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014ce:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_SPI3_Init+0x74>)
 80014d2:	2208      	movs	r2, #8
 80014d4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_SPI3_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_SPI3_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_SPI3_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_SPI3_Init+0x74>)
 80014ea:	2207      	movs	r2, #7
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_SPI3_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_SPI3_Init+0x74>)
 80014f6:	2208      	movs	r2, #8
 80014f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_SPI3_Init+0x74>)
 80014fc:	f004 fd7a 	bl	8005ff4 <HAL_SPI_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001506:	f000 fa83 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200003ec 	.word	0x200003ec
 8001514:	40003c00 	.word	0x40003c00

08001518 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <MX_UART4_Init+0x90>)
 800151e:	4a23      	ldr	r2, [pc, #140]	; (80015ac <MX_UART4_Init+0x94>)
 8001520:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001522:	4b21      	ldr	r3, [pc, #132]	; (80015a8 <MX_UART4_Init+0x90>)
 8001524:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001528:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800152a:	4b1f      	ldr	r3, [pc, #124]	; (80015a8 <MX_UART4_Init+0x90>)
 800152c:	2200      	movs	r2, #0
 800152e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001530:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_UART4_Init+0x90>)
 8001532:	2200      	movs	r2, #0
 8001534:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001536:	4b1c      	ldr	r3, [pc, #112]	; (80015a8 <MX_UART4_Init+0x90>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800153c:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_UART4_Init+0x90>)
 800153e:	220c      	movs	r2, #12
 8001540:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001542:	4b19      	ldr	r3, [pc, #100]	; (80015a8 <MX_UART4_Init+0x90>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001548:	4b17      	ldr	r3, [pc, #92]	; (80015a8 <MX_UART4_Init+0x90>)
 800154a:	2200      	movs	r2, #0
 800154c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_UART4_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_UART4_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_UART4_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001560:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_UART4_Init+0x90>)
 8001562:	f004 fdea 	bl	800613a <HAL_UART_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 800156c:	f000 fa50 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001570:	2100      	movs	r1, #0
 8001572:	480d      	ldr	r0, [pc, #52]	; (80015a8 <MX_UART4_Init+0x90>)
 8001574:	f005 fb80 	bl	8006c78 <HAL_UARTEx_SetTxFifoThreshold>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 800157e:	f000 fa47 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001582:	2100      	movs	r1, #0
 8001584:	4808      	ldr	r0, [pc, #32]	; (80015a8 <MX_UART4_Init+0x90>)
 8001586:	f005 fbb5 	bl	8006cf4 <HAL_UARTEx_SetRxFifoThreshold>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001590:	f000 fa3e 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001594:	4804      	ldr	r0, [pc, #16]	; (80015a8 <MX_UART4_Init+0x90>)
 8001596:	f005 fb36 	bl	8006c06 <HAL_UARTEx_DisableFifoMode>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 fa36 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000450 	.word	0x20000450
 80015ac:	40004c00 	.word	0x40004c00

080015b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015b4:	4b22      	ldr	r3, [pc, #136]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015b6:	4a23      	ldr	r2, [pc, #140]	; (8001644 <MX_USART1_UART_Init+0x94>)
 80015b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80015ba:	4b21      	ldr	r3, [pc, #132]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015c2:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015c8:	4b1d      	ldr	r3, [pc, #116]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015d6:	220c      	movs	r2, #12
 80015d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015e6:	4b16      	ldr	r3, [pc, #88]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015f8:	4811      	ldr	r0, [pc, #68]	; (8001640 <MX_USART1_UART_Init+0x90>)
 80015fa:	f004 fd9e 	bl	800613a <HAL_UART_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001604:	f000 fa04 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001608:	2100      	movs	r1, #0
 800160a:	480d      	ldr	r0, [pc, #52]	; (8001640 <MX_USART1_UART_Init+0x90>)
 800160c:	f005 fb34 	bl	8006c78 <HAL_UARTEx_SetTxFifoThreshold>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001616:	f000 f9fb 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800161a:	2100      	movs	r1, #0
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <MX_USART1_UART_Init+0x90>)
 800161e:	f005 fb69 	bl	8006cf4 <HAL_UARTEx_SetRxFifoThreshold>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001628:	f000 f9f2 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <MX_USART1_UART_Init+0x90>)
 800162e:	f005 faea 	bl	8006c06 <HAL_UARTEx_DisableFifoMode>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001638:	f000 f9ea 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}
 8001640:	200004e4 	.word	0x200004e4
 8001644:	40013800 	.word	0x40013800

08001648 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <MX_USART2_UART_Init+0x94>)
 800164e:	4a24      	ldr	r2, [pc, #144]	; (80016e0 <MX_USART2_UART_Init+0x98>)
 8001650:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001654:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001658:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <MX_USART2_UART_Init+0x94>)
 800165c:	2200      	movs	r2, #0
 800165e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001660:	4b1e      	ldr	r3, [pc, #120]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001662:	2200      	movs	r2, #0
 8001664:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001668:	2200      	movs	r2, #0
 800166a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800166c:	4b1b      	ldr	r3, [pc, #108]	; (80016dc <MX_USART2_UART_Init+0x94>)
 800166e:	220c      	movs	r2, #12
 8001670:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8001672:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001674:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001678:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800167a:	4b18      	ldr	r3, [pc, #96]	; (80016dc <MX_USART2_UART_Init+0x94>)
 800167c:	2200      	movs	r2, #0
 800167e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001682:	2200      	movs	r2, #0
 8001684:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001688:	2200      	movs	r2, #0
 800168a:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <MX_USART2_UART_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001692:	4812      	ldr	r0, [pc, #72]	; (80016dc <MX_USART2_UART_Init+0x94>)
 8001694:	f004 fd51 	bl	800613a <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 800169e:	f000 f9b7 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016a2:	2100      	movs	r1, #0
 80016a4:	480d      	ldr	r0, [pc, #52]	; (80016dc <MX_USART2_UART_Init+0x94>)
 80016a6:	f005 fae7 	bl	8006c78 <HAL_UARTEx_SetTxFifoThreshold>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80016b0:	f000 f9ae 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <MX_USART2_UART_Init+0x94>)
 80016b8:	f005 fb1c 	bl	8006cf4 <HAL_UARTEx_SetRxFifoThreshold>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80016c2:	f000 f9a5 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART2_UART_Init+0x94>)
 80016c8:	f005 fa9d 	bl	8006c06 <HAL_UARTEx_DisableFifoMode>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80016d2:	f000 f99d 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	20000578 	.word	0x20000578
 80016e0:	40004400 	.word	0x40004400

080016e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016e8:	4b22      	ldr	r3, [pc, #136]	; (8001774 <MX_USART3_UART_Init+0x90>)
 80016ea:	4a23      	ldr	r2, [pc, #140]	; (8001778 <MX_USART3_UART_Init+0x94>)
 80016ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <MX_USART3_UART_Init+0x90>)
 80016f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	; (8001774 <MX_USART3_UART_Init+0x90>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	; (8001774 <MX_USART3_UART_Init+0x90>)
 80016fe:	2200      	movs	r2, #0
 8001700:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001702:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001708:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_USART3_UART_Init+0x90>)
 800170a:	220c      	movs	r2, #12
 800170c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001710:	2200      	movs	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001714:	4b17      	ldr	r3, [pc, #92]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800171a:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_USART3_UART_Init+0x90>)
 800171c:	2200      	movs	r2, #0
 800171e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001722:	2200      	movs	r2, #0
 8001724:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001728:	2200      	movs	r2, #0
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800172c:	4811      	ldr	r0, [pc, #68]	; (8001774 <MX_USART3_UART_Init+0x90>)
 800172e:	f004 fd04 	bl	800613a <HAL_UART_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001738:	f000 f96a 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800173c:	2100      	movs	r1, #0
 800173e:	480d      	ldr	r0, [pc, #52]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001740:	f005 fa9a 	bl	8006c78 <HAL_UARTEx_SetTxFifoThreshold>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800174a:	f000 f961 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001752:	f005 facf 	bl	8006cf4 <HAL_UARTEx_SetRxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800175c:	f000 f958 	bl	8001a10 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_USART3_UART_Init+0x90>)
 8001762:	f005 fa50 	bl	8006c06 <HAL_UARTEx_DisableFifoMode>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800176c:	f000 f950 	bl	8001a10 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2000060c 	.word	0x2000060c
 8001778:	40004800 	.word	0x40004800

0800177c <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08c      	sub	sp, #48	; 0x30
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 031c 	add.w	r3, r7, #28
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]
 80017a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017a2:	4b96      	ldr	r3, [pc, #600]	; (80019fc <MX_GPIO_Init+0x270>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	4a95      	ldr	r2, [pc, #596]	; (80019fc <MX_GPIO_Init+0x270>)
 80017a8:	f043 0310 	orr.w	r3, r3, #16
 80017ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ae:	4b93      	ldr	r3, [pc, #588]	; (80019fc <MX_GPIO_Init+0x270>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	f003 0310 	and.w	r3, r3, #16
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b90      	ldr	r3, [pc, #576]	; (80019fc <MX_GPIO_Init+0x270>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a8f      	ldr	r2, [pc, #572]	; (80019fc <MX_GPIO_Init+0x270>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b8d      	ldr	r3, [pc, #564]	; (80019fc <MX_GPIO_Init+0x270>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	4b8a      	ldr	r3, [pc, #552]	; (80019fc <MX_GPIO_Init+0x270>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a89      	ldr	r2, [pc, #548]	; (80019fc <MX_GPIO_Init+0x270>)
 80017d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b87      	ldr	r3, [pc, #540]	; (80019fc <MX_GPIO_Init+0x270>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017e6:	613b      	str	r3, [r7, #16]
 80017e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b84      	ldr	r3, [pc, #528]	; (80019fc <MX_GPIO_Init+0x270>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a83      	ldr	r2, [pc, #524]	; (80019fc <MX_GPIO_Init+0x270>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <MX_GPIO_Init+0x270>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60fb      	str	r3, [r7, #12]
 8001800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b7e      	ldr	r3, [pc, #504]	; (80019fc <MX_GPIO_Init+0x270>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a7d      	ldr	r2, [pc, #500]	; (80019fc <MX_GPIO_Init+0x270>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <MX_GPIO_Init+0x270>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60bb      	str	r3, [r7, #8]
 8001818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800181a:	4b78      	ldr	r3, [pc, #480]	; (80019fc <MX_GPIO_Init+0x270>)
 800181c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181e:	4a77      	ldr	r2, [pc, #476]	; (80019fc <MX_GPIO_Init+0x270>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001826:	4b75      	ldr	r3, [pc, #468]	; (80019fc <MX_GPIO_Init+0x270>)
 8001828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	f240 1105 	movw	r1, #261	; 0x105
 8001838:	4871      	ldr	r0, [pc, #452]	; (8001a00 <MX_GPIO_Init+0x274>)
 800183a:	f002 f8c3 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 800183e:	2200      	movs	r2, #0
 8001840:	f248 111c 	movw	r1, #33052	; 0x811c
 8001844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001848:	f002 f8bc 	bl	80039c4 <HAL_GPIO_WritePin>
                          |ARD_D9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800184c:	2200      	movs	r2, #0
 800184e:	f24f 0134 	movw	r1, #61492	; 0xf034
 8001852:	486c      	ldr	r0, [pc, #432]	; (8001a04 <MX_GPIO_Init+0x278>)
 8001854:	f002 f8b6 	bl	80039c4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin, GPIO_PIN_RESET);
 8001858:	2200      	movs	r2, #0
 800185a:	f242 0183 	movw	r1, #8323	; 0x2083
 800185e:	486a      	ldr	r0, [pc, #424]	; (8001a08 <MX_GPIO_Init+0x27c>)
 8001860:	f002 f8b0 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 7110 	mov.w	r1, #576	; 0x240
 800186a:	4868      	ldr	r0, [pc, #416]	; (8001a0c <MX_GPIO_Init+0x280>)
 800186c:	f002 f8aa 	bl	80039c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ST25DV04K_RF_DISABLE_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ST25DV04K_RF_DISABLE_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001870:	f240 1305 	movw	r3, #261	; 0x105
 8001874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001876:	2301      	movs	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187a:	2300      	movs	r3, #0
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187e:	2300      	movs	r3, #0
 8001880:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001882:	f107 031c 	add.w	r3, r7, #28
 8001886:	4619      	mov	r1, r3
 8001888:	485d      	ldr	r0, [pc, #372]	; (8001a00 <MX_GPIO_Init+0x274>)
 800188a:	f001 ff09 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin ST25DV04K_GPO_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin
                           ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|ST25DV04K_GPO_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin
 800188e:	237a      	movs	r3, #122	; 0x7a
 8001890:	61fb      	str	r3, [r7, #28]
                          |ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001892:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4857      	ldr	r0, [pc, #348]	; (8001a00 <MX_GPIO_Init+0x274>)
 80018a4:	f001 fefc 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_EXTI13_Pin VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin|VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018a8:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	4853      	ldr	r0, [pc, #332]	; (8001a0c <MX_GPIO_Init+0x280>)
 80018c0:	f001 feee 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin ARD_D4_Pin ARD_D7_Pin SPBTLE_RF_RST_Pin
                           ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|ARD_D4_Pin|ARD_D7_Pin|SPBTLE_RF_RST_Pin
 80018c4:	f248 131c 	movw	r3, #33052	; 0x811c
 80018c8:	61fb      	str	r3, [r7, #28]
                          |ARD_D9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ca:	2301      	movs	r3, #1
 80018cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e0:	f001 fede 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80018e4:	2301      	movs	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80018f2:	f107 031c 	add.w	r3, r7, #28
 80018f6:	4619      	mov	r1, r3
 80018f8:	4842      	ldr	r0, [pc, #264]	; (8001a04 <MX_GPIO_Init+0x278>)
 80018fa:	f001 fed1 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80018fe:	2302      	movs	r3, #2
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800190e:	2302      	movs	r3, #2
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	4619      	mov	r1, r3
 8001918:	483a      	ldr	r0, [pc, #232]	; (8001a04 <MX_GPIO_Init+0x278>)
 800191a:	f001 fec1 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800191e:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001922:	61fb      	str	r3, [r7, #28]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 031c 	add.w	r3, r7, #28
 8001934:	4619      	mov	r1, r3
 8001936:	4833      	ldr	r0, [pc, #204]	; (8001a04 <MX_GPIO_Init+0x278>)
 8001938:	f001 feb2 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI10_Pin LSM6DSL_INT1_EXTI11_Pin USB_OTG_FS_PWR_EN_Pin ARD_D2_Pin
                           HTS221_DRDY_EXTI15_Pin PMOD_IRQ_EXTI2_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI10_Pin|LSM6DSL_INT1_EXTI11_Pin|USB_OTG_FS_PWR_EN_Pin|ARD_D2_Pin
 800193c:	f64d 4304 	movw	r3, #56324	; 0xdc04
 8001940:	61fb      	str	r3, [r7, #28]
                          |HTS221_DRDY_EXTI15_Pin|PMOD_IRQ_EXTI2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001942:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	4619      	mov	r1, r3
 8001952:	482d      	ldr	r0, [pc, #180]	; (8001a08 <MX_GPIO_Init+0x27c>)
 8001954:	f001 fea4 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin PMOD_SPI2_SCK_Pin STSAFE_A110_RESET_Pin */
  GPIO_InitStruct.Pin = SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|PMOD_SPI2_SCK_Pin|STSAFE_A110_RESET_Pin;
 8001958:	f242 0383 	movw	r3, #8323	; 0x2083
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_GPIO_Init+0x27c>)
 8001972:	f001 fe95 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001976:	f44f 7310 	mov.w	r3, #576	; 0x240
 800197a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197c:	2301      	movs	r3, #1
 800197e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001984:	2300      	movs	r3, #0
 8001986:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	481f      	ldr	r0, [pc, #124]	; (8001a0c <MX_GPIO_Init+0x280>)
 8001990:	f001 fe86 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001994:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80019a2:	f107 031c 	add.w	r3, r7, #28
 80019a6:	4619      	mov	r1, r3
 80019a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ac:	f001 fe78 	bl	80036a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80019b0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80019b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019be:	2303      	movs	r3, #3
 80019c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019c2:	230a      	movs	r3, #10
 80019c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f001 fe66 	bl	80036a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2100      	movs	r1, #0
 80019d8:	2017      	movs	r0, #23
 80019da:	f001 fd1e 	bl	800341a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019de:	2017      	movs	r0, #23
 80019e0:	f001 fd37 	bl	8003452 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019e4:	2200      	movs	r2, #0
 80019e6:	2100      	movs	r1, #0
 80019e8:	2028      	movs	r0, #40	; 0x28
 80019ea:	f001 fd16 	bl	800341a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ee:	2028      	movs	r0, #40	; 0x28
 80019f0:	f001 fd2f 	bl	8003452 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019f4:	bf00      	nop
 80019f6:	3730      	adds	r7, #48	; 0x30
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48001000 	.word	0x48001000
 8001a04:	48000400 	.word	0x48000400
 8001a08:	48000c00 	.word	0x48000c00
 8001a0c:	48000800 	.word	0x48000800

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a14:	b672      	cpsid	i
}
 8001a16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <Error_Handler+0x8>
	...

08001a1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a22:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <HAL_MspInit+0x44>)
 8001a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a26:	4a0e      	ldr	r2, [pc, #56]	; (8001a60 <HAL_MspInit+0x44>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a2e:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <HAL_MspInit+0x44>)
 8001a30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_MspInit+0x44>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a3e:	4a08      	ldr	r2, [pc, #32]	; (8001a60 <HAL_MspInit+0x44>)
 8001a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a44:	6593      	str	r3, [r2, #88]	; 0x58
 8001a46:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_MspInit+0x44>)
 8001a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a4e:	603b      	str	r3, [r7, #0]
 8001a50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000

08001a64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b08a      	sub	sp, #40	; 0x28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a15      	ldr	r2, [pc, #84]	; (8001ad8 <HAL_ADC_MspInit+0x74>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d123      	bne.n	8001ace <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <HAL_ADC_MspInit+0x78>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a14      	ldr	r2, [pc, #80]	; (8001adc <HAL_ADC_MspInit+0x78>)
 8001a8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b12      	ldr	r3, [pc, #72]	; (8001adc <HAL_ADC_MspInit+0x78>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_ADC_MspInit+0x78>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a0e      	ldr	r2, [pc, #56]	; (8001adc <HAL_ADC_MspInit+0x78>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <HAL_ADC_MspInit+0x78>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0304 	and.w	r3, r3, #4
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    PC2     ------> ADC1_IN3
    PC3     ------> ADC1_IN4
    PC4     ------> ADC1_IN13
    PC5     ------> ADC1_IN14
    */
    GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001ab6:	233f      	movs	r3, #63	; 0x3f
 8001ab8:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001aba:	230b      	movs	r3, #11
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ac2:	f107 0314 	add.w	r3, r7, #20
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <HAL_ADC_MspInit+0x7c>)
 8001aca:	f001 fde9 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ace:	bf00      	nop
 8001ad0:	3728      	adds	r7, #40	; 0x28
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	50040000 	.word	0x50040000
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	48000800 	.word	0x48000800

08001ae4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b0ae      	sub	sp, #184	; 0xb8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001af0:	2200      	movs	r2, #0
 8001af2:	601a      	str	r2, [r3, #0]
 8001af4:	605a      	str	r2, [r3, #4]
 8001af6:	609a      	str	r2, [r3, #8]
 8001af8:	60da      	str	r2, [r3, #12]
 8001afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001afc:	f107 0310 	add.w	r3, r7, #16
 8001b00:	2294      	movs	r2, #148	; 0x94
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f005 fea9 	bl	800785c <memset>
  if(DFSDM1_Init == 0)
 8001b0a:	4b25      	ldr	r3, [pc, #148]	; (8001ba0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d142      	bne.n	8001b98 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8001b12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b16:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b1e:	f107 0310 	add.w	r3, r7, #16
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fd3e 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8001b2e:	f7ff ff6f 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001b32:	4b1c      	ldr	r3, [pc, #112]	; (8001ba4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	4a1b      	ldr	r2, [pc, #108]	; (8001ba4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3e:	4b19      	ldr	r3, [pc, #100]	; (8001ba4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b46:	60fb      	str	r3, [r7, #12]
 8001b48:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4a:	4b16      	ldr	r3, [pc, #88]	; (8001ba4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b4e:	4a15      	ldr	r2, [pc, #84]	; (8001ba4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b50:	f043 0310 	orr.w	r3, r3, #16
 8001b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	60bb      	str	r3, [r7, #8]
 8001b60:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001b62:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001b66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b82:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8001b8a:	f001 fd89 	bl	80036a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	3301      	adds	r3, #1
 8001b94:	4a02      	ldr	r2, [pc, #8]	; (8001ba0 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001b96:	6013      	str	r3, [r2, #0]
  }

}
 8001b98:	bf00      	nop
 8001b9a:	37b8      	adds	r7, #184	; 0xb8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	200006a0 	.word	0x200006a0
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48001000 	.word	0x48001000

08001bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b0b0      	sub	sp, #192	; 0xc0
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
 8001bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bc4:	f107 0318 	add.w	r3, r7, #24
 8001bc8:	2294      	movs	r2, #148	; 0x94
 8001bca:	2100      	movs	r1, #0
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f005 fe45 	bl	800785c <memset>
  if(hi2c->Instance==I2C1)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a42      	ldr	r2, [pc, #264]	; (8001ce0 <HAL_I2C_MspInit+0x134>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d13c      	bne.n	8001c56 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001bdc:	2340      	movs	r3, #64	; 0x40
 8001bde:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001be4:	f107 0318 	add.w	r3, r7, #24
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 fcdb 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001bf4:	f7ff ff0c 	bl	8001a10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001bfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfc:	4a39      	ldr	r2, [pc, #228]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001bfe:	f043 0302 	orr.w	r3, r3, #2
 8001c02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c04:	4b37      	ldr	r3, [pc, #220]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	617b      	str	r3, [r7, #20]
 8001c0e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001c10:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c18:	2312      	movs	r3, #18
 8001c1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c24:	2303      	movs	r3, #3
 8001c26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c30:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c34:	4619      	mov	r1, r3
 8001c36:	482c      	ldr	r0, [pc, #176]	; (8001ce8 <HAL_I2C_MspInit+0x13c>)
 8001c38:	f001 fd32 	bl	80036a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a28      	ldr	r2, [pc, #160]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c46:	6593      	str	r3, [r2, #88]	; 0x58
 8001c48:	4b26      	ldr	r3, [pc, #152]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001c54:	e040      	b.n	8001cd8 <HAL_I2C_MspInit+0x12c>
  else if(hi2c->Instance==I2C2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a24      	ldr	r2, [pc, #144]	; (8001cec <HAL_I2C_MspInit+0x140>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d13b      	bne.n	8001cd8 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001c60:	2380      	movs	r3, #128	; 0x80
 8001c62:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001c64:	2300      	movs	r3, #0
 8001c66:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f003 fc99 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_I2C_MspInit+0xd0>
      Error_Handler();
 8001c78:	f7ff feca 	bl	8001a10 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b19      	ldr	r3, [pc, #100]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c80:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c88:	4b16      	ldr	r3, [pc, #88]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c9c:	2312      	movs	r3, #18
 8001c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001cae:	2304      	movs	r3, #4
 8001cb0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cb8:	4619      	mov	r1, r3
 8001cba:	480b      	ldr	r0, [pc, #44]	; (8001ce8 <HAL_I2C_MspInit+0x13c>)
 8001cbc:	f001 fcf0 	bl	80036a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001cc0:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc4:	4a07      	ldr	r2, [pc, #28]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001cc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001cca:	6593      	str	r3, [r2, #88]	; 0x58
 8001ccc:	4b05      	ldr	r3, [pc, #20]	; (8001ce4 <HAL_I2C_MspInit+0x138>)
 8001cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
}
 8001cd8:	bf00      	nop
 8001cda:	37c0      	adds	r7, #192	; 0xc0
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	40005400 	.word	0x40005400
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	40005800 	.word	0x40005800

08001cf0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b0b0      	sub	sp, #192	; 0xc0
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d08:	f107 0318 	add.w	r3, r7, #24
 8001d0c:	2294      	movs	r2, #148	; 0x94
 8001d0e:	2100      	movs	r1, #0
 8001d10:	4618      	mov	r0, r3
 8001d12:	f005 fda3 	bl	800785c <memset>
  if(hospi->Instance==OCTOSPI1)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a28      	ldr	r2, [pc, #160]	; (8001dbc <HAL_OSPI_MspInit+0xcc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d149      	bne.n	8001db4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001d20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d24:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d2c:	f107 0318 	add.w	r3, r7, #24
 8001d30:	4618      	mov	r0, r3
 8001d32:	f003 fc37 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001d3c:	f7ff fe68 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8001d40:	4b1f      	ldr	r3, [pc, #124]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d44:	4a1e      	ldr	r2, [pc, #120]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d62:	6513      	str	r3, [r2, #80]	; 0x50
 8001d64:	4b16      	ldr	r3, [pc, #88]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d74:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d76:	f043 0310 	orr.w	r3, r3, #16
 8001d7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d7c:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <HAL_OSPI_MspInit+0xd0>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	f003 0310 	and.w	r3, r3, #16
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001d88:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001d8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d96:	2300      	movs	r3, #0
 8001d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8001da2:	230a      	movs	r3, #10
 8001da4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001dac:	4619      	mov	r1, r3
 8001dae:	4805      	ldr	r0, [pc, #20]	; (8001dc4 <HAL_OSPI_MspInit+0xd4>)
 8001db0:	f001 fc76 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8001db4:	bf00      	nop
 8001db6:	37c0      	adds	r7, #192	; 0xc0
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	a0001000 	.word	0xa0001000
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	48001000 	.word	0x48001000

08001dc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b08c      	sub	sp, #48	; 0x30
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	60da      	str	r2, [r3, #12]
 8001dde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a2f      	ldr	r2, [pc, #188]	; (8001ea4 <HAL_SPI_MspInit+0xdc>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d129      	bne.n	8001e3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dea:	4b2f      	ldr	r3, [pc, #188]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	4a2e      	ldr	r2, [pc, #184]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001df4:	6613      	str	r3, [r2, #96]	; 0x60
 8001df6:	4b2c      	ldr	r3, [pc, #176]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001df8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfe:	61bb      	str	r3, [r7, #24]
 8001e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001e1a:	23e0      	movs	r3, #224	; 0xe0
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e2a:	2305      	movs	r3, #5
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e38:	f001 fc32 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001e3c:	e02d      	b.n	8001e9a <HAL_SPI_MspInit+0xd2>
  else if(hspi->Instance==SPI3)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1a      	ldr	r2, [pc, #104]	; (8001eac <HAL_SPI_MspInit+0xe4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d128      	bne.n	8001e9a <HAL_SPI_MspInit+0xd2>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e48:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4c:	4a16      	ldr	r2, [pc, #88]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e52:	6593      	str	r3, [r2, #88]	; 0x58
 8001e54:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	4b11      	ldr	r3, [pc, #68]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e64:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e66:	f043 0304 	orr.w	r3, r3, #4
 8001e6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6c:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <HAL_SPI_MspInit+0xe0>)
 8001e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e70:	f003 0304 	and.w	r3, r3, #4
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001e78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 031c 	add.w	r3, r7, #28
 8001e92:	4619      	mov	r1, r3
 8001e94:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <HAL_SPI_MspInit+0xe8>)
 8001e96:	f001 fc03 	bl	80036a0 <HAL_GPIO_Init>
}
 8001e9a:	bf00      	nop
 8001e9c:	3730      	adds	r7, #48	; 0x30
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40013000 	.word	0x40013000
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40003c00 	.word	0x40003c00
 8001eb0:	48000800 	.word	0x48000800

08001eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b0b4      	sub	sp, #208	; 0xd0
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
 8001eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed0:	2294      	movs	r2, #148	; 0x94
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f005 fcc1 	bl	800785c <memset>
  if(huart->Instance==UART4)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a83      	ldr	r2, [pc, #524]	; (80020ec <HAL_UART_MspInit+0x238>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d13c      	bne.n	8001f5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f003 fb57 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d001      	beq.n	8001f00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001efc:	f7ff fd88 	bl	8001a10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001f00:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f04:	4a7a      	ldr	r2, [pc, #488]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001f0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f0c:	4b78      	ldr	r3, [pc, #480]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b75      	ldr	r3, [pc, #468]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f1c:	4a74      	ldr	r2, [pc, #464]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f24:	4b72      	ldr	r3, [pc, #456]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	623b      	str	r3, [r7, #32]
 8001f2e:	6a3b      	ldr	r3, [r7, #32]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001f30:	2303      	movs	r3, #3
 8001f32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001f48:	2308      	movs	r3, #8
 8001f4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f52:	4619      	mov	r1, r3
 8001f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f58:	f001 fba2 	bl	80036a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001f5c:	e0c2      	b.n	80020e4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART1)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a64      	ldr	r2, [pc, #400]	; (80020f4 <HAL_UART_MspInit+0x240>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d13b      	bne.n	8001fe0 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f74:	4618      	mov	r0, r3
 8001f76:	f003 fb15 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d001      	beq.n	8001f84 <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001f80:	f7ff fd46 	bl	8001a10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f84:	4b5a      	ldr	r3, [pc, #360]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f88:	4a59      	ldr	r2, [pc, #356]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f90:	4b57      	ldr	r3, [pc, #348]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f98:	61fb      	str	r3, [r7, #28]
 8001f9a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9c:	4b54      	ldr	r3, [pc, #336]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa0:	4a53      	ldr	r2, [pc, #332]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa8:	4b51      	ldr	r3, [pc, #324]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8001faa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
 8001fb2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001fb4:	23c0      	movs	r3, #192	; 0xc0
 8001fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fba:	2302      	movs	r3, #2
 8001fbc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4847      	ldr	r0, [pc, #284]	; (80020f8 <HAL_UART_MspInit+0x244>)
 8001fda:	f001 fb61 	bl	80036a0 <HAL_GPIO_Init>
}
 8001fde:	e081      	b.n	80020e4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART2)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a45      	ldr	r2, [pc, #276]	; (80020fc <HAL_UART_MspInit+0x248>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d13b      	bne.n	8002062 <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001fea:	2302      	movs	r3, #2
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f003 fad4 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_UART_MspInit+0x152>
      Error_Handler();
 8002002:	f7ff fd05 	bl	8001a10 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002006:	4b3a      	ldr	r3, [pc, #232]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	4a39      	ldr	r2, [pc, #228]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 800200c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002010:	6593      	str	r3, [r2, #88]	; 0x58
 8002012:	4b37      	ldr	r3, [pc, #220]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8002014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800201e:	4b34      	ldr	r3, [pc, #208]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8002020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002022:	4a33      	ldr	r2, [pc, #204]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8002024:	f043 0308 	orr.w	r3, r3, #8
 8002028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800202a:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 800202c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	613b      	str	r3, [r7, #16]
 8002034:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8002036:	2378      	movs	r3, #120	; 0x78
 8002038:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002042:	2300      	movs	r3, #0
 8002044:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002048:	2303      	movs	r3, #3
 800204a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800204e:	2307      	movs	r3, #7
 8002050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002054:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002058:	4619      	mov	r1, r3
 800205a:	4829      	ldr	r0, [pc, #164]	; (8002100 <HAL_UART_MspInit+0x24c>)
 800205c:	f001 fb20 	bl	80036a0 <HAL_GPIO_Init>
}
 8002060:	e040      	b.n	80020e4 <HAL_UART_MspInit+0x230>
  else if(huart->Instance==USART3)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a27      	ldr	r2, [pc, #156]	; (8002104 <HAL_UART_MspInit+0x250>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d13b      	bne.n	80020e4 <HAL_UART_MspInit+0x230>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800206c:	2304      	movs	r3, #4
 800206e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002070:	2300      	movs	r3, #0
 8002072:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002074:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002078:	4618      	mov	r0, r3
 800207a:	f003 fa93 	bl	80055a4 <HAL_RCCEx_PeriphCLKConfig>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 8002084:	f7ff fcc4 	bl	8001a10 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	4a18      	ldr	r2, [pc, #96]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 800208e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002092:	6593      	str	r3, [r2, #88]	; 0x58
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 80020a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a4:	4a12      	ldr	r2, [pc, #72]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 80020a6:	f043 0308 	orr.w	r3, r3, #8
 80020aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ac:	4b10      	ldr	r3, [pc, #64]	; (80020f0 <HAL_UART_MspInit+0x23c>)
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	60bb      	str	r3, [r7, #8]
 80020b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80020b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c0:	2302      	movs	r3, #2
 80020c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020cc:	2303      	movs	r3, #3
 80020ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020d2:	2307      	movs	r3, #7
 80020d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020d8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80020dc:	4619      	mov	r1, r3
 80020de:	4808      	ldr	r0, [pc, #32]	; (8002100 <HAL_UART_MspInit+0x24c>)
 80020e0:	f001 fade 	bl	80036a0 <HAL_GPIO_Init>
}
 80020e4:	bf00      	nop
 80020e6:	37d0      	adds	r7, #208	; 0xd0
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40004c00 	.word	0x40004c00
 80020f0:	40021000 	.word	0x40021000
 80020f4:	40013800 	.word	0x40013800
 80020f8:	48000400 	.word	0x48000400
 80020fc:	40004400 	.word	0x40004400
 8002100:	48000c00 	.word	0x48000c00
 8002104:	40004800 	.word	0x40004800

08002108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800210c:	e7fe      	b.n	800210c <NMI_Handler+0x4>

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002154:	f000 f984 	bl	8002460 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8002160:	2020      	movs	r0, #32
 8002162:	f001 fc47 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8002166:	2040      	movs	r0, #64	; 0x40
 8002168:	f001 fc44 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 800216c:	2080      	movs	r0, #128	; 0x80
 800216e:	f001 fc41 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8002172:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002176:	f001 fc3d 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}

0800217e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI10_Pin);
 8002182:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002186:	f001 fc35 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 800218a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800218e:	f001 fc31 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_OTG_FS_PWR_EN_Pin);
 8002192:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002196:	f001 fc2d 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800219a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800219e:	f001 fc29 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80021a2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021a6:	f001 fc25 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80021aa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80021ae:	f001 fc21 	bl	80039f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  return 1;
 80021ba:	2301      	movs	r3, #1
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_kill>:

int _kill(int pid, int sig)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021d0:	f005 fb50 	bl	8007874 <__errno>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2216      	movs	r2, #22
 80021d8:	601a      	str	r2, [r3, #0]
  return -1;
 80021da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <_exit>:

void _exit (int status)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021ee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021f2:	6878      	ldr	r0, [r7, #4]
 80021f4:	f7ff ffe7 	bl	80021c6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f8:	e7fe      	b.n	80021f8 <_exit+0x12>

080021fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	60f8      	str	r0, [r7, #12]
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
 800220a:	e00a      	b.n	8002222 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800220c:	f3af 8000 	nop.w
 8002210:	4601      	mov	r1, r0
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	60ba      	str	r2, [r7, #8]
 8002218:	b2ca      	uxtb	r2, r1
 800221a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	3301      	adds	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	dbf0      	blt.n	800220c <_read+0x12>
  }

  return len;
 800222a:	687b      	ldr	r3, [r7, #4]
}
 800222c:	4618      	mov	r0, r3
 800222e:	3718      	adds	r7, #24
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b086      	sub	sp, #24
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002240:	2300      	movs	r3, #0
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	e009      	b.n	800225a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	1c5a      	adds	r2, r3, #1
 800224a:	60ba      	str	r2, [r7, #8]
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	dbf1      	blt.n	8002246 <_write+0x12>
  }
  return len;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_close>:

int _close(int file)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002294:	605a      	str	r2, [r3, #4]
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_isatty>:

int _isatty(int file)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	; (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	; (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	; (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	; (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f005 fab6 	bl	8007874 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	; (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200a0000 	.word	0x200a0000
 8002334:	00000400 	.word	0x00000400
 8002338:	200006a4 	.word	0x200006a4
 800233c:	20000820 	.word	0x20000820

08002340 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800239c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002368:	f7ff ffea 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	; (80023b0 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002392:	f005 fa75 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002396:	f7fe fdcd 	bl	8000f34 <main>

0800239a <LoopForever>:

LoopForever:
    b LoopForever
 800239a:	e7fe      	b.n	800239a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800239c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80023a8:	08009d4c 	.word	0x08009d4c
  ldr r2, =_sbss
 80023ac:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80023b0:	2000081c 	.word	0x2000081c

080023b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_IRQHandler>

080023b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f001 f81f 	bl	8003404 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c6:	2000      	movs	r0, #0
 80023c8:	f000 f80e 	bl	80023e8 <HAL_InitTick>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	e001      	b.n	80023dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023d8:	f7ff fb20 	bl	8001a1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023dc:	79fb      	ldrb	r3, [r7, #7]
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <HAL_InitTick+0x6c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d023      	beq.n	8002444 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80023fc:	4b16      	ldr	r3, [pc, #88]	; (8002458 <HAL_InitTick+0x70>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b14      	ldr	r3, [pc, #80]	; (8002454 <HAL_InitTick+0x6c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	4619      	mov	r1, r3
 8002406:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240a:	fbb3 f3f1 	udiv	r3, r3, r1
 800240e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002412:	4618      	mov	r0, r3
 8002414:	f001 f82b 	bl	800346e <HAL_SYSTICK_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	d809      	bhi.n	8002438 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002424:	2200      	movs	r2, #0
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800242c:	f000 fff5 	bl	800341a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002430:	4a0a      	ldr	r2, [pc, #40]	; (800245c <HAL_InitTick+0x74>)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e007      	b.n	8002448 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
 800243c:	e004      	b.n	8002448 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e001      	b.n	8002448 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000008 	.word	0x20000008
 8002458:	20000000 	.word	0x20000000
 800245c:	20000004 	.word	0x20000004

08002460 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002464:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_IncTick+0x20>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_IncTick+0x24>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4413      	add	r3, r2
 8002470:	4a04      	ldr	r2, [pc, #16]	; (8002484 <HAL_IncTick+0x24>)
 8002472:	6013      	str	r3, [r2, #0]
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	20000008 	.word	0x20000008
 8002484:	200006a8 	.word	0x200006a8

08002488 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return uwTick;
 800248c:	4b03      	ldr	r3, [pc, #12]	; (800249c <HAL_GetTick+0x14>)
 800248e:	681b      	ldr	r3, [r3, #0]
}
 8002490:	4618      	mov	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	200006a8 	.word	0x200006a8

080024a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	609a      	str	r2, [r3, #8]
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr

080024ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002508:	b480      	push	{r7}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
 800250e:	60f8      	str	r0, [r7, #12]
 8002510:	60b9      	str	r1, [r7, #8]
 8002512:	607a      	str	r2, [r7, #4]
 8002514:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3360      	adds	r3, #96	; 0x60
 800251a:	461a      	mov	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	4b08      	ldr	r3, [pc, #32]	; (800254c <LL_ADC_SetOffset+0x44>)
 800252a:	4013      	ands	r3, r2
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002532:	683a      	ldr	r2, [r7, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	4313      	orrs	r3, r2
 8002538:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002540:	bf00      	nop
 8002542:	371c      	adds	r7, #28
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	03fff000 	.word	0x03fff000

08002550 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002550:	b480      	push	{r7}
 8002552:	b085      	sub	sp, #20
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3360      	adds	r3, #96	; 0x60
 800255e:	461a      	mov	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002570:	4618      	mov	r0, r3
 8002572:	3714      	adds	r7, #20
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800257c:	b480      	push	{r7}
 800257e:	b087      	sub	sp, #28
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3360      	adds	r3, #96	; 0x60
 800258c:	461a      	mov	r2, r3
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	431a      	orrs	r2, r3
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80025a6:	bf00      	nop
 80025a8:	371c      	adds	r7, #28
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
 80025ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	615a      	str	r2, [r3, #20]
}
 80025cc:	bf00      	nop
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	3330      	adds	r3, #48	; 0x30
 80025e8:	461a      	mov	r2, r3
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	0a1b      	lsrs	r3, r3, #8
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	f003 030c 	and.w	r3, r3, #12
 80025f4:	4413      	add	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	211f      	movs	r1, #31
 8002604:	fa01 f303 	lsl.w	r3, r1, r3
 8002608:	43db      	mvns	r3, r3
 800260a:	401a      	ands	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	0e9b      	lsrs	r3, r3, #26
 8002610:	f003 011f 	and.w	r1, r3, #31
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 031f 	and.w	r3, r3, #31
 800261a:	fa01 f303 	lsl.w	r3, r1, r3
 800261e:	431a      	orrs	r2, r3
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002624:	bf00      	nop
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002630:	b480      	push	{r7}
 8002632:	b087      	sub	sp, #28
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3314      	adds	r3, #20
 8002640:	461a      	mov	r2, r3
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	0e5b      	lsrs	r3, r3, #25
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	4413      	add	r3, r2
 800264e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	0d1b      	lsrs	r3, r3, #20
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2107      	movs	r1, #7
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	401a      	ands	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	0d1b      	lsrs	r3, r3, #20
 800266a:	f003 031f 	and.w	r3, r3, #31
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	fa01 f303 	lsl.w	r3, r1, r3
 8002674:	431a      	orrs	r2, r3
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
	...

08002688 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a0:	43db      	mvns	r3, r3
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f003 0318 	and.w	r3, r3, #24
 80026aa:	4908      	ldr	r1, [pc, #32]	; (80026cc <LL_ADC_SetChannelSingleDiff+0x44>)
 80026ac:	40d9      	lsrs	r1, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	400b      	ands	r3, r1
 80026b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	0007ffff 	.word	0x0007ffff

080026d0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80026e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6093      	str	r3, [r2, #8]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002704:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002708:	d101      	bne.n	800270e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800270e:	2300      	movs	r3, #0
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800272c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002730:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002754:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002758:	d101      	bne.n	800275e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b01      	cmp	r3, #1
 800277e:	d101      	bne.n	8002784 <LL_ADC_IsEnabled+0x18>
 8002780:	2301      	movs	r3, #1
 8002782:	e000      	b.n	8002786 <LL_ADC_IsEnabled+0x1a>
 8002784:	2300      	movs	r3, #0
}
 8002786:	4618      	mov	r0, r3
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr

08002792 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 0304 	and.w	r3, r3, #4
 80027a2:	2b04      	cmp	r3, #4
 80027a4:	d101      	bne.n	80027aa <LL_ADC_REG_IsConversionOngoing+0x18>
 80027a6:	2301      	movs	r3, #1
 80027a8:	e000      	b.n	80027ac <LL_ADC_REG_IsConversionOngoing+0x1a>
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	f003 0308 	and.w	r3, r3, #8
 80027c8:	2b08      	cmp	r3, #8
 80027ca:	d101      	bne.n	80027d0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
	...

080027e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e129      	b.n	8002a4e <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	2b00      	cmp	r3, #0
 8002806:	d109      	bne.n	800281c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff f92b 	bl	8001a64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff67 	bl	80026f4 <LL_ADC_IsDeepPowerDownEnabled>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d004      	beq.n	8002836 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff ff4d 	bl	80026d0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4618      	mov	r0, r3
 800283c:	f7ff ff82 	bl	8002744 <LL_ADC_IsInternalRegulatorEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d115      	bne.n	8002872 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff66 	bl	800271c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002850:	4b81      	ldr	r3, [pc, #516]	; (8002a58 <HAL_ADC_Init+0x278>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	4a81      	ldr	r2, [pc, #516]	; (8002a5c <HAL_ADC_Init+0x27c>)
 8002858:	fba2 2303 	umull	r2, r3, r2, r3
 800285c:	099b      	lsrs	r3, r3, #6
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002864:	e002      	b.n	800286c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3b01      	subs	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff ff64 	bl	8002744 <LL_ADC_IsInternalRegulatorEnabled>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002886:	f043 0210 	orr.w	r2, r3, #16
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002892:	f043 0201 	orr.w	r2, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff ff75 	bl	8002792 <LL_ADC_REG_IsConversionOngoing>
 80028a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f003 0310 	and.w	r3, r3, #16
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f040 80c2 	bne.w	8002a3c <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f040 80be 	bne.w	8002a3c <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80028c8:	f043 0202 	orr.w	r2, r3, #2
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ff49 	bl	800276c <LL_ADC_IsEnabled>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80028e0:	485f      	ldr	r0, [pc, #380]	; (8002a60 <HAL_ADC_Init+0x280>)
 80028e2:	f7ff ff43 	bl	800276c <LL_ADC_IsEnabled>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	4619      	mov	r1, r3
 80028f2:	485c      	ldr	r0, [pc, #368]	; (8002a64 <HAL_ADC_Init+0x284>)
 80028f4:	f7ff fdd4 	bl	80024a0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7e5b      	ldrb	r3, [r3, #25]
 80028fc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002902:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002908:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800290e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002916:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	3b01      	subs	r3, #1
 800292c:	045b      	lsls	r3, r3, #17
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002940:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002948:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4313      	orrs	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4b44      	ldr	r3, [pc, #272]	; (8002a68 <HAL_ADC_Init+0x288>)
 8002958:	4013      	ands	r3, r2
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6812      	ldr	r2, [r2, #0]
 800295e:	69b9      	ldr	r1, [r7, #24]
 8002960:	430b      	orrs	r3, r1
 8002962:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff25 	bl	80027b8 <LL_ADC_INJ_IsConversionOngoing>
 800296e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d140      	bne.n	80029f8 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d13d      	bne.n	80029f8 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7e1b      	ldrb	r3, [r3, #24]
 8002984:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002986:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002990:	4313      	orrs	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800299e:	f023 0306 	bic.w	r3, r3, #6
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6812      	ldr	r2, [r2, #0]
 80029a6:	69b9      	ldr	r1, [r7, #24]
 80029a8:	430b      	orrs	r3, r1
 80029aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	d118      	bne.n	80029e8 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80029c0:	f023 0304 	bic.w	r3, r3, #4
 80029c4:	687a      	ldr	r2, [r7, #4]
 80029c6:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80029cc:	4311      	orrs	r1, r2
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80029d2:	4311      	orrs	r1, r2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80029d8:	430a      	orrs	r2, r1
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	611a      	str	r2, [r3, #16]
 80029e6:	e007      	b.n	80029f8 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691a      	ldr	r2, [r3, #16]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d10c      	bne.n	8002a1a <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a06:	f023 010f 	bic.w	r1, r3, #15
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	631a      	str	r2, [r3, #48]	; 0x30
 8002a18:	e007      	b.n	8002a2a <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 020f 	bic.w	r2, r2, #15
 8002a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a2e:	f023 0303 	bic.w	r3, r3, #3
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	659a      	str	r2, [r3, #88]	; 0x58
 8002a3a:	e007      	b.n	8002a4c <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a40:	f043 0210 	orr.w	r2, r3, #16
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	053e2d63 	.word	0x053e2d63
 8002a60:	50040000 	.word	0x50040000
 8002a64:	50040300 	.word	0x50040300
 8002a68:	fff0c007 	.word	0xfff0c007

08002a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b0b6      	sub	sp, #216	; 0xd8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a76:	2300      	movs	r3, #0
 8002a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x22>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e3d5      	b.n	800323a <HAL_ADC_ConfigChannel+0x7ce>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fe79 	bl	8002792 <LL_ADC_REG_IsConversionOngoing>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f040 83ba 	bne.w	800321c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b05      	cmp	r3, #5
 8002ab6:	d824      	bhi.n	8002b02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	3b02      	subs	r3, #2
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d81b      	bhi.n	8002afa <HAL_ADC_ConfigChannel+0x8e>
 8002ac2:	a201      	add	r2, pc, #4	; (adr r2, 8002ac8 <HAL_ADC_ConfigChannel+0x5c>)
 8002ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ac8:	08002ad9 	.word	0x08002ad9
 8002acc:	08002ae1 	.word	0x08002ae1
 8002ad0:	08002ae9 	.word	0x08002ae9
 8002ad4:	08002af1 	.word	0x08002af1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002ad8:	230c      	movs	r3, #12
 8002ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ade:	e010      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002ae0:	2312      	movs	r3, #18
 8002ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002ae6:	e00c      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002ae8:	2318      	movs	r3, #24
 8002aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002aee:	e008      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002af8:	e003      	b.n	8002b02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002afa:	2306      	movs	r3, #6
 8002afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002b00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002b10:	f7ff fd62 	bl	80025d8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fe3a 	bl	8002792 <LL_ADC_REG_IsConversionOngoing>
 8002b1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff fe46 	bl	80027b8 <LL_ADC_INJ_IsConversionOngoing>
 8002b2c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f040 81bf 	bne.w	8002eb8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f040 81ba 	bne.w	8002eb8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4c:	d10f      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2200      	movs	r2, #0
 8002b58:	4619      	mov	r1, r3
 8002b5a:	f7ff fd69 	bl	8002630 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff fd23 	bl	80025b2 <LL_ADC_SetSamplingTimeCommonConfig>
 8002b6c:	e00e      	b.n	8002b8c <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f7ff fd58 	bl	8002630 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2100      	movs	r1, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff fd13 	bl	80025b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	695a      	ldr	r2, [r3, #20]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	08db      	lsrs	r3, r3, #3
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d00a      	beq.n	8002bc4 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6919      	ldr	r1, [r3, #16]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002bbe:	f7ff fca3 	bl	8002508 <LL_ADC_SetOffset>
 8002bc2:	e179      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2100      	movs	r1, #0
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fcc0 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_ADC_ConfigChannel+0x184>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2100      	movs	r1, #0
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fcb5 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	0e9b      	lsrs	r3, r3, #26
 8002bea:	f003 021f 	and.w	r2, r3, #31
 8002bee:	e01e      	b.n	8002c2e <HAL_ADC_ConfigChannel+0x1c2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff fcaa 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8002c1e:	2320      	movs	r3, #32
 8002c20:	e004      	b.n	8002c2c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8002c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c26:	fab3 f383 	clz	r3, r3
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d105      	bne.n	8002c46 <HAL_ADC_ConfigChannel+0x1da>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	0e9b      	lsrs	r3, r3, #26
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	e018      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x20c>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c52:	fa93 f3a3 	rbit	r3, r3
 8002c56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002c5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002c62:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8002c6a:	2320      	movs	r3, #32
 8002c6c:	e004      	b.n	8002c78 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 8002c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c72:	fab3 f383 	clz	r3, r3
 8002c76:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d106      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7ff fc79 	bl	800257c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2101      	movs	r1, #1
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fc5d 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d10a      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x24a>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff fc52 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	0e9b      	lsrs	r3, r3, #26
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	e01e      	b.n	8002cf4 <HAL_ADC_ConfigChannel+0x288>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2101      	movs	r1, #1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fc47 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ccc:	fa93 f3a3 	rbit	r3, r3
 8002cd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002cd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002cd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002cdc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	e004      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8002ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cec:	fab3 f383 	clz	r3, r3
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d105      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x2a0>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	f003 031f 	and.w	r3, r3, #31
 8002d0a:	e018      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x2d2>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d18:	fa93 f3a3 	rbit	r3, r3
 8002d1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002d20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002d28:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d101      	bne.n	8002d34 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8002d30:	2320      	movs	r3, #32
 8002d32:	e004      	b.n	8002d3e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8002d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	d106      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	2200      	movs	r2, #0
 8002d48:	2101      	movs	r1, #1
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fc16 	bl	800257c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2102      	movs	r1, #2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fbfa 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10a      	bne.n	8002d7c <HAL_ADC_ConfigChannel+0x310>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7ff fbef 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002d72:	4603      	mov	r3, r0
 8002d74:	0e9b      	lsrs	r3, r3, #26
 8002d76:	f003 021f 	and.w	r2, r3, #31
 8002d7a:	e01e      	b.n	8002dba <HAL_ADC_ConfigChannel+0x34e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2102      	movs	r1, #2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fbe4 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d92:	fa93 f3a3 	rbit	r3, r3
 8002d96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002d9a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8002daa:	2320      	movs	r3, #32
 8002dac:	e004      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 8002dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db2:	fab3 f383 	clz	r3, r3
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x366>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	e014      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x390>
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002dda:	fa93 f3a3 	rbit	r3, r3
 8002dde:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002de0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 8002dee:	2320      	movs	r3, #32
 8002df0:	e004      	b.n	8002dfc <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8002df2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d106      	bne.n	8002e0e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2102      	movs	r1, #2
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fbb7 	bl	800257c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	2103      	movs	r1, #3
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff fb9b 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x3ce>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2103      	movs	r1, #3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7ff fb90 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002e30:	4603      	mov	r3, r0
 8002e32:	0e9b      	lsrs	r3, r3, #26
 8002e34:	f003 021f 	and.w	r2, r3, #31
 8002e38:	e017      	b.n	8002e6a <HAL_ADC_ConfigChannel+0x3fe>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2103      	movs	r1, #3
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fb85 	bl	8002550 <LL_ADC_GetOffsetChannel>
 8002e46:	4603      	mov	r3, r0
 8002e48:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e54:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002e56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d101      	bne.n	8002e60 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 8002e5c:	2320      	movs	r3, #32
 8002e5e:	e003      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 8002e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e62:	fab3 f383 	clz	r3, r3
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x416>
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	0e9b      	lsrs	r3, r3, #26
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	e011      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x43a>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002e90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e92:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8002e9a:	2320      	movs	r3, #32
 8002e9c:	e003      	b.n	8002ea6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 8002e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d106      	bne.n	8002eb8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2103      	movs	r1, #3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7ff fb62 	bl	800257c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff fc55 	bl	800276c <LL_ADC_IsEnabled>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f040 813f 	bne.w	8003148 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6818      	ldr	r0, [r3, #0]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f7ff fbd6 	bl	8002688 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	; (800311c <HAL_ADC_ConfigChannel+0x6b0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	f040 8130 	bne.w	8003148 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d10b      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x4a4>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	0e9b      	lsrs	r3, r3, #26
 8002efe:	3301      	adds	r3, #1
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	bf94      	ite	ls
 8002f08:	2301      	movls	r3, #1
 8002f0a:	2300      	movhi	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	e019      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x4d8>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002f22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 8002f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 031f 	and.w	r3, r3, #31
 8002f3a:	2b09      	cmp	r3, #9
 8002f3c:	bf94      	ite	ls
 8002f3e:	2301      	movls	r3, #1
 8002f40:	2300      	movhi	r3, #0
 8002f42:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d079      	beq.n	800303c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d107      	bne.n	8002f64 <HAL_ADC_ConfigChannel+0x4f8>
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	0e9b      	lsrs	r3, r3, #26
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	069b      	lsls	r3, r3, #26
 8002f5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f62:	e015      	b.n	8002f90 <HAL_ADC_ConfigChannel+0x524>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002f72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 8002f80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	3301      	adds	r3, #1
 8002f8a:	069b      	lsls	r3, r3, #26
 8002f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d109      	bne.n	8002fb0 <HAL_ADC_ConfigChannel+0x544>
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	0e9b      	lsrs	r3, r3, #26
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	e017      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x574>
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8002fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	ea42 0103 	orr.w	r1, r2, r3
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10a      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x59a>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0e9b      	lsrs	r3, r3, #26
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	f003 021f 	and.w	r2, r3, #31
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	e018      	b.n	8003038 <HAL_ADC_ConfigChannel+0x5cc>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800300e:	fa93 f3a3 	rbit	r3, r3
 8003012:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8003014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003016:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800301e:	2320      	movs	r3, #32
 8003020:	e003      	b.n	800302a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003024:	fab3 f383 	clz	r3, r3
 8003028:	b2db      	uxtb	r3, r3
 800302a:	3301      	adds	r3, #1
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	4613      	mov	r3, r2
 8003032:	005b      	lsls	r3, r3, #1
 8003034:	4413      	add	r3, r2
 8003036:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003038:	430b      	orrs	r3, r1
 800303a:	e080      	b.n	800313e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003044:	2b00      	cmp	r3, #0
 8003046:	d107      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x5ec>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	0e9b      	lsrs	r3, r3, #26
 800304e:	3301      	adds	r3, #1
 8003050:	069b      	lsls	r3, r3, #26
 8003052:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003056:	e015      	b.n	8003084 <HAL_ADC_ConfigChannel+0x618>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800306a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 8003070:	2320      	movs	r3, #32
 8003072:	e003      	b.n	800307c <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	fab3 f383 	clz	r3, r3
 800307a:	b2db      	uxtb	r3, r3
 800307c:	3301      	adds	r3, #1
 800307e:	069b      	lsls	r3, r3, #26
 8003080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800308c:	2b00      	cmp	r3, #0
 800308e:	d109      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x638>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	0e9b      	lsrs	r3, r3, #26
 8003096:	3301      	adds	r3, #1
 8003098:	f003 031f 	and.w	r3, r3, #31
 800309c:	2101      	movs	r1, #1
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	e017      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x668>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	61bb      	str	r3, [r7, #24]
  return result;
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d101      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80030bc:	2320      	movs	r3, #32
 80030be:	e003      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	fab3 f383 	clz	r3, r3
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	3301      	adds	r3, #1
 80030ca:	f003 031f 	and.w	r3, r3, #31
 80030ce:	2101      	movs	r1, #1
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	ea42 0103 	orr.w	r1, r2, r3
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10d      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x694>
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	0e9b      	lsrs	r3, r3, #26
 80030ea:	3301      	adds	r3, #1
 80030ec:	f003 021f 	and.w	r2, r3, #31
 80030f0:	4613      	mov	r3, r2
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	4413      	add	r3, r2
 80030f6:	3b1e      	subs	r3, #30
 80030f8:	051b      	lsls	r3, r3, #20
 80030fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80030fe:	e01d      	b.n	800313c <HAL_ADC_ConfigChannel+0x6d0>
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	fa93 f3a3 	rbit	r3, r3
 800310c:	60fb      	str	r3, [r7, #12]
  return result;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d103      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003118:	2320      	movs	r3, #32
 800311a:	e005      	b.n	8003128 <HAL_ADC_ConfigChannel+0x6bc>
 800311c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	fab3 f383 	clz	r3, r3
 8003126:	b2db      	uxtb	r3, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	051b      	lsls	r3, r3, #20
 8003138:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003142:	4619      	mov	r1, r3
 8003144:	f7ff fa74 	bl	8002630 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4b3d      	ldr	r3, [pc, #244]	; (8003244 <HAL_ADC_ConfigChannel+0x7d8>)
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d06c      	beq.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003154:	483c      	ldr	r0, [pc, #240]	; (8003248 <HAL_ADC_ConfigChannel+0x7dc>)
 8003156:	f7ff f9c9 	bl	80024ec <LL_ADC_GetCommonPathInternalCh>
 800315a:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a3a      	ldr	r2, [pc, #232]	; (800324c <HAL_ADC_ConfigChannel+0x7e0>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d127      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800316c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d121      	bne.n	80031b8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a35      	ldr	r2, [pc, #212]	; (8003250 <HAL_ADC_ConfigChannel+0x7e4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d157      	bne.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800317e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003182:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003186:	4619      	mov	r1, r3
 8003188:	482f      	ldr	r0, [pc, #188]	; (8003248 <HAL_ADC_ConfigChannel+0x7dc>)
 800318a:	f7ff f99c 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_ADC_ConfigChannel+0x7e8>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	4a30      	ldr	r2, [pc, #192]	; (8003258 <HAL_ADC_ConfigChannel+0x7ec>)
 8003196:	fba2 2303 	umull	r2, r3, r2, r3
 800319a:	099b      	lsrs	r3, r3, #6
 800319c:	1c5a      	adds	r2, r3, #1
 800319e:	4613      	mov	r3, r2
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031a8:	e002      	b.n	80031b0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	3b01      	subs	r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f9      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031b6:	e03a      	b.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a27      	ldr	r2, [pc, #156]	; (800325c <HAL_ADC_ConfigChannel+0x7f0>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d113      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10d      	bne.n	80031ea <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1f      	ldr	r2, [pc, #124]	; (8003250 <HAL_ADC_ConfigChannel+0x7e4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d12a      	bne.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80031e0:	4619      	mov	r1, r3
 80031e2:	4819      	ldr	r0, [pc, #100]	; (8003248 <HAL_ADC_ConfigChannel+0x7dc>)
 80031e4:	f7ff f96f 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031e8:	e021      	b.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1c      	ldr	r2, [pc, #112]	; (8003260 <HAL_ADC_ConfigChannel+0x7f4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d11c      	bne.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80031f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d116      	bne.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a12      	ldr	r2, [pc, #72]	; (8003250 <HAL_ADC_ConfigChannel+0x7e4>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d111      	bne.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800320a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800320e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003212:	4619      	mov	r1, r3
 8003214:	480c      	ldr	r0, [pc, #48]	; (8003248 <HAL_ADC_ConfigChannel+0x7dc>)
 8003216:	f7ff f956 	bl	80024c6 <LL_ADC_SetCommonPathInternalCh>
 800321a:	e008      	b.n	800322e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003236:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800323a:	4618      	mov	r0, r3
 800323c:	37d8      	adds	r7, #216	; 0xd8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	80080000 	.word	0x80080000
 8003248:	50040300 	.word	0x50040300
 800324c:	c7520000 	.word	0xc7520000
 8003250:	50040000 	.word	0x50040000
 8003254:	20000000 	.word	0x20000000
 8003258:	053e2d63 	.word	0x053e2d63
 800325c:	cb840000 	.word	0xcb840000
 8003260:	80000001 	.word	0x80000001

08003264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <__NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0b      	blt.n	80032f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	; (8003300 <__NVIC_EnableIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	; (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d0:	d301      	bcc.n	80033d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <SysTick_Config+0x40>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033de:	210f      	movs	r1, #15
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033e4:	f7ff ff8e 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <SysTick_Config+0x40>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SysTick_Config+0x40>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff ff29 	bl	8003264 <__NVIC_SetPriorityGrouping>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800342c:	f7ff ff3e 	bl	80032ac <__NVIC_GetPriorityGrouping>
 8003430:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68b9      	ldr	r1, [r7, #8]
 8003436:	6978      	ldr	r0, [r7, #20]
 8003438:	f7ff ff8e 	bl	8003358 <NVIC_EncodePriority>
 800343c:	4602      	mov	r2, r0
 800343e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003442:	4611      	mov	r1, r2
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff5d 	bl	8003304 <__NVIC_SetPriority>
}
 800344a:	bf00      	nop
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	4603      	mov	r3, r0
 800345a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800345c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003460:	4618      	mov	r0, r3
 8003462:	f7ff ff31 	bl	80032c8 <__NVIC_EnableIRQ>
}
 8003466:	bf00      	nop
 8003468:	3708      	adds	r7, #8
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}

0800346e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7ff ffa2 	bl	80033c0 <SysTick_Config>
 800347c:	4603      	mov	r3, r0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d101      	bne.n	800349a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0ac      	b.n	80035f4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 f8b2 	bl	8003608 <DFSDM_GetChannelFromInstance>
 80034a4:	4603      	mov	r3, r0
 80034a6:	4a55      	ldr	r2, [pc, #340]	; (80035fc <HAL_DFSDM_ChannelInit+0x174>)
 80034a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e09f      	b.n	80035f4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7fe fb15 	bl	8001ae4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80034ba:	4b51      	ldr	r3, [pc, #324]	; (8003600 <HAL_DFSDM_ChannelInit+0x178>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	3301      	adds	r3, #1
 80034c0:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <HAL_DFSDM_ChannelInit+0x178>)
 80034c2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80034c4:	4b4e      	ldr	r3, [pc, #312]	; (8003600 <HAL_DFSDM_ChannelInit+0x178>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d125      	bne.n	8003518 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80034cc:	4b4d      	ldr	r3, [pc, #308]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80034d8:	4b4a      	ldr	r3, [pc, #296]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	4948      	ldr	r1, [pc, #288]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80034e6:	4b47      	ldr	r3, [pc, #284]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a46      	ldr	r2, [pc, #280]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034ec:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80034f0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	791b      	ldrb	r3, [r3, #4]
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d108      	bne.n	800350c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80034fa:	4b42      	ldr	r3, [pc, #264]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	3b01      	subs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	493f      	ldr	r1, [pc, #252]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800350c:	4b3d      	ldr	r3, [pc, #244]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a3c      	ldr	r2, [pc, #240]	; (8003604 <HAL_DFSDM_ChannelInit+0x17c>)
 8003512:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003516:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003526:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8003536:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800353c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f022 020f 	bic.w	r2, r2, #15
 8003554:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6819      	ldr	r1, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8003564:	431a      	orrs	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 800357c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6899      	ldr	r1, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	3b01      	subs	r3, #1
 800358e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	685a      	ldr	r2, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f002 0207 	and.w	r2, r2, #7
 80035a8:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80035bc:	431a      	orrs	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035d4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 f810 	bl	8003608 <DFSDM_GetChannelFromInstance>
 80035e8:	4602      	mov	r2, r0
 80035ea:	4904      	ldr	r1, [pc, #16]	; (80035fc <HAL_DFSDM_ChannelInit+0x174>)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	200006b0 	.word	0x200006b0
 8003600:	200006ac 	.word	0x200006ac
 8003604:	40016000 	.word	0x40016000

08003608 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <DFSDM_GetChannelFromInstance+0x7c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d102      	bne.n	800361e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	e02b      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <DFSDM_GetChannelFromInstance+0x80>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d102      	bne.n	800362c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8003626:	2301      	movs	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e024      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a17      	ldr	r2, [pc, #92]	; (800368c <DFSDM_GetChannelFromInstance+0x84>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d102      	bne.n	800363a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8003634:	2302      	movs	r3, #2
 8003636:	60fb      	str	r3, [r7, #12]
 8003638:	e01d      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <DFSDM_GetChannelFromInstance+0x88>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d102      	bne.n	8003648 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8003642:	2304      	movs	r3, #4
 8003644:	60fb      	str	r3, [r7, #12]
 8003646:	e016      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a12      	ldr	r2, [pc, #72]	; (8003694 <DFSDM_GetChannelFromInstance+0x8c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d102      	bne.n	8003656 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8003650:	2305      	movs	r3, #5
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	e00f      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a0f      	ldr	r2, [pc, #60]	; (8003698 <DFSDM_GetChannelFromInstance+0x90>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d102      	bne.n	8003664 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800365e:	2306      	movs	r3, #6
 8003660:	60fb      	str	r3, [r7, #12]
 8003662:	e008      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a0d      	ldr	r2, [pc, #52]	; (800369c <DFSDM_GetChannelFromInstance+0x94>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d102      	bne.n	8003672 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800366c:	2307      	movs	r3, #7
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	e001      	b.n	8003676 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8003672:	2303      	movs	r3, #3
 8003674:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3714      	adds	r7, #20
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40016000 	.word	0x40016000
 8003688:	40016020 	.word	0x40016020
 800368c:	40016040 	.word	0x40016040
 8003690:	40016080 	.word	0x40016080
 8003694:	400160a0 	.word	0x400160a0
 8003698:	400160c0 	.word	0x400160c0
 800369c:	400160e0 	.word	0x400160e0

080036a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036aa:	2300      	movs	r3, #0
 80036ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80036ae:	e166      	b.n	800397e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	2101      	movs	r1, #1
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	fa01 f303 	lsl.w	r3, r1, r3
 80036bc:	4013      	ands	r3, r2
 80036be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8158 	beq.w	8003978 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d005      	beq.n	80036e0 <HAL_GPIO_Init+0x40>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f003 0303 	and.w	r3, r3, #3
 80036dc:	2b02      	cmp	r3, #2
 80036de:	d130      	bne.n	8003742 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	4013      	ands	r3, r2
 80036f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4313      	orrs	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	693a      	ldr	r2, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003716:	2201      	movs	r2, #1
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	fa02 f303 	lsl.w	r3, r2, r3
 800371e:	43db      	mvns	r3, r3
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	091b      	lsrs	r3, r3, #4
 800372c:	f003 0201 	and.w	r2, r3, #1
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	fa02 f303 	lsl.w	r3, r2, r3
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	4313      	orrs	r3, r2
 800373a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b03      	cmp	r3, #3
 800374c:	d017      	beq.n	800377e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689a      	ldr	r2, [r3, #8]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d123      	bne.n	80037d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	08da      	lsrs	r2, r3, #3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	3208      	adds	r2, #8
 8003792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003796:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	220f      	movs	r2, #15
 80037a2:	fa02 f303 	lsl.w	r3, r2, r3
 80037a6:	43db      	mvns	r3, r3
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4013      	ands	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f003 0307 	and.w	r3, r3, #7
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	08da      	lsrs	r2, r3, #3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3208      	adds	r2, #8
 80037cc:	6939      	ldr	r1, [r7, #16]
 80037ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2203      	movs	r2, #3
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4013      	ands	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	fa02 f303 	lsl.w	r3, r2, r3
 80037fa:	693a      	ldr	r2, [r7, #16]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800380e:	2b00      	cmp	r3, #0
 8003810:	f000 80b2 	beq.w	8003978 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003814:	4b61      	ldr	r3, [pc, #388]	; (800399c <HAL_GPIO_Init+0x2fc>)
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	4a60      	ldr	r2, [pc, #384]	; (800399c <HAL_GPIO_Init+0x2fc>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	6613      	str	r3, [r2, #96]	; 0x60
 8003820:	4b5e      	ldr	r3, [pc, #376]	; (800399c <HAL_GPIO_Init+0x2fc>)
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
 800382a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800382c:	4a5c      	ldr	r2, [pc, #368]	; (80039a0 <HAL_GPIO_Init+0x300>)
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	089b      	lsrs	r3, r3, #2
 8003832:	3302      	adds	r3, #2
 8003834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f003 0303 	and.w	r3, r3, #3
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	220f      	movs	r2, #15
 8003844:	fa02 f303 	lsl.w	r3, r2, r3
 8003848:	43db      	mvns	r3, r3
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003856:	d02b      	beq.n	80038b0 <HAL_GPIO_Init+0x210>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a52      	ldr	r2, [pc, #328]	; (80039a4 <HAL_GPIO_Init+0x304>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d025      	beq.n	80038ac <HAL_GPIO_Init+0x20c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a51      	ldr	r2, [pc, #324]	; (80039a8 <HAL_GPIO_Init+0x308>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d01f      	beq.n	80038a8 <HAL_GPIO_Init+0x208>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4a50      	ldr	r2, [pc, #320]	; (80039ac <HAL_GPIO_Init+0x30c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d019      	beq.n	80038a4 <HAL_GPIO_Init+0x204>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a4f      	ldr	r2, [pc, #316]	; (80039b0 <HAL_GPIO_Init+0x310>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <HAL_GPIO_Init+0x200>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a4e      	ldr	r2, [pc, #312]	; (80039b4 <HAL_GPIO_Init+0x314>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d00d      	beq.n	800389c <HAL_GPIO_Init+0x1fc>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a4d      	ldr	r2, [pc, #308]	; (80039b8 <HAL_GPIO_Init+0x318>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d007      	beq.n	8003898 <HAL_GPIO_Init+0x1f8>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a4c      	ldr	r2, [pc, #304]	; (80039bc <HAL_GPIO_Init+0x31c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d101      	bne.n	8003894 <HAL_GPIO_Init+0x1f4>
 8003890:	2307      	movs	r3, #7
 8003892:	e00e      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 8003894:	2308      	movs	r3, #8
 8003896:	e00c      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 8003898:	2306      	movs	r3, #6
 800389a:	e00a      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 800389c:	2305      	movs	r3, #5
 800389e:	e008      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 80038a0:	2304      	movs	r3, #4
 80038a2:	e006      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 80038a4:	2303      	movs	r3, #3
 80038a6:	e004      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e002      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_GPIO_Init+0x212>
 80038b0:	2300      	movs	r3, #0
 80038b2:	697a      	ldr	r2, [r7, #20]
 80038b4:	f002 0203 	and.w	r2, r2, #3
 80038b8:	0092      	lsls	r2, r2, #2
 80038ba:	4093      	lsls	r3, r2
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	4313      	orrs	r3, r2
 80038c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80038c2:	4937      	ldr	r1, [pc, #220]	; (80039a0 <HAL_GPIO_Init+0x300>)
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	089b      	lsrs	r3, r3, #2
 80038c8:	3302      	adds	r3, #2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80038d0:	4b3b      	ldr	r3, [pc, #236]	; (80039c0 <HAL_GPIO_Init+0x320>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43db      	mvns	r3, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4013      	ands	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d003      	beq.n	80038f4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80038ec:	693a      	ldr	r2, [r7, #16]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038f4:	4a32      	ldr	r2, [pc, #200]	; (80039c0 <HAL_GPIO_Init+0x320>)
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_GPIO_Init+0x320>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d003      	beq.n	800391e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800391e:	4a28      	ldr	r2, [pc, #160]	; (80039c0 <HAL_GPIO_Init+0x320>)
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003924:	4b26      	ldr	r3, [pc, #152]	; (80039c0 <HAL_GPIO_Init+0x320>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <HAL_GPIO_Init+0x320>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800394e:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <HAL_GPIO_Init+0x320>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003972:	4a13      	ldr	r2, [pc, #76]	; (80039c0 <HAL_GPIO_Init+0x320>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3301      	adds	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f ae91 	bne.w	80036b0 <HAL_GPIO_Init+0x10>
  }
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40021000 	.word	0x40021000
 80039a0:	40010000 	.word	0x40010000
 80039a4:	48000400 	.word	0x48000400
 80039a8:	48000800 	.word	0x48000800
 80039ac:	48000c00 	.word	0x48000c00
 80039b0:	48001000 	.word	0x48001000
 80039b4:	48001400 	.word	0x48001400
 80039b8:	48001800 	.word	0x48001800
 80039bc:	48001c00 	.word	0x48001c00
 80039c0:	40010400 	.word	0x40010400

080039c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	460b      	mov	r3, r1
 80039ce:	807b      	strh	r3, [r7, #2]
 80039d0:	4613      	mov	r3, r2
 80039d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039d4:	787b      	ldrb	r3, [r7, #1]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80039da:	887a      	ldrh	r2, [r7, #2]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80039e0:	e002      	b.n	80039e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80039e2:	887a      	ldrh	r2, [r7, #2]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a00:	695a      	ldr	r2, [r3, #20]
 8003a02:	88fb      	ldrh	r3, [r7, #6]
 8003a04:	4013      	ands	r3, r2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a0a:	4a05      	ldr	r2, [pc, #20]	; (8003a20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f806 	bl	8003a24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b082      	sub	sp, #8
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e08d      	b.n	8003b68 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7fe f8a3 	bl	8001bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2224      	movs	r2, #36	; 0x24
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a8a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a9a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d107      	bne.n	8003ab4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab0:	609a      	str	r2, [r3, #8]
 8003ab2:	e006      	b.n	8003ac2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ac0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d108      	bne.n	8003adc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	e007      	b.n	8003aec <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	685a      	ldr	r2, [r3, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6812      	ldr	r2, [r2, #0]
 8003af6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003afe:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68da      	ldr	r2, [r3, #12]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b0e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	430a      	orrs	r2, r1
 8003b28:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69d9      	ldr	r1, [r3, #28]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1a      	ldr	r2, [r3, #32]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}

08003b70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b20      	cmp	r3, #32
 8003b84:	d138      	bne.n	8003bf8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d101      	bne.n	8003b94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003b90:	2302      	movs	r3, #2
 8003b92:	e032      	b.n	8003bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2224      	movs	r2, #36	; 0x24
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6819      	ldr	r1, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e000      	b.n	8003bfa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bf8:	2302      	movs	r3, #2
  }
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b085      	sub	sp, #20
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b20      	cmp	r3, #32
 8003c1a:	d139      	bne.n	8003c90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e033      	b.n	8003c92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2224      	movs	r2, #36	; 0x24
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	021b      	lsls	r3, r3, #8
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f042 0201 	orr.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	e000      	b.n	8003c92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003c90:	2302      	movs	r3, #2
  }
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3714      	adds	r7, #20
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
	...

08003ca0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af02      	add	r7, sp, #8
 8003ca6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003cac:	f7fe fbec 	bl	8002488 <HAL_GetTick>
 8003cb0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d102      	bne.n	8003cbe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	73fb      	strb	r3, [r7, #15]
 8003cbc:	e092      	b.n	8003de4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 808b 	bne.w	8003de4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f7fe f80e 	bl	8001cf0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003cd4:	f241 3188 	movw	r1, #5000	; 0x1388
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 f88b 	bl	8003df4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	4b42      	ldr	r3, [pc, #264]	; (8003df0 <HAL_OSPI_Init+0x150>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68d1      	ldr	r1, [r2, #12]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6912      	ldr	r2, [r2, #16]
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0412      	lsls	r2, r2, #16
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6952      	ldr	r2, [r2, #20]
 8003cfa:	3a01      	subs	r2, #1
 8003cfc:	0212      	lsls	r2, r2, #8
 8003cfe:	4311      	orrs	r1, r2
 8003d00:	687a      	ldr	r2, [r7, #4]
 8003d02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003d04:	4311      	orrs	r1, r2
 8003d06:	687a      	ldr	r2, [r7, #4]
 8003d08:	69d2      	ldr	r2, [r2, #28]
 8003d0a:	4311      	orrs	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	0412      	lsls	r2, r2, #16
 8003d1e:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	021a      	lsls	r2, r3, #8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	2200      	movs	r2, #0
 8003d44:	2120      	movs	r1, #32
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 fb98 	bl	800447c <OSPI_WaitFlagStateUntilTimeout>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d146      	bne.n	8003de4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	1e5a      	subs	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	430a      	orrs	r2, r1
 8003d6c:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003d8c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	430a      	orrs	r2, r1
 8003da0:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0201 	orr.w	r2, r2, #1
 8003db2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d107      	bne.n	8003dcc <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f042 0202 	orr.w	r2, r2, #2
 8003dca:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003dd4:	d103      	bne.n	8003dde <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
 8003ddc:	e002      	b.n	8003de4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	f8e0f8f4 	.word	0xf8e0f8f4

08003df4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	683a      	ldr	r2, [r7, #0]
 8003e02:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b092      	sub	sp, #72	; 0x48
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a08      	ldr	r2, [pc, #32]	; (8003e54 <HAL_OSPIM_Config+0x40>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d105      	bne.n	8003e42 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003e36:	2300      	movs	r3, #0
 8003e38:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003e40:	e004      	b.n	8003e4c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003e42:	2301      	movs	r3, #1
 8003e44:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003e52:	e01f      	b.n	8003e94 <HAL_OSPIM_Config+0x80>
 8003e54:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003e58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	b2d8      	uxtb	r0, r3
 8003e60:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003e64:	f107 0114 	add.w	r1, r7, #20
 8003e68:	4613      	mov	r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	4413      	add	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	4619      	mov	r1, r3
 8003e74:	f000 fb3a 	bl	80044ec <OSPIM_GetConfig>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2208      	movs	r2, #8
 8003e88:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003e8a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e8e:	3301      	adds	r3, #1
 8003e90:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003e94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d9dd      	bls.n	8003e58 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8003e9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f040 82de 	bne.w	8004462 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003ea6:	4bc6      	ldr	r3, [pc, #792]	; (80041c0 <HAL_OSPIM_Config+0x3ac>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003eb2:	4bc3      	ldr	r3, [pc, #780]	; (80041c0 <HAL_OSPIM_Config+0x3ac>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4ac2      	ldr	r2, [pc, #776]	; (80041c0 <HAL_OSPIM_Config+0x3ac>)
 8003eb8:	f023 0301 	bic.w	r3, r3, #1
 8003ebc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003ebe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ec2:	f043 0301 	orr.w	r3, r3, #1
 8003ec6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003eca:	4bbe      	ldr	r3, [pc, #760]	; (80041c4 <HAL_OSPIM_Config+0x3b0>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003ed6:	4bbb      	ldr	r3, [pc, #748]	; (80041c4 <HAL_OSPIM_Config+0x3b0>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4aba      	ldr	r2, [pc, #744]	; (80041c4 <HAL_OSPIM_Config+0x3b0>)
 8003edc:	f023 0301 	bic.w	r3, r3, #1
 8003ee0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003ee2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003ee6:	f043 0302 	orr.w	r3, r3, #2
 8003eea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003eee:	49b6      	ldr	r1, [pc, #728]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003ef0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	3348      	adds	r3, #72	; 0x48
 8003efc:	443b      	add	r3, r7
 8003efe:	3b2c      	subs	r3, #44	; 0x2c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	6859      	ldr	r1, [r3, #4]
 8003f0a:	48af      	ldr	r0, [pc, #700]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003f0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	4413      	add	r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	3348      	adds	r3, #72	; 0x48
 8003f18:	443b      	add	r3, r7
 8003f1a:	3b2c      	subs	r3, #44	; 0x2c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	4403      	add	r3, r0
 8003f28:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003f2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	3348      	adds	r3, #72	; 0x48
 8003f36:	443b      	add	r3, r7
 8003f38:	3b34      	subs	r3, #52	; 0x34
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80a1 	beq.w	8004084 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003f42:	49a1      	ldr	r1, [pc, #644]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f46:	4613      	mov	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	4413      	add	r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	3348      	adds	r3, #72	; 0x48
 8003f50:	443b      	add	r3, r7
 8003f52:	3b34      	subs	r3, #52	; 0x34
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	3b01      	subs	r3, #1
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	489a      	ldr	r0, [pc, #616]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003f60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f62:	4613      	mov	r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	3348      	adds	r3, #72	; 0x48
 8003f6c:	443b      	add	r3, r7
 8003f6e:	3b34      	subs	r3, #52	; 0x34
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	f021 0201 	bic.w	r2, r1, #1
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4403      	add	r3, r0
 8003f7c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003f7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	3348      	adds	r3, #72	; 0x48
 8003f8a:	443b      	add	r3, r7
 8003f8c:	3b30      	subs	r3, #48	; 0x30
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01d      	beq.n	8003fd0 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003f94:	498c      	ldr	r1, [pc, #560]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003f96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f98:	4613      	mov	r3, r2
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	3348      	adds	r3, #72	; 0x48
 8003fa2:	443b      	add	r3, r7
 8003fa4:	3b30      	subs	r3, #48	; 0x30
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	6859      	ldr	r1, [r3, #4]
 8003fb0:	4885      	ldr	r0, [pc, #532]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003fb2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	3348      	adds	r3, #72	; 0x48
 8003fbe:	443b      	add	r3, r7
 8003fc0:	3b30      	subs	r3, #48	; 0x30
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	f021 0210 	bic.w	r2, r1, #16
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4403      	add	r3, r0
 8003fce:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4413      	add	r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	3348      	adds	r3, #72	; 0x48
 8003fdc:	443b      	add	r3, r7
 8003fde:	3b28      	subs	r3, #40	; 0x28
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d021      	beq.n	800402a <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003fe6:	4978      	ldr	r1, [pc, #480]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8003fe8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	3348      	adds	r3, #72	; 0x48
 8003ff4:	443b      	add	r3, r7
 8003ff6:	3b28      	subs	r3, #40	; 0x28
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	6859      	ldr	r1, [r3, #4]
 8004006:	4870      	ldr	r0, [pc, #448]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8004008:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	3348      	adds	r3, #72	; 0x48
 8004014:	443b      	add	r3, r7
 8004016:	3b28      	subs	r3, #40	; 0x28
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3b01      	subs	r3, #1
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4403      	add	r3, r0
 8004028:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800402a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	3348      	adds	r3, #72	; 0x48
 8004036:	443b      	add	r3, r7
 8004038:	3b24      	subs	r3, #36	; 0x24
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d021      	beq.n	8004084 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004040:	4961      	ldr	r1, [pc, #388]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8004042:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004044:	4613      	mov	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	3348      	adds	r3, #72	; 0x48
 800404e:	443b      	add	r3, r7
 8004050:	3b24      	subs	r3, #36	; 0x24
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	3b01      	subs	r3, #1
 8004056:	f003 0301 	and.w	r3, r3, #1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	6859      	ldr	r1, [r3, #4]
 8004060:	4859      	ldr	r0, [pc, #356]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8004062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004064:	4613      	mov	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	4413      	add	r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3348      	adds	r3, #72	; 0x48
 800406e:	443b      	add	r3, r7
 8004070:	3b24      	subs	r3, #36	; 0x24
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	3b01      	subs	r3, #1
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4403      	add	r3, r0
 8004082:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6819      	ldr	r1, [r3, #0]
 8004088:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	3348      	adds	r3, #72	; 0x48
 8004096:	443b      	add	r3, r7
 8004098:	3b34      	subs	r3, #52	; 0x34
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4299      	cmp	r1, r3
 800409e:	d038      	beq.n	8004112 <HAL_OSPIM_Config+0x2fe>
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	3348      	adds	r3, #72	; 0x48
 80040b2:	443b      	add	r3, r7
 80040b4:	3b30      	subs	r3, #48	; 0x30
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4299      	cmp	r1, r3
 80040ba:	d02a      	beq.n	8004112 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6899      	ldr	r1, [r3, #8]
 80040c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040c4:	4613      	mov	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	4413      	add	r3, r2
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	3348      	adds	r3, #72	; 0x48
 80040ce:	443b      	add	r3, r7
 80040d0:	3b2c      	subs	r3, #44	; 0x2c
 80040d2:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80040d4:	4299      	cmp	r1, r3
 80040d6:	d01c      	beq.n	8004112 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	68d9      	ldr	r1, [r3, #12]
 80040dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	3348      	adds	r3, #72	; 0x48
 80040ea:	443b      	add	r3, r7
 80040ec:	3b28      	subs	r3, #40	; 0x28
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4299      	cmp	r1, r3
 80040f2:	d00e      	beq.n	8004112 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	6919      	ldr	r1, [r3, #16]
 80040f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80040fc:	4613      	mov	r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	3348      	adds	r3, #72	; 0x48
 8004106:	443b      	add	r3, r7
 8004108:	3b24      	subs	r3, #36	; 0x24
 800410a:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800410c:	4299      	cmp	r1, r3
 800410e:	f040 80d3 	bne.w	80042b8 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8004112:	492d      	ldr	r1, [pc, #180]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8004114:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009b      	lsls	r3, r3, #2
 8004120:	3348      	adds	r3, #72	; 0x48
 8004122:	443b      	add	r3, r7
 8004124:	3b34      	subs	r3, #52	; 0x34
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3b01      	subs	r3, #1
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	6859      	ldr	r1, [r3, #4]
 8004130:	4825      	ldr	r0, [pc, #148]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 8004132:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	3348      	adds	r3, #72	; 0x48
 8004140:	443b      	add	r3, r7
 8004142:	3b34      	subs	r3, #52	; 0x34
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	3b01      	subs	r3, #1
 8004148:	f021 0201 	bic.w	r2, r1, #1
 800414c:	009b      	lsls	r3, r3, #2
 800414e:	4403      	add	r3, r0
 8004150:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8004152:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	3348      	adds	r3, #72	; 0x48
 8004160:	443b      	add	r3, r7
 8004162:	3b30      	subs	r3, #48	; 0x30
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d01f      	beq.n	80041aa <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800416a:	4917      	ldr	r1, [pc, #92]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 800416c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004170:	4613      	mov	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	4413      	add	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	3348      	adds	r3, #72	; 0x48
 800417a:	443b      	add	r3, r7
 800417c:	3b30      	subs	r3, #48	; 0x30
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3b01      	subs	r3, #1
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	6859      	ldr	r1, [r3, #4]
 8004188:	480f      	ldr	r0, [pc, #60]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 800418a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800418e:	4613      	mov	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	3348      	adds	r3, #72	; 0x48
 8004198:	443b      	add	r3, r7
 800419a:	3b30      	subs	r3, #48	; 0x30
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	3b01      	subs	r3, #1
 80041a0:	f021 0210 	bic.w	r2, r1, #16
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4403      	add	r3, r0
 80041a8:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80041aa:	4907      	ldr	r1, [pc, #28]	; (80041c8 <HAL_OSPIM_Config+0x3b4>)
 80041ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	3348      	adds	r3, #72	; 0x48
 80041ba:	443b      	add	r3, r7
 80041bc:	3b2c      	subs	r3, #44	; 0x2c
 80041be:	e005      	b.n	80041cc <HAL_OSPIM_Config+0x3b8>
 80041c0:	a0001000 	.word	0xa0001000
 80041c4:	a0001400 	.word	0xa0001400
 80041c8:	50061c00 	.word	0x50061c00
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	6859      	ldr	r1, [r3, #4]
 80041d6:	48a6      	ldr	r0, [pc, #664]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80041d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	3348      	adds	r3, #72	; 0x48
 80041e6:	443b      	add	r3, r7
 80041e8:	3b2c      	subs	r3, #44	; 0x2c
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3b01      	subs	r3, #1
 80041ee:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	4403      	add	r3, r0
 80041f6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80041f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	3348      	adds	r3, #72	; 0x48
 8004206:	443b      	add	r3, r7
 8004208:	3b28      	subs	r3, #40	; 0x28
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004210:	4997      	ldr	r1, [pc, #604]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004212:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004216:	4613      	mov	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	4413      	add	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	3348      	adds	r3, #72	; 0x48
 8004220:	443b      	add	r3, r7
 8004222:	3b28      	subs	r3, #40	; 0x28
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3b01      	subs	r3, #1
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	6859      	ldr	r1, [r3, #4]
 8004232:	488f      	ldr	r0, [pc, #572]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004234:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	3348      	adds	r3, #72	; 0x48
 8004242:	443b      	add	r3, r7
 8004244:	3b28      	subs	r3, #40	; 0x28
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4403      	add	r3, r0
 8004256:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004258:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	3348      	adds	r3, #72	; 0x48
 8004266:	443b      	add	r3, r7
 8004268:	3b24      	subs	r3, #36	; 0x24
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d023      	beq.n	80042b8 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004270:	497f      	ldr	r1, [pc, #508]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004272:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	3348      	adds	r3, #72	; 0x48
 8004280:	443b      	add	r3, r7
 8004282:	3b24      	subs	r3, #36	; 0x24
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	3b01      	subs	r3, #1
 8004288:	f003 0301 	and.w	r3, r3, #1
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	6859      	ldr	r1, [r3, #4]
 8004292:	4877      	ldr	r0, [pc, #476]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004294:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3348      	adds	r3, #72	; 0x48
 80042a2:	443b      	add	r3, r7
 80042a4:	3b24      	subs	r3, #36	; 0x24
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	4403      	add	r3, r0
 80042b6:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80042b8:	4a6d      	ldr	r2, [pc, #436]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	3b01      	subs	r3, #1
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	4413      	add	r3, r2
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042cc:	025b      	lsls	r3, r3, #9
 80042ce:	431a      	orrs	r2, r3
 80042d0:	4967      	ldr	r1, [pc, #412]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	3b01      	subs	r3, #1
 80042d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042dc:	009b      	lsls	r3, r3, #2
 80042de:	440b      	add	r3, r1
 80042e0:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80042e2:	4a63      	ldr	r2, [pc, #396]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 0203 	bic.w	r2, r3, #3
 80042f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	431a      	orrs	r2, r3
 80042fa:	495d      	ldr	r1, [pc, #372]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3b01      	subs	r3, #1
 8004302:	f042 0201 	orr.w	r2, r2, #1
 8004306:	009b      	lsls	r3, r3, #2
 8004308:	440b      	add	r3, r1
 800430a:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d014      	beq.n	800433e <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004314:	4a56      	ldr	r2, [pc, #344]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	3b01      	subs	r3, #1
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	4413      	add	r3, r2
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004328:	015b      	lsls	r3, r3, #5
 800432a:	431a      	orrs	r2, r3
 800432c:	4950      	ldr	r1, [pc, #320]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	3b01      	subs	r3, #1
 8004334:	f042 0210 	orr.w	r2, r2, #16
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d019      	beq.n	800437e <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800434a:	4a49      	ldr	r2, [pc, #292]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	3b01      	subs	r3, #1
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004362:	049b      	lsls	r3, r3, #18
 8004364:	431a      	orrs	r2, r3
 8004366:	4942      	ldr	r1, [pc, #264]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	3b01      	subs	r3, #1
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	440b      	add	r3, r1
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	e01c      	b.n	80043b8 <HAL_OSPIM_Config+0x5a4>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d018      	beq.n	80043b8 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004386:	4a3a      	ldr	r2, [pc, #232]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	3b01      	subs	r3, #1
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4413      	add	r3, r2
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800439c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800439e:	069b      	lsls	r3, r3, #26
 80043a0:	431a      	orrs	r2, r3
 80043a2:	4933      	ldr	r1, [pc, #204]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	440b      	add	r3, r1
 80043b6:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d019      	beq.n	80043f8 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043c4:	4a2a      	ldr	r2, [pc, #168]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	3b01      	subs	r3, #1
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	049b      	lsls	r3, r3, #18
 80043de:	431a      	orrs	r2, r3
 80043e0:	4923      	ldr	r1, [pc, #140]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	f003 0301 	and.w	r3, r3, #1
 80043ec:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e01c      	b.n	8004432 <HAL_OSPIM_Config+0x61e>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d018      	beq.n	8004432 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004400:	4a1b      	ldr	r2, [pc, #108]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	3b01      	subs	r3, #1
 8004408:	f003 0301 	and.w	r3, r3, #1
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004416:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004418:	069b      	lsls	r3, r3, #26
 800441a:	431a      	orrs	r2, r3
 800441c:	4914      	ldr	r1, [pc, #80]	; (8004470 <HAL_OSPIM_Config+0x65c>)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	3b01      	subs	r3, #1
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8004432:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	2b00      	cmp	r3, #0
 800443c:	d005      	beq.n	800444a <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800443e:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <HAL_OSPIM_Config+0x660>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a0c      	ldr	r2, [pc, #48]	; (8004474 <HAL_OSPIM_Config+0x660>)
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800444a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <HAL_OSPIM_Config+0x664>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a07      	ldr	r2, [pc, #28]	; (8004478 <HAL_OSPIM_Config+0x664>)
 800445c:	f043 0301 	orr.w	r3, r3, #1
 8004460:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8004462:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8004466:	4618      	mov	r0, r3
 8004468:	3748      	adds	r7, #72	; 0x48
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	50061c00 	.word	0x50061c00
 8004474:	a0001000 	.word	0xa0001000
 8004478:	a0001400 	.word	0xa0001400

0800447c <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4613      	mov	r3, r2
 800448a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800448c:	e01a      	b.n	80044c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004494:	d016      	beq.n	80044c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004496:	f7fd fff7 	bl	8002488 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	69ba      	ldr	r2, [r7, #24]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d302      	bcc.n	80044ac <OSPI_WaitFlagStateUntilTimeout+0x30>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10b      	bne.n	80044c4 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	f043 0201 	orr.w	r2, r3, #1
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e00e      	b.n	80044e2 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	6a1a      	ldr	r2, [r3, #32]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	461a      	mov	r2, r3
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1d6      	bne.n	800448e <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}
	...

080044ec <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	6039      	str	r1, [r7, #0]
 80044f6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004500:	79fb      	ldrb	r3, [r7, #7]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d005      	beq.n	8004512 <OSPIM_GetConfig+0x26>
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	2b02      	cmp	r3, #2
 800450a:	d802      	bhi.n	8004512 <OSPIM_GetConfig+0x26>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	75fb      	strb	r3, [r7, #23]
 8004516:	e08e      	b.n	8004636 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2200      	movs	r2, #0
 8004522:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2200      	movs	r2, #0
 8004528:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2200      	movs	r2, #0
 800452e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d101      	bne.n	8004540 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800453c:	4b41      	ldr	r3, [pc, #260]	; (8004644 <OSPIM_GetConfig+0x158>)
 800453e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004540:	2300      	movs	r3, #0
 8004542:	60fb      	str	r3, [r7, #12]
 8004544:	e074      	b.n	8004630 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8004546:	4a40      	ldr	r2, [pc, #256]	; (8004648 <OSPIM_GetConfig+0x15c>)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800455c:	68ba      	ldr	r2, [r7, #8]
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4053      	eors	r3, r2
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0310 	and.w	r3, r3, #16
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4053      	eors	r3, r2
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d103      	bne.n	8004592 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00a      	beq.n	80045b2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	4053      	eors	r3, r2
 80045a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d103      	bne.n	80045b2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d018      	beq.n	80045ee <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80045bc:	68ba      	ldr	r2, [r7, #8]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4053      	eors	r3, r2
 80045c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d111      	bne.n	80045ee <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	3301      	adds	r3, #1
 80045d8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	60da      	str	r2, [r3, #12]
 80045e0:	e005      	b.n	80045ee <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3301      	adds	r3, #1
 80045e6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d018      	beq.n	800462a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80045f8:	68ba      	ldr	r2, [r7, #8]
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4053      	eors	r3, r2
 80045fe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d111      	bne.n	800462a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d106      	bne.n	800461e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	3301      	adds	r3, #1
 8004614:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	611a      	str	r2, [r3, #16]
 800461c:	e005      	b.n	800462a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	3301      	adds	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d987      	bls.n	8004546 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8004636:	7dfb      	ldrb	r3, [r7, #23]
}
 8004638:	4618      	mov	r0, r3
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	04040222 	.word	0x04040222
 8004648:	50061c00 	.word	0x50061c00

0800464c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800464c:	b480      	push	{r7}
 800464e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004650:	4b05      	ldr	r3, [pc, #20]	; (8004668 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a04      	ldr	r2, [pc, #16]	; (8004668 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	40007000 	.word	0x40007000

0800466c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800466c:	b480      	push	{r7}
 800466e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800467c:	d102      	bne.n	8004684 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800467e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004682:	e00b      	b.n	800469c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004684:	4b08      	ldr	r3, [pc, #32]	; (80046a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8004686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004692:	d102      	bne.n	800469a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004698:	e000      	b.n	800469c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800469a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800469c:	4618      	mov	r0, r3
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40007000 	.word	0x40007000

080046ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d141      	bne.n	800473e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80046ba:	4b4b      	ldr	r3, [pc, #300]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80046c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046c6:	d131      	bne.n	800472c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046c8:	4b47      	ldr	r3, [pc, #284]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ce:	4a46      	ldr	r2, [pc, #280]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046d8:	4b43      	ldr	r3, [pc, #268]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046e0:	4a41      	ldr	r2, [pc, #260]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80046e8:	4b40      	ldr	r3, [pc, #256]	; (80047ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2232      	movs	r2, #50	; 0x32
 80046ee:	fb02 f303 	mul.w	r3, r2, r3
 80046f2:	4a3f      	ldr	r2, [pc, #252]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	0c9b      	lsrs	r3, r3, #18
 80046fa:	3301      	adds	r3, #1
 80046fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046fe:	e002      	b.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004706:	4b38      	ldr	r3, [pc, #224]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004712:	d102      	bne.n	800471a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d1f2      	bne.n	8004700 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800471a:	4b33      	ldr	r3, [pc, #204]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004726:	d158      	bne.n	80047da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e057      	b.n	80047dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800472c:	4b2e      	ldr	r3, [pc, #184]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800472e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004732:	4a2d      	ldr	r2, [pc, #180]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800473c:	e04d      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004744:	d141      	bne.n	80047ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004746:	4b28      	ldr	r3, [pc, #160]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800474e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004752:	d131      	bne.n	80047b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004754:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004760:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004764:	4b20      	ldr	r3, [pc, #128]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800476c:	4a1e      	ldr	r2, [pc, #120]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800476e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004772:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004774:	4b1d      	ldr	r3, [pc, #116]	; (80047ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2232      	movs	r2, #50	; 0x32
 800477a:	fb02 f303 	mul.w	r3, r2, r3
 800477e:	4a1c      	ldr	r2, [pc, #112]	; (80047f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004780:	fba2 2303 	umull	r2, r3, r2, r3
 8004784:	0c9b      	lsrs	r3, r3, #18
 8004786:	3301      	adds	r3, #1
 8004788:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800478a:	e002      	b.n	8004792 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	3b01      	subs	r3, #1
 8004790:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800479a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479e:	d102      	bne.n	80047a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1f2      	bne.n	800478c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b2:	d112      	bne.n	80047da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e011      	b.n	80047dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80047b8:	4b0b      	ldr	r3, [pc, #44]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047be:	4a0a      	ldr	r2, [pc, #40]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80047c8:	e007      	b.n	80047da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80047ca:	4b07      	ldr	r3, [pc, #28]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80047d2:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80047d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80047da:	2300      	movs	r3, #0
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3714      	adds	r7, #20
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr
 80047e8:	40007000 	.word	0x40007000
 80047ec:	20000000 	.word	0x20000000
 80047f0:	431bde83 	.word	0x431bde83

080047f4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b088      	sub	sp, #32
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d102      	bne.n	8004808 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	f000 bc08 	b.w	8005018 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004808:	4b96      	ldr	r3, [pc, #600]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	f003 030c 	and.w	r3, r3, #12
 8004810:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004812:	4b94      	ldr	r3, [pc, #592]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004814:	68db      	ldr	r3, [r3, #12]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f003 0310 	and.w	r3, r3, #16
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80e4 	beq.w	80049f2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d007      	beq.n	8004840 <HAL_RCC_OscConfig+0x4c>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	2b0c      	cmp	r3, #12
 8004834:	f040 808b 	bne.w	800494e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	2b01      	cmp	r3, #1
 800483c:	f040 8087 	bne.w	800494e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004840:	4b88      	ldr	r3, [pc, #544]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d005      	beq.n	8004858 <HAL_RCC_OscConfig+0x64>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e3df      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	4b81      	ldr	r3, [pc, #516]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0308 	and.w	r3, r3, #8
 8004864:	2b00      	cmp	r3, #0
 8004866:	d004      	beq.n	8004872 <HAL_RCC_OscConfig+0x7e>
 8004868:	4b7e      	ldr	r3, [pc, #504]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004870:	e005      	b.n	800487e <HAL_RCC_OscConfig+0x8a>
 8004872:	4b7c      	ldr	r3, [pc, #496]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004874:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004878:	091b      	lsrs	r3, r3, #4
 800487a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800487e:	4293      	cmp	r3, r2
 8004880:	d223      	bcs.n	80048ca <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fdcc 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e3c0      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004896:	4b73      	ldr	r3, [pc, #460]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a72      	ldr	r2, [pc, #456]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800489c:	f043 0308 	orr.w	r3, r3, #8
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	4b70      	ldr	r3, [pc, #448]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	496d      	ldr	r1, [pc, #436]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048b0:	4313      	orrs	r3, r2
 80048b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048b4:	4b6b      	ldr	r3, [pc, #428]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	69db      	ldr	r3, [r3, #28]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	4968      	ldr	r1, [pc, #416]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	604b      	str	r3, [r1, #4]
 80048c8:	e025      	b.n	8004916 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80048ca:	4b66      	ldr	r3, [pc, #408]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a65      	ldr	r2, [pc, #404]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048d0:	f043 0308 	orr.w	r3, r3, #8
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b63      	ldr	r3, [pc, #396]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4960      	ldr	r1, [pc, #384]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80048e8:	4b5e      	ldr	r3, [pc, #376]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	69db      	ldr	r3, [r3, #28]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	495b      	ldr	r1, [pc, #364]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d109      	bne.n	8004916 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fd8c 	bl	8005424 <RCC_SetFlashLatencyFromMSIRange>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d001      	beq.n	8004916 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e380      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004916:	f000 fcc1 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800491a:	4602      	mov	r2, r0
 800491c:	4b51      	ldr	r3, [pc, #324]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 030f 	and.w	r3, r3, #15
 8004926:	4950      	ldr	r1, [pc, #320]	; (8004a68 <HAL_RCC_OscConfig+0x274>)
 8004928:	5ccb      	ldrb	r3, [r1, r3]
 800492a:	f003 031f 	and.w	r3, r3, #31
 800492e:	fa22 f303 	lsr.w	r3, r2, r3
 8004932:	4a4e      	ldr	r2, [pc, #312]	; (8004a6c <HAL_RCC_OscConfig+0x278>)
 8004934:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004936:	4b4e      	ldr	r3, [pc, #312]	; (8004a70 <HAL_RCC_OscConfig+0x27c>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f7fd fd54 	bl	80023e8 <HAL_InitTick>
 8004940:	4603      	mov	r3, r0
 8004942:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d052      	beq.n	80049f0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	e364      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d032      	beq.n	80049bc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004956:	4b43      	ldr	r3, [pc, #268]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a42      	ldr	r2, [pc, #264]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800495c:	f043 0301 	orr.w	r3, r3, #1
 8004960:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004962:	f7fd fd91 	bl	8002488 <HAL_GetTick>
 8004966:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004968:	e008      	b.n	800497c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800496a:	f7fd fd8d 	bl	8002488 <HAL_GetTick>
 800496e:	4602      	mov	r2, r0
 8004970:	693b      	ldr	r3, [r7, #16]
 8004972:	1ad3      	subs	r3, r2, r3
 8004974:	2b02      	cmp	r3, #2
 8004976:	d901      	bls.n	800497c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004978:	2303      	movs	r3, #3
 800497a:	e34d      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800497c:	4b39      	ldr	r3, [pc, #228]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d0f0      	beq.n	800496a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004988:	4b36      	ldr	r3, [pc, #216]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a35      	ldr	r2, [pc, #212]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 800498e:	f043 0308 	orr.w	r3, r3, #8
 8004992:	6013      	str	r3, [r2, #0]
 8004994:	4b33      	ldr	r3, [pc, #204]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	4930      	ldr	r1, [pc, #192]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80049a6:	4b2f      	ldr	r3, [pc, #188]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	492b      	ldr	r1, [pc, #172]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
 80049ba:	e01a      	b.n	80049f2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80049bc:	4b29      	ldr	r3, [pc, #164]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a28      	ldr	r2, [pc, #160]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80049c8:	f7fd fd5e 	bl	8002488 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80049d0:	f7fd fd5a 	bl	8002488 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e31a      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80049e2:	4b20      	ldr	r3, [pc, #128]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d1f0      	bne.n	80049d0 <HAL_RCC_OscConfig+0x1dc>
 80049ee:	e000      	b.n	80049f2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d073      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d005      	beq.n	8004a10 <HAL_RCC_OscConfig+0x21c>
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b0c      	cmp	r3, #12
 8004a08:	d10e      	bne.n	8004a28 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b03      	cmp	r3, #3
 8004a0e:	d10b      	bne.n	8004a28 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a10:	4b14      	ldr	r3, [pc, #80]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d063      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d15f      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e2f7      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a30:	d106      	bne.n	8004a40 <HAL_RCC_OscConfig+0x24c>
 8004a32:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a0b      	ldr	r2, [pc, #44]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	6013      	str	r3, [r2, #0]
 8004a3e:	e025      	b.n	8004a8c <HAL_RCC_OscConfig+0x298>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a48:	d114      	bne.n	8004a74 <HAL_RCC_OscConfig+0x280>
 8004a4a:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a05      	ldr	r2, [pc, #20]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	4b03      	ldr	r3, [pc, #12]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a02      	ldr	r2, [pc, #8]	; (8004a64 <HAL_RCC_OscConfig+0x270>)
 8004a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e013      	b.n	8004a8c <HAL_RCC_OscConfig+0x298>
 8004a64:	40021000 	.word	0x40021000
 8004a68:	0800995c 	.word	0x0800995c
 8004a6c:	20000000 	.word	0x20000000
 8004a70:	20000004 	.word	0x20000004
 8004a74:	4ba0      	ldr	r3, [pc, #640]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a9f      	ldr	r2, [pc, #636]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b9d      	ldr	r3, [pc, #628]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a9c      	ldr	r2, [pc, #624]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fd fcf8 	bl	8002488 <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fd fcf4 	bl	8002488 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	; 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e2b4      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004aae:	4b92      	ldr	r3, [pc, #584]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x2a8>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004abc:	f7fd fce4 	bl	8002488 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fd fce0 	bl	8002488 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	; 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e2a0      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004ad6:	4b88      	ldr	r3, [pc, #544]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x2d0>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d060      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d005      	beq.n	8004b04 <HAL_RCC_OscConfig+0x310>
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	2b0c      	cmp	r3, #12
 8004afc:	d119      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d116      	bne.n	8004b32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b04:	4b7c      	ldr	r3, [pc, #496]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <HAL_RCC_OscConfig+0x328>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e27d      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b1c:	4b76      	ldr	r3, [pc, #472]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	061b      	lsls	r3, r3, #24
 8004b2a:	4973      	ldr	r1, [pc, #460]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b30:	e040      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68db      	ldr	r3, [r3, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d023      	beq.n	8004b82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b3a:	4b6f      	ldr	r3, [pc, #444]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a6e      	ldr	r2, [pc, #440]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b46:	f7fd fc9f 	bl	8002488 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fc9b 	bl	8002488 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e25b      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b60:	4b65      	ldr	r3, [pc, #404]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b6c:	4b62      	ldr	r3, [pc, #392]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	495f      	ldr	r1, [pc, #380]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	604b      	str	r3, [r1, #4]
 8004b80:	e018      	b.n	8004bb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b82:	4b5d      	ldr	r3, [pc, #372]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a5c      	ldr	r2, [pc, #368]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004b88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8e:	f7fd fc7b 	bl	8002488 <HAL_GetTick>
 8004b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b96:	f7fd fc77 	bl	8002488 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e237      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ba8:	4b53      	ldr	r3, [pc, #332]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d03c      	beq.n	8004c3a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01c      	beq.n	8004c02 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bce:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd8:	f7fd fc56 	bl	8002488 <HAL_GetTick>
 8004bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004be0:	f7fd fc52 	bl	8002488 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e212      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004bf2:	4b41      	ldr	r3, [pc, #260]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0ef      	beq.n	8004be0 <HAL_RCC_OscConfig+0x3ec>
 8004c00:	e01b      	b.n	8004c3a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c02:	4b3d      	ldr	r3, [pc, #244]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c08:	4a3b      	ldr	r2, [pc, #236]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f023 0301 	bic.w	r3, r3, #1
 8004c0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fc39 	bl	8002488 <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c1a:	f7fd fc35 	bl	8002488 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e1f5      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c2c:	4b32      	ldr	r3, [pc, #200]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1ef      	bne.n	8004c1a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 80a6 	beq.w	8004d94 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004c4c:	4b2a      	ldr	r3, [pc, #168]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d10d      	bne.n	8004c74 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c58:	4b27      	ldr	r3, [pc, #156]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c62:	6593      	str	r3, [r2, #88]	; 0x58
 8004c64:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6c:	60bb      	str	r3, [r7, #8]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c70:	2301      	movs	r3, #1
 8004c72:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c74:	4b21      	ldr	r3, [pc, #132]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d118      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c80:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a1d      	ldr	r2, [pc, #116]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8c:	f7fd fbfc 	bl	8002488 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c94:	f7fd fbf8 	bl	8002488 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e1b8      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_RCC_OscConfig+0x508>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d0f0      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d108      	bne.n	8004ccc <HAL_RCC_OscConfig+0x4d8>
 8004cba:	4b0f      	ldr	r3, [pc, #60]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc0:	4a0d      	ldr	r2, [pc, #52]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cca:	e029      	b.n	8004d20 <HAL_RCC_OscConfig+0x52c>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2b05      	cmp	r3, #5
 8004cd2:	d115      	bne.n	8004d00 <HAL_RCC_OscConfig+0x50c>
 8004cd4:	4b08      	ldr	r3, [pc, #32]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	4a07      	ldr	r2, [pc, #28]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ce4:	4b04      	ldr	r3, [pc, #16]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cea:	4a03      	ldr	r2, [pc, #12]	; (8004cf8 <HAL_RCC_OscConfig+0x504>)
 8004cec:	f043 0301 	orr.w	r3, r3, #1
 8004cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004cf4:	e014      	b.n	8004d20 <HAL_RCC_OscConfig+0x52c>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	4b9d      	ldr	r3, [pc, #628]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d06:	4a9c      	ldr	r2, [pc, #624]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d08:	f023 0301 	bic.w	r3, r3, #1
 8004d0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d10:	4b99      	ldr	r3, [pc, #612]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	4a98      	ldr	r2, [pc, #608]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d18:	f023 0304 	bic.w	r3, r3, #4
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d016      	beq.n	8004d56 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d28:	f7fd fbae 	bl	8002488 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d2e:	e00a      	b.n	8004d46 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d30:	f7fd fbaa 	bl	8002488 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e168      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d46:	4b8c      	ldr	r3, [pc, #560]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ed      	beq.n	8004d30 <HAL_RCC_OscConfig+0x53c>
 8004d54:	e015      	b.n	8004d82 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fd fb97 	bl	8002488 <HAL_GetTick>
 8004d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fd fb93 	bl	8002488 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e151      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d74:	4b80      	ldr	r3, [pc, #512]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d1ed      	bne.n	8004d5e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d82:	7ffb      	ldrb	r3, [r7, #31]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d88:	4b7b      	ldr	r3, [pc, #492]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	4a7a      	ldr	r2, [pc, #488]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004d8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d92:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d03c      	beq.n	8004e1a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01c      	beq.n	8004de2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004da8:	4b73      	ldr	r3, [pc, #460]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004daa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dae:	4a72      	ldr	r2, [pc, #456]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db8:	f7fd fb66 	bl	8002488 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dc0:	f7fd fb62 	bl	8002488 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e122      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004dd2:	4b69      	ldr	r3, [pc, #420]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004dd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ef      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x5cc>
 8004de0:	e01b      	b.n	8004e1a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004de2:	4b65      	ldr	r3, [pc, #404]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004de4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004de8:	4a63      	ldr	r2, [pc, #396]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df2:	f7fd fb49 	bl	8002488 <HAL_GetTick>
 8004df6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004dfa:	f7fd fb45 	bl	8002488 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e105      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e0c:	4b5a      	ldr	r3, [pc, #360]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004e0e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d1ef      	bne.n	8004dfa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f000 80f9 	beq.w	8005016 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	f040 80cf 	bne.w	8004fcc <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004e2e:	4b52      	ldr	r3, [pc, #328]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 0203 	and.w	r2, r3, #3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d12c      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d123      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d11b      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d113      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	3b01      	subs	r3, #1
 8004e82:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d109      	bne.n	8004e9c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e92:	085b      	lsrs	r3, r3, #1
 8004e94:	3b01      	subs	r3, #1
 8004e96:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d071      	beq.n	8004f80 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2b0c      	cmp	r3, #12
 8004ea0:	d068      	beq.n	8004f74 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ea2:	4b35      	ldr	r3, [pc, #212]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d105      	bne.n	8004eba <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004eae:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d001      	beq.n	8004ebe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e0ac      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004ebe:	4b2e      	ldr	r3, [pc, #184]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2d      	ldr	r2, [pc, #180]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ec8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004eca:	f7fd fadd 	bl	8002488 <HAL_GetTick>
 8004ece:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed0:	e008      	b.n	8004ee4 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ed2:	f7fd fad9 	bl	8002488 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	2b02      	cmp	r3, #2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e099      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ee4:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1f0      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ef0:	4b21      	ldr	r3, [pc, #132]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004ef2:	68da      	ldr	r2, [r3, #12]
 8004ef4:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <HAL_RCC_OscConfig+0x788>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004f00:	3a01      	subs	r2, #1
 8004f02:	0112      	lsls	r2, r2, #4
 8004f04:	4311      	orrs	r1, r2
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f0a:	0212      	lsls	r2, r2, #8
 8004f0c:	4311      	orrs	r1, r2
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f12:	0852      	lsrs	r2, r2, #1
 8004f14:	3a01      	subs	r2, #1
 8004f16:	0552      	lsls	r2, r2, #21
 8004f18:	4311      	orrs	r1, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004f1e:	0852      	lsrs	r2, r2, #1
 8004f20:	3a01      	subs	r2, #1
 8004f22:	0652      	lsls	r2, r2, #25
 8004f24:	4311      	orrs	r1, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f2a:	06d2      	lsls	r2, r2, #27
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	4912      	ldr	r1, [pc, #72]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004f34:	4b10      	ldr	r3, [pc, #64]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a0f      	ldr	r2, [pc, #60]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004f3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f40:	4b0d      	ldr	r3, [pc, #52]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a0c      	ldr	r2, [pc, #48]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004f4c:	f7fd fa9c 	bl	8002488 <HAL_GetTick>
 8004f50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f52:	e008      	b.n	8004f66 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f54:	f7fd fa98 	bl	8002488 <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e058      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCC_OscConfig+0x784>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d0f0      	beq.n	8004f54 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f72:	e050      	b.n	8005016 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e04f      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f80:	4b27      	ldr	r3, [pc, #156]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d144      	bne.n	8005016 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004f8c:	4b24      	ldr	r3, [pc, #144]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a23      	ldr	r2, [pc, #140]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004f92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f98:	4b21      	ldr	r3, [pc, #132]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	4a20      	ldr	r2, [pc, #128]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004fa2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004fa4:	f7fd fa70 	bl	8002488 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fac:	f7fd fa6c 	bl	8002488 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e02c      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fbe:	4b18      	ldr	r3, [pc, #96]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x7b8>
 8004fca:	e024      	b.n	8005016 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	2b0c      	cmp	r3, #12
 8004fd0:	d01f      	beq.n	8005012 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fd2:	4b13      	ldr	r3, [pc, #76]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a12      	ldr	r2, [pc, #72]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fde:	f7fd fa53 	bl	8002488 <HAL_GetTick>
 8004fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe4:	e008      	b.n	8004ff8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fe6:	f7fd fa4f 	bl	8002488 <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	1ad3      	subs	r3, r2, r3
 8004ff0:	2b02      	cmp	r3, #2
 8004ff2:	d901      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e00f      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ff8:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1f0      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005004:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 8005006:	68da      	ldr	r2, [r3, #12]
 8005008:	4905      	ldr	r1, [pc, #20]	; (8005020 <HAL_RCC_OscConfig+0x82c>)
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <HAL_RCC_OscConfig+0x830>)
 800500c:	4013      	ands	r3, r2
 800500e:	60cb      	str	r3, [r1, #12]
 8005010:	e001      	b.n	8005016 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3720      	adds	r7, #32
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	40021000 	.word	0x40021000
 8005024:	feeefffc 	.word	0xfeeefffc

08005028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d101      	bne.n	8005040 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e11d      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005040:	4b90      	ldr	r3, [pc, #576]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 030f 	and.w	r3, r3, #15
 8005048:	683a      	ldr	r2, [r7, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d910      	bls.n	8005070 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800504e:	4b8d      	ldr	r3, [pc, #564]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f023 020f 	bic.w	r2, r3, #15
 8005056:	498b      	ldr	r1, [pc, #556]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	4313      	orrs	r3, r2
 800505c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800505e:	4b89      	ldr	r3, [pc, #548]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 030f 	and.w	r3, r3, #15
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	429a      	cmp	r2, r3
 800506a:	d001      	beq.n	8005070 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	e105      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d010      	beq.n	800509e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	4b81      	ldr	r3, [pc, #516]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005088:	429a      	cmp	r2, r3
 800508a:	d908      	bls.n	800509e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b7e      	ldr	r3, [pc, #504]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	497b      	ldr	r1, [pc, #492]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d079      	beq.n	800519e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d11e      	bne.n	80050f0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050b2:	4b75      	ldr	r3, [pc, #468]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e0dc      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80050c2:	f000 fa09 	bl	80054d8 <RCC_GetSysClockFreqFromPLLSource>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4a70      	ldr	r2, [pc, #448]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d946      	bls.n	800515c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80050ce:	4b6e      	ldr	r3, [pc, #440]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d140      	bne.n	800515c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050da:	4b6b      	ldr	r3, [pc, #428]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e2:	4a69      	ldr	r2, [pc, #420]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80050e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050ea:	2380      	movs	r3, #128	; 0x80
 80050ec:	617b      	str	r3, [r7, #20]
 80050ee:	e035      	b.n	800515c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d107      	bne.n	8005108 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f8:	4b63      	ldr	r3, [pc, #396]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d115      	bne.n	8005130 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e0b9      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d107      	bne.n	8005120 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005110:	4b5d      	ldr	r3, [pc, #372]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0302 	and.w	r3, r3, #2
 8005118:	2b00      	cmp	r3, #0
 800511a:	d109      	bne.n	8005130 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0ad      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005120:	4b59      	ldr	r3, [pc, #356]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0a5      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005130:	f000 f8b4 	bl	800529c <HAL_RCC_GetSysClockFreq>
 8005134:	4603      	mov	r3, r0
 8005136:	4a55      	ldr	r2, [pc, #340]	; (800528c <HAL_RCC_ClockConfig+0x264>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d90f      	bls.n	800515c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800513c:	4b52      	ldr	r3, [pc, #328]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005144:	2b00      	cmp	r3, #0
 8005146:	d109      	bne.n	800515c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005148:	4b4f      	ldr	r3, [pc, #316]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005150:	4a4d      	ldr	r2, [pc, #308]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005152:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005156:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800515c:	4b4a      	ldr	r3, [pc, #296]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	f023 0203 	bic.w	r2, r3, #3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	4947      	ldr	r1, [pc, #284]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800516a:	4313      	orrs	r3, r2
 800516c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800516e:	f7fd f98b 	bl	8002488 <HAL_GetTick>
 8005172:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005174:	e00a      	b.n	800518c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005176:	f7fd f987 	bl	8002488 <HAL_GetTick>
 800517a:	4602      	mov	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	f241 3288 	movw	r2, #5000	; 0x1388
 8005184:	4293      	cmp	r3, r2
 8005186:	d901      	bls.n	800518c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8005188:	2303      	movs	r3, #3
 800518a:	e077      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800518c:	4b3e      	ldr	r3, [pc, #248]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	f003 020c 	and.w	r2, r3, #12
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	429a      	cmp	r2, r3
 800519c:	d1eb      	bne.n	8005176 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b80      	cmp	r3, #128	; 0x80
 80051a2:	d105      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051a4:	4b38      	ldr	r3, [pc, #224]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a37      	ldr	r2, [pc, #220]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051ae:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0302 	and.w	r3, r3, #2
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d010      	beq.n	80051de <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689a      	ldr	r2, [r3, #8]
 80051c0:	4b31      	ldr	r3, [pc, #196]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d208      	bcs.n	80051de <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051cc:	4b2e      	ldr	r3, [pc, #184]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	492b      	ldr	r1, [pc, #172]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051de:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	683a      	ldr	r2, [r7, #0]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d210      	bcs.n	800520e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051ec:	4b25      	ldr	r3, [pc, #148]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 020f 	bic.w	r2, r3, #15
 80051f4:	4923      	ldr	r1, [pc, #140]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fc:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_RCC_ClockConfig+0x25c>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 030f 	and.w	r3, r3, #15
 8005204:	683a      	ldr	r2, [r7, #0]
 8005206:	429a      	cmp	r2, r3
 8005208:	d001      	beq.n	800520e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e036      	b.n	800527c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800521a:	4b1b      	ldr	r3, [pc, #108]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	4918      	ldr	r1, [pc, #96]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005228:	4313      	orrs	r3, r2
 800522a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0308 	and.w	r3, r3, #8
 8005234:	2b00      	cmp	r3, #0
 8005236:	d009      	beq.n	800524c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005238:	4b13      	ldr	r3, [pc, #76]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4910      	ldr	r1, [pc, #64]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800524c:	f000 f826 	bl	800529c <HAL_RCC_GetSysClockFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b0d      	ldr	r3, [pc, #52]	; (8005288 <HAL_RCC_ClockConfig+0x260>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	091b      	lsrs	r3, r3, #4
 8005258:	f003 030f 	and.w	r3, r3, #15
 800525c:	490c      	ldr	r1, [pc, #48]	; (8005290 <HAL_RCC_ClockConfig+0x268>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	f003 031f 	and.w	r3, r3, #31
 8005264:	fa22 f303 	lsr.w	r3, r2, r3
 8005268:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <HAL_RCC_ClockConfig+0x26c>)
 800526a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <HAL_RCC_ClockConfig+0x270>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f7fd f8b9 	bl	80023e8 <HAL_InitTick>
 8005276:	4603      	mov	r3, r0
 8005278:	73fb      	strb	r3, [r7, #15]

  return status;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3718      	adds	r7, #24
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40022000 	.word	0x40022000
 8005288:	40021000 	.word	0x40021000
 800528c:	04c4b400 	.word	0x04c4b400
 8005290:	0800995c 	.word	0x0800995c
 8005294:	20000000 	.word	0x20000000
 8005298:	20000004 	.word	0x20000004

0800529c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800529c:	b480      	push	{r7}
 800529e:	b089      	sub	sp, #36	; 0x24
 80052a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	61fb      	str	r3, [r7, #28]
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052aa:	4b3e      	ldr	r3, [pc, #248]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0303 	and.w	r3, r3, #3
 80052bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d005      	beq.n	80052d0 <HAL_RCC_GetSysClockFreq+0x34>
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	2b0c      	cmp	r3, #12
 80052c8:	d121      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d11e      	bne.n	800530e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80052d0:	4b34      	ldr	r3, [pc, #208]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0308 	and.w	r3, r3, #8
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d107      	bne.n	80052ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80052dc:	4b31      	ldr	r3, [pc, #196]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e2:	0a1b      	lsrs	r3, r3, #8
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	61fb      	str	r3, [r7, #28]
 80052ea:	e005      	b.n	80052f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80052ec:	4b2d      	ldr	r3, [pc, #180]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	091b      	lsrs	r3, r3, #4
 80052f2:	f003 030f 	and.w	r3, r3, #15
 80052f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052f8:	4a2b      	ldr	r2, [pc, #172]	; (80053a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005300:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d10d      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800530c:	e00a      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	2b04      	cmp	r3, #4
 8005312:	d102      	bne.n	800531a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005314:	4b25      	ldr	r3, [pc, #148]	; (80053ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e004      	b.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	2b08      	cmp	r3, #8
 800531e:	d101      	bne.n	8005324 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005320:	4b23      	ldr	r3, [pc, #140]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005322:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	2b0c      	cmp	r3, #12
 8005328:	d134      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800532a:	4b1e      	ldr	r3, [pc, #120]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d003      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0xa6>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	2b03      	cmp	r3, #3
 800533e:	d003      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0xac>
 8005340:	e005      	b.n	800534e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005342:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005344:	617b      	str	r3, [r7, #20]
      break;
 8005346:	e005      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005348:	4b19      	ldr	r3, [pc, #100]	; (80053b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800534a:	617b      	str	r3, [r7, #20]
      break;
 800534c:	e002      	b.n	8005354 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	617b      	str	r3, [r7, #20]
      break;
 8005352:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005354:	4b13      	ldr	r3, [pc, #76]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	091b      	lsrs	r3, r3, #4
 800535a:	f003 030f 	and.w	r3, r3, #15
 800535e:	3301      	adds	r3, #1
 8005360:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	fb03 f202 	mul.w	r2, r3, r2
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	fbb2 f3f3 	udiv	r3, r2, r3
 8005378:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800537a:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	0e5b      	lsrs	r3, r3, #25
 8005380:	f003 0303 	and.w	r3, r3, #3
 8005384:	3301      	adds	r3, #1
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005392:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005394:	69bb      	ldr	r3, [r7, #24]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3724      	adds	r7, #36	; 0x24
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	40021000 	.word	0x40021000
 80053a8:	08009974 	.word	0x08009974
 80053ac:	00f42400 	.word	0x00f42400
 80053b0:	007a1200 	.word	0x007a1200

080053b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053b8:	4b03      	ldr	r3, [pc, #12]	; (80053c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053ba:	681b      	ldr	r3, [r3, #0]
}
 80053bc:	4618      	mov	r0, r3
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000000 	.word	0x20000000

080053cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80053d0:	f7ff fff0 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b06      	ldr	r3, [pc, #24]	; (80053f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4904      	ldr	r1, [pc, #16]	; (80053f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	40021000 	.word	0x40021000
 80053f4:	0800996c 	.word	0x0800996c

080053f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053fc:	f7ff ffda 	bl	80053b4 <HAL_RCC_GetHCLKFreq>
 8005400:	4602      	mov	r2, r0
 8005402:	4b06      	ldr	r3, [pc, #24]	; (800541c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	0adb      	lsrs	r3, r3, #11
 8005408:	f003 0307 	and.w	r3, r3, #7
 800540c:	4904      	ldr	r1, [pc, #16]	; (8005420 <HAL_RCC_GetPCLK2Freq+0x28>)
 800540e:	5ccb      	ldrb	r3, [r1, r3]
 8005410:	f003 031f 	and.w	r3, r3, #31
 8005414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	bd80      	pop	{r7, pc}
 800541c:	40021000 	.word	0x40021000
 8005420:	0800996c 	.word	0x0800996c

08005424 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b086      	sub	sp, #24
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800542c:	2300      	movs	r3, #0
 800542e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005430:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800543c:	f7ff f916 	bl	800466c <HAL_PWREx_GetVoltageRange>
 8005440:	6178      	str	r0, [r7, #20]
 8005442:	e014      	b.n	800546e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005444:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	4a21      	ldr	r2, [pc, #132]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800544a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544e:	6593      	str	r3, [r2, #88]	; 0x58
 8005450:	4b1f      	ldr	r3, [pc, #124]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800545c:	f7ff f906 	bl	800466c <HAL_PWREx_GetVoltageRange>
 8005460:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005462:	4b1b      	ldr	r3, [pc, #108]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005466:	4a1a      	ldr	r2, [pc, #104]	; (80054d0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005468:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005474:	d10b      	bne.n	800548e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b80      	cmp	r3, #128	; 0x80
 800547a:	d913      	bls.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2ba0      	cmp	r3, #160	; 0xa0
 8005480:	d902      	bls.n	8005488 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005482:	2302      	movs	r3, #2
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	e00d      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005488:	2301      	movs	r3, #1
 800548a:	613b      	str	r3, [r7, #16]
 800548c:	e00a      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b7f      	cmp	r3, #127	; 0x7f
 8005492:	d902      	bls.n	800549a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8005494:	2302      	movs	r3, #2
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e004      	b.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b70      	cmp	r3, #112	; 0x70
 800549e:	d101      	bne.n	80054a4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80054a0:	2301      	movs	r3, #1
 80054a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80054a4:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f023 020f 	bic.w	r2, r3, #15
 80054ac:	4909      	ldr	r1, [pc, #36]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000
 80054d4:	40022000 	.word	0x40022000

080054d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054de:	4b2d      	ldr	r3, [pc, #180]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	f003 0303 	and.w	r3, r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2b03      	cmp	r3, #3
 80054ec:	d00b      	beq.n	8005506 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d825      	bhi.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d008      	beq.n	800550c <RCC_GetSysClockFreqFromPLLSource+0x34>
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d11f      	bne.n	8005540 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005500:	4b25      	ldr	r3, [pc, #148]	; (8005598 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005502:	613b      	str	r3, [r7, #16]
    break;
 8005504:	e01f      	b.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8005506:	4b25      	ldr	r3, [pc, #148]	; (800559c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8005508:	613b      	str	r3, [r7, #16]
    break;
 800550a:	e01c      	b.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800550c:	4b21      	ldr	r3, [pc, #132]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d107      	bne.n	8005528 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005518:	4b1e      	ldr	r3, [pc, #120]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800551a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	f003 030f 	and.w	r3, r3, #15
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e005      	b.n	8005534 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005528:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005534:	4a1a      	ldr	r2, [pc, #104]	; (80055a0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553c:	613b      	str	r3, [r7, #16]
    break;
 800553e:	e002      	b.n	8005546 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
    break;
 8005544:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005546:	4b13      	ldr	r3, [pc, #76]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f003 030f 	and.w	r3, r3, #15
 8005550:	3301      	adds	r3, #1
 8005552:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005554:	4b0f      	ldr	r3, [pc, #60]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	0a1b      	lsrs	r3, r3, #8
 800555a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	fb03 f202 	mul.w	r2, r3, r2
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0e5b      	lsrs	r3, r3, #25
 8005572:	f003 0303 	and.w	r3, r3, #3
 8005576:	3301      	adds	r3, #1
 8005578:	005b      	lsls	r3, r3, #1
 800557a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800557c:	693a      	ldr	r2, [r7, #16]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	fbb2 f3f3 	udiv	r3, r2, r3
 8005584:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005586:	683b      	ldr	r3, [r7, #0]
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr
 8005594:	40021000 	.word	0x40021000
 8005598:	00f42400 	.word	0x00f42400
 800559c:	007a1200 	.word	0x007a1200
 80055a0:	08009974 	.word	0x08009974

080055a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055ac:	2300      	movs	r3, #0
 80055ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055b0:	2300      	movs	r3, #0
 80055b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d040      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055c4:	2b80      	cmp	r3, #128	; 0x80
 80055c6:	d02a      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055c8:	2b80      	cmp	r3, #128	; 0x80
 80055ca:	d825      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055cc:	2b60      	cmp	r3, #96	; 0x60
 80055ce:	d026      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80055d0:	2b60      	cmp	r3, #96	; 0x60
 80055d2:	d821      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d006      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80055d8:	2b40      	cmp	r3, #64	; 0x40
 80055da:	d81d      	bhi.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d009      	beq.n	80055f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80055e0:	2b20      	cmp	r3, #32
 80055e2:	d010      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80055e4:	e018      	b.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055e6:	4b89      	ldr	r3, [pc, #548]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	4a88      	ldr	r2, [pc, #544]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80055ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055f0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80055f2:	e015      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	3304      	adds	r3, #4
 80055f8:	2100      	movs	r1, #0
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fb12 	bl	8005c24 <RCCEx_PLLSAI1_Config>
 8005600:	4603      	mov	r3, r0
 8005602:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005604:	e00c      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3320      	adds	r3, #32
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fbfd 	bl	8005e0c <RCCEx_PLLSAI2_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005616:	e003      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	74fb      	strb	r3, [r7, #19]
      break;
 800561c:	e000      	b.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800561e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005620:	7cfb      	ldrb	r3, [r7, #19]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d10b      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005626:	4b79      	ldr	r3, [pc, #484]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005628:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800562c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005634:	4975      	ldr	r1, [pc, #468]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800563c:	e001      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	7cfb      	ldrb	r3, [r7, #19]
 8005640:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d047      	beq.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005656:	d030      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800565c:	d82a      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800565e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005662:	d02a      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005668:	d824      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800566a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800566e:	d008      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005674:	d81e      	bhi.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800567a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800567e:	d010      	beq.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005680:	e018      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005682:	4b62      	ldr	r3, [pc, #392]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	4a61      	ldr	r2, [pc, #388]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800568c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800568e:	e015      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	3304      	adds	r3, #4
 8005694:	2100      	movs	r1, #0
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fac4 	bl	8005c24 <RCCEx_PLLSAI1_Config>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a0:	e00c      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	3320      	adds	r3, #32
 80056a6:	2100      	movs	r1, #0
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 fbaf 	bl	8005e0c <RCCEx_PLLSAI2_Config>
 80056ae:	4603      	mov	r3, r0
 80056b0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b2:	e003      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056b4:	2301      	movs	r3, #1
 80056b6:	74fb      	strb	r3, [r7, #19]
      break;
 80056b8:	e000      	b.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80056ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056bc:	7cfb      	ldrb	r3, [r7, #19]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10b      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c2:	4b52      	ldr	r3, [pc, #328]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	494e      	ldr	r1, [pc, #312]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056d2:	4313      	orrs	r3, r2
 80056d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80056d8:	e001      	b.n	80056de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056da:	7cfb      	ldrb	r3, [r7, #19]
 80056dc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f000 809f 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056ec:	2300      	movs	r3, #0
 80056ee:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056f0:	4b46      	ldr	r3, [pc, #280]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80056f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d101      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	e000      	b.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005700:	2300      	movs	r3, #0
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00d      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005706:	4b41      	ldr	r3, [pc, #260]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800570a:	4a40      	ldr	r2, [pc, #256]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800570c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005710:	6593      	str	r3, [r2, #88]	; 0x58
 8005712:	4b3e      	ldr	r3, [pc, #248]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571a:	60bb      	str	r3, [r7, #8]
 800571c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800571e:	2301      	movs	r3, #1
 8005720:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005722:	4b3b      	ldr	r3, [pc, #236]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a3a      	ldr	r2, [pc, #232]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005728:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800572c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800572e:	f7fc feab 	bl	8002488 <HAL_GetTick>
 8005732:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005734:	e009      	b.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005736:	f7fc fea7 	bl	8002488 <HAL_GetTick>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	2b02      	cmp	r3, #2
 8005742:	d902      	bls.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	74fb      	strb	r3, [r7, #19]
        break;
 8005748:	e005      	b.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800574a:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005752:	2b00      	cmp	r3, #0
 8005754:	d0ef      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005756:	7cfb      	ldrb	r3, [r7, #19]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d15b      	bne.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800575c:	4b2b      	ldr	r3, [pc, #172]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d01f      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	429a      	cmp	r2, r3
 8005778:	d019      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800577a:	4b24      	ldr	r3, [pc, #144]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800577c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005780:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005784:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005786:	4b21      	ldr	r3, [pc, #132]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	4a1f      	ldr	r2, [pc, #124]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005796:	4b1d      	ldr	r3, [pc, #116]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800579c:	4a1b      	ldr	r2, [pc, #108]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800579e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057a6:	4a19      	ldr	r2, [pc, #100]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d016      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b8:	f7fc fe66 	bl	8002488 <HAL_GetTick>
 80057bc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057be:	e00b      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c0:	f7fc fe62 	bl	8002488 <HAL_GetTick>
 80057c4:	4602      	mov	r2, r0
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1ad3      	subs	r3, r2, r3
 80057ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d902      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	74fb      	strb	r3, [r7, #19]
            break;
 80057d6:	e006      	b.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057de:	f003 0302 	and.w	r3, r3, #2
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0ec      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80057e6:	7cfb      	ldrb	r3, [r7, #19]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10c      	bne.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ec:	4b07      	ldr	r3, [pc, #28]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005804:	e008      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005806:	7cfb      	ldrb	r3, [r7, #19]
 8005808:	74bb      	strb	r3, [r7, #18]
 800580a:	e005      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800580c:	40021000 	.word	0x40021000
 8005810:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005814:	7cfb      	ldrb	r3, [r7, #19]
 8005816:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005818:	7c7b      	ldrb	r3, [r7, #17]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d105      	bne.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800581e:	4ba0      	ldr	r3, [pc, #640]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	4a9f      	ldr	r2, [pc, #636]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005824:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005828:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005836:	4b9a      	ldr	r3, [pc, #616]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005838:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583c:	f023 0203 	bic.w	r2, r3, #3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	4996      	ldr	r1, [pc, #600]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005846:	4313      	orrs	r3, r2
 8005848:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005858:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	f023 020c 	bic.w	r2, r3, #12
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	498e      	ldr	r1, [pc, #568]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005868:	4313      	orrs	r3, r2
 800586a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800587a:	4b89      	ldr	r3, [pc, #548]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800587c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005880:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005888:	4985      	ldr	r1, [pc, #532]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800588a:	4313      	orrs	r3, r2
 800588c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0308 	and.w	r3, r3, #8
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800589c:	4b80      	ldr	r3, [pc, #512]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800589e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058aa:	497d      	ldr	r1, [pc, #500]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058be:	4b78      	ldr	r3, [pc, #480]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058cc:	4974      	ldr	r1, [pc, #464]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00a      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e0:	4b6f      	ldr	r3, [pc, #444]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058e6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ee:	496c      	ldr	r1, [pc, #432]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005910:	4963      	ldr	r1, [pc, #396]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005912:	4313      	orrs	r3, r2
 8005914:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00a      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005924:	4b5e      	ldr	r3, [pc, #376]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800592a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005932:	495b      	ldr	r1, [pc, #364]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00a      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005946:	4b56      	ldr	r3, [pc, #344]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005954:	4952      	ldr	r1, [pc, #328]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005956:	4313      	orrs	r3, r2
 8005958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00a      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800596a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800596e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	494a      	ldr	r1, [pc, #296]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005978:	4313      	orrs	r3, r2
 800597a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00a      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800598a:	4b45      	ldr	r3, [pc, #276]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005990:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005998:	4941      	ldr	r1, [pc, #260]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80059ac:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80059b2:	f023 0203 	bic.w	r2, r3, #3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	4939      	ldr	r1, [pc, #228]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059bc:	4313      	orrs	r3, r2
 80059be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d028      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059ce:	4b34      	ldr	r3, [pc, #208]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059dc:	4930      	ldr	r1, [pc, #192]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059ec:	d106      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059ee:	4b2c      	ldr	r3, [pc, #176]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	4a2b      	ldr	r2, [pc, #172]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80059f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059f8:	60d3      	str	r3, [r2, #12]
 80059fa:	e011      	b.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a04:	d10c      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	3304      	adds	r3, #4
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f000 f909 	bl	8005c24 <RCCEx_PLLSAI1_Config>
 8005a12:	4603      	mov	r3, r0
 8005a14:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a16:	7cfb      	ldrb	r3, [r7, #19]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005a1c:	7cfb      	ldrb	r3, [r7, #19]
 8005a1e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d04d      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a34:	d108      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005a36:	4b1a      	ldr	r3, [pc, #104]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005a42:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a46:	e012      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005a48:	4b15      	ldr	r3, [pc, #84]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a4e:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a54:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005a58:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a66:	490e      	ldr	r1, [pc, #56]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a76:	d106      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a78:	4b09      	ldr	r3, [pc, #36]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	4a08      	ldr	r2, [pc, #32]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a82:	60d3      	str	r3, [r2, #12]
 8005a84:	e020      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a90:	4b03      	ldr	r3, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a02      	ldr	r2, [pc, #8]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f8b5 	bl	8005c24 <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d028      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ad4:	4b4a      	ldr	r3, [pc, #296]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae2:	4947      	ldr	r1, [pc, #284]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005af2:	d106      	bne.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b42      	ldr	r3, [pc, #264]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a41      	ldr	r2, [pc, #260]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
 8005b00:	e011      	b.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b06:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b0a:	d10c      	bne.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	2101      	movs	r1, #1
 8005b12:	4618      	mov	r0, r3
 8005b14:	f000 f886 	bl	8005c24 <RCCEx_PLLSAI1_Config>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b1c:	7cfb      	ldrb	r3, [r7, #19]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d001      	beq.n	8005b26 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005b22:	7cfb      	ldrb	r3, [r7, #19]
 8005b24:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d01e      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b32:	4b33      	ldr	r3, [pc, #204]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b38:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b42:	492f      	ldr	r1, [pc, #188]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b54:	d10c      	bne.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3304      	adds	r3, #4
 8005b5a:	2102      	movs	r1, #2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 f861 	bl	8005c24 <RCCEx_PLLSAI1_Config>
 8005b62:	4603      	mov	r3, r0
 8005b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b66:	7cfb      	ldrb	r3, [r7, #19]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d00b      	beq.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b7c:	4b20      	ldr	r3, [pc, #128]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b82:	f023 0204 	bic.w	r2, r3, #4
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b8c:	491c      	ldr	r1, [pc, #112]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00b      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ba0:	4b17      	ldr	r3, [pc, #92]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ba2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ba6:	f023 0218 	bic.w	r2, r3, #24
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bb0:	4913      	ldr	r1, [pc, #76]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d017      	beq.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005bc4:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd4:	490a      	ldr	r1, [pc, #40]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005be6:	d105      	bne.n	8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be8:	4b05      	ldr	r3, [pc, #20]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	4a04      	ldr	r2, [pc, #16]	; (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bf2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005bf4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	bd80      	pop	{r7, pc}
 8005bfe:	bf00      	nop
 8005c00:	40021000 	.word	0x40021000

08005c04 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005c08:	4b05      	ldr	r3, [pc, #20]	; (8005c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a04      	ldr	r2, [pc, #16]	; (8005c20 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005c0e:	f043 0304 	orr.w	r3, r3, #4
 8005c12:	6013      	str	r3, [r2, #0]
}
 8005c14:	bf00      	nop
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40021000 	.word	0x40021000

08005c24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005c32:	4b72      	ldr	r3, [pc, #456]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c34:	68db      	ldr	r3, [r3, #12]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00e      	beq.n	8005c5c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005c3e:	4b6f      	ldr	r3, [pc, #444]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c40:	68db      	ldr	r3, [r3, #12]
 8005c42:	f003 0203 	and.w	r2, r3, #3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d103      	bne.n	8005c56 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
       ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d142      	bne.n	8005cdc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e03f      	b.n	8005cdc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b03      	cmp	r3, #3
 8005c62:	d018      	beq.n	8005c96 <RCCEx_PLLSAI1_Config+0x72>
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d825      	bhi.n	8005cb4 <RCCEx_PLLSAI1_Config+0x90>
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d002      	beq.n	8005c72 <RCCEx_PLLSAI1_Config+0x4e>
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d009      	beq.n	8005c84 <RCCEx_PLLSAI1_Config+0x60>
 8005c70:	e020      	b.n	8005cb4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c72:	4b62      	ldr	r3, [pc, #392]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d11d      	bne.n	8005cba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c82:	e01a      	b.n	8005cba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c84:	4b5d      	ldr	r3, [pc, #372]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d116      	bne.n	8005cbe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c94:	e013      	b.n	8005cbe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c96:	4b59      	ldr	r3, [pc, #356]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d10f      	bne.n	8005cc2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005ca2:	4b56      	ldr	r3, [pc, #344]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d109      	bne.n	8005cc2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cb2:	e006      	b.n	8005cc2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	73fb      	strb	r3, [r7, #15]
      break;
 8005cb8:	e004      	b.n	8005cc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005cba:	bf00      	nop
 8005cbc:	e002      	b.n	8005cc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005cbe:	bf00      	nop
 8005cc0:	e000      	b.n	8005cc4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005cc2:	bf00      	nop
    }

    if(status == HAL_OK)
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005cca:	4b4c      	ldr	r3, [pc, #304]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ccc:	68db      	ldr	r3, [r3, #12]
 8005cce:	f023 0203 	bic.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4949      	ldr	r1, [pc, #292]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f040 8086 	bne.w	8005df0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005ce4:	4b45      	ldr	r3, [pc, #276]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a44      	ldr	r2, [pc, #272]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cf0:	f7fc fbca 	bl	8002488 <HAL_GetTick>
 8005cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cf6:	e009      	b.n	8005d0c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cf8:	f7fc fbc6 	bl	8002488 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d902      	bls.n	8005d0c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005d06:	2303      	movs	r3, #3
 8005d08:	73fb      	strb	r3, [r7, #15]
        break;
 8005d0a:	e005      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005d0c:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d1ef      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d168      	bne.n	8005df0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d113      	bne.n	8005d4c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d24:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d26:	691a      	ldr	r2, [r3, #16]
 8005d28:	4b35      	ldr	r3, [pc, #212]	; (8005e00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6892      	ldr	r2, [r2, #8]
 8005d30:	0211      	lsls	r1, r2, #8
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	68d2      	ldr	r2, [r2, #12]
 8005d36:	06d2      	lsls	r2, r2, #27
 8005d38:	4311      	orrs	r1, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6852      	ldr	r2, [r2, #4]
 8005d3e:	3a01      	subs	r2, #1
 8005d40:	0112      	lsls	r2, r2, #4
 8005d42:	430a      	orrs	r2, r1
 8005d44:	492d      	ldr	r1, [pc, #180]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	610b      	str	r3, [r1, #16]
 8005d4a:	e02d      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d115      	bne.n	8005d7e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d52:	4b2a      	ldr	r3, [pc, #168]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d58:	4013      	ands	r3, r2
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6892      	ldr	r2, [r2, #8]
 8005d5e:	0211      	lsls	r1, r2, #8
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6912      	ldr	r2, [r2, #16]
 8005d64:	0852      	lsrs	r2, r2, #1
 8005d66:	3a01      	subs	r2, #1
 8005d68:	0552      	lsls	r2, r2, #21
 8005d6a:	4311      	orrs	r1, r2
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6852      	ldr	r2, [r2, #4]
 8005d70:	3a01      	subs	r2, #1
 8005d72:	0112      	lsls	r2, r2, #4
 8005d74:	430a      	orrs	r2, r1
 8005d76:	4921      	ldr	r1, [pc, #132]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	610b      	str	r3, [r1, #16]
 8005d7c:	e014      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d7e:	4b1f      	ldr	r3, [pc, #124]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005d80:	691a      	ldr	r2, [r3, #16]
 8005d82:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d84:	4013      	ands	r3, r2
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6892      	ldr	r2, [r2, #8]
 8005d8a:	0211      	lsls	r1, r2, #8
 8005d8c:	687a      	ldr	r2, [r7, #4]
 8005d8e:	6952      	ldr	r2, [r2, #20]
 8005d90:	0852      	lsrs	r2, r2, #1
 8005d92:	3a01      	subs	r2, #1
 8005d94:	0652      	lsls	r2, r2, #25
 8005d96:	4311      	orrs	r1, r2
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	6852      	ldr	r2, [r2, #4]
 8005d9c:	3a01      	subs	r2, #1
 8005d9e:	0112      	lsls	r2, r2, #4
 8005da0:	430a      	orrs	r2, r1
 8005da2:	4916      	ldr	r1, [pc, #88]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005da4:	4313      	orrs	r3, r2
 8005da6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005da8:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a13      	ldr	r2, [pc, #76]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005db2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fc fb68 	bl	8002488 <HAL_GetTick>
 8005db8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dba:	e009      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005dbc:	f7fc fb64 	bl	8002488 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d902      	bls.n	8005dd0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	73fb      	strb	r3, [r7, #15]
          break;
 8005dce:	e005      	b.n	8005ddc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005dd0:	4b0a      	ldr	r3, [pc, #40]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d0ef      	beq.n	8005dbc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005de2:	4b06      	ldr	r3, [pc, #24]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005de4:	691a      	ldr	r2, [r3, #16]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	699b      	ldr	r3, [r3, #24]
 8005dea:	4904      	ldr	r1, [pc, #16]	; (8005dfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40021000 	.word	0x40021000
 8005e00:	07ff800f 	.word	0x07ff800f
 8005e04:	ff9f800f 	.word	0xff9f800f
 8005e08:	f9ff800f 	.word	0xf9ff800f

08005e0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b084      	sub	sp, #16
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005e1a:	4b72      	ldr	r3, [pc, #456]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	f003 0303 	and.w	r3, r3, #3
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00e      	beq.n	8005e44 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005e26:	4b6f      	ldr	r3, [pc, #444]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	f003 0203 	and.w	r2, r3, #3
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d103      	bne.n	8005e3e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
       ||
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d142      	bne.n	8005ec4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	73fb      	strb	r3, [r7, #15]
 8005e42:	e03f      	b.n	8005ec4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d018      	beq.n	8005e7e <RCCEx_PLLSAI2_Config+0x72>
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d825      	bhi.n	8005e9c <RCCEx_PLLSAI2_Config+0x90>
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d002      	beq.n	8005e5a <RCCEx_PLLSAI2_Config+0x4e>
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d009      	beq.n	8005e6c <RCCEx_PLLSAI2_Config+0x60>
 8005e58:	e020      	b.n	8005e9c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005e5a:	4b62      	ldr	r3, [pc, #392]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d11d      	bne.n	8005ea2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005e66:	2301      	movs	r3, #1
 8005e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e6a:	e01a      	b.n	8005ea2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005e6c:	4b5d      	ldr	r3, [pc, #372]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d116      	bne.n	8005ea6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e7c:	e013      	b.n	8005ea6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005e7e:	4b59      	ldr	r3, [pc, #356]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d10f      	bne.n	8005eaa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e8a:	4b56      	ldr	r3, [pc, #344]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d109      	bne.n	8005eaa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e9a:	e006      	b.n	8005eaa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e004      	b.n	8005eac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ea2:	bf00      	nop
 8005ea4:	e002      	b.n	8005eac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005eaa:	bf00      	nop
    }

    if(status == HAL_OK)
 8005eac:	7bfb      	ldrb	r3, [r7, #15]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d108      	bne.n	8005ec4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8005eb2:	4b4c      	ldr	r3, [pc, #304]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f023 0203 	bic.w	r2, r3, #3
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4949      	ldr	r1, [pc, #292]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005ec4:	7bfb      	ldrb	r3, [r7, #15]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f040 8086 	bne.w	8005fd8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005ecc:	4b45      	ldr	r3, [pc, #276]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a44      	ldr	r2, [pc, #272]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ed6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ed8:	f7fc fad6 	bl	8002488 <HAL_GetTick>
 8005edc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ede:	e009      	b.n	8005ef4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ee0:	f7fc fad2 	bl	8002488 <HAL_GetTick>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	d902      	bls.n	8005ef4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	73fb      	strb	r3, [r7, #15]
        break;
 8005ef2:	e005      	b.n	8005f00 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ef4:	4b3b      	ldr	r3, [pc, #236]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d1ef      	bne.n	8005ee0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005f00:	7bfb      	ldrb	r3, [r7, #15]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d168      	bne.n	8005fd8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d113      	bne.n	8005f34 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f0c:	4b35      	ldr	r3, [pc, #212]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f0e:	695a      	ldr	r2, [r3, #20]
 8005f10:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005f12:	4013      	ands	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	6892      	ldr	r2, [r2, #8]
 8005f18:	0211      	lsls	r1, r2, #8
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	68d2      	ldr	r2, [r2, #12]
 8005f1e:	06d2      	lsls	r2, r2, #27
 8005f20:	4311      	orrs	r1, r2
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	6852      	ldr	r2, [r2, #4]
 8005f26:	3a01      	subs	r2, #1
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	492d      	ldr	r1, [pc, #180]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	614b      	str	r3, [r1, #20]
 8005f32:	e02d      	b.n	8005f90 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d115      	bne.n	8005f66 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f3a:	4b2a      	ldr	r3, [pc, #168]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f3c:	695a      	ldr	r2, [r3, #20]
 8005f3e:	4b2b      	ldr	r3, [pc, #172]	; (8005fec <RCCEx_PLLSAI2_Config+0x1e0>)
 8005f40:	4013      	ands	r3, r2
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	6892      	ldr	r2, [r2, #8]
 8005f46:	0211      	lsls	r1, r2, #8
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	6912      	ldr	r2, [r2, #16]
 8005f4c:	0852      	lsrs	r2, r2, #1
 8005f4e:	3a01      	subs	r2, #1
 8005f50:	0552      	lsls	r2, r2, #21
 8005f52:	4311      	orrs	r1, r2
 8005f54:	687a      	ldr	r2, [r7, #4]
 8005f56:	6852      	ldr	r2, [r2, #4]
 8005f58:	3a01      	subs	r2, #1
 8005f5a:	0112      	lsls	r2, r2, #4
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	4921      	ldr	r1, [pc, #132]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	614b      	str	r3, [r1, #20]
 8005f64:	e014      	b.n	8005f90 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005f66:	4b1f      	ldr	r3, [pc, #124]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f68:	695a      	ldr	r2, [r3, #20]
 8005f6a:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	6892      	ldr	r2, [r2, #8]
 8005f72:	0211      	lsls	r1, r2, #8
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6952      	ldr	r2, [r2, #20]
 8005f78:	0852      	lsrs	r2, r2, #1
 8005f7a:	3a01      	subs	r2, #1
 8005f7c:	0652      	lsls	r2, r2, #25
 8005f7e:	4311      	orrs	r1, r2
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	6852      	ldr	r2, [r2, #4]
 8005f84:	3a01      	subs	r2, #1
 8005f86:	0112      	lsls	r2, r2, #4
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	4916      	ldr	r1, [pc, #88]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005f90:	4b14      	ldr	r3, [pc, #80]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005f96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f9c:	f7fc fa74 	bl	8002488 <HAL_GetTick>
 8005fa0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fa2:	e009      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005fa4:	f7fc fa70 	bl	8002488 <HAL_GetTick>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	1ad3      	subs	r3, r2, r3
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d902      	bls.n	8005fb8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	73fb      	strb	r3, [r7, #15]
          break;
 8005fb6:	e005      	b.n	8005fc4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005fb8:	4b0a      	ldr	r3, [pc, #40]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d0ef      	beq.n	8005fa4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005fca:	4b06      	ldr	r3, [pc, #24]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	4904      	ldr	r1, [pc, #16]	; (8005fe4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	40021000 	.word	0x40021000
 8005fe8:	07ff800f 	.word	0x07ff800f
 8005fec:	ff9f800f 	.word	0xff9f800f
 8005ff0:	f9ff800f 	.word	0xf9ff800f

08005ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e095      	b.n	8006132 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	2b00      	cmp	r3, #0
 800600c:	d108      	bne.n	8006020 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006016:	d009      	beq.n	800602c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	61da      	str	r2, [r3, #28]
 800601e:	e005      	b.n	800602c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2200      	movs	r2, #0
 8006024:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006038:	b2db      	uxtb	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d106      	bne.n	800604c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f7fb febe 	bl	8001dc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2202      	movs	r2, #2
 8006050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006062:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800606c:	d902      	bls.n	8006074 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e002      	b.n	800607a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006078:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006082:	d007      	beq.n	8006094 <HAL_SPI_Init+0xa0>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800608c:	d002      	beq.n	8006094 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2200      	movs	r2, #0
 8006092:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	431a      	orrs	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a1b      	ldr	r3, [r3, #32]
 80060d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d6:	ea42 0103 	orr.w	r1, r2, r3
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060de:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	0c1b      	lsrs	r3, r3, #16
 80060f0:	f003 0204 	and.w	r2, r3, #4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f8:	f003 0310 	and.w	r3, r3, #16
 80060fc:	431a      	orrs	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006102:	f003 0308 	and.w	r3, r3, #8
 8006106:	431a      	orrs	r2, r3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006110:	ea42 0103 	orr.w	r1, r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2200      	movs	r2, #0
 8006126:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d101      	bne.n	800614c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006148:	2301      	movs	r3, #1
 800614a:	e042      	b.n	80061d2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fb fea8 	bl	8001eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2224      	movs	r2, #36	; 0x24
 8006168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0201 	bic.w	r2, r2, #1
 800617a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	2b00      	cmp	r3, #0
 8006182:	d002      	beq.n	800618a <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fb25 	bl	80067d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f826 	bl	80061dc <UART_SetConfig>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d101      	bne.n	800619a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e01b      	b.n	80061d2 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	685a      	ldr	r2, [r3, #4]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061a8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689a      	ldr	r2, [r3, #8]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061b8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0201 	orr.w	r2, r2, #1
 80061c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fba4 	bl	8006918 <UART_CheckIdleState>
 80061d0:	4603      	mov	r3, r0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3708      	adds	r7, #8
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061e0:	b08c      	sub	sp, #48	; 0x30
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	689a      	ldr	r2, [r3, #8]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	431a      	orrs	r2, r3
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	695b      	ldr	r3, [r3, #20]
 80061fa:	431a      	orrs	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	69db      	ldr	r3, [r3, #28]
 8006200:	4313      	orrs	r3, r2
 8006202:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	4baa      	ldr	r3, [pc, #680]	; (80064b4 <UART_SetConfig+0x2d8>)
 800620c:	4013      	ands	r3, r2
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006214:	430b      	orrs	r3, r1
 8006216:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	68da      	ldr	r2, [r3, #12]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	699b      	ldr	r3, [r3, #24]
 8006232:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a9f      	ldr	r2, [pc, #636]	; (80064b8 <UART_SetConfig+0x2dc>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d004      	beq.n	8006248 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006244:	4313      	orrs	r3, r2
 8006246:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006252:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	6812      	ldr	r2, [r2, #0]
 800625a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800625c:	430b      	orrs	r3, r1
 800625e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	f023 010f 	bic.w	r1, r3, #15
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	430a      	orrs	r2, r1
 8006274:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a90      	ldr	r2, [pc, #576]	; (80064bc <UART_SetConfig+0x2e0>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d125      	bne.n	80062cc <UART_SetConfig+0xf0>
 8006280:	4b8f      	ldr	r3, [pc, #572]	; (80064c0 <UART_SetConfig+0x2e4>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d81a      	bhi.n	80062c4 <UART_SetConfig+0xe8>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0xb8>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062a5 	.word	0x080062a5
 8006298:	080062b5 	.word	0x080062b5
 800629c:	080062ad 	.word	0x080062ad
 80062a0:	080062bd 	.word	0x080062bd
 80062a4:	2301      	movs	r3, #1
 80062a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062aa:	e116      	b.n	80064da <UART_SetConfig+0x2fe>
 80062ac:	2302      	movs	r3, #2
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062b2:	e112      	b.n	80064da <UART_SetConfig+0x2fe>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ba:	e10e      	b.n	80064da <UART_SetConfig+0x2fe>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c2:	e10a      	b.n	80064da <UART_SetConfig+0x2fe>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ca:	e106      	b.n	80064da <UART_SetConfig+0x2fe>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a7c      	ldr	r2, [pc, #496]	; (80064c4 <UART_SetConfig+0x2e8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d138      	bne.n	8006348 <UART_SetConfig+0x16c>
 80062d6:	4b7a      	ldr	r3, [pc, #488]	; (80064c0 <UART_SetConfig+0x2e4>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062dc:	f003 030c 	and.w	r3, r3, #12
 80062e0:	2b0c      	cmp	r3, #12
 80062e2:	d82d      	bhi.n	8006340 <UART_SetConfig+0x164>
 80062e4:	a201      	add	r2, pc, #4	; (adr r2, 80062ec <UART_SetConfig+0x110>)
 80062e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ea:	bf00      	nop
 80062ec:	08006321 	.word	0x08006321
 80062f0:	08006341 	.word	0x08006341
 80062f4:	08006341 	.word	0x08006341
 80062f8:	08006341 	.word	0x08006341
 80062fc:	08006331 	.word	0x08006331
 8006300:	08006341 	.word	0x08006341
 8006304:	08006341 	.word	0x08006341
 8006308:	08006341 	.word	0x08006341
 800630c:	08006329 	.word	0x08006329
 8006310:	08006341 	.word	0x08006341
 8006314:	08006341 	.word	0x08006341
 8006318:	08006341 	.word	0x08006341
 800631c:	08006339 	.word	0x08006339
 8006320:	2300      	movs	r3, #0
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006326:	e0d8      	b.n	80064da <UART_SetConfig+0x2fe>
 8006328:	2302      	movs	r3, #2
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632e:	e0d4      	b.n	80064da <UART_SetConfig+0x2fe>
 8006330:	2304      	movs	r3, #4
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006336:	e0d0      	b.n	80064da <UART_SetConfig+0x2fe>
 8006338:	2308      	movs	r3, #8
 800633a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633e:	e0cc      	b.n	80064da <UART_SetConfig+0x2fe>
 8006340:	2310      	movs	r3, #16
 8006342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006346:	e0c8      	b.n	80064da <UART_SetConfig+0x2fe>
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a5e      	ldr	r2, [pc, #376]	; (80064c8 <UART_SetConfig+0x2ec>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d125      	bne.n	800639e <UART_SetConfig+0x1c2>
 8006352:	4b5b      	ldr	r3, [pc, #364]	; (80064c0 <UART_SetConfig+0x2e4>)
 8006354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006358:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800635c:	2b30      	cmp	r3, #48	; 0x30
 800635e:	d016      	beq.n	800638e <UART_SetConfig+0x1b2>
 8006360:	2b30      	cmp	r3, #48	; 0x30
 8006362:	d818      	bhi.n	8006396 <UART_SetConfig+0x1ba>
 8006364:	2b20      	cmp	r3, #32
 8006366:	d00a      	beq.n	800637e <UART_SetConfig+0x1a2>
 8006368:	2b20      	cmp	r3, #32
 800636a:	d814      	bhi.n	8006396 <UART_SetConfig+0x1ba>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d002      	beq.n	8006376 <UART_SetConfig+0x19a>
 8006370:	2b10      	cmp	r3, #16
 8006372:	d008      	beq.n	8006386 <UART_SetConfig+0x1aa>
 8006374:	e00f      	b.n	8006396 <UART_SetConfig+0x1ba>
 8006376:	2300      	movs	r3, #0
 8006378:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637c:	e0ad      	b.n	80064da <UART_SetConfig+0x2fe>
 800637e:	2302      	movs	r3, #2
 8006380:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006384:	e0a9      	b.n	80064da <UART_SetConfig+0x2fe>
 8006386:	2304      	movs	r3, #4
 8006388:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638c:	e0a5      	b.n	80064da <UART_SetConfig+0x2fe>
 800638e:	2308      	movs	r3, #8
 8006390:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006394:	e0a1      	b.n	80064da <UART_SetConfig+0x2fe>
 8006396:	2310      	movs	r3, #16
 8006398:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639c:	e09d      	b.n	80064da <UART_SetConfig+0x2fe>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a4a      	ldr	r2, [pc, #296]	; (80064cc <UART_SetConfig+0x2f0>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d125      	bne.n	80063f4 <UART_SetConfig+0x218>
 80063a8:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <UART_SetConfig+0x2e4>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063b2:	2bc0      	cmp	r3, #192	; 0xc0
 80063b4:	d016      	beq.n	80063e4 <UART_SetConfig+0x208>
 80063b6:	2bc0      	cmp	r3, #192	; 0xc0
 80063b8:	d818      	bhi.n	80063ec <UART_SetConfig+0x210>
 80063ba:	2b80      	cmp	r3, #128	; 0x80
 80063bc:	d00a      	beq.n	80063d4 <UART_SetConfig+0x1f8>
 80063be:	2b80      	cmp	r3, #128	; 0x80
 80063c0:	d814      	bhi.n	80063ec <UART_SetConfig+0x210>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <UART_SetConfig+0x1f0>
 80063c6:	2b40      	cmp	r3, #64	; 0x40
 80063c8:	d008      	beq.n	80063dc <UART_SetConfig+0x200>
 80063ca:	e00f      	b.n	80063ec <UART_SetConfig+0x210>
 80063cc:	2300      	movs	r3, #0
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e082      	b.n	80064da <UART_SetConfig+0x2fe>
 80063d4:	2302      	movs	r3, #2
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e07e      	b.n	80064da <UART_SetConfig+0x2fe>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e07a      	b.n	80064da <UART_SetConfig+0x2fe>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e076      	b.n	80064da <UART_SetConfig+0x2fe>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e072      	b.n	80064da <UART_SetConfig+0x2fe>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a35      	ldr	r2, [pc, #212]	; (80064d0 <UART_SetConfig+0x2f4>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d12a      	bne.n	8006454 <UART_SetConfig+0x278>
 80063fe:	4b30      	ldr	r3, [pc, #192]	; (80064c0 <UART_SetConfig+0x2e4>)
 8006400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006408:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800640c:	d01a      	beq.n	8006444 <UART_SetConfig+0x268>
 800640e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006412:	d81b      	bhi.n	800644c <UART_SetConfig+0x270>
 8006414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006418:	d00c      	beq.n	8006434 <UART_SetConfig+0x258>
 800641a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800641e:	d815      	bhi.n	800644c <UART_SetConfig+0x270>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d003      	beq.n	800642c <UART_SetConfig+0x250>
 8006424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006428:	d008      	beq.n	800643c <UART_SetConfig+0x260>
 800642a:	e00f      	b.n	800644c <UART_SetConfig+0x270>
 800642c:	2300      	movs	r3, #0
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006432:	e052      	b.n	80064da <UART_SetConfig+0x2fe>
 8006434:	2302      	movs	r3, #2
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800643a:	e04e      	b.n	80064da <UART_SetConfig+0x2fe>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006442:	e04a      	b.n	80064da <UART_SetConfig+0x2fe>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644a:	e046      	b.n	80064da <UART_SetConfig+0x2fe>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006452:	e042      	b.n	80064da <UART_SetConfig+0x2fe>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a17      	ldr	r2, [pc, #92]	; (80064b8 <UART_SetConfig+0x2dc>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d13a      	bne.n	80064d4 <UART_SetConfig+0x2f8>
 800645e:	4b18      	ldr	r3, [pc, #96]	; (80064c0 <UART_SetConfig+0x2e4>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006468:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800646c:	d01a      	beq.n	80064a4 <UART_SetConfig+0x2c8>
 800646e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006472:	d81b      	bhi.n	80064ac <UART_SetConfig+0x2d0>
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006478:	d00c      	beq.n	8006494 <UART_SetConfig+0x2b8>
 800647a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647e:	d815      	bhi.n	80064ac <UART_SetConfig+0x2d0>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <UART_SetConfig+0x2b0>
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006488:	d008      	beq.n	800649c <UART_SetConfig+0x2c0>
 800648a:	e00f      	b.n	80064ac <UART_SetConfig+0x2d0>
 800648c:	2300      	movs	r3, #0
 800648e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006492:	e022      	b.n	80064da <UART_SetConfig+0x2fe>
 8006494:	2302      	movs	r3, #2
 8006496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800649a:	e01e      	b.n	80064da <UART_SetConfig+0x2fe>
 800649c:	2304      	movs	r3, #4
 800649e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064a2:	e01a      	b.n	80064da <UART_SetConfig+0x2fe>
 80064a4:	2308      	movs	r3, #8
 80064a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064aa:	e016      	b.n	80064da <UART_SetConfig+0x2fe>
 80064ac:	2310      	movs	r3, #16
 80064ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b2:	e012      	b.n	80064da <UART_SetConfig+0x2fe>
 80064b4:	cfff69f3 	.word	0xcfff69f3
 80064b8:	40008000 	.word	0x40008000
 80064bc:	40013800 	.word	0x40013800
 80064c0:	40021000 	.word	0x40021000
 80064c4:	40004400 	.word	0x40004400
 80064c8:	40004800 	.word	0x40004800
 80064cc:	40004c00 	.word	0x40004c00
 80064d0:	40005000 	.word	0x40005000
 80064d4:	2310      	movs	r3, #16
 80064d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4aae      	ldr	r2, [pc, #696]	; (8006798 <UART_SetConfig+0x5bc>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	f040 8097 	bne.w	8006614 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064ea:	2b08      	cmp	r3, #8
 80064ec:	d823      	bhi.n	8006536 <UART_SetConfig+0x35a>
 80064ee:	a201      	add	r2, pc, #4	; (adr r2, 80064f4 <UART_SetConfig+0x318>)
 80064f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f4:	08006519 	.word	0x08006519
 80064f8:	08006537 	.word	0x08006537
 80064fc:	08006521 	.word	0x08006521
 8006500:	08006537 	.word	0x08006537
 8006504:	08006527 	.word	0x08006527
 8006508:	08006537 	.word	0x08006537
 800650c:	08006537 	.word	0x08006537
 8006510:	08006537 	.word	0x08006537
 8006514:	0800652f 	.word	0x0800652f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006518:	f7fe ff58 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 800651c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800651e:	e010      	b.n	8006542 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006520:	4b9e      	ldr	r3, [pc, #632]	; (800679c <UART_SetConfig+0x5c0>)
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006524:	e00d      	b.n	8006542 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006526:	f7fe feb9 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800652a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800652c:	e009      	b.n	8006542 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006534:	e005      	b.n	8006542 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006536:	2300      	movs	r3, #0
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006540:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 8130 	beq.w	80067aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654e:	4a94      	ldr	r2, [pc, #592]	; (80067a0 <UART_SetConfig+0x5c4>)
 8006550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006554:	461a      	mov	r2, r3
 8006556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006558:	fbb3 f3f2 	udiv	r3, r3, r2
 800655c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	4413      	add	r3, r2
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	429a      	cmp	r2, r3
 800656c:	d305      	bcc.n	800657a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	429a      	cmp	r2, r3
 8006578:	d903      	bls.n	8006582 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006580:	e113      	b.n	80067aa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	2200      	movs	r2, #0
 8006586:	60bb      	str	r3, [r7, #8]
 8006588:	60fa      	str	r2, [r7, #12]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658e:	4a84      	ldr	r2, [pc, #528]	; (80067a0 <UART_SetConfig+0x5c4>)
 8006590:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006594:	b29b      	uxth	r3, r3
 8006596:	2200      	movs	r2, #0
 8006598:	603b      	str	r3, [r7, #0]
 800659a:	607a      	str	r2, [r7, #4]
 800659c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065a0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065a4:	f7fa fb48 	bl	8000c38 <__aeabi_uldivmod>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	f04f 0200 	mov.w	r2, #0
 80065b4:	f04f 0300 	mov.w	r3, #0
 80065b8:	020b      	lsls	r3, r1, #8
 80065ba:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065be:	0202      	lsls	r2, r0, #8
 80065c0:	6979      	ldr	r1, [r7, #20]
 80065c2:	6849      	ldr	r1, [r1, #4]
 80065c4:	0849      	lsrs	r1, r1, #1
 80065c6:	2000      	movs	r0, #0
 80065c8:	460c      	mov	r4, r1
 80065ca:	4605      	mov	r5, r0
 80065cc:	eb12 0804 	adds.w	r8, r2, r4
 80065d0:	eb43 0905 	adc.w	r9, r3, r5
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	469a      	mov	sl, r3
 80065dc:	4693      	mov	fp, r2
 80065de:	4652      	mov	r2, sl
 80065e0:	465b      	mov	r3, fp
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7fa fb27 	bl	8000c38 <__aeabi_uldivmod>
 80065ea:	4602      	mov	r2, r0
 80065ec:	460b      	mov	r3, r1
 80065ee:	4613      	mov	r3, r2
 80065f0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065f8:	d308      	bcc.n	800660c <UART_SetConfig+0x430>
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006600:	d204      	bcs.n	800660c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	60da      	str	r2, [r3, #12]
 800660a:	e0ce      	b.n	80067aa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006612:	e0ca      	b.n	80067aa <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	69db      	ldr	r3, [r3, #28]
 8006618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800661c:	d166      	bne.n	80066ec <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800661e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006622:	2b08      	cmp	r3, #8
 8006624:	d827      	bhi.n	8006676 <UART_SetConfig+0x49a>
 8006626:	a201      	add	r2, pc, #4	; (adr r2, 800662c <UART_SetConfig+0x450>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	08006651 	.word	0x08006651
 8006630:	08006659 	.word	0x08006659
 8006634:	08006661 	.word	0x08006661
 8006638:	08006677 	.word	0x08006677
 800663c:	08006667 	.word	0x08006667
 8006640:	08006677 	.word	0x08006677
 8006644:	08006677 	.word	0x08006677
 8006648:	08006677 	.word	0x08006677
 800664c:	0800666f 	.word	0x0800666f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006650:	f7fe febc 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8006654:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006656:	e014      	b.n	8006682 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006658:	f7fe fece 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 800665c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800665e:	e010      	b.n	8006682 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006660:	4b4e      	ldr	r3, [pc, #312]	; (800679c <UART_SetConfig+0x5c0>)
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006664:	e00d      	b.n	8006682 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006666:	f7fe fe19 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800666a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800666c:	e009      	b.n	8006682 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800666e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006672:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006674:	e005      	b.n	8006682 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006676:	2300      	movs	r3, #0
 8006678:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006680:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8090 	beq.w	80067aa <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	4a44      	ldr	r2, [pc, #272]	; (80067a0 <UART_SetConfig+0x5c4>)
 8006690:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006694:	461a      	mov	r2, r3
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	fbb3 f3f2 	udiv	r3, r3, r2
 800669c:	005a      	lsls	r2, r3, #1
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	085b      	lsrs	r3, r3, #1
 80066a4:	441a      	add	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066ae:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066b0:	6a3b      	ldr	r3, [r7, #32]
 80066b2:	2b0f      	cmp	r3, #15
 80066b4:	d916      	bls.n	80066e4 <UART_SetConfig+0x508>
 80066b6:	6a3b      	ldr	r3, [r7, #32]
 80066b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066bc:	d212      	bcs.n	80066e4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066be:	6a3b      	ldr	r3, [r7, #32]
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	f023 030f 	bic.w	r3, r3, #15
 80066c6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	085b      	lsrs	r3, r3, #1
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	f003 0307 	and.w	r3, r3, #7
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	8bfb      	ldrh	r3, [r7, #30]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066da:	697b      	ldr	r3, [r7, #20]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	8bfa      	ldrh	r2, [r7, #30]
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	e062      	b.n	80067aa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066ea:	e05e      	b.n	80067aa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066f0:	2b08      	cmp	r3, #8
 80066f2:	d828      	bhi.n	8006746 <UART_SetConfig+0x56a>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <UART_SetConfig+0x520>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006721 	.word	0x08006721
 8006700:	08006729 	.word	0x08006729
 8006704:	08006731 	.word	0x08006731
 8006708:	08006747 	.word	0x08006747
 800670c:	08006737 	.word	0x08006737
 8006710:	08006747 	.word	0x08006747
 8006714:	08006747 	.word	0x08006747
 8006718:	08006747 	.word	0x08006747
 800671c:	0800673f 	.word	0x0800673f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006720:	f7fe fe54 	bl	80053cc <HAL_RCC_GetPCLK1Freq>
 8006724:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006726:	e014      	b.n	8006752 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006728:	f7fe fe66 	bl	80053f8 <HAL_RCC_GetPCLK2Freq>
 800672c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800672e:	e010      	b.n	8006752 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006730:	4b1a      	ldr	r3, [pc, #104]	; (800679c <UART_SetConfig+0x5c0>)
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006734:	e00d      	b.n	8006752 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006736:	f7fe fdb1 	bl	800529c <HAL_RCC_GetSysClockFreq>
 800673a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800673c:	e009      	b.n	8006752 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800673e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006744:	e005      	b.n	8006752 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006750:	bf00      	nop
    }

    if (pclk != 0U)
 8006752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006754:	2b00      	cmp	r3, #0
 8006756:	d028      	beq.n	80067aa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800675c:	4a10      	ldr	r2, [pc, #64]	; (80067a0 <UART_SetConfig+0x5c4>)
 800675e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006762:	461a      	mov	r2, r3
 8006764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006766:	fbb3 f2f2 	udiv	r2, r3, r2
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	085b      	lsrs	r3, r3, #1
 8006770:	441a      	add	r2, r3
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	fbb2 f3f3 	udiv	r3, r2, r3
 800677a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800677c:	6a3b      	ldr	r3, [r7, #32]
 800677e:	2b0f      	cmp	r3, #15
 8006780:	d910      	bls.n	80067a4 <UART_SetConfig+0x5c8>
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006788:	d20c      	bcs.n	80067a4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	b29a      	uxth	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	e009      	b.n	80067aa <UART_SetConfig+0x5ce>
 8006796:	bf00      	nop
 8006798:	40008000 	.word	0x40008000
 800679c:	00f42400 	.word	0x00f42400
 80067a0:	080099a4 	.word	0x080099a4
      }
      else
      {
        ret = HAL_ERROR;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	2201      	movs	r2, #1
 80067ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2200      	movs	r2, #0
 80067be:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	2200      	movs	r2, #0
 80067c4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067c6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3730      	adds	r7, #48	; 0x30
 80067ce:	46bd      	mov	sp, r7
 80067d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080067d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00a      	beq.n	80067fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	430a      	orrs	r2, r1
 80067fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006802:	f003 0301 	and.w	r3, r3, #1
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00a      	beq.n	8006820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	430a      	orrs	r2, r1
 800681e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006824:	f003 0302 	and.w	r3, r3, #2
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00a      	beq.n	8006842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006846:	f003 0304 	and.w	r3, r3, #4
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	430a      	orrs	r2, r1
 8006862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f003 0310 	and.w	r3, r3, #16
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01a      	beq.n	80068ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068d2:	d10a      	bne.n	80068ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b098      	sub	sp, #96	; 0x60
 800691c:	af02      	add	r7, sp, #8
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006928:	f7fb fdae 	bl	8002488 <HAL_GetTick>
 800692c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b08      	cmp	r3, #8
 800693a:	d12f      	bne.n	800699c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800693c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006944:	2200      	movs	r2, #0
 8006946:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 f88e 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d022      	beq.n	800699c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006966:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800696a:	653b      	str	r3, [r7, #80]	; 0x50
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	461a      	mov	r2, r3
 8006972:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006974:	647b      	str	r3, [r7, #68]	; 0x44
 8006976:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800697a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e6      	bne.n	8006956 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2220      	movs	r2, #32
 800698c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	e063      	b.n	8006a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d149      	bne.n	8006a3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b2:	2200      	movs	r2, #0
 80069b4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f857 	bl	8006a6c <UART_WaitOnFlagUntilTimeout>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d03c      	beq.n	8006a3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	e853 3f00 	ldrex	r3, [r3]
 80069d0:	623b      	str	r3, [r7, #32]
   return(result);
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069e2:	633b      	str	r3, [r7, #48]	; 0x30
 80069e4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069ea:	e841 2300 	strex	r3, r2, [r1]
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1e6      	bne.n	80069c4 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3308      	adds	r3, #8
 80069fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a16:	61fa      	str	r2, [r7, #28]
 8006a18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	69b9      	ldr	r1, [r7, #24]
 8006a1c:	69fa      	ldr	r2, [r7, #28]
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	617b      	str	r3, [r7, #20]
   return(result);
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e5      	bne.n	80069f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2220      	movs	r2, #32
 8006a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e012      	b.n	8006a64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2220      	movs	r2, #32
 8006a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2220      	movs	r2, #32
 8006a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2200      	movs	r2, #0
 8006a52:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a62:	2300      	movs	r3, #0
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3758      	adds	r7, #88	; 0x58
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	603b      	str	r3, [r7, #0]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a7c:	e049      	b.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a84:	d045      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a86:	f7fb fcff 	bl	8002488 <HAL_GetTick>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	1ad3      	subs	r3, r2, r3
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d302      	bcc.n	8006a9c <UART_WaitOnFlagUntilTimeout+0x30>
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d101      	bne.n	8006aa0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e048      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0304 	and.w	r3, r3, #4
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d031      	beq.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b08      	cmp	r3, #8
 8006aba:	d110      	bne.n	8006ade <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2208      	movs	r2, #8
 8006ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f838 	bl	8006b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2208      	movs	r2, #8
 8006ace:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e029      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69db      	ldr	r3, [r3, #28]
 8006ae4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ae8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006aec:	d111      	bne.n	8006b12 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 f81e 	bl	8006b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2220      	movs	r2, #32
 8006b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e00f      	b.n	8006b32 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69da      	ldr	r2, [r3, #28]
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	68ba      	ldr	r2, [r7, #8]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	bf0c      	ite	eq
 8006b22:	2301      	moveq	r3, #1
 8006b24:	2300      	movne	r3, #0
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	79fb      	ldrb	r3, [r7, #7]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	d0a6      	beq.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b30:	2300      	movs	r3, #0
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3710      	adds	r7, #16
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b095      	sub	sp, #84	; 0x54
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b60:	643b      	str	r3, [r7, #64]	; 0x40
 8006b62:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e6      	bne.n	8006b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	3308      	adds	r3, #8
 8006b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	6a3b      	ldr	r3, [r7, #32]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba0:	e841 2300 	strex	r3, r2, [r1]
 8006ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d1e3      	bne.n	8006b74 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d118      	bne.n	8006be6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	e853 3f00 	ldrex	r3, [r3]
 8006bc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	f023 0310 	bic.w	r3, r3, #16
 8006bc8:	647b      	str	r3, [r7, #68]	; 0x44
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd6:	6979      	ldr	r1, [r7, #20]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	e841 2300 	strex	r3, r2, [r1]
 8006bde:	613b      	str	r3, [r7, #16]
   return(result);
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d1e6      	bne.n	8006bb4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2220      	movs	r2, #32
 8006bea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006bfa:	bf00      	nop
 8006bfc:	3754      	adds	r7, #84	; 0x54
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_UARTEx_DisableFifoMode+0x16>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e027      	b.n	8006c6c <HAL_UARTEx_DisableFifoMode+0x66>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2224      	movs	r2, #36	; 0x24
 8006c28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f022 0201 	bic.w	r2, r2, #1
 8006c42:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c4a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68fa      	ldr	r2, [r7, #12]
 8006c58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
 8006c80:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	e02d      	b.n	8006cec <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2201      	movs	r2, #1
 8006c94:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2224      	movs	r2, #36	; 0x24
 8006c9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	681a      	ldr	r2, [r3, #0]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f022 0201 	bic.w	r2, r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	430a      	orrs	r2, r1
 8006cca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f84f 	bl	8006d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2220      	movs	r2, #32
 8006cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006cea:	2300      	movs	r3, #0
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d101      	bne.n	8006d0c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	e02d      	b.n	8006d68 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2224      	movs	r2, #36	; 0x24
 8006d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f022 0201 	bic.w	r2, r2, #1
 8006d32:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	689b      	ldr	r3, [r3, #8]
 8006d3a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f811 	bl	8006d70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2220      	movs	r2, #32
 8006d5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d108      	bne.n	8006d92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d90:	e031      	b.n	8006df6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d92:	2308      	movs	r3, #8
 8006d94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d96:	2308      	movs	r3, #8
 8006d98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	0e5b      	lsrs	r3, r3, #25
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	f003 0307 	and.w	r3, r3, #7
 8006da8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	0f5b      	lsrs	r3, r3, #29
 8006db2:	b2db      	uxtb	r3, r3
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dba:	7bbb      	ldrb	r3, [r7, #14]
 8006dbc:	7b3a      	ldrb	r2, [r7, #12]
 8006dbe:	4911      	ldr	r1, [pc, #68]	; (8006e04 <UARTEx_SetNbDataToProcess+0x94>)
 8006dc0:	5c8a      	ldrb	r2, [r1, r2]
 8006dc2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dc6:	7b3a      	ldrb	r2, [r7, #12]
 8006dc8:	490f      	ldr	r1, [pc, #60]	; (8006e08 <UARTEx_SetNbDataToProcess+0x98>)
 8006dca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dcc:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd0:	b29a      	uxth	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dd8:	7bfb      	ldrb	r3, [r7, #15]
 8006dda:	7b7a      	ldrb	r2, [r7, #13]
 8006ddc:	4909      	ldr	r1, [pc, #36]	; (8006e04 <UARTEx_SetNbDataToProcess+0x94>)
 8006dde:	5c8a      	ldrb	r2, [r1, r2]
 8006de0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006de4:	7b7a      	ldrb	r2, [r7, #13]
 8006de6:	4908      	ldr	r1, [pc, #32]	; (8006e08 <UARTEx_SetNbDataToProcess+0x98>)
 8006de8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006dea:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006df6:	bf00      	nop
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop
 8006e04:	080099bc 	.word	0x080099bc
 8006e08:	080099c4 	.word	0x080099c4

08006e0c <__cvt>:
 8006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e10:	ec55 4b10 	vmov	r4, r5, d0
 8006e14:	2d00      	cmp	r5, #0
 8006e16:	460e      	mov	r6, r1
 8006e18:	4619      	mov	r1, r3
 8006e1a:	462b      	mov	r3, r5
 8006e1c:	bfbb      	ittet	lt
 8006e1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006e22:	461d      	movlt	r5, r3
 8006e24:	2300      	movge	r3, #0
 8006e26:	232d      	movlt	r3, #45	; 0x2d
 8006e28:	700b      	strb	r3, [r1, #0]
 8006e2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006e30:	4691      	mov	r9, r2
 8006e32:	f023 0820 	bic.w	r8, r3, #32
 8006e36:	bfbc      	itt	lt
 8006e38:	4622      	movlt	r2, r4
 8006e3a:	4614      	movlt	r4, r2
 8006e3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e40:	d005      	beq.n	8006e4e <__cvt+0x42>
 8006e42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006e46:	d100      	bne.n	8006e4a <__cvt+0x3e>
 8006e48:	3601      	adds	r6, #1
 8006e4a:	2102      	movs	r1, #2
 8006e4c:	e000      	b.n	8006e50 <__cvt+0x44>
 8006e4e:	2103      	movs	r1, #3
 8006e50:	ab03      	add	r3, sp, #12
 8006e52:	9301      	str	r3, [sp, #4]
 8006e54:	ab02      	add	r3, sp, #8
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	ec45 4b10 	vmov	d0, r4, r5
 8006e5c:	4653      	mov	r3, sl
 8006e5e:	4632      	mov	r2, r6
 8006e60:	f000 fdce 	bl	8007a00 <_dtoa_r>
 8006e64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006e68:	4607      	mov	r7, r0
 8006e6a:	d102      	bne.n	8006e72 <__cvt+0x66>
 8006e6c:	f019 0f01 	tst.w	r9, #1
 8006e70:	d022      	beq.n	8006eb8 <__cvt+0xac>
 8006e72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006e76:	eb07 0906 	add.w	r9, r7, r6
 8006e7a:	d110      	bne.n	8006e9e <__cvt+0x92>
 8006e7c:	783b      	ldrb	r3, [r7, #0]
 8006e7e:	2b30      	cmp	r3, #48	; 0x30
 8006e80:	d10a      	bne.n	8006e98 <__cvt+0x8c>
 8006e82:	2200      	movs	r2, #0
 8006e84:	2300      	movs	r3, #0
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f7f9 fe65 	bl	8000b58 <__aeabi_dcmpeq>
 8006e8e:	b918      	cbnz	r0, 8006e98 <__cvt+0x8c>
 8006e90:	f1c6 0601 	rsb	r6, r6, #1
 8006e94:	f8ca 6000 	str.w	r6, [sl]
 8006e98:	f8da 3000 	ldr.w	r3, [sl]
 8006e9c:	4499      	add	r9, r3
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	4620      	mov	r0, r4
 8006ea4:	4629      	mov	r1, r5
 8006ea6:	f7f9 fe57 	bl	8000b58 <__aeabi_dcmpeq>
 8006eaa:	b108      	cbz	r0, 8006eb0 <__cvt+0xa4>
 8006eac:	f8cd 900c 	str.w	r9, [sp, #12]
 8006eb0:	2230      	movs	r2, #48	; 0x30
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	454b      	cmp	r3, r9
 8006eb6:	d307      	bcc.n	8006ec8 <__cvt+0xbc>
 8006eb8:	9b03      	ldr	r3, [sp, #12]
 8006eba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ebc:	1bdb      	subs	r3, r3, r7
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	6013      	str	r3, [r2, #0]
 8006ec2:	b004      	add	sp, #16
 8006ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec8:	1c59      	adds	r1, r3, #1
 8006eca:	9103      	str	r1, [sp, #12]
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	e7f0      	b.n	8006eb2 <__cvt+0xa6>

08006ed0 <__exponent>:
 8006ed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	bfb8      	it	lt
 8006ed8:	4249      	neglt	r1, r1
 8006eda:	f803 2b02 	strb.w	r2, [r3], #2
 8006ede:	bfb4      	ite	lt
 8006ee0:	222d      	movlt	r2, #45	; 0x2d
 8006ee2:	222b      	movge	r2, #43	; 0x2b
 8006ee4:	2909      	cmp	r1, #9
 8006ee6:	7042      	strb	r2, [r0, #1]
 8006ee8:	dd2a      	ble.n	8006f40 <__exponent+0x70>
 8006eea:	f10d 0207 	add.w	r2, sp, #7
 8006eee:	4617      	mov	r7, r2
 8006ef0:	260a      	movs	r6, #10
 8006ef2:	4694      	mov	ip, r2
 8006ef4:	fb91 f5f6 	sdiv	r5, r1, r6
 8006ef8:	fb06 1415 	mls	r4, r6, r5, r1
 8006efc:	3430      	adds	r4, #48	; 0x30
 8006efe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006f02:	460c      	mov	r4, r1
 8006f04:	2c63      	cmp	r4, #99	; 0x63
 8006f06:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	dcf1      	bgt.n	8006ef2 <__exponent+0x22>
 8006f0e:	3130      	adds	r1, #48	; 0x30
 8006f10:	f1ac 0402 	sub.w	r4, ip, #2
 8006f14:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006f18:	1c41      	adds	r1, r0, #1
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	42ba      	cmp	r2, r7
 8006f1e:	d30a      	bcc.n	8006f36 <__exponent+0x66>
 8006f20:	f10d 0209 	add.w	r2, sp, #9
 8006f24:	eba2 020c 	sub.w	r2, r2, ip
 8006f28:	42bc      	cmp	r4, r7
 8006f2a:	bf88      	it	hi
 8006f2c:	2200      	movhi	r2, #0
 8006f2e:	4413      	add	r3, r2
 8006f30:	1a18      	subs	r0, r3, r0
 8006f32:	b003      	add	sp, #12
 8006f34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f36:	f812 5b01 	ldrb.w	r5, [r2], #1
 8006f3a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006f3e:	e7ed      	b.n	8006f1c <__exponent+0x4c>
 8006f40:	2330      	movs	r3, #48	; 0x30
 8006f42:	3130      	adds	r1, #48	; 0x30
 8006f44:	7083      	strb	r3, [r0, #2]
 8006f46:	70c1      	strb	r1, [r0, #3]
 8006f48:	1d03      	adds	r3, r0, #4
 8006f4a:	e7f1      	b.n	8006f30 <__exponent+0x60>

08006f4c <_printf_float>:
 8006f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f50:	ed2d 8b02 	vpush	{d8}
 8006f54:	b08d      	sub	sp, #52	; 0x34
 8006f56:	460c      	mov	r4, r1
 8006f58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006f5c:	4616      	mov	r6, r2
 8006f5e:	461f      	mov	r7, r3
 8006f60:	4605      	mov	r5, r0
 8006f62:	f000 fc83 	bl	800786c <_localeconv_r>
 8006f66:	f8d0 a000 	ldr.w	sl, [r0]
 8006f6a:	4650      	mov	r0, sl
 8006f6c:	f7f9 f9c8 	bl	8000300 <strlen>
 8006f70:	2300      	movs	r3, #0
 8006f72:	930a      	str	r3, [sp, #40]	; 0x28
 8006f74:	6823      	ldr	r3, [r4, #0]
 8006f76:	9305      	str	r3, [sp, #20]
 8006f78:	f8d8 3000 	ldr.w	r3, [r8]
 8006f7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006f80:	3307      	adds	r3, #7
 8006f82:	f023 0307 	bic.w	r3, r3, #7
 8006f86:	f103 0208 	add.w	r2, r3, #8
 8006f8a:	f8c8 2000 	str.w	r2, [r8]
 8006f8e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006f92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f96:	9307      	str	r3, [sp, #28]
 8006f98:	f8cd 8018 	str.w	r8, [sp, #24]
 8006f9c:	ee08 0a10 	vmov	s16, r0
 8006fa0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8006fa4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fa8:	4b9e      	ldr	r3, [pc, #632]	; (8007224 <_printf_float+0x2d8>)
 8006faa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fae:	f7f9 fe05 	bl	8000bbc <__aeabi_dcmpun>
 8006fb2:	bb88      	cbnz	r0, 8007018 <_printf_float+0xcc>
 8006fb4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006fb8:	4b9a      	ldr	r3, [pc, #616]	; (8007224 <_printf_float+0x2d8>)
 8006fba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fbe:	f7f9 fddf 	bl	8000b80 <__aeabi_dcmple>
 8006fc2:	bb48      	cbnz	r0, 8007018 <_printf_float+0xcc>
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 fdce 	bl	8000b6c <__aeabi_dcmplt>
 8006fd0:	b110      	cbz	r0, 8006fd8 <_printf_float+0x8c>
 8006fd2:	232d      	movs	r3, #45	; 0x2d
 8006fd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fd8:	4a93      	ldr	r2, [pc, #588]	; (8007228 <_printf_float+0x2dc>)
 8006fda:	4b94      	ldr	r3, [pc, #592]	; (800722c <_printf_float+0x2e0>)
 8006fdc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006fe0:	bf94      	ite	ls
 8006fe2:	4690      	movls	r8, r2
 8006fe4:	4698      	movhi	r8, r3
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	6123      	str	r3, [r4, #16]
 8006fea:	9b05      	ldr	r3, [sp, #20]
 8006fec:	f023 0304 	bic.w	r3, r3, #4
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	f04f 0900 	mov.w	r9, #0
 8006ff6:	9700      	str	r7, [sp, #0]
 8006ff8:	4633      	mov	r3, r6
 8006ffa:	aa0b      	add	r2, sp, #44	; 0x2c
 8006ffc:	4621      	mov	r1, r4
 8006ffe:	4628      	mov	r0, r5
 8007000:	f000 f9da 	bl	80073b8 <_printf_common>
 8007004:	3001      	adds	r0, #1
 8007006:	f040 8090 	bne.w	800712a <_printf_float+0x1de>
 800700a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800700e:	b00d      	add	sp, #52	; 0x34
 8007010:	ecbd 8b02 	vpop	{d8}
 8007014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007018:	4642      	mov	r2, r8
 800701a:	464b      	mov	r3, r9
 800701c:	4640      	mov	r0, r8
 800701e:	4649      	mov	r1, r9
 8007020:	f7f9 fdcc 	bl	8000bbc <__aeabi_dcmpun>
 8007024:	b140      	cbz	r0, 8007038 <_printf_float+0xec>
 8007026:	464b      	mov	r3, r9
 8007028:	2b00      	cmp	r3, #0
 800702a:	bfbc      	itt	lt
 800702c:	232d      	movlt	r3, #45	; 0x2d
 800702e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007032:	4a7f      	ldr	r2, [pc, #508]	; (8007230 <_printf_float+0x2e4>)
 8007034:	4b7f      	ldr	r3, [pc, #508]	; (8007234 <_printf_float+0x2e8>)
 8007036:	e7d1      	b.n	8006fdc <_printf_float+0x90>
 8007038:	6863      	ldr	r3, [r4, #4]
 800703a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800703e:	9206      	str	r2, [sp, #24]
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	d13f      	bne.n	80070c4 <_printf_float+0x178>
 8007044:	2306      	movs	r3, #6
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	9b05      	ldr	r3, [sp, #20]
 800704a:	6861      	ldr	r1, [r4, #4]
 800704c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007050:	2300      	movs	r3, #0
 8007052:	9303      	str	r3, [sp, #12]
 8007054:	ab0a      	add	r3, sp, #40	; 0x28
 8007056:	e9cd b301 	strd	fp, r3, [sp, #4]
 800705a:	ab09      	add	r3, sp, #36	; 0x24
 800705c:	ec49 8b10 	vmov	d0, r8, r9
 8007060:	9300      	str	r3, [sp, #0]
 8007062:	6022      	str	r2, [r4, #0]
 8007064:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007068:	4628      	mov	r0, r5
 800706a:	f7ff fecf 	bl	8006e0c <__cvt>
 800706e:	9b06      	ldr	r3, [sp, #24]
 8007070:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007072:	2b47      	cmp	r3, #71	; 0x47
 8007074:	4680      	mov	r8, r0
 8007076:	d108      	bne.n	800708a <_printf_float+0x13e>
 8007078:	1cc8      	adds	r0, r1, #3
 800707a:	db02      	blt.n	8007082 <_printf_float+0x136>
 800707c:	6863      	ldr	r3, [r4, #4]
 800707e:	4299      	cmp	r1, r3
 8007080:	dd41      	ble.n	8007106 <_printf_float+0x1ba>
 8007082:	f1ab 0302 	sub.w	r3, fp, #2
 8007086:	fa5f fb83 	uxtb.w	fp, r3
 800708a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800708e:	d820      	bhi.n	80070d2 <_printf_float+0x186>
 8007090:	3901      	subs	r1, #1
 8007092:	465a      	mov	r2, fp
 8007094:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007098:	9109      	str	r1, [sp, #36]	; 0x24
 800709a:	f7ff ff19 	bl	8006ed0 <__exponent>
 800709e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80070a0:	1813      	adds	r3, r2, r0
 80070a2:	2a01      	cmp	r2, #1
 80070a4:	4681      	mov	r9, r0
 80070a6:	6123      	str	r3, [r4, #16]
 80070a8:	dc02      	bgt.n	80070b0 <_printf_float+0x164>
 80070aa:	6822      	ldr	r2, [r4, #0]
 80070ac:	07d2      	lsls	r2, r2, #31
 80070ae:	d501      	bpl.n	80070b4 <_printf_float+0x168>
 80070b0:	3301      	adds	r3, #1
 80070b2:	6123      	str	r3, [r4, #16]
 80070b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d09c      	beq.n	8006ff6 <_printf_float+0xaa>
 80070bc:	232d      	movs	r3, #45	; 0x2d
 80070be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c2:	e798      	b.n	8006ff6 <_printf_float+0xaa>
 80070c4:	9a06      	ldr	r2, [sp, #24]
 80070c6:	2a47      	cmp	r2, #71	; 0x47
 80070c8:	d1be      	bne.n	8007048 <_printf_float+0xfc>
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d1bc      	bne.n	8007048 <_printf_float+0xfc>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e7b9      	b.n	8007046 <_printf_float+0xfa>
 80070d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80070d6:	d118      	bne.n	800710a <_printf_float+0x1be>
 80070d8:	2900      	cmp	r1, #0
 80070da:	6863      	ldr	r3, [r4, #4]
 80070dc:	dd0b      	ble.n	80070f6 <_printf_float+0x1aa>
 80070de:	6121      	str	r1, [r4, #16]
 80070e0:	b913      	cbnz	r3, 80070e8 <_printf_float+0x19c>
 80070e2:	6822      	ldr	r2, [r4, #0]
 80070e4:	07d0      	lsls	r0, r2, #31
 80070e6:	d502      	bpl.n	80070ee <_printf_float+0x1a2>
 80070e8:	3301      	adds	r3, #1
 80070ea:	440b      	add	r3, r1
 80070ec:	6123      	str	r3, [r4, #16]
 80070ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80070f0:	f04f 0900 	mov.w	r9, #0
 80070f4:	e7de      	b.n	80070b4 <_printf_float+0x168>
 80070f6:	b913      	cbnz	r3, 80070fe <_printf_float+0x1b2>
 80070f8:	6822      	ldr	r2, [r4, #0]
 80070fa:	07d2      	lsls	r2, r2, #31
 80070fc:	d501      	bpl.n	8007102 <_printf_float+0x1b6>
 80070fe:	3302      	adds	r3, #2
 8007100:	e7f4      	b.n	80070ec <_printf_float+0x1a0>
 8007102:	2301      	movs	r3, #1
 8007104:	e7f2      	b.n	80070ec <_printf_float+0x1a0>
 8007106:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800710a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800710c:	4299      	cmp	r1, r3
 800710e:	db05      	blt.n	800711c <_printf_float+0x1d0>
 8007110:	6823      	ldr	r3, [r4, #0]
 8007112:	6121      	str	r1, [r4, #16]
 8007114:	07d8      	lsls	r0, r3, #31
 8007116:	d5ea      	bpl.n	80070ee <_printf_float+0x1a2>
 8007118:	1c4b      	adds	r3, r1, #1
 800711a:	e7e7      	b.n	80070ec <_printf_float+0x1a0>
 800711c:	2900      	cmp	r1, #0
 800711e:	bfd4      	ite	le
 8007120:	f1c1 0202 	rsble	r2, r1, #2
 8007124:	2201      	movgt	r2, #1
 8007126:	4413      	add	r3, r2
 8007128:	e7e0      	b.n	80070ec <_printf_float+0x1a0>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	055a      	lsls	r2, r3, #21
 800712e:	d407      	bmi.n	8007140 <_printf_float+0x1f4>
 8007130:	6923      	ldr	r3, [r4, #16]
 8007132:	4642      	mov	r2, r8
 8007134:	4631      	mov	r1, r6
 8007136:	4628      	mov	r0, r5
 8007138:	47b8      	blx	r7
 800713a:	3001      	adds	r0, #1
 800713c:	d12c      	bne.n	8007198 <_printf_float+0x24c>
 800713e:	e764      	b.n	800700a <_printf_float+0xbe>
 8007140:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007144:	f240 80e0 	bls.w	8007308 <_printf_float+0x3bc>
 8007148:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800714c:	2200      	movs	r2, #0
 800714e:	2300      	movs	r3, #0
 8007150:	f7f9 fd02 	bl	8000b58 <__aeabi_dcmpeq>
 8007154:	2800      	cmp	r0, #0
 8007156:	d034      	beq.n	80071c2 <_printf_float+0x276>
 8007158:	4a37      	ldr	r2, [pc, #220]	; (8007238 <_printf_float+0x2ec>)
 800715a:	2301      	movs	r3, #1
 800715c:	4631      	mov	r1, r6
 800715e:	4628      	mov	r0, r5
 8007160:	47b8      	blx	r7
 8007162:	3001      	adds	r0, #1
 8007164:	f43f af51 	beq.w	800700a <_printf_float+0xbe>
 8007168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800716c:	429a      	cmp	r2, r3
 800716e:	db02      	blt.n	8007176 <_printf_float+0x22a>
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	07d8      	lsls	r0, r3, #31
 8007174:	d510      	bpl.n	8007198 <_printf_float+0x24c>
 8007176:	ee18 3a10 	vmov	r3, s16
 800717a:	4652      	mov	r2, sl
 800717c:	4631      	mov	r1, r6
 800717e:	4628      	mov	r0, r5
 8007180:	47b8      	blx	r7
 8007182:	3001      	adds	r0, #1
 8007184:	f43f af41 	beq.w	800700a <_printf_float+0xbe>
 8007188:	f04f 0800 	mov.w	r8, #0
 800718c:	f104 091a 	add.w	r9, r4, #26
 8007190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007192:	3b01      	subs	r3, #1
 8007194:	4543      	cmp	r3, r8
 8007196:	dc09      	bgt.n	80071ac <_printf_float+0x260>
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	079b      	lsls	r3, r3, #30
 800719c:	f100 8107 	bmi.w	80073ae <_printf_float+0x462>
 80071a0:	68e0      	ldr	r0, [r4, #12]
 80071a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071a4:	4298      	cmp	r0, r3
 80071a6:	bfb8      	it	lt
 80071a8:	4618      	movlt	r0, r3
 80071aa:	e730      	b.n	800700e <_printf_float+0xc2>
 80071ac:	2301      	movs	r3, #1
 80071ae:	464a      	mov	r2, r9
 80071b0:	4631      	mov	r1, r6
 80071b2:	4628      	mov	r0, r5
 80071b4:	47b8      	blx	r7
 80071b6:	3001      	adds	r0, #1
 80071b8:	f43f af27 	beq.w	800700a <_printf_float+0xbe>
 80071bc:	f108 0801 	add.w	r8, r8, #1
 80071c0:	e7e6      	b.n	8007190 <_printf_float+0x244>
 80071c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	dc39      	bgt.n	800723c <_printf_float+0x2f0>
 80071c8:	4a1b      	ldr	r2, [pc, #108]	; (8007238 <_printf_float+0x2ec>)
 80071ca:	2301      	movs	r3, #1
 80071cc:	4631      	mov	r1, r6
 80071ce:	4628      	mov	r0, r5
 80071d0:	47b8      	blx	r7
 80071d2:	3001      	adds	r0, #1
 80071d4:	f43f af19 	beq.w	800700a <_printf_float+0xbe>
 80071d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80071dc:	4313      	orrs	r3, r2
 80071de:	d102      	bne.n	80071e6 <_printf_float+0x29a>
 80071e0:	6823      	ldr	r3, [r4, #0]
 80071e2:	07d9      	lsls	r1, r3, #31
 80071e4:	d5d8      	bpl.n	8007198 <_printf_float+0x24c>
 80071e6:	ee18 3a10 	vmov	r3, s16
 80071ea:	4652      	mov	r2, sl
 80071ec:	4631      	mov	r1, r6
 80071ee:	4628      	mov	r0, r5
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f af09 	beq.w	800700a <_printf_float+0xbe>
 80071f8:	f04f 0900 	mov.w	r9, #0
 80071fc:	f104 0a1a 	add.w	sl, r4, #26
 8007200:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007202:	425b      	negs	r3, r3
 8007204:	454b      	cmp	r3, r9
 8007206:	dc01      	bgt.n	800720c <_printf_float+0x2c0>
 8007208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800720a:	e792      	b.n	8007132 <_printf_float+0x1e6>
 800720c:	2301      	movs	r3, #1
 800720e:	4652      	mov	r2, sl
 8007210:	4631      	mov	r1, r6
 8007212:	4628      	mov	r0, r5
 8007214:	47b8      	blx	r7
 8007216:	3001      	adds	r0, #1
 8007218:	f43f aef7 	beq.w	800700a <_printf_float+0xbe>
 800721c:	f109 0901 	add.w	r9, r9, #1
 8007220:	e7ee      	b.n	8007200 <_printf_float+0x2b4>
 8007222:	bf00      	nop
 8007224:	7fefffff 	.word	0x7fefffff
 8007228:	080099cc 	.word	0x080099cc
 800722c:	080099d0 	.word	0x080099d0
 8007230:	080099d4 	.word	0x080099d4
 8007234:	080099d8 	.word	0x080099d8
 8007238:	080099dc 	.word	0x080099dc
 800723c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800723e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007240:	429a      	cmp	r2, r3
 8007242:	bfa8      	it	ge
 8007244:	461a      	movge	r2, r3
 8007246:	2a00      	cmp	r2, #0
 8007248:	4691      	mov	r9, r2
 800724a:	dc37      	bgt.n	80072bc <_printf_float+0x370>
 800724c:	f04f 0b00 	mov.w	fp, #0
 8007250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007254:	f104 021a 	add.w	r2, r4, #26
 8007258:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800725a:	9305      	str	r3, [sp, #20]
 800725c:	eba3 0309 	sub.w	r3, r3, r9
 8007260:	455b      	cmp	r3, fp
 8007262:	dc33      	bgt.n	80072cc <_printf_float+0x380>
 8007264:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007268:	429a      	cmp	r2, r3
 800726a:	db3b      	blt.n	80072e4 <_printf_float+0x398>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07da      	lsls	r2, r3, #31
 8007270:	d438      	bmi.n	80072e4 <_printf_float+0x398>
 8007272:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007276:	eba2 0903 	sub.w	r9, r2, r3
 800727a:	9b05      	ldr	r3, [sp, #20]
 800727c:	1ad2      	subs	r2, r2, r3
 800727e:	4591      	cmp	r9, r2
 8007280:	bfa8      	it	ge
 8007282:	4691      	movge	r9, r2
 8007284:	f1b9 0f00 	cmp.w	r9, #0
 8007288:	dc35      	bgt.n	80072f6 <_printf_float+0x3aa>
 800728a:	f04f 0800 	mov.w	r8, #0
 800728e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007292:	f104 0a1a 	add.w	sl, r4, #26
 8007296:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800729a:	1a9b      	subs	r3, r3, r2
 800729c:	eba3 0309 	sub.w	r3, r3, r9
 80072a0:	4543      	cmp	r3, r8
 80072a2:	f77f af79 	ble.w	8007198 <_printf_float+0x24c>
 80072a6:	2301      	movs	r3, #1
 80072a8:	4652      	mov	r2, sl
 80072aa:	4631      	mov	r1, r6
 80072ac:	4628      	mov	r0, r5
 80072ae:	47b8      	blx	r7
 80072b0:	3001      	adds	r0, #1
 80072b2:	f43f aeaa 	beq.w	800700a <_printf_float+0xbe>
 80072b6:	f108 0801 	add.w	r8, r8, #1
 80072ba:	e7ec      	b.n	8007296 <_printf_float+0x34a>
 80072bc:	4613      	mov	r3, r2
 80072be:	4631      	mov	r1, r6
 80072c0:	4642      	mov	r2, r8
 80072c2:	4628      	mov	r0, r5
 80072c4:	47b8      	blx	r7
 80072c6:	3001      	adds	r0, #1
 80072c8:	d1c0      	bne.n	800724c <_printf_float+0x300>
 80072ca:	e69e      	b.n	800700a <_printf_float+0xbe>
 80072cc:	2301      	movs	r3, #1
 80072ce:	4631      	mov	r1, r6
 80072d0:	4628      	mov	r0, r5
 80072d2:	9205      	str	r2, [sp, #20]
 80072d4:	47b8      	blx	r7
 80072d6:	3001      	adds	r0, #1
 80072d8:	f43f ae97 	beq.w	800700a <_printf_float+0xbe>
 80072dc:	9a05      	ldr	r2, [sp, #20]
 80072de:	f10b 0b01 	add.w	fp, fp, #1
 80072e2:	e7b9      	b.n	8007258 <_printf_float+0x30c>
 80072e4:	ee18 3a10 	vmov	r3, s16
 80072e8:	4652      	mov	r2, sl
 80072ea:	4631      	mov	r1, r6
 80072ec:	4628      	mov	r0, r5
 80072ee:	47b8      	blx	r7
 80072f0:	3001      	adds	r0, #1
 80072f2:	d1be      	bne.n	8007272 <_printf_float+0x326>
 80072f4:	e689      	b.n	800700a <_printf_float+0xbe>
 80072f6:	9a05      	ldr	r2, [sp, #20]
 80072f8:	464b      	mov	r3, r9
 80072fa:	4442      	add	r2, r8
 80072fc:	4631      	mov	r1, r6
 80072fe:	4628      	mov	r0, r5
 8007300:	47b8      	blx	r7
 8007302:	3001      	adds	r0, #1
 8007304:	d1c1      	bne.n	800728a <_printf_float+0x33e>
 8007306:	e680      	b.n	800700a <_printf_float+0xbe>
 8007308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800730a:	2a01      	cmp	r2, #1
 800730c:	dc01      	bgt.n	8007312 <_printf_float+0x3c6>
 800730e:	07db      	lsls	r3, r3, #31
 8007310:	d53a      	bpl.n	8007388 <_printf_float+0x43c>
 8007312:	2301      	movs	r3, #1
 8007314:	4642      	mov	r2, r8
 8007316:	4631      	mov	r1, r6
 8007318:	4628      	mov	r0, r5
 800731a:	47b8      	blx	r7
 800731c:	3001      	adds	r0, #1
 800731e:	f43f ae74 	beq.w	800700a <_printf_float+0xbe>
 8007322:	ee18 3a10 	vmov	r3, s16
 8007326:	4652      	mov	r2, sl
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f ae6b 	beq.w	800700a <_printf_float+0xbe>
 8007334:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007338:	2200      	movs	r2, #0
 800733a:	2300      	movs	r3, #0
 800733c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007340:	f7f9 fc0a 	bl	8000b58 <__aeabi_dcmpeq>
 8007344:	b9d8      	cbnz	r0, 800737e <_printf_float+0x432>
 8007346:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800734a:	f108 0201 	add.w	r2, r8, #1
 800734e:	4631      	mov	r1, r6
 8007350:	4628      	mov	r0, r5
 8007352:	47b8      	blx	r7
 8007354:	3001      	adds	r0, #1
 8007356:	d10e      	bne.n	8007376 <_printf_float+0x42a>
 8007358:	e657      	b.n	800700a <_printf_float+0xbe>
 800735a:	2301      	movs	r3, #1
 800735c:	4652      	mov	r2, sl
 800735e:	4631      	mov	r1, r6
 8007360:	4628      	mov	r0, r5
 8007362:	47b8      	blx	r7
 8007364:	3001      	adds	r0, #1
 8007366:	f43f ae50 	beq.w	800700a <_printf_float+0xbe>
 800736a:	f108 0801 	add.w	r8, r8, #1
 800736e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007370:	3b01      	subs	r3, #1
 8007372:	4543      	cmp	r3, r8
 8007374:	dcf1      	bgt.n	800735a <_printf_float+0x40e>
 8007376:	464b      	mov	r3, r9
 8007378:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800737c:	e6da      	b.n	8007134 <_printf_float+0x1e8>
 800737e:	f04f 0800 	mov.w	r8, #0
 8007382:	f104 0a1a 	add.w	sl, r4, #26
 8007386:	e7f2      	b.n	800736e <_printf_float+0x422>
 8007388:	2301      	movs	r3, #1
 800738a:	4642      	mov	r2, r8
 800738c:	e7df      	b.n	800734e <_printf_float+0x402>
 800738e:	2301      	movs	r3, #1
 8007390:	464a      	mov	r2, r9
 8007392:	4631      	mov	r1, r6
 8007394:	4628      	mov	r0, r5
 8007396:	47b8      	blx	r7
 8007398:	3001      	adds	r0, #1
 800739a:	f43f ae36 	beq.w	800700a <_printf_float+0xbe>
 800739e:	f108 0801 	add.w	r8, r8, #1
 80073a2:	68e3      	ldr	r3, [r4, #12]
 80073a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80073a6:	1a5b      	subs	r3, r3, r1
 80073a8:	4543      	cmp	r3, r8
 80073aa:	dcf0      	bgt.n	800738e <_printf_float+0x442>
 80073ac:	e6f8      	b.n	80071a0 <_printf_float+0x254>
 80073ae:	f04f 0800 	mov.w	r8, #0
 80073b2:	f104 0919 	add.w	r9, r4, #25
 80073b6:	e7f4      	b.n	80073a2 <_printf_float+0x456>

080073b8 <_printf_common>:
 80073b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073bc:	4616      	mov	r6, r2
 80073be:	4699      	mov	r9, r3
 80073c0:	688a      	ldr	r2, [r1, #8]
 80073c2:	690b      	ldr	r3, [r1, #16]
 80073c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073c8:	4293      	cmp	r3, r2
 80073ca:	bfb8      	it	lt
 80073cc:	4613      	movlt	r3, r2
 80073ce:	6033      	str	r3, [r6, #0]
 80073d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80073d4:	4607      	mov	r7, r0
 80073d6:	460c      	mov	r4, r1
 80073d8:	b10a      	cbz	r2, 80073de <_printf_common+0x26>
 80073da:	3301      	adds	r3, #1
 80073dc:	6033      	str	r3, [r6, #0]
 80073de:	6823      	ldr	r3, [r4, #0]
 80073e0:	0699      	lsls	r1, r3, #26
 80073e2:	bf42      	ittt	mi
 80073e4:	6833      	ldrmi	r3, [r6, #0]
 80073e6:	3302      	addmi	r3, #2
 80073e8:	6033      	strmi	r3, [r6, #0]
 80073ea:	6825      	ldr	r5, [r4, #0]
 80073ec:	f015 0506 	ands.w	r5, r5, #6
 80073f0:	d106      	bne.n	8007400 <_printf_common+0x48>
 80073f2:	f104 0a19 	add.w	sl, r4, #25
 80073f6:	68e3      	ldr	r3, [r4, #12]
 80073f8:	6832      	ldr	r2, [r6, #0]
 80073fa:	1a9b      	subs	r3, r3, r2
 80073fc:	42ab      	cmp	r3, r5
 80073fe:	dc26      	bgt.n	800744e <_printf_common+0x96>
 8007400:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007404:	1e13      	subs	r3, r2, #0
 8007406:	6822      	ldr	r2, [r4, #0]
 8007408:	bf18      	it	ne
 800740a:	2301      	movne	r3, #1
 800740c:	0692      	lsls	r2, r2, #26
 800740e:	d42b      	bmi.n	8007468 <_printf_common+0xb0>
 8007410:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007414:	4649      	mov	r1, r9
 8007416:	4638      	mov	r0, r7
 8007418:	47c0      	blx	r8
 800741a:	3001      	adds	r0, #1
 800741c:	d01e      	beq.n	800745c <_printf_common+0xa4>
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	6922      	ldr	r2, [r4, #16]
 8007422:	f003 0306 	and.w	r3, r3, #6
 8007426:	2b04      	cmp	r3, #4
 8007428:	bf02      	ittt	eq
 800742a:	68e5      	ldreq	r5, [r4, #12]
 800742c:	6833      	ldreq	r3, [r6, #0]
 800742e:	1aed      	subeq	r5, r5, r3
 8007430:	68a3      	ldr	r3, [r4, #8]
 8007432:	bf0c      	ite	eq
 8007434:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007438:	2500      	movne	r5, #0
 800743a:	4293      	cmp	r3, r2
 800743c:	bfc4      	itt	gt
 800743e:	1a9b      	subgt	r3, r3, r2
 8007440:	18ed      	addgt	r5, r5, r3
 8007442:	2600      	movs	r6, #0
 8007444:	341a      	adds	r4, #26
 8007446:	42b5      	cmp	r5, r6
 8007448:	d11a      	bne.n	8007480 <_printf_common+0xc8>
 800744a:	2000      	movs	r0, #0
 800744c:	e008      	b.n	8007460 <_printf_common+0xa8>
 800744e:	2301      	movs	r3, #1
 8007450:	4652      	mov	r2, sl
 8007452:	4649      	mov	r1, r9
 8007454:	4638      	mov	r0, r7
 8007456:	47c0      	blx	r8
 8007458:	3001      	adds	r0, #1
 800745a:	d103      	bne.n	8007464 <_printf_common+0xac>
 800745c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007464:	3501      	adds	r5, #1
 8007466:	e7c6      	b.n	80073f6 <_printf_common+0x3e>
 8007468:	18e1      	adds	r1, r4, r3
 800746a:	1c5a      	adds	r2, r3, #1
 800746c:	2030      	movs	r0, #48	; 0x30
 800746e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007472:	4422      	add	r2, r4
 8007474:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007478:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800747c:	3302      	adds	r3, #2
 800747e:	e7c7      	b.n	8007410 <_printf_common+0x58>
 8007480:	2301      	movs	r3, #1
 8007482:	4622      	mov	r2, r4
 8007484:	4649      	mov	r1, r9
 8007486:	4638      	mov	r0, r7
 8007488:	47c0      	blx	r8
 800748a:	3001      	adds	r0, #1
 800748c:	d0e6      	beq.n	800745c <_printf_common+0xa4>
 800748e:	3601      	adds	r6, #1
 8007490:	e7d9      	b.n	8007446 <_printf_common+0x8e>
	...

08007494 <_printf_i>:
 8007494:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007498:	7e0f      	ldrb	r7, [r1, #24]
 800749a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800749c:	2f78      	cmp	r7, #120	; 0x78
 800749e:	4691      	mov	r9, r2
 80074a0:	4680      	mov	r8, r0
 80074a2:	460c      	mov	r4, r1
 80074a4:	469a      	mov	sl, r3
 80074a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80074aa:	d807      	bhi.n	80074bc <_printf_i+0x28>
 80074ac:	2f62      	cmp	r7, #98	; 0x62
 80074ae:	d80a      	bhi.n	80074c6 <_printf_i+0x32>
 80074b0:	2f00      	cmp	r7, #0
 80074b2:	f000 80d4 	beq.w	800765e <_printf_i+0x1ca>
 80074b6:	2f58      	cmp	r7, #88	; 0x58
 80074b8:	f000 80c0 	beq.w	800763c <_printf_i+0x1a8>
 80074bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074c4:	e03a      	b.n	800753c <_printf_i+0xa8>
 80074c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074ca:	2b15      	cmp	r3, #21
 80074cc:	d8f6      	bhi.n	80074bc <_printf_i+0x28>
 80074ce:	a101      	add	r1, pc, #4	; (adr r1, 80074d4 <_printf_i+0x40>)
 80074d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80074d4:	0800752d 	.word	0x0800752d
 80074d8:	08007541 	.word	0x08007541
 80074dc:	080074bd 	.word	0x080074bd
 80074e0:	080074bd 	.word	0x080074bd
 80074e4:	080074bd 	.word	0x080074bd
 80074e8:	080074bd 	.word	0x080074bd
 80074ec:	08007541 	.word	0x08007541
 80074f0:	080074bd 	.word	0x080074bd
 80074f4:	080074bd 	.word	0x080074bd
 80074f8:	080074bd 	.word	0x080074bd
 80074fc:	080074bd 	.word	0x080074bd
 8007500:	08007645 	.word	0x08007645
 8007504:	0800756d 	.word	0x0800756d
 8007508:	080075ff 	.word	0x080075ff
 800750c:	080074bd 	.word	0x080074bd
 8007510:	080074bd 	.word	0x080074bd
 8007514:	08007667 	.word	0x08007667
 8007518:	080074bd 	.word	0x080074bd
 800751c:	0800756d 	.word	0x0800756d
 8007520:	080074bd 	.word	0x080074bd
 8007524:	080074bd 	.word	0x080074bd
 8007528:	08007607 	.word	0x08007607
 800752c:	682b      	ldr	r3, [r5, #0]
 800752e:	1d1a      	adds	r2, r3, #4
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	602a      	str	r2, [r5, #0]
 8007534:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800753c:	2301      	movs	r3, #1
 800753e:	e09f      	b.n	8007680 <_printf_i+0x1ec>
 8007540:	6820      	ldr	r0, [r4, #0]
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	0607      	lsls	r7, r0, #24
 8007546:	f103 0104 	add.w	r1, r3, #4
 800754a:	6029      	str	r1, [r5, #0]
 800754c:	d501      	bpl.n	8007552 <_printf_i+0xbe>
 800754e:	681e      	ldr	r6, [r3, #0]
 8007550:	e003      	b.n	800755a <_printf_i+0xc6>
 8007552:	0646      	lsls	r6, r0, #25
 8007554:	d5fb      	bpl.n	800754e <_printf_i+0xba>
 8007556:	f9b3 6000 	ldrsh.w	r6, [r3]
 800755a:	2e00      	cmp	r6, #0
 800755c:	da03      	bge.n	8007566 <_printf_i+0xd2>
 800755e:	232d      	movs	r3, #45	; 0x2d
 8007560:	4276      	negs	r6, r6
 8007562:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007566:	485a      	ldr	r0, [pc, #360]	; (80076d0 <_printf_i+0x23c>)
 8007568:	230a      	movs	r3, #10
 800756a:	e012      	b.n	8007592 <_printf_i+0xfe>
 800756c:	682b      	ldr	r3, [r5, #0]
 800756e:	6820      	ldr	r0, [r4, #0]
 8007570:	1d19      	adds	r1, r3, #4
 8007572:	6029      	str	r1, [r5, #0]
 8007574:	0605      	lsls	r5, r0, #24
 8007576:	d501      	bpl.n	800757c <_printf_i+0xe8>
 8007578:	681e      	ldr	r6, [r3, #0]
 800757a:	e002      	b.n	8007582 <_printf_i+0xee>
 800757c:	0641      	lsls	r1, r0, #25
 800757e:	d5fb      	bpl.n	8007578 <_printf_i+0xe4>
 8007580:	881e      	ldrh	r6, [r3, #0]
 8007582:	4853      	ldr	r0, [pc, #332]	; (80076d0 <_printf_i+0x23c>)
 8007584:	2f6f      	cmp	r7, #111	; 0x6f
 8007586:	bf0c      	ite	eq
 8007588:	2308      	moveq	r3, #8
 800758a:	230a      	movne	r3, #10
 800758c:	2100      	movs	r1, #0
 800758e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007592:	6865      	ldr	r5, [r4, #4]
 8007594:	60a5      	str	r5, [r4, #8]
 8007596:	2d00      	cmp	r5, #0
 8007598:	bfa2      	ittt	ge
 800759a:	6821      	ldrge	r1, [r4, #0]
 800759c:	f021 0104 	bicge.w	r1, r1, #4
 80075a0:	6021      	strge	r1, [r4, #0]
 80075a2:	b90e      	cbnz	r6, 80075a8 <_printf_i+0x114>
 80075a4:	2d00      	cmp	r5, #0
 80075a6:	d04b      	beq.n	8007640 <_printf_i+0x1ac>
 80075a8:	4615      	mov	r5, r2
 80075aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80075ae:	fb03 6711 	mls	r7, r3, r1, r6
 80075b2:	5dc7      	ldrb	r7, [r0, r7]
 80075b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80075b8:	4637      	mov	r7, r6
 80075ba:	42bb      	cmp	r3, r7
 80075bc:	460e      	mov	r6, r1
 80075be:	d9f4      	bls.n	80075aa <_printf_i+0x116>
 80075c0:	2b08      	cmp	r3, #8
 80075c2:	d10b      	bne.n	80075dc <_printf_i+0x148>
 80075c4:	6823      	ldr	r3, [r4, #0]
 80075c6:	07de      	lsls	r6, r3, #31
 80075c8:	d508      	bpl.n	80075dc <_printf_i+0x148>
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	6861      	ldr	r1, [r4, #4]
 80075ce:	4299      	cmp	r1, r3
 80075d0:	bfde      	ittt	le
 80075d2:	2330      	movle	r3, #48	; 0x30
 80075d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80075d8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80075dc:	1b52      	subs	r2, r2, r5
 80075de:	6122      	str	r2, [r4, #16]
 80075e0:	f8cd a000 	str.w	sl, [sp]
 80075e4:	464b      	mov	r3, r9
 80075e6:	aa03      	add	r2, sp, #12
 80075e8:	4621      	mov	r1, r4
 80075ea:	4640      	mov	r0, r8
 80075ec:	f7ff fee4 	bl	80073b8 <_printf_common>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d14a      	bne.n	800768a <_printf_i+0x1f6>
 80075f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075f8:	b004      	add	sp, #16
 80075fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fe:	6823      	ldr	r3, [r4, #0]
 8007600:	f043 0320 	orr.w	r3, r3, #32
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	4833      	ldr	r0, [pc, #204]	; (80076d4 <_printf_i+0x240>)
 8007608:	2778      	movs	r7, #120	; 0x78
 800760a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800760e:	6823      	ldr	r3, [r4, #0]
 8007610:	6829      	ldr	r1, [r5, #0]
 8007612:	061f      	lsls	r7, r3, #24
 8007614:	f851 6b04 	ldr.w	r6, [r1], #4
 8007618:	d402      	bmi.n	8007620 <_printf_i+0x18c>
 800761a:	065f      	lsls	r7, r3, #25
 800761c:	bf48      	it	mi
 800761e:	b2b6      	uxthmi	r6, r6
 8007620:	07df      	lsls	r7, r3, #31
 8007622:	bf48      	it	mi
 8007624:	f043 0320 	orrmi.w	r3, r3, #32
 8007628:	6029      	str	r1, [r5, #0]
 800762a:	bf48      	it	mi
 800762c:	6023      	strmi	r3, [r4, #0]
 800762e:	b91e      	cbnz	r6, 8007638 <_printf_i+0x1a4>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	f023 0320 	bic.w	r3, r3, #32
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	2310      	movs	r3, #16
 800763a:	e7a7      	b.n	800758c <_printf_i+0xf8>
 800763c:	4824      	ldr	r0, [pc, #144]	; (80076d0 <_printf_i+0x23c>)
 800763e:	e7e4      	b.n	800760a <_printf_i+0x176>
 8007640:	4615      	mov	r5, r2
 8007642:	e7bd      	b.n	80075c0 <_printf_i+0x12c>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	6826      	ldr	r6, [r4, #0]
 8007648:	6961      	ldr	r1, [r4, #20]
 800764a:	1d18      	adds	r0, r3, #4
 800764c:	6028      	str	r0, [r5, #0]
 800764e:	0635      	lsls	r5, r6, #24
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	d501      	bpl.n	8007658 <_printf_i+0x1c4>
 8007654:	6019      	str	r1, [r3, #0]
 8007656:	e002      	b.n	800765e <_printf_i+0x1ca>
 8007658:	0670      	lsls	r0, r6, #25
 800765a:	d5fb      	bpl.n	8007654 <_printf_i+0x1c0>
 800765c:	8019      	strh	r1, [r3, #0]
 800765e:	2300      	movs	r3, #0
 8007660:	6123      	str	r3, [r4, #16]
 8007662:	4615      	mov	r5, r2
 8007664:	e7bc      	b.n	80075e0 <_printf_i+0x14c>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	1d1a      	adds	r2, r3, #4
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	681d      	ldr	r5, [r3, #0]
 800766e:	6862      	ldr	r2, [r4, #4]
 8007670:	2100      	movs	r1, #0
 8007672:	4628      	mov	r0, r5
 8007674:	f7f8 fdf4 	bl	8000260 <memchr>
 8007678:	b108      	cbz	r0, 800767e <_printf_i+0x1ea>
 800767a:	1b40      	subs	r0, r0, r5
 800767c:	6060      	str	r0, [r4, #4]
 800767e:	6863      	ldr	r3, [r4, #4]
 8007680:	6123      	str	r3, [r4, #16]
 8007682:	2300      	movs	r3, #0
 8007684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007688:	e7aa      	b.n	80075e0 <_printf_i+0x14c>
 800768a:	6923      	ldr	r3, [r4, #16]
 800768c:	462a      	mov	r2, r5
 800768e:	4649      	mov	r1, r9
 8007690:	4640      	mov	r0, r8
 8007692:	47d0      	blx	sl
 8007694:	3001      	adds	r0, #1
 8007696:	d0ad      	beq.n	80075f4 <_printf_i+0x160>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	079b      	lsls	r3, r3, #30
 800769c:	d413      	bmi.n	80076c6 <_printf_i+0x232>
 800769e:	68e0      	ldr	r0, [r4, #12]
 80076a0:	9b03      	ldr	r3, [sp, #12]
 80076a2:	4298      	cmp	r0, r3
 80076a4:	bfb8      	it	lt
 80076a6:	4618      	movlt	r0, r3
 80076a8:	e7a6      	b.n	80075f8 <_printf_i+0x164>
 80076aa:	2301      	movs	r3, #1
 80076ac:	4632      	mov	r2, r6
 80076ae:	4649      	mov	r1, r9
 80076b0:	4640      	mov	r0, r8
 80076b2:	47d0      	blx	sl
 80076b4:	3001      	adds	r0, #1
 80076b6:	d09d      	beq.n	80075f4 <_printf_i+0x160>
 80076b8:	3501      	adds	r5, #1
 80076ba:	68e3      	ldr	r3, [r4, #12]
 80076bc:	9903      	ldr	r1, [sp, #12]
 80076be:	1a5b      	subs	r3, r3, r1
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	dcf2      	bgt.n	80076aa <_printf_i+0x216>
 80076c4:	e7eb      	b.n	800769e <_printf_i+0x20a>
 80076c6:	2500      	movs	r5, #0
 80076c8:	f104 0619 	add.w	r6, r4, #25
 80076cc:	e7f5      	b.n	80076ba <_printf_i+0x226>
 80076ce:	bf00      	nop
 80076d0:	080099de 	.word	0x080099de
 80076d4:	080099ef 	.word	0x080099ef

080076d8 <std>:
 80076d8:	2300      	movs	r3, #0
 80076da:	b510      	push	{r4, lr}
 80076dc:	4604      	mov	r4, r0
 80076de:	e9c0 3300 	strd	r3, r3, [r0]
 80076e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80076e6:	6083      	str	r3, [r0, #8]
 80076e8:	8181      	strh	r1, [r0, #12]
 80076ea:	6643      	str	r3, [r0, #100]	; 0x64
 80076ec:	81c2      	strh	r2, [r0, #14]
 80076ee:	6183      	str	r3, [r0, #24]
 80076f0:	4619      	mov	r1, r3
 80076f2:	2208      	movs	r2, #8
 80076f4:	305c      	adds	r0, #92	; 0x5c
 80076f6:	f000 f8b1 	bl	800785c <memset>
 80076fa:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <std+0x58>)
 80076fc:	6263      	str	r3, [r4, #36]	; 0x24
 80076fe:	4b0d      	ldr	r3, [pc, #52]	; (8007734 <std+0x5c>)
 8007700:	62a3      	str	r3, [r4, #40]	; 0x28
 8007702:	4b0d      	ldr	r3, [pc, #52]	; (8007738 <std+0x60>)
 8007704:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007706:	4b0d      	ldr	r3, [pc, #52]	; (800773c <std+0x64>)
 8007708:	6323      	str	r3, [r4, #48]	; 0x30
 800770a:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <std+0x68>)
 800770c:	6224      	str	r4, [r4, #32]
 800770e:	429c      	cmp	r4, r3
 8007710:	d006      	beq.n	8007720 <std+0x48>
 8007712:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007716:	4294      	cmp	r4, r2
 8007718:	d002      	beq.n	8007720 <std+0x48>
 800771a:	33d0      	adds	r3, #208	; 0xd0
 800771c:	429c      	cmp	r4, r3
 800771e:	d105      	bne.n	800772c <std+0x54>
 8007720:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007728:	f000 b8ce 	b.w	80078c8 <__retarget_lock_init_recursive>
 800772c:	bd10      	pop	{r4, pc}
 800772e:	bf00      	nop
 8007730:	08008fa1 	.word	0x08008fa1
 8007734:	08008fc3 	.word	0x08008fc3
 8007738:	08008ffb 	.word	0x08008ffb
 800773c:	0800901f 	.word	0x0800901f
 8007740:	200006d0 	.word	0x200006d0

08007744 <stdio_exit_handler>:
 8007744:	4a02      	ldr	r2, [pc, #8]	; (8007750 <stdio_exit_handler+0xc>)
 8007746:	4903      	ldr	r1, [pc, #12]	; (8007754 <stdio_exit_handler+0x10>)
 8007748:	4803      	ldr	r0, [pc, #12]	; (8007758 <stdio_exit_handler+0x14>)
 800774a:	f000 b869 	b.w	8007820 <_fwalk_sglue>
 800774e:	bf00      	nop
 8007750:	2000000c 	.word	0x2000000c
 8007754:	08008841 	.word	0x08008841
 8007758:	20000018 	.word	0x20000018

0800775c <cleanup_stdio>:
 800775c:	6841      	ldr	r1, [r0, #4]
 800775e:	4b0c      	ldr	r3, [pc, #48]	; (8007790 <cleanup_stdio+0x34>)
 8007760:	4299      	cmp	r1, r3
 8007762:	b510      	push	{r4, lr}
 8007764:	4604      	mov	r4, r0
 8007766:	d001      	beq.n	800776c <cleanup_stdio+0x10>
 8007768:	f001 f86a 	bl	8008840 <_fflush_r>
 800776c:	68a1      	ldr	r1, [r4, #8]
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <cleanup_stdio+0x38>)
 8007770:	4299      	cmp	r1, r3
 8007772:	d002      	beq.n	800777a <cleanup_stdio+0x1e>
 8007774:	4620      	mov	r0, r4
 8007776:	f001 f863 	bl	8008840 <_fflush_r>
 800777a:	68e1      	ldr	r1, [r4, #12]
 800777c:	4b06      	ldr	r3, [pc, #24]	; (8007798 <cleanup_stdio+0x3c>)
 800777e:	4299      	cmp	r1, r3
 8007780:	d004      	beq.n	800778c <cleanup_stdio+0x30>
 8007782:	4620      	mov	r0, r4
 8007784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007788:	f001 b85a 	b.w	8008840 <_fflush_r>
 800778c:	bd10      	pop	{r4, pc}
 800778e:	bf00      	nop
 8007790:	200006d0 	.word	0x200006d0
 8007794:	20000738 	.word	0x20000738
 8007798:	200007a0 	.word	0x200007a0

0800779c <global_stdio_init.part.0>:
 800779c:	b510      	push	{r4, lr}
 800779e:	4b0b      	ldr	r3, [pc, #44]	; (80077cc <global_stdio_init.part.0+0x30>)
 80077a0:	4c0b      	ldr	r4, [pc, #44]	; (80077d0 <global_stdio_init.part.0+0x34>)
 80077a2:	4a0c      	ldr	r2, [pc, #48]	; (80077d4 <global_stdio_init.part.0+0x38>)
 80077a4:	601a      	str	r2, [r3, #0]
 80077a6:	4620      	mov	r0, r4
 80077a8:	2200      	movs	r2, #0
 80077aa:	2104      	movs	r1, #4
 80077ac:	f7ff ff94 	bl	80076d8 <std>
 80077b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077b4:	2201      	movs	r2, #1
 80077b6:	2109      	movs	r1, #9
 80077b8:	f7ff ff8e 	bl	80076d8 <std>
 80077bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077c0:	2202      	movs	r2, #2
 80077c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077c6:	2112      	movs	r1, #18
 80077c8:	f7ff bf86 	b.w	80076d8 <std>
 80077cc:	20000808 	.word	0x20000808
 80077d0:	200006d0 	.word	0x200006d0
 80077d4:	08007745 	.word	0x08007745

080077d8 <__sfp_lock_acquire>:
 80077d8:	4801      	ldr	r0, [pc, #4]	; (80077e0 <__sfp_lock_acquire+0x8>)
 80077da:	f000 b876 	b.w	80078ca <__retarget_lock_acquire_recursive>
 80077de:	bf00      	nop
 80077e0:	2000080d 	.word	0x2000080d

080077e4 <__sfp_lock_release>:
 80077e4:	4801      	ldr	r0, [pc, #4]	; (80077ec <__sfp_lock_release+0x8>)
 80077e6:	f000 b871 	b.w	80078cc <__retarget_lock_release_recursive>
 80077ea:	bf00      	nop
 80077ec:	2000080d 	.word	0x2000080d

080077f0 <__sinit>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4604      	mov	r4, r0
 80077f4:	f7ff fff0 	bl	80077d8 <__sfp_lock_acquire>
 80077f8:	6a23      	ldr	r3, [r4, #32]
 80077fa:	b11b      	cbz	r3, 8007804 <__sinit+0x14>
 80077fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007800:	f7ff bff0 	b.w	80077e4 <__sfp_lock_release>
 8007804:	4b04      	ldr	r3, [pc, #16]	; (8007818 <__sinit+0x28>)
 8007806:	6223      	str	r3, [r4, #32]
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <__sinit+0x2c>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f5      	bne.n	80077fc <__sinit+0xc>
 8007810:	f7ff ffc4 	bl	800779c <global_stdio_init.part.0>
 8007814:	e7f2      	b.n	80077fc <__sinit+0xc>
 8007816:	bf00      	nop
 8007818:	0800775d 	.word	0x0800775d
 800781c:	20000808 	.word	0x20000808

08007820 <_fwalk_sglue>:
 8007820:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007824:	4607      	mov	r7, r0
 8007826:	4688      	mov	r8, r1
 8007828:	4614      	mov	r4, r2
 800782a:	2600      	movs	r6, #0
 800782c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007830:	f1b9 0901 	subs.w	r9, r9, #1
 8007834:	d505      	bpl.n	8007842 <_fwalk_sglue+0x22>
 8007836:	6824      	ldr	r4, [r4, #0]
 8007838:	2c00      	cmp	r4, #0
 800783a:	d1f7      	bne.n	800782c <_fwalk_sglue+0xc>
 800783c:	4630      	mov	r0, r6
 800783e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007842:	89ab      	ldrh	r3, [r5, #12]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d907      	bls.n	8007858 <_fwalk_sglue+0x38>
 8007848:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800784c:	3301      	adds	r3, #1
 800784e:	d003      	beq.n	8007858 <_fwalk_sglue+0x38>
 8007850:	4629      	mov	r1, r5
 8007852:	4638      	mov	r0, r7
 8007854:	47c0      	blx	r8
 8007856:	4306      	orrs	r6, r0
 8007858:	3568      	adds	r5, #104	; 0x68
 800785a:	e7e9      	b.n	8007830 <_fwalk_sglue+0x10>

0800785c <memset>:
 800785c:	4402      	add	r2, r0
 800785e:	4603      	mov	r3, r0
 8007860:	4293      	cmp	r3, r2
 8007862:	d100      	bne.n	8007866 <memset+0xa>
 8007864:	4770      	bx	lr
 8007866:	f803 1b01 	strb.w	r1, [r3], #1
 800786a:	e7f9      	b.n	8007860 <memset+0x4>

0800786c <_localeconv_r>:
 800786c:	4800      	ldr	r0, [pc, #0]	; (8007870 <_localeconv_r+0x4>)
 800786e:	4770      	bx	lr
 8007870:	20000158 	.word	0x20000158

08007874 <__errno>:
 8007874:	4b01      	ldr	r3, [pc, #4]	; (800787c <__errno+0x8>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	20000064 	.word	0x20000064

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	4d0d      	ldr	r5, [pc, #52]	; (80078b8 <__libc_init_array+0x38>)
 8007884:	4c0d      	ldr	r4, [pc, #52]	; (80078bc <__libc_init_array+0x3c>)
 8007886:	1b64      	subs	r4, r4, r5
 8007888:	10a4      	asrs	r4, r4, #2
 800788a:	2600      	movs	r6, #0
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	4d0b      	ldr	r5, [pc, #44]	; (80078c0 <__libc_init_array+0x40>)
 8007892:	4c0c      	ldr	r4, [pc, #48]	; (80078c4 <__libc_init_array+0x44>)
 8007894:	f001 ff78 	bl	8009788 <_init>
 8007898:	1b64      	subs	r4, r4, r5
 800789a:	10a4      	asrs	r4, r4, #2
 800789c:	2600      	movs	r6, #0
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	08009d44 	.word	0x08009d44
 80078bc:	08009d44 	.word	0x08009d44
 80078c0:	08009d44 	.word	0x08009d44
 80078c4:	08009d48 	.word	0x08009d48

080078c8 <__retarget_lock_init_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_acquire_recursive>:
 80078ca:	4770      	bx	lr

080078cc <__retarget_lock_release_recursive>:
 80078cc:	4770      	bx	lr

080078ce <memcpy>:
 80078ce:	440a      	add	r2, r1
 80078d0:	4291      	cmp	r1, r2
 80078d2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078d6:	d100      	bne.n	80078da <memcpy+0xc>
 80078d8:	4770      	bx	lr
 80078da:	b510      	push	{r4, lr}
 80078dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e4:	4291      	cmp	r1, r2
 80078e6:	d1f9      	bne.n	80078dc <memcpy+0xe>
 80078e8:	bd10      	pop	{r4, pc}

080078ea <quorem>:
 80078ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ee:	6903      	ldr	r3, [r0, #16]
 80078f0:	690c      	ldr	r4, [r1, #16]
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	4607      	mov	r7, r0
 80078f6:	db7e      	blt.n	80079f6 <quorem+0x10c>
 80078f8:	3c01      	subs	r4, #1
 80078fa:	f101 0814 	add.w	r8, r1, #20
 80078fe:	f100 0514 	add.w	r5, r0, #20
 8007902:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007906:	9301      	str	r3, [sp, #4]
 8007908:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800790c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007910:	3301      	adds	r3, #1
 8007912:	429a      	cmp	r2, r3
 8007914:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007918:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800791c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007920:	d331      	bcc.n	8007986 <quorem+0x9c>
 8007922:	f04f 0e00 	mov.w	lr, #0
 8007926:	4640      	mov	r0, r8
 8007928:	46ac      	mov	ip, r5
 800792a:	46f2      	mov	sl, lr
 800792c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007930:	b293      	uxth	r3, r2
 8007932:	fb06 e303 	mla	r3, r6, r3, lr
 8007936:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800793a:	0c1a      	lsrs	r2, r3, #16
 800793c:	b29b      	uxth	r3, r3
 800793e:	ebaa 0303 	sub.w	r3, sl, r3
 8007942:	f8dc a000 	ldr.w	sl, [ip]
 8007946:	fa13 f38a 	uxtah	r3, r3, sl
 800794a:	fb06 220e 	mla	r2, r6, lr, r2
 800794e:	9300      	str	r3, [sp, #0]
 8007950:	9b00      	ldr	r3, [sp, #0]
 8007952:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007956:	b292      	uxth	r2, r2
 8007958:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800795c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007960:	f8bd 3000 	ldrh.w	r3, [sp]
 8007964:	4581      	cmp	r9, r0
 8007966:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800796a:	f84c 3b04 	str.w	r3, [ip], #4
 800796e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007972:	d2db      	bcs.n	800792c <quorem+0x42>
 8007974:	f855 300b 	ldr.w	r3, [r5, fp]
 8007978:	b92b      	cbnz	r3, 8007986 <quorem+0x9c>
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	3b04      	subs	r3, #4
 800797e:	429d      	cmp	r5, r3
 8007980:	461a      	mov	r2, r3
 8007982:	d32c      	bcc.n	80079de <quorem+0xf4>
 8007984:	613c      	str	r4, [r7, #16]
 8007986:	4638      	mov	r0, r7
 8007988:	f001 fa0a 	bl	8008da0 <__mcmp>
 800798c:	2800      	cmp	r0, #0
 800798e:	db22      	blt.n	80079d6 <quorem+0xec>
 8007990:	3601      	adds	r6, #1
 8007992:	4629      	mov	r1, r5
 8007994:	2000      	movs	r0, #0
 8007996:	f858 2b04 	ldr.w	r2, [r8], #4
 800799a:	f8d1 c000 	ldr.w	ip, [r1]
 800799e:	b293      	uxth	r3, r2
 80079a0:	1ac3      	subs	r3, r0, r3
 80079a2:	0c12      	lsrs	r2, r2, #16
 80079a4:	fa13 f38c 	uxtah	r3, r3, ip
 80079a8:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80079ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079b6:	45c1      	cmp	r9, r8
 80079b8:	f841 3b04 	str.w	r3, [r1], #4
 80079bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079c0:	d2e9      	bcs.n	8007996 <quorem+0xac>
 80079c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ca:	b922      	cbnz	r2, 80079d6 <quorem+0xec>
 80079cc:	3b04      	subs	r3, #4
 80079ce:	429d      	cmp	r5, r3
 80079d0:	461a      	mov	r2, r3
 80079d2:	d30a      	bcc.n	80079ea <quorem+0x100>
 80079d4:	613c      	str	r4, [r7, #16]
 80079d6:	4630      	mov	r0, r6
 80079d8:	b003      	add	sp, #12
 80079da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079de:	6812      	ldr	r2, [r2, #0]
 80079e0:	3b04      	subs	r3, #4
 80079e2:	2a00      	cmp	r2, #0
 80079e4:	d1ce      	bne.n	8007984 <quorem+0x9a>
 80079e6:	3c01      	subs	r4, #1
 80079e8:	e7c9      	b.n	800797e <quorem+0x94>
 80079ea:	6812      	ldr	r2, [r2, #0]
 80079ec:	3b04      	subs	r3, #4
 80079ee:	2a00      	cmp	r2, #0
 80079f0:	d1f0      	bne.n	80079d4 <quorem+0xea>
 80079f2:	3c01      	subs	r4, #1
 80079f4:	e7eb      	b.n	80079ce <quorem+0xe4>
 80079f6:	2000      	movs	r0, #0
 80079f8:	e7ee      	b.n	80079d8 <quorem+0xee>
 80079fa:	0000      	movs	r0, r0
 80079fc:	0000      	movs	r0, r0
	...

08007a00 <_dtoa_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	ed2d 8b04 	vpush	{d8-d9}
 8007a08:	69c5      	ldr	r5, [r0, #28]
 8007a0a:	b093      	sub	sp, #76	; 0x4c
 8007a0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007a10:	ec57 6b10 	vmov	r6, r7, d0
 8007a14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007a18:	9107      	str	r1, [sp, #28]
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	920a      	str	r2, [sp, #40]	; 0x28
 8007a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8007a20:	b975      	cbnz	r5, 8007a40 <_dtoa_r+0x40>
 8007a22:	2010      	movs	r0, #16
 8007a24:	f000 fdde 	bl	80085e4 <malloc>
 8007a28:	4602      	mov	r2, r0
 8007a2a:	61e0      	str	r0, [r4, #28]
 8007a2c:	b920      	cbnz	r0, 8007a38 <_dtoa_r+0x38>
 8007a2e:	4bae      	ldr	r3, [pc, #696]	; (8007ce8 <_dtoa_r+0x2e8>)
 8007a30:	21ef      	movs	r1, #239	; 0xef
 8007a32:	48ae      	ldr	r0, [pc, #696]	; (8007cec <_dtoa_r+0x2ec>)
 8007a34:	f001 fb4e 	bl	80090d4 <__assert_func>
 8007a38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007a3c:	6005      	str	r5, [r0, #0]
 8007a3e:	60c5      	str	r5, [r0, #12]
 8007a40:	69e3      	ldr	r3, [r4, #28]
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	b151      	cbz	r1, 8007a5c <_dtoa_r+0x5c>
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	604a      	str	r2, [r1, #4]
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	4093      	lsls	r3, r2
 8007a4e:	608b      	str	r3, [r1, #8]
 8007a50:	4620      	mov	r0, r4
 8007a52:	f000 ff69 	bl	8008928 <_Bfree>
 8007a56:	69e3      	ldr	r3, [r4, #28]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	1e3b      	subs	r3, r7, #0
 8007a5e:	bfbb      	ittet	lt
 8007a60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007a64:	9303      	strlt	r3, [sp, #12]
 8007a66:	2300      	movge	r3, #0
 8007a68:	2201      	movlt	r2, #1
 8007a6a:	bfac      	ite	ge
 8007a6c:	f8c8 3000 	strge.w	r3, [r8]
 8007a70:	f8c8 2000 	strlt.w	r2, [r8]
 8007a74:	4b9e      	ldr	r3, [pc, #632]	; (8007cf0 <_dtoa_r+0x2f0>)
 8007a76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a7a:	ea33 0308 	bics.w	r3, r3, r8
 8007a7e:	d11b      	bne.n	8007ab8 <_dtoa_r+0xb8>
 8007a80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007a82:	f242 730f 	movw	r3, #9999	; 0x270f
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a8c:	4333      	orrs	r3, r6
 8007a8e:	f000 8593 	beq.w	80085b8 <_dtoa_r+0xbb8>
 8007a92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a94:	b963      	cbnz	r3, 8007ab0 <_dtoa_r+0xb0>
 8007a96:	4b97      	ldr	r3, [pc, #604]	; (8007cf4 <_dtoa_r+0x2f4>)
 8007a98:	e027      	b.n	8007aea <_dtoa_r+0xea>
 8007a9a:	4b97      	ldr	r3, [pc, #604]	; (8007cf8 <_dtoa_r+0x2f8>)
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	3308      	adds	r3, #8
 8007aa0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007aa2:	6013      	str	r3, [r2, #0]
 8007aa4:	9800      	ldr	r0, [sp, #0]
 8007aa6:	b013      	add	sp, #76	; 0x4c
 8007aa8:	ecbd 8b04 	vpop	{d8-d9}
 8007aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ab0:	4b90      	ldr	r3, [pc, #576]	; (8007cf4 <_dtoa_r+0x2f4>)
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	3303      	adds	r3, #3
 8007ab6:	e7f3      	b.n	8007aa0 <_dtoa_r+0xa0>
 8007ab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	ec51 0b17 	vmov	r0, r1, d7
 8007ac2:	eeb0 8a47 	vmov.f32	s16, s14
 8007ac6:	eef0 8a67 	vmov.f32	s17, s15
 8007aca:	2300      	movs	r3, #0
 8007acc:	f7f9 f844 	bl	8000b58 <__aeabi_dcmpeq>
 8007ad0:	4681      	mov	r9, r0
 8007ad2:	b160      	cbz	r0, 8007aee <_dtoa_r+0xee>
 8007ad4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	6013      	str	r3, [r2, #0]
 8007ada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8568 	beq.w	80085b2 <_dtoa_r+0xbb2>
 8007ae2:	4b86      	ldr	r3, [pc, #536]	; (8007cfc <_dtoa_r+0x2fc>)
 8007ae4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ae6:	6013      	str	r3, [r2, #0]
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	e7da      	b.n	8007aa4 <_dtoa_r+0xa4>
 8007aee:	aa10      	add	r2, sp, #64	; 0x40
 8007af0:	a911      	add	r1, sp, #68	; 0x44
 8007af2:	4620      	mov	r0, r4
 8007af4:	eeb0 0a48 	vmov.f32	s0, s16
 8007af8:	eef0 0a68 	vmov.f32	s1, s17
 8007afc:	f001 f9f6 	bl	8008eec <__d2b>
 8007b00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007b04:	4682      	mov	sl, r0
 8007b06:	2d00      	cmp	r5, #0
 8007b08:	d07f      	beq.n	8007c0a <_dtoa_r+0x20a>
 8007b0a:	ee18 3a90 	vmov	r3, s17
 8007b0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007b16:	ec51 0b18 	vmov	r0, r1, d8
 8007b1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007b1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007b22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8007b26:	4619      	mov	r1, r3
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b75      	ldr	r3, [pc, #468]	; (8007d00 <_dtoa_r+0x300>)
 8007b2c:	f7f8 fbf4 	bl	8000318 <__aeabi_dsub>
 8007b30:	a367      	add	r3, pc, #412	; (adr r3, 8007cd0 <_dtoa_r+0x2d0>)
 8007b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b36:	f7f8 fda7 	bl	8000688 <__aeabi_dmul>
 8007b3a:	a367      	add	r3, pc, #412	; (adr r3, 8007cd8 <_dtoa_r+0x2d8>)
 8007b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b40:	f7f8 fbec 	bl	800031c <__adddf3>
 8007b44:	4606      	mov	r6, r0
 8007b46:	4628      	mov	r0, r5
 8007b48:	460f      	mov	r7, r1
 8007b4a:	f7f8 fd33 	bl	80005b4 <__aeabi_i2d>
 8007b4e:	a364      	add	r3, pc, #400	; (adr r3, 8007ce0 <_dtoa_r+0x2e0>)
 8007b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b54:	f7f8 fd98 	bl	8000688 <__aeabi_dmul>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fbdc 	bl	800031c <__adddf3>
 8007b64:	4606      	mov	r6, r0
 8007b66:	460f      	mov	r7, r1
 8007b68:	f7f9 f83e 	bl	8000be8 <__aeabi_d2iz>
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4683      	mov	fp, r0
 8007b70:	2300      	movs	r3, #0
 8007b72:	4630      	mov	r0, r6
 8007b74:	4639      	mov	r1, r7
 8007b76:	f7f8 fff9 	bl	8000b6c <__aeabi_dcmplt>
 8007b7a:	b148      	cbz	r0, 8007b90 <_dtoa_r+0x190>
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f7f8 fd19 	bl	80005b4 <__aeabi_i2d>
 8007b82:	4632      	mov	r2, r6
 8007b84:	463b      	mov	r3, r7
 8007b86:	f7f8 ffe7 	bl	8000b58 <__aeabi_dcmpeq>
 8007b8a:	b908      	cbnz	r0, 8007b90 <_dtoa_r+0x190>
 8007b8c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007b90:	f1bb 0f16 	cmp.w	fp, #22
 8007b94:	d857      	bhi.n	8007c46 <_dtoa_r+0x246>
 8007b96:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <_dtoa_r+0x304>)
 8007b98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ba0:	ec51 0b18 	vmov	r0, r1, d8
 8007ba4:	f7f8 ffe2 	bl	8000b6c <__aeabi_dcmplt>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d04e      	beq.n	8007c4a <_dtoa_r+0x24a>
 8007bac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	930c      	str	r3, [sp, #48]	; 0x30
 8007bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007bb6:	1b5b      	subs	r3, r3, r5
 8007bb8:	1e5a      	subs	r2, r3, #1
 8007bba:	bf45      	ittet	mi
 8007bbc:	f1c3 0301 	rsbmi	r3, r3, #1
 8007bc0:	9305      	strmi	r3, [sp, #20]
 8007bc2:	2300      	movpl	r3, #0
 8007bc4:	2300      	movmi	r3, #0
 8007bc6:	9206      	str	r2, [sp, #24]
 8007bc8:	bf54      	ite	pl
 8007bca:	9305      	strpl	r3, [sp, #20]
 8007bcc:	9306      	strmi	r3, [sp, #24]
 8007bce:	f1bb 0f00 	cmp.w	fp, #0
 8007bd2:	db3c      	blt.n	8007c4e <_dtoa_r+0x24e>
 8007bd4:	9b06      	ldr	r3, [sp, #24]
 8007bd6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007bda:	445b      	add	r3, fp
 8007bdc:	9306      	str	r3, [sp, #24]
 8007bde:	2300      	movs	r3, #0
 8007be0:	9308      	str	r3, [sp, #32]
 8007be2:	9b07      	ldr	r3, [sp, #28]
 8007be4:	2b09      	cmp	r3, #9
 8007be6:	d868      	bhi.n	8007cba <_dtoa_r+0x2ba>
 8007be8:	2b05      	cmp	r3, #5
 8007bea:	bfc4      	itt	gt
 8007bec:	3b04      	subgt	r3, #4
 8007bee:	9307      	strgt	r3, [sp, #28]
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	f1a3 0302 	sub.w	r3, r3, #2
 8007bf6:	bfcc      	ite	gt
 8007bf8:	2500      	movgt	r5, #0
 8007bfa:	2501      	movle	r5, #1
 8007bfc:	2b03      	cmp	r3, #3
 8007bfe:	f200 8085 	bhi.w	8007d0c <_dtoa_r+0x30c>
 8007c02:	e8df f003 	tbb	[pc, r3]
 8007c06:	3b2e      	.short	0x3b2e
 8007c08:	5839      	.short	0x5839
 8007c0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007c0e:	441d      	add	r5, r3
 8007c10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007c14:	2b20      	cmp	r3, #32
 8007c16:	bfc1      	itttt	gt
 8007c18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007c1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8007c24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8007c28:	bfd6      	itet	le
 8007c2a:	f1c3 0320 	rsble	r3, r3, #32
 8007c2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c32:	fa06 f003 	lslle.w	r0, r6, r3
 8007c36:	f7f8 fcad 	bl	8000594 <__aeabi_ui2d>
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8007c40:	3d01      	subs	r5, #1
 8007c42:	920e      	str	r2, [sp, #56]	; 0x38
 8007c44:	e76f      	b.n	8007b26 <_dtoa_r+0x126>
 8007c46:	2301      	movs	r3, #1
 8007c48:	e7b3      	b.n	8007bb2 <_dtoa_r+0x1b2>
 8007c4a:	900c      	str	r0, [sp, #48]	; 0x30
 8007c4c:	e7b2      	b.n	8007bb4 <_dtoa_r+0x1b4>
 8007c4e:	9b05      	ldr	r3, [sp, #20]
 8007c50:	eba3 030b 	sub.w	r3, r3, fp
 8007c54:	9305      	str	r3, [sp, #20]
 8007c56:	f1cb 0300 	rsb	r3, fp, #0
 8007c5a:	9308      	str	r3, [sp, #32]
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c60:	e7bf      	b.n	8007be2 <_dtoa_r+0x1e2>
 8007c62:	2300      	movs	r3, #0
 8007c64:	9309      	str	r3, [sp, #36]	; 0x24
 8007c66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	dc52      	bgt.n	8007d12 <_dtoa_r+0x312>
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	9301      	str	r3, [sp, #4]
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	461a      	mov	r2, r3
 8007c74:	920a      	str	r2, [sp, #40]	; 0x28
 8007c76:	e00b      	b.n	8007c90 <_dtoa_r+0x290>
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e7f3      	b.n	8007c64 <_dtoa_r+0x264>
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c82:	445b      	add	r3, fp
 8007c84:	9301      	str	r3, [sp, #4]
 8007c86:	3301      	adds	r3, #1
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	9304      	str	r3, [sp, #16]
 8007c8c:	bfb8      	it	lt
 8007c8e:	2301      	movlt	r3, #1
 8007c90:	69e0      	ldr	r0, [r4, #28]
 8007c92:	2100      	movs	r1, #0
 8007c94:	2204      	movs	r2, #4
 8007c96:	f102 0614 	add.w	r6, r2, #20
 8007c9a:	429e      	cmp	r6, r3
 8007c9c:	d93d      	bls.n	8007d1a <_dtoa_r+0x31a>
 8007c9e:	6041      	str	r1, [r0, #4]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	f000 fe01 	bl	80088a8 <_Balloc>
 8007ca6:	9000      	str	r0, [sp, #0]
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d139      	bne.n	8007d20 <_dtoa_r+0x320>
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <_dtoa_r+0x308>)
 8007cae:	4602      	mov	r2, r0
 8007cb0:	f240 11af 	movw	r1, #431	; 0x1af
 8007cb4:	e6bd      	b.n	8007a32 <_dtoa_r+0x32>
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e7e1      	b.n	8007c7e <_dtoa_r+0x27e>
 8007cba:	2501      	movs	r5, #1
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	9307      	str	r3, [sp, #28]
 8007cc0:	9509      	str	r5, [sp, #36]	; 0x24
 8007cc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007cc6:	9301      	str	r3, [sp, #4]
 8007cc8:	9304      	str	r3, [sp, #16]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	2312      	movs	r3, #18
 8007cce:	e7d1      	b.n	8007c74 <_dtoa_r+0x274>
 8007cd0:	636f4361 	.word	0x636f4361
 8007cd4:	3fd287a7 	.word	0x3fd287a7
 8007cd8:	8b60c8b3 	.word	0x8b60c8b3
 8007cdc:	3fc68a28 	.word	0x3fc68a28
 8007ce0:	509f79fb 	.word	0x509f79fb
 8007ce4:	3fd34413 	.word	0x3fd34413
 8007ce8:	08009a0d 	.word	0x08009a0d
 8007cec:	08009a24 	.word	0x08009a24
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	08009a09 	.word	0x08009a09
 8007cf8:	08009a00 	.word	0x08009a00
 8007cfc:	080099dd 	.word	0x080099dd
 8007d00:	3ff80000 	.word	0x3ff80000
 8007d04:	08009b10 	.word	0x08009b10
 8007d08:	08009a7c 	.word	0x08009a7c
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d10:	e7d7      	b.n	8007cc2 <_dtoa_r+0x2c2>
 8007d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d14:	9301      	str	r3, [sp, #4]
 8007d16:	9304      	str	r3, [sp, #16]
 8007d18:	e7ba      	b.n	8007c90 <_dtoa_r+0x290>
 8007d1a:	3101      	adds	r1, #1
 8007d1c:	0052      	lsls	r2, r2, #1
 8007d1e:	e7ba      	b.n	8007c96 <_dtoa_r+0x296>
 8007d20:	69e3      	ldr	r3, [r4, #28]
 8007d22:	9a00      	ldr	r2, [sp, #0]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	9b04      	ldr	r3, [sp, #16]
 8007d28:	2b0e      	cmp	r3, #14
 8007d2a:	f200 80a8 	bhi.w	8007e7e <_dtoa_r+0x47e>
 8007d2e:	2d00      	cmp	r5, #0
 8007d30:	f000 80a5 	beq.w	8007e7e <_dtoa_r+0x47e>
 8007d34:	f1bb 0f00 	cmp.w	fp, #0
 8007d38:	dd38      	ble.n	8007dac <_dtoa_r+0x3ac>
 8007d3a:	4bc0      	ldr	r3, [pc, #768]	; (800803c <_dtoa_r+0x63c>)
 8007d3c:	f00b 020f 	and.w	r2, fp, #15
 8007d40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d44:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007d48:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007d4c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007d50:	d019      	beq.n	8007d86 <_dtoa_r+0x386>
 8007d52:	4bbb      	ldr	r3, [pc, #748]	; (8008040 <_dtoa_r+0x640>)
 8007d54:	ec51 0b18 	vmov	r0, r1, d8
 8007d58:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d5c:	f7f8 fdbe 	bl	80008dc <__aeabi_ddiv>
 8007d60:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d64:	f008 080f 	and.w	r8, r8, #15
 8007d68:	2503      	movs	r5, #3
 8007d6a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008040 <_dtoa_r+0x640>
 8007d6e:	f1b8 0f00 	cmp.w	r8, #0
 8007d72:	d10a      	bne.n	8007d8a <_dtoa_r+0x38a>
 8007d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d78:	4632      	mov	r2, r6
 8007d7a:	463b      	mov	r3, r7
 8007d7c:	f7f8 fdae 	bl	80008dc <__aeabi_ddiv>
 8007d80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d84:	e02b      	b.n	8007dde <_dtoa_r+0x3de>
 8007d86:	2502      	movs	r5, #2
 8007d88:	e7ef      	b.n	8007d6a <_dtoa_r+0x36a>
 8007d8a:	f018 0f01 	tst.w	r8, #1
 8007d8e:	d008      	beq.n	8007da2 <_dtoa_r+0x3a2>
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007d98:	f7f8 fc76 	bl	8000688 <__aeabi_dmul>
 8007d9c:	3501      	adds	r5, #1
 8007d9e:	4606      	mov	r6, r0
 8007da0:	460f      	mov	r7, r1
 8007da2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007da6:	f109 0908 	add.w	r9, r9, #8
 8007daa:	e7e0      	b.n	8007d6e <_dtoa_r+0x36e>
 8007dac:	f000 809f 	beq.w	8007eee <_dtoa_r+0x4ee>
 8007db0:	f1cb 0600 	rsb	r6, fp, #0
 8007db4:	4ba1      	ldr	r3, [pc, #644]	; (800803c <_dtoa_r+0x63c>)
 8007db6:	4fa2      	ldr	r7, [pc, #648]	; (8008040 <_dtoa_r+0x640>)
 8007db8:	f006 020f 	and.w	r2, r6, #15
 8007dbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	ec51 0b18 	vmov	r0, r1, d8
 8007dc8:	f7f8 fc5e 	bl	8000688 <__aeabi_dmul>
 8007dcc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dd0:	1136      	asrs	r6, r6, #4
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	2502      	movs	r5, #2
 8007dd6:	2e00      	cmp	r6, #0
 8007dd8:	d17e      	bne.n	8007ed8 <_dtoa_r+0x4d8>
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1d0      	bne.n	8007d80 <_dtoa_r+0x380>
 8007dde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 8084 	beq.w	8007ef2 <_dtoa_r+0x4f2>
 8007dea:	4b96      	ldr	r3, [pc, #600]	; (8008044 <_dtoa_r+0x644>)
 8007dec:	2200      	movs	r2, #0
 8007dee:	4640      	mov	r0, r8
 8007df0:	4649      	mov	r1, r9
 8007df2:	f7f8 febb 	bl	8000b6c <__aeabi_dcmplt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	d07b      	beq.n	8007ef2 <_dtoa_r+0x4f2>
 8007dfa:	9b04      	ldr	r3, [sp, #16]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d078      	beq.n	8007ef2 <_dtoa_r+0x4f2>
 8007e00:	9b01      	ldr	r3, [sp, #4]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	dd39      	ble.n	8007e7a <_dtoa_r+0x47a>
 8007e06:	4b90      	ldr	r3, [pc, #576]	; (8008048 <_dtoa_r+0x648>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4640      	mov	r0, r8
 8007e0c:	4649      	mov	r1, r9
 8007e0e:	f7f8 fc3b 	bl	8000688 <__aeabi_dmul>
 8007e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e16:	9e01      	ldr	r6, [sp, #4]
 8007e18:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8007e1c:	3501      	adds	r5, #1
 8007e1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007e22:	4628      	mov	r0, r5
 8007e24:	f7f8 fbc6 	bl	80005b4 <__aeabi_i2d>
 8007e28:	4642      	mov	r2, r8
 8007e2a:	464b      	mov	r3, r9
 8007e2c:	f7f8 fc2c 	bl	8000688 <__aeabi_dmul>
 8007e30:	4b86      	ldr	r3, [pc, #536]	; (800804c <_dtoa_r+0x64c>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	f7f8 fa72 	bl	800031c <__adddf3>
 8007e38:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007e3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e40:	9303      	str	r3, [sp, #12]
 8007e42:	2e00      	cmp	r6, #0
 8007e44:	d158      	bne.n	8007ef8 <_dtoa_r+0x4f8>
 8007e46:	4b82      	ldr	r3, [pc, #520]	; (8008050 <_dtoa_r+0x650>)
 8007e48:	2200      	movs	r2, #0
 8007e4a:	4640      	mov	r0, r8
 8007e4c:	4649      	mov	r1, r9
 8007e4e:	f7f8 fa63 	bl	8000318 <__aeabi_dsub>
 8007e52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e56:	4680      	mov	r8, r0
 8007e58:	4689      	mov	r9, r1
 8007e5a:	f7f8 fea5 	bl	8000ba8 <__aeabi_dcmpgt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	f040 8296 	bne.w	8008390 <_dtoa_r+0x990>
 8007e64:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007e68:	4640      	mov	r0, r8
 8007e6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e6e:	4649      	mov	r1, r9
 8007e70:	f7f8 fe7c 	bl	8000b6c <__aeabi_dcmplt>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	f040 8289 	bne.w	800838c <_dtoa_r+0x98c>
 8007e7a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007e7e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	f2c0 814e 	blt.w	8008122 <_dtoa_r+0x722>
 8007e86:	f1bb 0f0e 	cmp.w	fp, #14
 8007e8a:	f300 814a 	bgt.w	8008122 <_dtoa_r+0x722>
 8007e8e:	4b6b      	ldr	r3, [pc, #428]	; (800803c <_dtoa_r+0x63c>)
 8007e90:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007e94:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007e98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	f280 80dc 	bge.w	8008058 <_dtoa_r+0x658>
 8007ea0:	9b04      	ldr	r3, [sp, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f300 80d8 	bgt.w	8008058 <_dtoa_r+0x658>
 8007ea8:	f040 826f 	bne.w	800838a <_dtoa_r+0x98a>
 8007eac:	4b68      	ldr	r3, [pc, #416]	; (8008050 <_dtoa_r+0x650>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	4640      	mov	r0, r8
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	f7f8 fbe8 	bl	8000688 <__aeabi_dmul>
 8007eb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ebc:	f7f8 fe6a 	bl	8000b94 <__aeabi_dcmpge>
 8007ec0:	9e04      	ldr	r6, [sp, #16]
 8007ec2:	4637      	mov	r7, r6
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 8245 	bne.w	8008354 <_dtoa_r+0x954>
 8007eca:	9d00      	ldr	r5, [sp, #0]
 8007ecc:	2331      	movs	r3, #49	; 0x31
 8007ece:	f805 3b01 	strb.w	r3, [r5], #1
 8007ed2:	f10b 0b01 	add.w	fp, fp, #1
 8007ed6:	e241      	b.n	800835c <_dtoa_r+0x95c>
 8007ed8:	07f2      	lsls	r2, r6, #31
 8007eda:	d505      	bpl.n	8007ee8 <_dtoa_r+0x4e8>
 8007edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ee0:	f7f8 fbd2 	bl	8000688 <__aeabi_dmul>
 8007ee4:	3501      	adds	r5, #1
 8007ee6:	2301      	movs	r3, #1
 8007ee8:	1076      	asrs	r6, r6, #1
 8007eea:	3708      	adds	r7, #8
 8007eec:	e773      	b.n	8007dd6 <_dtoa_r+0x3d6>
 8007eee:	2502      	movs	r5, #2
 8007ef0:	e775      	b.n	8007dde <_dtoa_r+0x3de>
 8007ef2:	9e04      	ldr	r6, [sp, #16]
 8007ef4:	465f      	mov	r7, fp
 8007ef6:	e792      	b.n	8007e1e <_dtoa_r+0x41e>
 8007ef8:	9900      	ldr	r1, [sp, #0]
 8007efa:	4b50      	ldr	r3, [pc, #320]	; (800803c <_dtoa_r+0x63c>)
 8007efc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007f00:	4431      	add	r1, r6
 8007f02:	9102      	str	r1, [sp, #8]
 8007f04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007f06:	eeb0 9a47 	vmov.f32	s18, s14
 8007f0a:	eef0 9a67 	vmov.f32	s19, s15
 8007f0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007f12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d044      	beq.n	8007fa4 <_dtoa_r+0x5a4>
 8007f1a:	494e      	ldr	r1, [pc, #312]	; (8008054 <_dtoa_r+0x654>)
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f7f8 fcdd 	bl	80008dc <__aeabi_ddiv>
 8007f22:	ec53 2b19 	vmov	r2, r3, d9
 8007f26:	f7f8 f9f7 	bl	8000318 <__aeabi_dsub>
 8007f2a:	9d00      	ldr	r5, [sp, #0]
 8007f2c:	ec41 0b19 	vmov	d9, r0, r1
 8007f30:	4649      	mov	r1, r9
 8007f32:	4640      	mov	r0, r8
 8007f34:	f7f8 fe58 	bl	8000be8 <__aeabi_d2iz>
 8007f38:	4606      	mov	r6, r0
 8007f3a:	f7f8 fb3b 	bl	80005b4 <__aeabi_i2d>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	4640      	mov	r0, r8
 8007f44:	4649      	mov	r1, r9
 8007f46:	f7f8 f9e7 	bl	8000318 <__aeabi_dsub>
 8007f4a:	3630      	adds	r6, #48	; 0x30
 8007f4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007f50:	ec53 2b19 	vmov	r2, r3, d9
 8007f54:	4680      	mov	r8, r0
 8007f56:	4689      	mov	r9, r1
 8007f58:	f7f8 fe08 	bl	8000b6c <__aeabi_dcmplt>
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	d164      	bne.n	800802a <_dtoa_r+0x62a>
 8007f60:	4642      	mov	r2, r8
 8007f62:	464b      	mov	r3, r9
 8007f64:	4937      	ldr	r1, [pc, #220]	; (8008044 <_dtoa_r+0x644>)
 8007f66:	2000      	movs	r0, #0
 8007f68:	f7f8 f9d6 	bl	8000318 <__aeabi_dsub>
 8007f6c:	ec53 2b19 	vmov	r2, r3, d9
 8007f70:	f7f8 fdfc 	bl	8000b6c <__aeabi_dcmplt>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	f040 80b6 	bne.w	80080e6 <_dtoa_r+0x6e6>
 8007f7a:	9b02      	ldr	r3, [sp, #8]
 8007f7c:	429d      	cmp	r5, r3
 8007f7e:	f43f af7c 	beq.w	8007e7a <_dtoa_r+0x47a>
 8007f82:	4b31      	ldr	r3, [pc, #196]	; (8008048 <_dtoa_r+0x648>)
 8007f84:	ec51 0b19 	vmov	r0, r1, d9
 8007f88:	2200      	movs	r2, #0
 8007f8a:	f7f8 fb7d 	bl	8000688 <__aeabi_dmul>
 8007f8e:	4b2e      	ldr	r3, [pc, #184]	; (8008048 <_dtoa_r+0x648>)
 8007f90:	ec41 0b19 	vmov	d9, r0, r1
 8007f94:	2200      	movs	r2, #0
 8007f96:	4640      	mov	r0, r8
 8007f98:	4649      	mov	r1, r9
 8007f9a:	f7f8 fb75 	bl	8000688 <__aeabi_dmul>
 8007f9e:	4680      	mov	r8, r0
 8007fa0:	4689      	mov	r9, r1
 8007fa2:	e7c5      	b.n	8007f30 <_dtoa_r+0x530>
 8007fa4:	ec51 0b17 	vmov	r0, r1, d7
 8007fa8:	f7f8 fb6e 	bl	8000688 <__aeabi_dmul>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	9d00      	ldr	r5, [sp, #0]
 8007fb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fb2:	ec41 0b19 	vmov	d9, r0, r1
 8007fb6:	4649      	mov	r1, r9
 8007fb8:	4640      	mov	r0, r8
 8007fba:	f7f8 fe15 	bl	8000be8 <__aeabi_d2iz>
 8007fbe:	4606      	mov	r6, r0
 8007fc0:	f7f8 faf8 	bl	80005b4 <__aeabi_i2d>
 8007fc4:	3630      	adds	r6, #48	; 0x30
 8007fc6:	4602      	mov	r2, r0
 8007fc8:	460b      	mov	r3, r1
 8007fca:	4640      	mov	r0, r8
 8007fcc:	4649      	mov	r1, r9
 8007fce:	f7f8 f9a3 	bl	8000318 <__aeabi_dsub>
 8007fd2:	f805 6b01 	strb.w	r6, [r5], #1
 8007fd6:	9b02      	ldr	r3, [sp, #8]
 8007fd8:	429d      	cmp	r5, r3
 8007fda:	4680      	mov	r8, r0
 8007fdc:	4689      	mov	r9, r1
 8007fde:	f04f 0200 	mov.w	r2, #0
 8007fe2:	d124      	bne.n	800802e <_dtoa_r+0x62e>
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <_dtoa_r+0x654>)
 8007fe6:	ec51 0b19 	vmov	r0, r1, d9
 8007fea:	f7f8 f997 	bl	800031c <__adddf3>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	f7f8 fdd7 	bl	8000ba8 <__aeabi_dcmpgt>
 8007ffa:	2800      	cmp	r0, #0
 8007ffc:	d173      	bne.n	80080e6 <_dtoa_r+0x6e6>
 8007ffe:	ec53 2b19 	vmov	r2, r3, d9
 8008002:	4914      	ldr	r1, [pc, #80]	; (8008054 <_dtoa_r+0x654>)
 8008004:	2000      	movs	r0, #0
 8008006:	f7f8 f987 	bl	8000318 <__aeabi_dsub>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4640      	mov	r0, r8
 8008010:	4649      	mov	r1, r9
 8008012:	f7f8 fdab 	bl	8000b6c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	f43f af2f 	beq.w	8007e7a <_dtoa_r+0x47a>
 800801c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800801e:	1e6b      	subs	r3, r5, #1
 8008020:	930f      	str	r3, [sp, #60]	; 0x3c
 8008022:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008026:	2b30      	cmp	r3, #48	; 0x30
 8008028:	d0f8      	beq.n	800801c <_dtoa_r+0x61c>
 800802a:	46bb      	mov	fp, r7
 800802c:	e04a      	b.n	80080c4 <_dtoa_r+0x6c4>
 800802e:	4b06      	ldr	r3, [pc, #24]	; (8008048 <_dtoa_r+0x648>)
 8008030:	f7f8 fb2a 	bl	8000688 <__aeabi_dmul>
 8008034:	4680      	mov	r8, r0
 8008036:	4689      	mov	r9, r1
 8008038:	e7bd      	b.n	8007fb6 <_dtoa_r+0x5b6>
 800803a:	bf00      	nop
 800803c:	08009b10 	.word	0x08009b10
 8008040:	08009ae8 	.word	0x08009ae8
 8008044:	3ff00000 	.word	0x3ff00000
 8008048:	40240000 	.word	0x40240000
 800804c:	401c0000 	.word	0x401c0000
 8008050:	40140000 	.word	0x40140000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800805c:	9d00      	ldr	r5, [sp, #0]
 800805e:	4642      	mov	r2, r8
 8008060:	464b      	mov	r3, r9
 8008062:	4630      	mov	r0, r6
 8008064:	4639      	mov	r1, r7
 8008066:	f7f8 fc39 	bl	80008dc <__aeabi_ddiv>
 800806a:	f7f8 fdbd 	bl	8000be8 <__aeabi_d2iz>
 800806e:	9001      	str	r0, [sp, #4]
 8008070:	f7f8 faa0 	bl	80005b4 <__aeabi_i2d>
 8008074:	4642      	mov	r2, r8
 8008076:	464b      	mov	r3, r9
 8008078:	f7f8 fb06 	bl	8000688 <__aeabi_dmul>
 800807c:	4602      	mov	r2, r0
 800807e:	460b      	mov	r3, r1
 8008080:	4630      	mov	r0, r6
 8008082:	4639      	mov	r1, r7
 8008084:	f7f8 f948 	bl	8000318 <__aeabi_dsub>
 8008088:	9e01      	ldr	r6, [sp, #4]
 800808a:	9f04      	ldr	r7, [sp, #16]
 800808c:	3630      	adds	r6, #48	; 0x30
 800808e:	f805 6b01 	strb.w	r6, [r5], #1
 8008092:	9e00      	ldr	r6, [sp, #0]
 8008094:	1bae      	subs	r6, r5, r6
 8008096:	42b7      	cmp	r7, r6
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	d134      	bne.n	8008108 <_dtoa_r+0x708>
 800809e:	f7f8 f93d 	bl	800031c <__adddf3>
 80080a2:	4642      	mov	r2, r8
 80080a4:	464b      	mov	r3, r9
 80080a6:	4606      	mov	r6, r0
 80080a8:	460f      	mov	r7, r1
 80080aa:	f7f8 fd7d 	bl	8000ba8 <__aeabi_dcmpgt>
 80080ae:	b9c8      	cbnz	r0, 80080e4 <_dtoa_r+0x6e4>
 80080b0:	4642      	mov	r2, r8
 80080b2:	464b      	mov	r3, r9
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 fd4e 	bl	8000b58 <__aeabi_dcmpeq>
 80080bc:	b110      	cbz	r0, 80080c4 <_dtoa_r+0x6c4>
 80080be:	9b01      	ldr	r3, [sp, #4]
 80080c0:	07db      	lsls	r3, r3, #31
 80080c2:	d40f      	bmi.n	80080e4 <_dtoa_r+0x6e4>
 80080c4:	4651      	mov	r1, sl
 80080c6:	4620      	mov	r0, r4
 80080c8:	f000 fc2e 	bl	8008928 <_Bfree>
 80080cc:	2300      	movs	r3, #0
 80080ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80080d0:	702b      	strb	r3, [r5, #0]
 80080d2:	f10b 0301 	add.w	r3, fp, #1
 80080d6:	6013      	str	r3, [r2, #0]
 80080d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f43f ace2 	beq.w	8007aa4 <_dtoa_r+0xa4>
 80080e0:	601d      	str	r5, [r3, #0]
 80080e2:	e4df      	b.n	8007aa4 <_dtoa_r+0xa4>
 80080e4:	465f      	mov	r7, fp
 80080e6:	462b      	mov	r3, r5
 80080e8:	461d      	mov	r5, r3
 80080ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080ee:	2a39      	cmp	r2, #57	; 0x39
 80080f0:	d106      	bne.n	8008100 <_dtoa_r+0x700>
 80080f2:	9a00      	ldr	r2, [sp, #0]
 80080f4:	429a      	cmp	r2, r3
 80080f6:	d1f7      	bne.n	80080e8 <_dtoa_r+0x6e8>
 80080f8:	9900      	ldr	r1, [sp, #0]
 80080fa:	2230      	movs	r2, #48	; 0x30
 80080fc:	3701      	adds	r7, #1
 80080fe:	700a      	strb	r2, [r1, #0]
 8008100:	781a      	ldrb	r2, [r3, #0]
 8008102:	3201      	adds	r2, #1
 8008104:	701a      	strb	r2, [r3, #0]
 8008106:	e790      	b.n	800802a <_dtoa_r+0x62a>
 8008108:	4ba3      	ldr	r3, [pc, #652]	; (8008398 <_dtoa_r+0x998>)
 800810a:	2200      	movs	r2, #0
 800810c:	f7f8 fabc 	bl	8000688 <__aeabi_dmul>
 8008110:	2200      	movs	r2, #0
 8008112:	2300      	movs	r3, #0
 8008114:	4606      	mov	r6, r0
 8008116:	460f      	mov	r7, r1
 8008118:	f7f8 fd1e 	bl	8000b58 <__aeabi_dcmpeq>
 800811c:	2800      	cmp	r0, #0
 800811e:	d09e      	beq.n	800805e <_dtoa_r+0x65e>
 8008120:	e7d0      	b.n	80080c4 <_dtoa_r+0x6c4>
 8008122:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008124:	2a00      	cmp	r2, #0
 8008126:	f000 80ca 	beq.w	80082be <_dtoa_r+0x8be>
 800812a:	9a07      	ldr	r2, [sp, #28]
 800812c:	2a01      	cmp	r2, #1
 800812e:	f300 80ad 	bgt.w	800828c <_dtoa_r+0x88c>
 8008132:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008134:	2a00      	cmp	r2, #0
 8008136:	f000 80a5 	beq.w	8008284 <_dtoa_r+0x884>
 800813a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800813e:	9e08      	ldr	r6, [sp, #32]
 8008140:	9d05      	ldr	r5, [sp, #20]
 8008142:	9a05      	ldr	r2, [sp, #20]
 8008144:	441a      	add	r2, r3
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	9a06      	ldr	r2, [sp, #24]
 800814a:	2101      	movs	r1, #1
 800814c:	441a      	add	r2, r3
 800814e:	4620      	mov	r0, r4
 8008150:	9206      	str	r2, [sp, #24]
 8008152:	f000 fc9f 	bl	8008a94 <__i2b>
 8008156:	4607      	mov	r7, r0
 8008158:	b165      	cbz	r5, 8008174 <_dtoa_r+0x774>
 800815a:	9b06      	ldr	r3, [sp, #24]
 800815c:	2b00      	cmp	r3, #0
 800815e:	dd09      	ble.n	8008174 <_dtoa_r+0x774>
 8008160:	42ab      	cmp	r3, r5
 8008162:	9a05      	ldr	r2, [sp, #20]
 8008164:	bfa8      	it	ge
 8008166:	462b      	movge	r3, r5
 8008168:	1ad2      	subs	r2, r2, r3
 800816a:	9205      	str	r2, [sp, #20]
 800816c:	9a06      	ldr	r2, [sp, #24]
 800816e:	1aed      	subs	r5, r5, r3
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	9306      	str	r3, [sp, #24]
 8008174:	9b08      	ldr	r3, [sp, #32]
 8008176:	b1f3      	cbz	r3, 80081b6 <_dtoa_r+0x7b6>
 8008178:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817a:	2b00      	cmp	r3, #0
 800817c:	f000 80a3 	beq.w	80082c6 <_dtoa_r+0x8c6>
 8008180:	2e00      	cmp	r6, #0
 8008182:	dd10      	ble.n	80081a6 <_dtoa_r+0x7a6>
 8008184:	4639      	mov	r1, r7
 8008186:	4632      	mov	r2, r6
 8008188:	4620      	mov	r0, r4
 800818a:	f000 fd43 	bl	8008c14 <__pow5mult>
 800818e:	4652      	mov	r2, sl
 8008190:	4601      	mov	r1, r0
 8008192:	4607      	mov	r7, r0
 8008194:	4620      	mov	r0, r4
 8008196:	f000 fc93 	bl	8008ac0 <__multiply>
 800819a:	4651      	mov	r1, sl
 800819c:	4680      	mov	r8, r0
 800819e:	4620      	mov	r0, r4
 80081a0:	f000 fbc2 	bl	8008928 <_Bfree>
 80081a4:	46c2      	mov	sl, r8
 80081a6:	9b08      	ldr	r3, [sp, #32]
 80081a8:	1b9a      	subs	r2, r3, r6
 80081aa:	d004      	beq.n	80081b6 <_dtoa_r+0x7b6>
 80081ac:	4651      	mov	r1, sl
 80081ae:	4620      	mov	r0, r4
 80081b0:	f000 fd30 	bl	8008c14 <__pow5mult>
 80081b4:	4682      	mov	sl, r0
 80081b6:	2101      	movs	r1, #1
 80081b8:	4620      	mov	r0, r4
 80081ba:	f000 fc6b 	bl	8008a94 <__i2b>
 80081be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	4606      	mov	r6, r0
 80081c4:	f340 8081 	ble.w	80082ca <_dtoa_r+0x8ca>
 80081c8:	461a      	mov	r2, r3
 80081ca:	4601      	mov	r1, r0
 80081cc:	4620      	mov	r0, r4
 80081ce:	f000 fd21 	bl	8008c14 <__pow5mult>
 80081d2:	9b07      	ldr	r3, [sp, #28]
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	4606      	mov	r6, r0
 80081d8:	dd7a      	ble.n	80082d0 <_dtoa_r+0x8d0>
 80081da:	f04f 0800 	mov.w	r8, #0
 80081de:	6933      	ldr	r3, [r6, #16]
 80081e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80081e4:	6918      	ldr	r0, [r3, #16]
 80081e6:	f000 fc07 	bl	80089f8 <__hi0bits>
 80081ea:	f1c0 0020 	rsb	r0, r0, #32
 80081ee:	9b06      	ldr	r3, [sp, #24]
 80081f0:	4418      	add	r0, r3
 80081f2:	f010 001f 	ands.w	r0, r0, #31
 80081f6:	f000 8094 	beq.w	8008322 <_dtoa_r+0x922>
 80081fa:	f1c0 0320 	rsb	r3, r0, #32
 80081fe:	2b04      	cmp	r3, #4
 8008200:	f340 8085 	ble.w	800830e <_dtoa_r+0x90e>
 8008204:	9b05      	ldr	r3, [sp, #20]
 8008206:	f1c0 001c 	rsb	r0, r0, #28
 800820a:	4403      	add	r3, r0
 800820c:	9305      	str	r3, [sp, #20]
 800820e:	9b06      	ldr	r3, [sp, #24]
 8008210:	4403      	add	r3, r0
 8008212:	4405      	add	r5, r0
 8008214:	9306      	str	r3, [sp, #24]
 8008216:	9b05      	ldr	r3, [sp, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	dd05      	ble.n	8008228 <_dtoa_r+0x828>
 800821c:	4651      	mov	r1, sl
 800821e:	461a      	mov	r2, r3
 8008220:	4620      	mov	r0, r4
 8008222:	f000 fd51 	bl	8008cc8 <__lshift>
 8008226:	4682      	mov	sl, r0
 8008228:	9b06      	ldr	r3, [sp, #24]
 800822a:	2b00      	cmp	r3, #0
 800822c:	dd05      	ble.n	800823a <_dtoa_r+0x83a>
 800822e:	4631      	mov	r1, r6
 8008230:	461a      	mov	r2, r3
 8008232:	4620      	mov	r0, r4
 8008234:	f000 fd48 	bl	8008cc8 <__lshift>
 8008238:	4606      	mov	r6, r0
 800823a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800823c:	2b00      	cmp	r3, #0
 800823e:	d072      	beq.n	8008326 <_dtoa_r+0x926>
 8008240:	4631      	mov	r1, r6
 8008242:	4650      	mov	r0, sl
 8008244:	f000 fdac 	bl	8008da0 <__mcmp>
 8008248:	2800      	cmp	r0, #0
 800824a:	da6c      	bge.n	8008326 <_dtoa_r+0x926>
 800824c:	2300      	movs	r3, #0
 800824e:	4651      	mov	r1, sl
 8008250:	220a      	movs	r2, #10
 8008252:	4620      	mov	r0, r4
 8008254:	f000 fb8a 	bl	800896c <__multadd>
 8008258:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800825a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800825e:	4682      	mov	sl, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 81b0 	beq.w	80085c6 <_dtoa_r+0xbc6>
 8008266:	2300      	movs	r3, #0
 8008268:	4639      	mov	r1, r7
 800826a:	220a      	movs	r2, #10
 800826c:	4620      	mov	r0, r4
 800826e:	f000 fb7d 	bl	800896c <__multadd>
 8008272:	9b01      	ldr	r3, [sp, #4]
 8008274:	2b00      	cmp	r3, #0
 8008276:	4607      	mov	r7, r0
 8008278:	f300 8096 	bgt.w	80083a8 <_dtoa_r+0x9a8>
 800827c:	9b07      	ldr	r3, [sp, #28]
 800827e:	2b02      	cmp	r3, #2
 8008280:	dc59      	bgt.n	8008336 <_dtoa_r+0x936>
 8008282:	e091      	b.n	80083a8 <_dtoa_r+0x9a8>
 8008284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800828a:	e758      	b.n	800813e <_dtoa_r+0x73e>
 800828c:	9b04      	ldr	r3, [sp, #16]
 800828e:	1e5e      	subs	r6, r3, #1
 8008290:	9b08      	ldr	r3, [sp, #32]
 8008292:	42b3      	cmp	r3, r6
 8008294:	bfbf      	itttt	lt
 8008296:	9b08      	ldrlt	r3, [sp, #32]
 8008298:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800829a:	9608      	strlt	r6, [sp, #32]
 800829c:	1af3      	sublt	r3, r6, r3
 800829e:	bfb4      	ite	lt
 80082a0:	18d2      	addlt	r2, r2, r3
 80082a2:	1b9e      	subge	r6, r3, r6
 80082a4:	9b04      	ldr	r3, [sp, #16]
 80082a6:	bfbc      	itt	lt
 80082a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80082aa:	2600      	movlt	r6, #0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	bfb7      	itett	lt
 80082b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80082b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80082b8:	1a9d      	sublt	r5, r3, r2
 80082ba:	2300      	movlt	r3, #0
 80082bc:	e741      	b.n	8008142 <_dtoa_r+0x742>
 80082be:	9e08      	ldr	r6, [sp, #32]
 80082c0:	9d05      	ldr	r5, [sp, #20]
 80082c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80082c4:	e748      	b.n	8008158 <_dtoa_r+0x758>
 80082c6:	9a08      	ldr	r2, [sp, #32]
 80082c8:	e770      	b.n	80081ac <_dtoa_r+0x7ac>
 80082ca:	9b07      	ldr	r3, [sp, #28]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	dc19      	bgt.n	8008304 <_dtoa_r+0x904>
 80082d0:	9b02      	ldr	r3, [sp, #8]
 80082d2:	b9bb      	cbnz	r3, 8008304 <_dtoa_r+0x904>
 80082d4:	9b03      	ldr	r3, [sp, #12]
 80082d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082da:	b99b      	cbnz	r3, 8008304 <_dtoa_r+0x904>
 80082dc:	9b03      	ldr	r3, [sp, #12]
 80082de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80082e2:	0d1b      	lsrs	r3, r3, #20
 80082e4:	051b      	lsls	r3, r3, #20
 80082e6:	b183      	cbz	r3, 800830a <_dtoa_r+0x90a>
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	3301      	adds	r3, #1
 80082ec:	9305      	str	r3, [sp, #20]
 80082ee:	9b06      	ldr	r3, [sp, #24]
 80082f0:	3301      	adds	r3, #1
 80082f2:	9306      	str	r3, [sp, #24]
 80082f4:	f04f 0801 	mov.w	r8, #1
 80082f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	f47f af6f 	bne.w	80081de <_dtoa_r+0x7de>
 8008300:	2001      	movs	r0, #1
 8008302:	e774      	b.n	80081ee <_dtoa_r+0x7ee>
 8008304:	f04f 0800 	mov.w	r8, #0
 8008308:	e7f6      	b.n	80082f8 <_dtoa_r+0x8f8>
 800830a:	4698      	mov	r8, r3
 800830c:	e7f4      	b.n	80082f8 <_dtoa_r+0x8f8>
 800830e:	d082      	beq.n	8008216 <_dtoa_r+0x816>
 8008310:	9a05      	ldr	r2, [sp, #20]
 8008312:	331c      	adds	r3, #28
 8008314:	441a      	add	r2, r3
 8008316:	9205      	str	r2, [sp, #20]
 8008318:	9a06      	ldr	r2, [sp, #24]
 800831a:	441a      	add	r2, r3
 800831c:	441d      	add	r5, r3
 800831e:	9206      	str	r2, [sp, #24]
 8008320:	e779      	b.n	8008216 <_dtoa_r+0x816>
 8008322:	4603      	mov	r3, r0
 8008324:	e7f4      	b.n	8008310 <_dtoa_r+0x910>
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	2b00      	cmp	r3, #0
 800832a:	dc37      	bgt.n	800839c <_dtoa_r+0x99c>
 800832c:	9b07      	ldr	r3, [sp, #28]
 800832e:	2b02      	cmp	r3, #2
 8008330:	dd34      	ble.n	800839c <_dtoa_r+0x99c>
 8008332:	9b04      	ldr	r3, [sp, #16]
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	9b01      	ldr	r3, [sp, #4]
 8008338:	b963      	cbnz	r3, 8008354 <_dtoa_r+0x954>
 800833a:	4631      	mov	r1, r6
 800833c:	2205      	movs	r2, #5
 800833e:	4620      	mov	r0, r4
 8008340:	f000 fb14 	bl	800896c <__multadd>
 8008344:	4601      	mov	r1, r0
 8008346:	4606      	mov	r6, r0
 8008348:	4650      	mov	r0, sl
 800834a:	f000 fd29 	bl	8008da0 <__mcmp>
 800834e:	2800      	cmp	r0, #0
 8008350:	f73f adbb 	bgt.w	8007eca <_dtoa_r+0x4ca>
 8008354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008356:	9d00      	ldr	r5, [sp, #0]
 8008358:	ea6f 0b03 	mvn.w	fp, r3
 800835c:	f04f 0800 	mov.w	r8, #0
 8008360:	4631      	mov	r1, r6
 8008362:	4620      	mov	r0, r4
 8008364:	f000 fae0 	bl	8008928 <_Bfree>
 8008368:	2f00      	cmp	r7, #0
 800836a:	f43f aeab 	beq.w	80080c4 <_dtoa_r+0x6c4>
 800836e:	f1b8 0f00 	cmp.w	r8, #0
 8008372:	d005      	beq.n	8008380 <_dtoa_r+0x980>
 8008374:	45b8      	cmp	r8, r7
 8008376:	d003      	beq.n	8008380 <_dtoa_r+0x980>
 8008378:	4641      	mov	r1, r8
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fad4 	bl	8008928 <_Bfree>
 8008380:	4639      	mov	r1, r7
 8008382:	4620      	mov	r0, r4
 8008384:	f000 fad0 	bl	8008928 <_Bfree>
 8008388:	e69c      	b.n	80080c4 <_dtoa_r+0x6c4>
 800838a:	2600      	movs	r6, #0
 800838c:	4637      	mov	r7, r6
 800838e:	e7e1      	b.n	8008354 <_dtoa_r+0x954>
 8008390:	46bb      	mov	fp, r7
 8008392:	4637      	mov	r7, r6
 8008394:	e599      	b.n	8007eca <_dtoa_r+0x4ca>
 8008396:	bf00      	nop
 8008398:	40240000 	.word	0x40240000
 800839c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 80c8 	beq.w	8008534 <_dtoa_r+0xb34>
 80083a4:	9b04      	ldr	r3, [sp, #16]
 80083a6:	9301      	str	r3, [sp, #4]
 80083a8:	2d00      	cmp	r5, #0
 80083aa:	dd05      	ble.n	80083b8 <_dtoa_r+0x9b8>
 80083ac:	4639      	mov	r1, r7
 80083ae:	462a      	mov	r2, r5
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 fc89 	bl	8008cc8 <__lshift>
 80083b6:	4607      	mov	r7, r0
 80083b8:	f1b8 0f00 	cmp.w	r8, #0
 80083bc:	d05b      	beq.n	8008476 <_dtoa_r+0xa76>
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	4620      	mov	r0, r4
 80083c2:	f000 fa71 	bl	80088a8 <_Balloc>
 80083c6:	4605      	mov	r5, r0
 80083c8:	b928      	cbnz	r0, 80083d6 <_dtoa_r+0x9d6>
 80083ca:	4b83      	ldr	r3, [pc, #524]	; (80085d8 <_dtoa_r+0xbd8>)
 80083cc:	4602      	mov	r2, r0
 80083ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80083d2:	f7ff bb2e 	b.w	8007a32 <_dtoa_r+0x32>
 80083d6:	693a      	ldr	r2, [r7, #16]
 80083d8:	3202      	adds	r2, #2
 80083da:	0092      	lsls	r2, r2, #2
 80083dc:	f107 010c 	add.w	r1, r7, #12
 80083e0:	300c      	adds	r0, #12
 80083e2:	f7ff fa74 	bl	80078ce <memcpy>
 80083e6:	2201      	movs	r2, #1
 80083e8:	4629      	mov	r1, r5
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 fc6c 	bl	8008cc8 <__lshift>
 80083f0:	9b00      	ldr	r3, [sp, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083fa:	4413      	add	r3, r2
 80083fc:	9308      	str	r3, [sp, #32]
 80083fe:	9b02      	ldr	r3, [sp, #8]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	46b8      	mov	r8, r7
 8008406:	9306      	str	r3, [sp, #24]
 8008408:	4607      	mov	r7, r0
 800840a:	9b04      	ldr	r3, [sp, #16]
 800840c:	4631      	mov	r1, r6
 800840e:	3b01      	subs	r3, #1
 8008410:	4650      	mov	r0, sl
 8008412:	9301      	str	r3, [sp, #4]
 8008414:	f7ff fa69 	bl	80078ea <quorem>
 8008418:	4641      	mov	r1, r8
 800841a:	9002      	str	r0, [sp, #8]
 800841c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008420:	4650      	mov	r0, sl
 8008422:	f000 fcbd 	bl	8008da0 <__mcmp>
 8008426:	463a      	mov	r2, r7
 8008428:	9005      	str	r0, [sp, #20]
 800842a:	4631      	mov	r1, r6
 800842c:	4620      	mov	r0, r4
 800842e:	f000 fcd3 	bl	8008dd8 <__mdiff>
 8008432:	68c2      	ldr	r2, [r0, #12]
 8008434:	4605      	mov	r5, r0
 8008436:	bb02      	cbnz	r2, 800847a <_dtoa_r+0xa7a>
 8008438:	4601      	mov	r1, r0
 800843a:	4650      	mov	r0, sl
 800843c:	f000 fcb0 	bl	8008da0 <__mcmp>
 8008440:	4602      	mov	r2, r0
 8008442:	4629      	mov	r1, r5
 8008444:	4620      	mov	r0, r4
 8008446:	9209      	str	r2, [sp, #36]	; 0x24
 8008448:	f000 fa6e 	bl	8008928 <_Bfree>
 800844c:	9b07      	ldr	r3, [sp, #28]
 800844e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008450:	9d04      	ldr	r5, [sp, #16]
 8008452:	ea43 0102 	orr.w	r1, r3, r2
 8008456:	9b06      	ldr	r3, [sp, #24]
 8008458:	4319      	orrs	r1, r3
 800845a:	d110      	bne.n	800847e <_dtoa_r+0xa7e>
 800845c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008460:	d029      	beq.n	80084b6 <_dtoa_r+0xab6>
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	dd02      	ble.n	800846e <_dtoa_r+0xa6e>
 8008468:	9b02      	ldr	r3, [sp, #8]
 800846a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800846e:	9b01      	ldr	r3, [sp, #4]
 8008470:	f883 9000 	strb.w	r9, [r3]
 8008474:	e774      	b.n	8008360 <_dtoa_r+0x960>
 8008476:	4638      	mov	r0, r7
 8008478:	e7ba      	b.n	80083f0 <_dtoa_r+0x9f0>
 800847a:	2201      	movs	r2, #1
 800847c:	e7e1      	b.n	8008442 <_dtoa_r+0xa42>
 800847e:	9b05      	ldr	r3, [sp, #20]
 8008480:	2b00      	cmp	r3, #0
 8008482:	db04      	blt.n	800848e <_dtoa_r+0xa8e>
 8008484:	9907      	ldr	r1, [sp, #28]
 8008486:	430b      	orrs	r3, r1
 8008488:	9906      	ldr	r1, [sp, #24]
 800848a:	430b      	orrs	r3, r1
 800848c:	d120      	bne.n	80084d0 <_dtoa_r+0xad0>
 800848e:	2a00      	cmp	r2, #0
 8008490:	dded      	ble.n	800846e <_dtoa_r+0xa6e>
 8008492:	4651      	mov	r1, sl
 8008494:	2201      	movs	r2, #1
 8008496:	4620      	mov	r0, r4
 8008498:	f000 fc16 	bl	8008cc8 <__lshift>
 800849c:	4631      	mov	r1, r6
 800849e:	4682      	mov	sl, r0
 80084a0:	f000 fc7e 	bl	8008da0 <__mcmp>
 80084a4:	2800      	cmp	r0, #0
 80084a6:	dc03      	bgt.n	80084b0 <_dtoa_r+0xab0>
 80084a8:	d1e1      	bne.n	800846e <_dtoa_r+0xa6e>
 80084aa:	f019 0f01 	tst.w	r9, #1
 80084ae:	d0de      	beq.n	800846e <_dtoa_r+0xa6e>
 80084b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084b4:	d1d8      	bne.n	8008468 <_dtoa_r+0xa68>
 80084b6:	9a01      	ldr	r2, [sp, #4]
 80084b8:	2339      	movs	r3, #57	; 0x39
 80084ba:	7013      	strb	r3, [r2, #0]
 80084bc:	462b      	mov	r3, r5
 80084be:	461d      	mov	r5, r3
 80084c0:	3b01      	subs	r3, #1
 80084c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084c6:	2a39      	cmp	r2, #57	; 0x39
 80084c8:	d06c      	beq.n	80085a4 <_dtoa_r+0xba4>
 80084ca:	3201      	adds	r2, #1
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	e747      	b.n	8008360 <_dtoa_r+0x960>
 80084d0:	2a00      	cmp	r2, #0
 80084d2:	dd07      	ble.n	80084e4 <_dtoa_r+0xae4>
 80084d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80084d8:	d0ed      	beq.n	80084b6 <_dtoa_r+0xab6>
 80084da:	9a01      	ldr	r2, [sp, #4]
 80084dc:	f109 0301 	add.w	r3, r9, #1
 80084e0:	7013      	strb	r3, [r2, #0]
 80084e2:	e73d      	b.n	8008360 <_dtoa_r+0x960>
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	9a08      	ldr	r2, [sp, #32]
 80084e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d043      	beq.n	8008578 <_dtoa_r+0xb78>
 80084f0:	4651      	mov	r1, sl
 80084f2:	2300      	movs	r3, #0
 80084f4:	220a      	movs	r2, #10
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 fa38 	bl	800896c <__multadd>
 80084fc:	45b8      	cmp	r8, r7
 80084fe:	4682      	mov	sl, r0
 8008500:	f04f 0300 	mov.w	r3, #0
 8008504:	f04f 020a 	mov.w	r2, #10
 8008508:	4641      	mov	r1, r8
 800850a:	4620      	mov	r0, r4
 800850c:	d107      	bne.n	800851e <_dtoa_r+0xb1e>
 800850e:	f000 fa2d 	bl	800896c <__multadd>
 8008512:	4680      	mov	r8, r0
 8008514:	4607      	mov	r7, r0
 8008516:	9b04      	ldr	r3, [sp, #16]
 8008518:	3301      	adds	r3, #1
 800851a:	9304      	str	r3, [sp, #16]
 800851c:	e775      	b.n	800840a <_dtoa_r+0xa0a>
 800851e:	f000 fa25 	bl	800896c <__multadd>
 8008522:	4639      	mov	r1, r7
 8008524:	4680      	mov	r8, r0
 8008526:	2300      	movs	r3, #0
 8008528:	220a      	movs	r2, #10
 800852a:	4620      	mov	r0, r4
 800852c:	f000 fa1e 	bl	800896c <__multadd>
 8008530:	4607      	mov	r7, r0
 8008532:	e7f0      	b.n	8008516 <_dtoa_r+0xb16>
 8008534:	9b04      	ldr	r3, [sp, #16]
 8008536:	9301      	str	r3, [sp, #4]
 8008538:	9d00      	ldr	r5, [sp, #0]
 800853a:	4631      	mov	r1, r6
 800853c:	4650      	mov	r0, sl
 800853e:	f7ff f9d4 	bl	80078ea <quorem>
 8008542:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	f805 9b01 	strb.w	r9, [r5], #1
 800854c:	1aea      	subs	r2, r5, r3
 800854e:	9b01      	ldr	r3, [sp, #4]
 8008550:	4293      	cmp	r3, r2
 8008552:	dd07      	ble.n	8008564 <_dtoa_r+0xb64>
 8008554:	4651      	mov	r1, sl
 8008556:	2300      	movs	r3, #0
 8008558:	220a      	movs	r2, #10
 800855a:	4620      	mov	r0, r4
 800855c:	f000 fa06 	bl	800896c <__multadd>
 8008560:	4682      	mov	sl, r0
 8008562:	e7ea      	b.n	800853a <_dtoa_r+0xb3a>
 8008564:	9b01      	ldr	r3, [sp, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfc8      	it	gt
 800856a:	461d      	movgt	r5, r3
 800856c:	9b00      	ldr	r3, [sp, #0]
 800856e:	bfd8      	it	le
 8008570:	2501      	movle	r5, #1
 8008572:	441d      	add	r5, r3
 8008574:	f04f 0800 	mov.w	r8, #0
 8008578:	4651      	mov	r1, sl
 800857a:	2201      	movs	r2, #1
 800857c:	4620      	mov	r0, r4
 800857e:	f000 fba3 	bl	8008cc8 <__lshift>
 8008582:	4631      	mov	r1, r6
 8008584:	4682      	mov	sl, r0
 8008586:	f000 fc0b 	bl	8008da0 <__mcmp>
 800858a:	2800      	cmp	r0, #0
 800858c:	dc96      	bgt.n	80084bc <_dtoa_r+0xabc>
 800858e:	d102      	bne.n	8008596 <_dtoa_r+0xb96>
 8008590:	f019 0f01 	tst.w	r9, #1
 8008594:	d192      	bne.n	80084bc <_dtoa_r+0xabc>
 8008596:	462b      	mov	r3, r5
 8008598:	461d      	mov	r5, r3
 800859a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800859e:	2a30      	cmp	r2, #48	; 0x30
 80085a0:	d0fa      	beq.n	8008598 <_dtoa_r+0xb98>
 80085a2:	e6dd      	b.n	8008360 <_dtoa_r+0x960>
 80085a4:	9a00      	ldr	r2, [sp, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d189      	bne.n	80084be <_dtoa_r+0xabe>
 80085aa:	f10b 0b01 	add.w	fp, fp, #1
 80085ae:	2331      	movs	r3, #49	; 0x31
 80085b0:	e796      	b.n	80084e0 <_dtoa_r+0xae0>
 80085b2:	4b0a      	ldr	r3, [pc, #40]	; (80085dc <_dtoa_r+0xbdc>)
 80085b4:	f7ff ba99 	b.w	8007aea <_dtoa_r+0xea>
 80085b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	f47f aa6d 	bne.w	8007a9a <_dtoa_r+0x9a>
 80085c0:	4b07      	ldr	r3, [pc, #28]	; (80085e0 <_dtoa_r+0xbe0>)
 80085c2:	f7ff ba92 	b.w	8007aea <_dtoa_r+0xea>
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dcb5      	bgt.n	8008538 <_dtoa_r+0xb38>
 80085cc:	9b07      	ldr	r3, [sp, #28]
 80085ce:	2b02      	cmp	r3, #2
 80085d0:	f73f aeb1 	bgt.w	8008336 <_dtoa_r+0x936>
 80085d4:	e7b0      	b.n	8008538 <_dtoa_r+0xb38>
 80085d6:	bf00      	nop
 80085d8:	08009a7c 	.word	0x08009a7c
 80085dc:	080099dc 	.word	0x080099dc
 80085e0:	08009a00 	.word	0x08009a00

080085e4 <malloc>:
 80085e4:	4b02      	ldr	r3, [pc, #8]	; (80085f0 <malloc+0xc>)
 80085e6:	4601      	mov	r1, r0
 80085e8:	6818      	ldr	r0, [r3, #0]
 80085ea:	f000 b823 	b.w	8008634 <_malloc_r>
 80085ee:	bf00      	nop
 80085f0:	20000064 	.word	0x20000064

080085f4 <sbrk_aligned>:
 80085f4:	b570      	push	{r4, r5, r6, lr}
 80085f6:	4e0e      	ldr	r6, [pc, #56]	; (8008630 <sbrk_aligned+0x3c>)
 80085f8:	460c      	mov	r4, r1
 80085fa:	6831      	ldr	r1, [r6, #0]
 80085fc:	4605      	mov	r5, r0
 80085fe:	b911      	cbnz	r1, 8008606 <sbrk_aligned+0x12>
 8008600:	f000 fd46 	bl	8009090 <_sbrk_r>
 8008604:	6030      	str	r0, [r6, #0]
 8008606:	4621      	mov	r1, r4
 8008608:	4628      	mov	r0, r5
 800860a:	f000 fd41 	bl	8009090 <_sbrk_r>
 800860e:	1c43      	adds	r3, r0, #1
 8008610:	d00a      	beq.n	8008628 <sbrk_aligned+0x34>
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d007      	beq.n	800862c <sbrk_aligned+0x38>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4628      	mov	r0, r5
 8008620:	f000 fd36 	bl	8009090 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d101      	bne.n	800862c <sbrk_aligned+0x38>
 8008628:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800862c:	4620      	mov	r0, r4
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	20000814 	.word	0x20000814

08008634 <_malloc_r>:
 8008634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008638:	1ccd      	adds	r5, r1, #3
 800863a:	f025 0503 	bic.w	r5, r5, #3
 800863e:	3508      	adds	r5, #8
 8008640:	2d0c      	cmp	r5, #12
 8008642:	bf38      	it	cc
 8008644:	250c      	movcc	r5, #12
 8008646:	2d00      	cmp	r5, #0
 8008648:	4607      	mov	r7, r0
 800864a:	db01      	blt.n	8008650 <_malloc_r+0x1c>
 800864c:	42a9      	cmp	r1, r5
 800864e:	d905      	bls.n	800865c <_malloc_r+0x28>
 8008650:	230c      	movs	r3, #12
 8008652:	603b      	str	r3, [r7, #0]
 8008654:	2600      	movs	r6, #0
 8008656:	4630      	mov	r0, r6
 8008658:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800865c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008730 <_malloc_r+0xfc>
 8008660:	f000 f916 	bl	8008890 <__malloc_lock>
 8008664:	f8d8 3000 	ldr.w	r3, [r8]
 8008668:	461c      	mov	r4, r3
 800866a:	bb5c      	cbnz	r4, 80086c4 <_malloc_r+0x90>
 800866c:	4629      	mov	r1, r5
 800866e:	4638      	mov	r0, r7
 8008670:	f7ff ffc0 	bl	80085f4 <sbrk_aligned>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	4604      	mov	r4, r0
 8008678:	d155      	bne.n	8008726 <_malloc_r+0xf2>
 800867a:	f8d8 4000 	ldr.w	r4, [r8]
 800867e:	4626      	mov	r6, r4
 8008680:	2e00      	cmp	r6, #0
 8008682:	d145      	bne.n	8008710 <_malloc_r+0xdc>
 8008684:	2c00      	cmp	r4, #0
 8008686:	d048      	beq.n	800871a <_malloc_r+0xe6>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	4631      	mov	r1, r6
 800868c:	4638      	mov	r0, r7
 800868e:	eb04 0903 	add.w	r9, r4, r3
 8008692:	f000 fcfd 	bl	8009090 <_sbrk_r>
 8008696:	4581      	cmp	r9, r0
 8008698:	d13f      	bne.n	800871a <_malloc_r+0xe6>
 800869a:	6821      	ldr	r1, [r4, #0]
 800869c:	1a6d      	subs	r5, r5, r1
 800869e:	4629      	mov	r1, r5
 80086a0:	4638      	mov	r0, r7
 80086a2:	f7ff ffa7 	bl	80085f4 <sbrk_aligned>
 80086a6:	3001      	adds	r0, #1
 80086a8:	d037      	beq.n	800871a <_malloc_r+0xe6>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	442b      	add	r3, r5
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	f8d8 3000 	ldr.w	r3, [r8]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d038      	beq.n	800872a <_malloc_r+0xf6>
 80086b8:	685a      	ldr	r2, [r3, #4]
 80086ba:	42a2      	cmp	r2, r4
 80086bc:	d12b      	bne.n	8008716 <_malloc_r+0xe2>
 80086be:	2200      	movs	r2, #0
 80086c0:	605a      	str	r2, [r3, #4]
 80086c2:	e00f      	b.n	80086e4 <_malloc_r+0xb0>
 80086c4:	6822      	ldr	r2, [r4, #0]
 80086c6:	1b52      	subs	r2, r2, r5
 80086c8:	d41f      	bmi.n	800870a <_malloc_r+0xd6>
 80086ca:	2a0b      	cmp	r2, #11
 80086cc:	d917      	bls.n	80086fe <_malloc_r+0xca>
 80086ce:	1961      	adds	r1, r4, r5
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	6025      	str	r5, [r4, #0]
 80086d4:	bf18      	it	ne
 80086d6:	6059      	strne	r1, [r3, #4]
 80086d8:	6863      	ldr	r3, [r4, #4]
 80086da:	bf08      	it	eq
 80086dc:	f8c8 1000 	streq.w	r1, [r8]
 80086e0:	5162      	str	r2, [r4, r5]
 80086e2:	604b      	str	r3, [r1, #4]
 80086e4:	4638      	mov	r0, r7
 80086e6:	f104 060b 	add.w	r6, r4, #11
 80086ea:	f000 f8d7 	bl	800889c <__malloc_unlock>
 80086ee:	f026 0607 	bic.w	r6, r6, #7
 80086f2:	1d23      	adds	r3, r4, #4
 80086f4:	1af2      	subs	r2, r6, r3
 80086f6:	d0ae      	beq.n	8008656 <_malloc_r+0x22>
 80086f8:	1b9b      	subs	r3, r3, r6
 80086fa:	50a3      	str	r3, [r4, r2]
 80086fc:	e7ab      	b.n	8008656 <_malloc_r+0x22>
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6862      	ldr	r2, [r4, #4]
 8008702:	d1dd      	bne.n	80086c0 <_malloc_r+0x8c>
 8008704:	f8c8 2000 	str.w	r2, [r8]
 8008708:	e7ec      	b.n	80086e4 <_malloc_r+0xb0>
 800870a:	4623      	mov	r3, r4
 800870c:	6864      	ldr	r4, [r4, #4]
 800870e:	e7ac      	b.n	800866a <_malloc_r+0x36>
 8008710:	4634      	mov	r4, r6
 8008712:	6876      	ldr	r6, [r6, #4]
 8008714:	e7b4      	b.n	8008680 <_malloc_r+0x4c>
 8008716:	4613      	mov	r3, r2
 8008718:	e7cc      	b.n	80086b4 <_malloc_r+0x80>
 800871a:	230c      	movs	r3, #12
 800871c:	603b      	str	r3, [r7, #0]
 800871e:	4638      	mov	r0, r7
 8008720:	f000 f8bc 	bl	800889c <__malloc_unlock>
 8008724:	e797      	b.n	8008656 <_malloc_r+0x22>
 8008726:	6025      	str	r5, [r4, #0]
 8008728:	e7dc      	b.n	80086e4 <_malloc_r+0xb0>
 800872a:	605b      	str	r3, [r3, #4]
 800872c:	deff      	udf	#255	; 0xff
 800872e:	bf00      	nop
 8008730:	20000810 	.word	0x20000810

08008734 <__sflush_r>:
 8008734:	898a      	ldrh	r2, [r1, #12]
 8008736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800873a:	4605      	mov	r5, r0
 800873c:	0710      	lsls	r0, r2, #28
 800873e:	460c      	mov	r4, r1
 8008740:	d458      	bmi.n	80087f4 <__sflush_r+0xc0>
 8008742:	684b      	ldr	r3, [r1, #4]
 8008744:	2b00      	cmp	r3, #0
 8008746:	dc05      	bgt.n	8008754 <__sflush_r+0x20>
 8008748:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800874a:	2b00      	cmp	r3, #0
 800874c:	dc02      	bgt.n	8008754 <__sflush_r+0x20>
 800874e:	2000      	movs	r0, #0
 8008750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008754:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008756:	2e00      	cmp	r6, #0
 8008758:	d0f9      	beq.n	800874e <__sflush_r+0x1a>
 800875a:	2300      	movs	r3, #0
 800875c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008760:	682f      	ldr	r7, [r5, #0]
 8008762:	6a21      	ldr	r1, [r4, #32]
 8008764:	602b      	str	r3, [r5, #0]
 8008766:	d032      	beq.n	80087ce <__sflush_r+0x9a>
 8008768:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	075a      	lsls	r2, r3, #29
 800876e:	d505      	bpl.n	800877c <__sflush_r+0x48>
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	1ac0      	subs	r0, r0, r3
 8008774:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008776:	b10b      	cbz	r3, 800877c <__sflush_r+0x48>
 8008778:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800877a:	1ac0      	subs	r0, r0, r3
 800877c:	2300      	movs	r3, #0
 800877e:	4602      	mov	r2, r0
 8008780:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008782:	6a21      	ldr	r1, [r4, #32]
 8008784:	4628      	mov	r0, r5
 8008786:	47b0      	blx	r6
 8008788:	1c43      	adds	r3, r0, #1
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	d106      	bne.n	800879c <__sflush_r+0x68>
 800878e:	6829      	ldr	r1, [r5, #0]
 8008790:	291d      	cmp	r1, #29
 8008792:	d82b      	bhi.n	80087ec <__sflush_r+0xb8>
 8008794:	4a29      	ldr	r2, [pc, #164]	; (800883c <__sflush_r+0x108>)
 8008796:	410a      	asrs	r2, r1
 8008798:	07d6      	lsls	r6, r2, #31
 800879a:	d427      	bmi.n	80087ec <__sflush_r+0xb8>
 800879c:	2200      	movs	r2, #0
 800879e:	6062      	str	r2, [r4, #4]
 80087a0:	04d9      	lsls	r1, r3, #19
 80087a2:	6922      	ldr	r2, [r4, #16]
 80087a4:	6022      	str	r2, [r4, #0]
 80087a6:	d504      	bpl.n	80087b2 <__sflush_r+0x7e>
 80087a8:	1c42      	adds	r2, r0, #1
 80087aa:	d101      	bne.n	80087b0 <__sflush_r+0x7c>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b903      	cbnz	r3, 80087b2 <__sflush_r+0x7e>
 80087b0:	6560      	str	r0, [r4, #84]	; 0x54
 80087b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087b4:	602f      	str	r7, [r5, #0]
 80087b6:	2900      	cmp	r1, #0
 80087b8:	d0c9      	beq.n	800874e <__sflush_r+0x1a>
 80087ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087be:	4299      	cmp	r1, r3
 80087c0:	d002      	beq.n	80087c8 <__sflush_r+0x94>
 80087c2:	4628      	mov	r0, r5
 80087c4:	f000 fcba 	bl	800913c <_free_r>
 80087c8:	2000      	movs	r0, #0
 80087ca:	6360      	str	r0, [r4, #52]	; 0x34
 80087cc:	e7c0      	b.n	8008750 <__sflush_r+0x1c>
 80087ce:	2301      	movs	r3, #1
 80087d0:	4628      	mov	r0, r5
 80087d2:	47b0      	blx	r6
 80087d4:	1c41      	adds	r1, r0, #1
 80087d6:	d1c8      	bne.n	800876a <__sflush_r+0x36>
 80087d8:	682b      	ldr	r3, [r5, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0c5      	beq.n	800876a <__sflush_r+0x36>
 80087de:	2b1d      	cmp	r3, #29
 80087e0:	d001      	beq.n	80087e6 <__sflush_r+0xb2>
 80087e2:	2b16      	cmp	r3, #22
 80087e4:	d101      	bne.n	80087ea <__sflush_r+0xb6>
 80087e6:	602f      	str	r7, [r5, #0]
 80087e8:	e7b1      	b.n	800874e <__sflush_r+0x1a>
 80087ea:	89a3      	ldrh	r3, [r4, #12]
 80087ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087f0:	81a3      	strh	r3, [r4, #12]
 80087f2:	e7ad      	b.n	8008750 <__sflush_r+0x1c>
 80087f4:	690f      	ldr	r7, [r1, #16]
 80087f6:	2f00      	cmp	r7, #0
 80087f8:	d0a9      	beq.n	800874e <__sflush_r+0x1a>
 80087fa:	0793      	lsls	r3, r2, #30
 80087fc:	680e      	ldr	r6, [r1, #0]
 80087fe:	bf08      	it	eq
 8008800:	694b      	ldreq	r3, [r1, #20]
 8008802:	600f      	str	r7, [r1, #0]
 8008804:	bf18      	it	ne
 8008806:	2300      	movne	r3, #0
 8008808:	eba6 0807 	sub.w	r8, r6, r7
 800880c:	608b      	str	r3, [r1, #8]
 800880e:	f1b8 0f00 	cmp.w	r8, #0
 8008812:	dd9c      	ble.n	800874e <__sflush_r+0x1a>
 8008814:	6a21      	ldr	r1, [r4, #32]
 8008816:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008818:	4643      	mov	r3, r8
 800881a:	463a      	mov	r2, r7
 800881c:	4628      	mov	r0, r5
 800881e:	47b0      	blx	r6
 8008820:	2800      	cmp	r0, #0
 8008822:	dc06      	bgt.n	8008832 <__sflush_r+0xfe>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800882a:	81a3      	strh	r3, [r4, #12]
 800882c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008830:	e78e      	b.n	8008750 <__sflush_r+0x1c>
 8008832:	4407      	add	r7, r0
 8008834:	eba8 0800 	sub.w	r8, r8, r0
 8008838:	e7e9      	b.n	800880e <__sflush_r+0xda>
 800883a:	bf00      	nop
 800883c:	dfbffffe 	.word	0xdfbffffe

08008840 <_fflush_r>:
 8008840:	b538      	push	{r3, r4, r5, lr}
 8008842:	690b      	ldr	r3, [r1, #16]
 8008844:	4605      	mov	r5, r0
 8008846:	460c      	mov	r4, r1
 8008848:	b913      	cbnz	r3, 8008850 <_fflush_r+0x10>
 800884a:	2500      	movs	r5, #0
 800884c:	4628      	mov	r0, r5
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	b118      	cbz	r0, 800885a <_fflush_r+0x1a>
 8008852:	6a03      	ldr	r3, [r0, #32]
 8008854:	b90b      	cbnz	r3, 800885a <_fflush_r+0x1a>
 8008856:	f7fe ffcb 	bl	80077f0 <__sinit>
 800885a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d0f3      	beq.n	800884a <_fflush_r+0xa>
 8008862:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008864:	07d0      	lsls	r0, r2, #31
 8008866:	d404      	bmi.n	8008872 <_fflush_r+0x32>
 8008868:	0599      	lsls	r1, r3, #22
 800886a:	d402      	bmi.n	8008872 <_fflush_r+0x32>
 800886c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886e:	f7ff f82c 	bl	80078ca <__retarget_lock_acquire_recursive>
 8008872:	4628      	mov	r0, r5
 8008874:	4621      	mov	r1, r4
 8008876:	f7ff ff5d 	bl	8008734 <__sflush_r>
 800887a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800887c:	07da      	lsls	r2, r3, #31
 800887e:	4605      	mov	r5, r0
 8008880:	d4e4      	bmi.n	800884c <_fflush_r+0xc>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	059b      	lsls	r3, r3, #22
 8008886:	d4e1      	bmi.n	800884c <_fflush_r+0xc>
 8008888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888a:	f7ff f81f 	bl	80078cc <__retarget_lock_release_recursive>
 800888e:	e7dd      	b.n	800884c <_fflush_r+0xc>

08008890 <__malloc_lock>:
 8008890:	4801      	ldr	r0, [pc, #4]	; (8008898 <__malloc_lock+0x8>)
 8008892:	f7ff b81a 	b.w	80078ca <__retarget_lock_acquire_recursive>
 8008896:	bf00      	nop
 8008898:	2000080c 	.word	0x2000080c

0800889c <__malloc_unlock>:
 800889c:	4801      	ldr	r0, [pc, #4]	; (80088a4 <__malloc_unlock+0x8>)
 800889e:	f7ff b815 	b.w	80078cc <__retarget_lock_release_recursive>
 80088a2:	bf00      	nop
 80088a4:	2000080c 	.word	0x2000080c

080088a8 <_Balloc>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	69c6      	ldr	r6, [r0, #28]
 80088ac:	4604      	mov	r4, r0
 80088ae:	460d      	mov	r5, r1
 80088b0:	b976      	cbnz	r6, 80088d0 <_Balloc+0x28>
 80088b2:	2010      	movs	r0, #16
 80088b4:	f7ff fe96 	bl	80085e4 <malloc>
 80088b8:	4602      	mov	r2, r0
 80088ba:	61e0      	str	r0, [r4, #28]
 80088bc:	b920      	cbnz	r0, 80088c8 <_Balloc+0x20>
 80088be:	4b18      	ldr	r3, [pc, #96]	; (8008920 <_Balloc+0x78>)
 80088c0:	4818      	ldr	r0, [pc, #96]	; (8008924 <_Balloc+0x7c>)
 80088c2:	216b      	movs	r1, #107	; 0x6b
 80088c4:	f000 fc06 	bl	80090d4 <__assert_func>
 80088c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088cc:	6006      	str	r6, [r0, #0]
 80088ce:	60c6      	str	r6, [r0, #12]
 80088d0:	69e6      	ldr	r6, [r4, #28]
 80088d2:	68f3      	ldr	r3, [r6, #12]
 80088d4:	b183      	cbz	r3, 80088f8 <_Balloc+0x50>
 80088d6:	69e3      	ldr	r3, [r4, #28]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80088de:	b9b8      	cbnz	r0, 8008910 <_Balloc+0x68>
 80088e0:	2101      	movs	r1, #1
 80088e2:	fa01 f605 	lsl.w	r6, r1, r5
 80088e6:	1d72      	adds	r2, r6, #5
 80088e8:	0092      	lsls	r2, r2, #2
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 fc10 	bl	8009110 <_calloc_r>
 80088f0:	b160      	cbz	r0, 800890c <_Balloc+0x64>
 80088f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80088f6:	e00e      	b.n	8008916 <_Balloc+0x6e>
 80088f8:	2221      	movs	r2, #33	; 0x21
 80088fa:	2104      	movs	r1, #4
 80088fc:	4620      	mov	r0, r4
 80088fe:	f000 fc07 	bl	8009110 <_calloc_r>
 8008902:	69e3      	ldr	r3, [r4, #28]
 8008904:	60f0      	str	r0, [r6, #12]
 8008906:	68db      	ldr	r3, [r3, #12]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e4      	bne.n	80088d6 <_Balloc+0x2e>
 800890c:	2000      	movs	r0, #0
 800890e:	bd70      	pop	{r4, r5, r6, pc}
 8008910:	6802      	ldr	r2, [r0, #0]
 8008912:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008916:	2300      	movs	r3, #0
 8008918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800891c:	e7f7      	b.n	800890e <_Balloc+0x66>
 800891e:	bf00      	nop
 8008920:	08009a0d 	.word	0x08009a0d
 8008924:	08009a8d 	.word	0x08009a8d

08008928 <_Bfree>:
 8008928:	b570      	push	{r4, r5, r6, lr}
 800892a:	69c6      	ldr	r6, [r0, #28]
 800892c:	4605      	mov	r5, r0
 800892e:	460c      	mov	r4, r1
 8008930:	b976      	cbnz	r6, 8008950 <_Bfree+0x28>
 8008932:	2010      	movs	r0, #16
 8008934:	f7ff fe56 	bl	80085e4 <malloc>
 8008938:	4602      	mov	r2, r0
 800893a:	61e8      	str	r0, [r5, #28]
 800893c:	b920      	cbnz	r0, 8008948 <_Bfree+0x20>
 800893e:	4b09      	ldr	r3, [pc, #36]	; (8008964 <_Bfree+0x3c>)
 8008940:	4809      	ldr	r0, [pc, #36]	; (8008968 <_Bfree+0x40>)
 8008942:	218f      	movs	r1, #143	; 0x8f
 8008944:	f000 fbc6 	bl	80090d4 <__assert_func>
 8008948:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800894c:	6006      	str	r6, [r0, #0]
 800894e:	60c6      	str	r6, [r0, #12]
 8008950:	b13c      	cbz	r4, 8008962 <_Bfree+0x3a>
 8008952:	69eb      	ldr	r3, [r5, #28]
 8008954:	6862      	ldr	r2, [r4, #4]
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800895c:	6021      	str	r1, [r4, #0]
 800895e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008962:	bd70      	pop	{r4, r5, r6, pc}
 8008964:	08009a0d 	.word	0x08009a0d
 8008968:	08009a8d 	.word	0x08009a8d

0800896c <__multadd>:
 800896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008970:	690d      	ldr	r5, [r1, #16]
 8008972:	4607      	mov	r7, r0
 8008974:	460c      	mov	r4, r1
 8008976:	461e      	mov	r6, r3
 8008978:	f101 0c14 	add.w	ip, r1, #20
 800897c:	2000      	movs	r0, #0
 800897e:	f8dc 3000 	ldr.w	r3, [ip]
 8008982:	b299      	uxth	r1, r3
 8008984:	fb02 6101 	mla	r1, r2, r1, r6
 8008988:	0c1e      	lsrs	r6, r3, #16
 800898a:	0c0b      	lsrs	r3, r1, #16
 800898c:	fb02 3306 	mla	r3, r2, r6, r3
 8008990:	b289      	uxth	r1, r1
 8008992:	3001      	adds	r0, #1
 8008994:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008998:	4285      	cmp	r5, r0
 800899a:	f84c 1b04 	str.w	r1, [ip], #4
 800899e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80089a2:	dcec      	bgt.n	800897e <__multadd+0x12>
 80089a4:	b30e      	cbz	r6, 80089ea <__multadd+0x7e>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	42ab      	cmp	r3, r5
 80089aa:	dc19      	bgt.n	80089e0 <__multadd+0x74>
 80089ac:	6861      	ldr	r1, [r4, #4]
 80089ae:	4638      	mov	r0, r7
 80089b0:	3101      	adds	r1, #1
 80089b2:	f7ff ff79 	bl	80088a8 <_Balloc>
 80089b6:	4680      	mov	r8, r0
 80089b8:	b928      	cbnz	r0, 80089c6 <__multadd+0x5a>
 80089ba:	4602      	mov	r2, r0
 80089bc:	4b0c      	ldr	r3, [pc, #48]	; (80089f0 <__multadd+0x84>)
 80089be:	480d      	ldr	r0, [pc, #52]	; (80089f4 <__multadd+0x88>)
 80089c0:	21ba      	movs	r1, #186	; 0xba
 80089c2:	f000 fb87 	bl	80090d4 <__assert_func>
 80089c6:	6922      	ldr	r2, [r4, #16]
 80089c8:	3202      	adds	r2, #2
 80089ca:	f104 010c 	add.w	r1, r4, #12
 80089ce:	0092      	lsls	r2, r2, #2
 80089d0:	300c      	adds	r0, #12
 80089d2:	f7fe ff7c 	bl	80078ce <memcpy>
 80089d6:	4621      	mov	r1, r4
 80089d8:	4638      	mov	r0, r7
 80089da:	f7ff ffa5 	bl	8008928 <_Bfree>
 80089de:	4644      	mov	r4, r8
 80089e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80089e4:	3501      	adds	r5, #1
 80089e6:	615e      	str	r6, [r3, #20]
 80089e8:	6125      	str	r5, [r4, #16]
 80089ea:	4620      	mov	r0, r4
 80089ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089f0:	08009a7c 	.word	0x08009a7c
 80089f4:	08009a8d 	.word	0x08009a8d

080089f8 <__hi0bits>:
 80089f8:	0c03      	lsrs	r3, r0, #16
 80089fa:	041b      	lsls	r3, r3, #16
 80089fc:	b9d3      	cbnz	r3, 8008a34 <__hi0bits+0x3c>
 80089fe:	0400      	lsls	r0, r0, #16
 8008a00:	2310      	movs	r3, #16
 8008a02:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008a06:	bf04      	itt	eq
 8008a08:	0200      	lsleq	r0, r0, #8
 8008a0a:	3308      	addeq	r3, #8
 8008a0c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008a10:	bf04      	itt	eq
 8008a12:	0100      	lsleq	r0, r0, #4
 8008a14:	3304      	addeq	r3, #4
 8008a16:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008a1a:	bf04      	itt	eq
 8008a1c:	0080      	lsleq	r0, r0, #2
 8008a1e:	3302      	addeq	r3, #2
 8008a20:	2800      	cmp	r0, #0
 8008a22:	db05      	blt.n	8008a30 <__hi0bits+0x38>
 8008a24:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8008a28:	f103 0301 	add.w	r3, r3, #1
 8008a2c:	bf08      	it	eq
 8008a2e:	2320      	moveq	r3, #32
 8008a30:	4618      	mov	r0, r3
 8008a32:	4770      	bx	lr
 8008a34:	2300      	movs	r3, #0
 8008a36:	e7e4      	b.n	8008a02 <__hi0bits+0xa>

08008a38 <__lo0bits>:
 8008a38:	6803      	ldr	r3, [r0, #0]
 8008a3a:	f013 0207 	ands.w	r2, r3, #7
 8008a3e:	d00c      	beq.n	8008a5a <__lo0bits+0x22>
 8008a40:	07d9      	lsls	r1, r3, #31
 8008a42:	d422      	bmi.n	8008a8a <__lo0bits+0x52>
 8008a44:	079a      	lsls	r2, r3, #30
 8008a46:	bf49      	itett	mi
 8008a48:	085b      	lsrmi	r3, r3, #1
 8008a4a:	089b      	lsrpl	r3, r3, #2
 8008a4c:	6003      	strmi	r3, [r0, #0]
 8008a4e:	2201      	movmi	r2, #1
 8008a50:	bf5c      	itt	pl
 8008a52:	6003      	strpl	r3, [r0, #0]
 8008a54:	2202      	movpl	r2, #2
 8008a56:	4610      	mov	r0, r2
 8008a58:	4770      	bx	lr
 8008a5a:	b299      	uxth	r1, r3
 8008a5c:	b909      	cbnz	r1, 8008a62 <__lo0bits+0x2a>
 8008a5e:	0c1b      	lsrs	r3, r3, #16
 8008a60:	2210      	movs	r2, #16
 8008a62:	b2d9      	uxtb	r1, r3
 8008a64:	b909      	cbnz	r1, 8008a6a <__lo0bits+0x32>
 8008a66:	3208      	adds	r2, #8
 8008a68:	0a1b      	lsrs	r3, r3, #8
 8008a6a:	0719      	lsls	r1, r3, #28
 8008a6c:	bf04      	itt	eq
 8008a6e:	091b      	lsreq	r3, r3, #4
 8008a70:	3204      	addeq	r2, #4
 8008a72:	0799      	lsls	r1, r3, #30
 8008a74:	bf04      	itt	eq
 8008a76:	089b      	lsreq	r3, r3, #2
 8008a78:	3202      	addeq	r2, #2
 8008a7a:	07d9      	lsls	r1, r3, #31
 8008a7c:	d403      	bmi.n	8008a86 <__lo0bits+0x4e>
 8008a7e:	085b      	lsrs	r3, r3, #1
 8008a80:	f102 0201 	add.w	r2, r2, #1
 8008a84:	d003      	beq.n	8008a8e <__lo0bits+0x56>
 8008a86:	6003      	str	r3, [r0, #0]
 8008a88:	e7e5      	b.n	8008a56 <__lo0bits+0x1e>
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	e7e3      	b.n	8008a56 <__lo0bits+0x1e>
 8008a8e:	2220      	movs	r2, #32
 8008a90:	e7e1      	b.n	8008a56 <__lo0bits+0x1e>
	...

08008a94 <__i2b>:
 8008a94:	b510      	push	{r4, lr}
 8008a96:	460c      	mov	r4, r1
 8008a98:	2101      	movs	r1, #1
 8008a9a:	f7ff ff05 	bl	80088a8 <_Balloc>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	b928      	cbnz	r0, 8008aae <__i2b+0x1a>
 8008aa2:	4b05      	ldr	r3, [pc, #20]	; (8008ab8 <__i2b+0x24>)
 8008aa4:	4805      	ldr	r0, [pc, #20]	; (8008abc <__i2b+0x28>)
 8008aa6:	f240 1145 	movw	r1, #325	; 0x145
 8008aaa:	f000 fb13 	bl	80090d4 <__assert_func>
 8008aae:	2301      	movs	r3, #1
 8008ab0:	6144      	str	r4, [r0, #20]
 8008ab2:	6103      	str	r3, [r0, #16]
 8008ab4:	bd10      	pop	{r4, pc}
 8008ab6:	bf00      	nop
 8008ab8:	08009a7c 	.word	0x08009a7c
 8008abc:	08009a8d 	.word	0x08009a8d

08008ac0 <__multiply>:
 8008ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac4:	4691      	mov	r9, r2
 8008ac6:	690a      	ldr	r2, [r1, #16]
 8008ac8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	bfb8      	it	lt
 8008ad0:	460b      	movlt	r3, r1
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	bfbc      	itt	lt
 8008ad6:	464c      	movlt	r4, r9
 8008ad8:	4699      	movlt	r9, r3
 8008ada:	6927      	ldr	r7, [r4, #16]
 8008adc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008ae0:	68a3      	ldr	r3, [r4, #8]
 8008ae2:	6861      	ldr	r1, [r4, #4]
 8008ae4:	eb07 060a 	add.w	r6, r7, sl
 8008ae8:	42b3      	cmp	r3, r6
 8008aea:	b085      	sub	sp, #20
 8008aec:	bfb8      	it	lt
 8008aee:	3101      	addlt	r1, #1
 8008af0:	f7ff feda 	bl	80088a8 <_Balloc>
 8008af4:	b930      	cbnz	r0, 8008b04 <__multiply+0x44>
 8008af6:	4602      	mov	r2, r0
 8008af8:	4b44      	ldr	r3, [pc, #272]	; (8008c0c <__multiply+0x14c>)
 8008afa:	4845      	ldr	r0, [pc, #276]	; (8008c10 <__multiply+0x150>)
 8008afc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8008b00:	f000 fae8 	bl	80090d4 <__assert_func>
 8008b04:	f100 0514 	add.w	r5, r0, #20
 8008b08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	2200      	movs	r2, #0
 8008b10:	4543      	cmp	r3, r8
 8008b12:	d321      	bcc.n	8008b58 <__multiply+0x98>
 8008b14:	f104 0314 	add.w	r3, r4, #20
 8008b18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008b1c:	f109 0314 	add.w	r3, r9, #20
 8008b20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008b24:	9202      	str	r2, [sp, #8]
 8008b26:	1b3a      	subs	r2, r7, r4
 8008b28:	3a15      	subs	r2, #21
 8008b2a:	f022 0203 	bic.w	r2, r2, #3
 8008b2e:	3204      	adds	r2, #4
 8008b30:	f104 0115 	add.w	r1, r4, #21
 8008b34:	428f      	cmp	r7, r1
 8008b36:	bf38      	it	cc
 8008b38:	2204      	movcc	r2, #4
 8008b3a:	9201      	str	r2, [sp, #4]
 8008b3c:	9a02      	ldr	r2, [sp, #8]
 8008b3e:	9303      	str	r3, [sp, #12]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d80c      	bhi.n	8008b5e <__multiply+0x9e>
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	dd03      	ble.n	8008b50 <__multiply+0x90>
 8008b48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d05b      	beq.n	8008c08 <__multiply+0x148>
 8008b50:	6106      	str	r6, [r0, #16]
 8008b52:	b005      	add	sp, #20
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b58:	f843 2b04 	str.w	r2, [r3], #4
 8008b5c:	e7d8      	b.n	8008b10 <__multiply+0x50>
 8008b5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8008b62:	f1ba 0f00 	cmp.w	sl, #0
 8008b66:	d024      	beq.n	8008bb2 <__multiply+0xf2>
 8008b68:	f104 0e14 	add.w	lr, r4, #20
 8008b6c:	46a9      	mov	r9, r5
 8008b6e:	f04f 0c00 	mov.w	ip, #0
 8008b72:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008b76:	f8d9 1000 	ldr.w	r1, [r9]
 8008b7a:	fa1f fb82 	uxth.w	fp, r2
 8008b7e:	b289      	uxth	r1, r1
 8008b80:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b88:	f8d9 2000 	ldr.w	r2, [r9]
 8008b8c:	4461      	add	r1, ip
 8008b8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b92:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b9a:	b289      	uxth	r1, r1
 8008b9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008ba0:	4577      	cmp	r7, lr
 8008ba2:	f849 1b04 	str.w	r1, [r9], #4
 8008ba6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008baa:	d8e2      	bhi.n	8008b72 <__multiply+0xb2>
 8008bac:	9a01      	ldr	r2, [sp, #4]
 8008bae:	f845 c002 	str.w	ip, [r5, r2]
 8008bb2:	9a03      	ldr	r2, [sp, #12]
 8008bb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008bb8:	3304      	adds	r3, #4
 8008bba:	f1b9 0f00 	cmp.w	r9, #0
 8008bbe:	d021      	beq.n	8008c04 <__multiply+0x144>
 8008bc0:	6829      	ldr	r1, [r5, #0]
 8008bc2:	f104 0c14 	add.w	ip, r4, #20
 8008bc6:	46ae      	mov	lr, r5
 8008bc8:	f04f 0a00 	mov.w	sl, #0
 8008bcc:	f8bc b000 	ldrh.w	fp, [ip]
 8008bd0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008bd4:	fb09 220b 	mla	r2, r9, fp, r2
 8008bd8:	4452      	add	r2, sl
 8008bda:	b289      	uxth	r1, r1
 8008bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008be0:	f84e 1b04 	str.w	r1, [lr], #4
 8008be4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008be8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bec:	f8be 1000 	ldrh.w	r1, [lr]
 8008bf0:	fb09 110a 	mla	r1, r9, sl, r1
 8008bf4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008bf8:	4567      	cmp	r7, ip
 8008bfa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008bfe:	d8e5      	bhi.n	8008bcc <__multiply+0x10c>
 8008c00:	9a01      	ldr	r2, [sp, #4]
 8008c02:	50a9      	str	r1, [r5, r2]
 8008c04:	3504      	adds	r5, #4
 8008c06:	e799      	b.n	8008b3c <__multiply+0x7c>
 8008c08:	3e01      	subs	r6, #1
 8008c0a:	e79b      	b.n	8008b44 <__multiply+0x84>
 8008c0c:	08009a7c 	.word	0x08009a7c
 8008c10:	08009a8d 	.word	0x08009a8d

08008c14 <__pow5mult>:
 8008c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c18:	4615      	mov	r5, r2
 8008c1a:	f012 0203 	ands.w	r2, r2, #3
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460f      	mov	r7, r1
 8008c22:	d007      	beq.n	8008c34 <__pow5mult+0x20>
 8008c24:	4c25      	ldr	r4, [pc, #148]	; (8008cbc <__pow5mult+0xa8>)
 8008c26:	3a01      	subs	r2, #1
 8008c28:	2300      	movs	r3, #0
 8008c2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008c2e:	f7ff fe9d 	bl	800896c <__multadd>
 8008c32:	4607      	mov	r7, r0
 8008c34:	10ad      	asrs	r5, r5, #2
 8008c36:	d03d      	beq.n	8008cb4 <__pow5mult+0xa0>
 8008c38:	69f4      	ldr	r4, [r6, #28]
 8008c3a:	b97c      	cbnz	r4, 8008c5c <__pow5mult+0x48>
 8008c3c:	2010      	movs	r0, #16
 8008c3e:	f7ff fcd1 	bl	80085e4 <malloc>
 8008c42:	4602      	mov	r2, r0
 8008c44:	61f0      	str	r0, [r6, #28]
 8008c46:	b928      	cbnz	r0, 8008c54 <__pow5mult+0x40>
 8008c48:	4b1d      	ldr	r3, [pc, #116]	; (8008cc0 <__pow5mult+0xac>)
 8008c4a:	481e      	ldr	r0, [pc, #120]	; (8008cc4 <__pow5mult+0xb0>)
 8008c4c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8008c50:	f000 fa40 	bl	80090d4 <__assert_func>
 8008c54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c58:	6004      	str	r4, [r0, #0]
 8008c5a:	60c4      	str	r4, [r0, #12]
 8008c5c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8008c60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008c64:	b94c      	cbnz	r4, 8008c7a <__pow5mult+0x66>
 8008c66:	f240 2171 	movw	r1, #625	; 0x271
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	f7ff ff12 	bl	8008a94 <__i2b>
 8008c70:	2300      	movs	r3, #0
 8008c72:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c76:	4604      	mov	r4, r0
 8008c78:	6003      	str	r3, [r0, #0]
 8008c7a:	f04f 0900 	mov.w	r9, #0
 8008c7e:	07eb      	lsls	r3, r5, #31
 8008c80:	d50a      	bpl.n	8008c98 <__pow5mult+0x84>
 8008c82:	4639      	mov	r1, r7
 8008c84:	4622      	mov	r2, r4
 8008c86:	4630      	mov	r0, r6
 8008c88:	f7ff ff1a 	bl	8008ac0 <__multiply>
 8008c8c:	4639      	mov	r1, r7
 8008c8e:	4680      	mov	r8, r0
 8008c90:	4630      	mov	r0, r6
 8008c92:	f7ff fe49 	bl	8008928 <_Bfree>
 8008c96:	4647      	mov	r7, r8
 8008c98:	106d      	asrs	r5, r5, #1
 8008c9a:	d00b      	beq.n	8008cb4 <__pow5mult+0xa0>
 8008c9c:	6820      	ldr	r0, [r4, #0]
 8008c9e:	b938      	cbnz	r0, 8008cb0 <__pow5mult+0x9c>
 8008ca0:	4622      	mov	r2, r4
 8008ca2:	4621      	mov	r1, r4
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff ff0b 	bl	8008ac0 <__multiply>
 8008caa:	6020      	str	r0, [r4, #0]
 8008cac:	f8c0 9000 	str.w	r9, [r0]
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	e7e4      	b.n	8008c7e <__pow5mult+0x6a>
 8008cb4:	4638      	mov	r0, r7
 8008cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008cba:	bf00      	nop
 8008cbc:	08009bd8 	.word	0x08009bd8
 8008cc0:	08009a0d 	.word	0x08009a0d
 8008cc4:	08009a8d 	.word	0x08009a8d

08008cc8 <__lshift>:
 8008cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ccc:	460c      	mov	r4, r1
 8008cce:	6849      	ldr	r1, [r1, #4]
 8008cd0:	6923      	ldr	r3, [r4, #16]
 8008cd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008cd6:	68a3      	ldr	r3, [r4, #8]
 8008cd8:	4607      	mov	r7, r0
 8008cda:	4691      	mov	r9, r2
 8008cdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ce0:	f108 0601 	add.w	r6, r8, #1
 8008ce4:	42b3      	cmp	r3, r6
 8008ce6:	db0b      	blt.n	8008d00 <__lshift+0x38>
 8008ce8:	4638      	mov	r0, r7
 8008cea:	f7ff fddd 	bl	80088a8 <_Balloc>
 8008cee:	4605      	mov	r5, r0
 8008cf0:	b948      	cbnz	r0, 8008d06 <__lshift+0x3e>
 8008cf2:	4602      	mov	r2, r0
 8008cf4:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <__lshift+0xd0>)
 8008cf6:	4829      	ldr	r0, [pc, #164]	; (8008d9c <__lshift+0xd4>)
 8008cf8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008cfc:	f000 f9ea 	bl	80090d4 <__assert_func>
 8008d00:	3101      	adds	r1, #1
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	e7ee      	b.n	8008ce4 <__lshift+0x1c>
 8008d06:	2300      	movs	r3, #0
 8008d08:	f100 0114 	add.w	r1, r0, #20
 8008d0c:	f100 0210 	add.w	r2, r0, #16
 8008d10:	4618      	mov	r0, r3
 8008d12:	4553      	cmp	r3, sl
 8008d14:	db33      	blt.n	8008d7e <__lshift+0xb6>
 8008d16:	6920      	ldr	r0, [r4, #16]
 8008d18:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008d1c:	f104 0314 	add.w	r3, r4, #20
 8008d20:	f019 091f 	ands.w	r9, r9, #31
 8008d24:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008d28:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008d2c:	d02b      	beq.n	8008d86 <__lshift+0xbe>
 8008d2e:	f1c9 0e20 	rsb	lr, r9, #32
 8008d32:	468a      	mov	sl, r1
 8008d34:	2200      	movs	r2, #0
 8008d36:	6818      	ldr	r0, [r3, #0]
 8008d38:	fa00 f009 	lsl.w	r0, r0, r9
 8008d3c:	4310      	orrs	r0, r2
 8008d3e:	f84a 0b04 	str.w	r0, [sl], #4
 8008d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d46:	459c      	cmp	ip, r3
 8008d48:	fa22 f20e 	lsr.w	r2, r2, lr
 8008d4c:	d8f3      	bhi.n	8008d36 <__lshift+0x6e>
 8008d4e:	ebac 0304 	sub.w	r3, ip, r4
 8008d52:	3b15      	subs	r3, #21
 8008d54:	f023 0303 	bic.w	r3, r3, #3
 8008d58:	3304      	adds	r3, #4
 8008d5a:	f104 0015 	add.w	r0, r4, #21
 8008d5e:	4584      	cmp	ip, r0
 8008d60:	bf38      	it	cc
 8008d62:	2304      	movcc	r3, #4
 8008d64:	50ca      	str	r2, [r1, r3]
 8008d66:	b10a      	cbz	r2, 8008d6c <__lshift+0xa4>
 8008d68:	f108 0602 	add.w	r6, r8, #2
 8008d6c:	3e01      	subs	r6, #1
 8008d6e:	4638      	mov	r0, r7
 8008d70:	612e      	str	r6, [r5, #16]
 8008d72:	4621      	mov	r1, r4
 8008d74:	f7ff fdd8 	bl	8008928 <_Bfree>
 8008d78:	4628      	mov	r0, r5
 8008d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d82:	3301      	adds	r3, #1
 8008d84:	e7c5      	b.n	8008d12 <__lshift+0x4a>
 8008d86:	3904      	subs	r1, #4
 8008d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d8c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d90:	459c      	cmp	ip, r3
 8008d92:	d8f9      	bhi.n	8008d88 <__lshift+0xc0>
 8008d94:	e7ea      	b.n	8008d6c <__lshift+0xa4>
 8008d96:	bf00      	nop
 8008d98:	08009a7c 	.word	0x08009a7c
 8008d9c:	08009a8d 	.word	0x08009a8d

08008da0 <__mcmp>:
 8008da0:	b530      	push	{r4, r5, lr}
 8008da2:	6902      	ldr	r2, [r0, #16]
 8008da4:	690c      	ldr	r4, [r1, #16]
 8008da6:	1b12      	subs	r2, r2, r4
 8008da8:	d10e      	bne.n	8008dc8 <__mcmp+0x28>
 8008daa:	f100 0314 	add.w	r3, r0, #20
 8008dae:	3114      	adds	r1, #20
 8008db0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008db4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008db8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008dbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008dc0:	42a5      	cmp	r5, r4
 8008dc2:	d003      	beq.n	8008dcc <__mcmp+0x2c>
 8008dc4:	d305      	bcc.n	8008dd2 <__mcmp+0x32>
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	4610      	mov	r0, r2
 8008dca:	bd30      	pop	{r4, r5, pc}
 8008dcc:	4283      	cmp	r3, r0
 8008dce:	d3f3      	bcc.n	8008db8 <__mcmp+0x18>
 8008dd0:	e7fa      	b.n	8008dc8 <__mcmp+0x28>
 8008dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008dd6:	e7f7      	b.n	8008dc8 <__mcmp+0x28>

08008dd8 <__mdiff>:
 8008dd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	460c      	mov	r4, r1
 8008dde:	4606      	mov	r6, r0
 8008de0:	4611      	mov	r1, r2
 8008de2:	4620      	mov	r0, r4
 8008de4:	4690      	mov	r8, r2
 8008de6:	f7ff ffdb 	bl	8008da0 <__mcmp>
 8008dea:	1e05      	subs	r5, r0, #0
 8008dec:	d110      	bne.n	8008e10 <__mdiff+0x38>
 8008dee:	4629      	mov	r1, r5
 8008df0:	4630      	mov	r0, r6
 8008df2:	f7ff fd59 	bl	80088a8 <_Balloc>
 8008df6:	b930      	cbnz	r0, 8008e06 <__mdiff+0x2e>
 8008df8:	4b3a      	ldr	r3, [pc, #232]	; (8008ee4 <__mdiff+0x10c>)
 8008dfa:	4602      	mov	r2, r0
 8008dfc:	f240 2137 	movw	r1, #567	; 0x237
 8008e00:	4839      	ldr	r0, [pc, #228]	; (8008ee8 <__mdiff+0x110>)
 8008e02:	f000 f967 	bl	80090d4 <__assert_func>
 8008e06:	2301      	movs	r3, #1
 8008e08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008e0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e10:	bfa4      	itt	ge
 8008e12:	4643      	movge	r3, r8
 8008e14:	46a0      	movge	r8, r4
 8008e16:	4630      	mov	r0, r6
 8008e18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008e1c:	bfa6      	itte	ge
 8008e1e:	461c      	movge	r4, r3
 8008e20:	2500      	movge	r5, #0
 8008e22:	2501      	movlt	r5, #1
 8008e24:	f7ff fd40 	bl	80088a8 <_Balloc>
 8008e28:	b920      	cbnz	r0, 8008e34 <__mdiff+0x5c>
 8008e2a:	4b2e      	ldr	r3, [pc, #184]	; (8008ee4 <__mdiff+0x10c>)
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	f240 2145 	movw	r1, #581	; 0x245
 8008e32:	e7e5      	b.n	8008e00 <__mdiff+0x28>
 8008e34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008e38:	6926      	ldr	r6, [r4, #16]
 8008e3a:	60c5      	str	r5, [r0, #12]
 8008e3c:	f104 0914 	add.w	r9, r4, #20
 8008e40:	f108 0514 	add.w	r5, r8, #20
 8008e44:	f100 0e14 	add.w	lr, r0, #20
 8008e48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008e4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008e50:	f108 0210 	add.w	r2, r8, #16
 8008e54:	46f2      	mov	sl, lr
 8008e56:	2100      	movs	r1, #0
 8008e58:	f859 3b04 	ldr.w	r3, [r9], #4
 8008e5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008e60:	fa11 f88b 	uxtah	r8, r1, fp
 8008e64:	b299      	uxth	r1, r3
 8008e66:	0c1b      	lsrs	r3, r3, #16
 8008e68:	eba8 0801 	sub.w	r8, r8, r1
 8008e6c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008e70:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008e74:	fa1f f888 	uxth.w	r8, r8
 8008e78:	1419      	asrs	r1, r3, #16
 8008e7a:	454e      	cmp	r6, r9
 8008e7c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e80:	f84a 3b04 	str.w	r3, [sl], #4
 8008e84:	d8e8      	bhi.n	8008e58 <__mdiff+0x80>
 8008e86:	1b33      	subs	r3, r6, r4
 8008e88:	3b15      	subs	r3, #21
 8008e8a:	f023 0303 	bic.w	r3, r3, #3
 8008e8e:	3304      	adds	r3, #4
 8008e90:	3415      	adds	r4, #21
 8008e92:	42a6      	cmp	r6, r4
 8008e94:	bf38      	it	cc
 8008e96:	2304      	movcc	r3, #4
 8008e98:	441d      	add	r5, r3
 8008e9a:	4473      	add	r3, lr
 8008e9c:	469e      	mov	lr, r3
 8008e9e:	462e      	mov	r6, r5
 8008ea0:	4566      	cmp	r6, ip
 8008ea2:	d30e      	bcc.n	8008ec2 <__mdiff+0xea>
 8008ea4:	f10c 0203 	add.w	r2, ip, #3
 8008ea8:	1b52      	subs	r2, r2, r5
 8008eaa:	f022 0203 	bic.w	r2, r2, #3
 8008eae:	3d03      	subs	r5, #3
 8008eb0:	45ac      	cmp	ip, r5
 8008eb2:	bf38      	it	cc
 8008eb4:	2200      	movcc	r2, #0
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008ebc:	b17a      	cbz	r2, 8008ede <__mdiff+0x106>
 8008ebe:	6107      	str	r7, [r0, #16]
 8008ec0:	e7a4      	b.n	8008e0c <__mdiff+0x34>
 8008ec2:	f856 8b04 	ldr.w	r8, [r6], #4
 8008ec6:	fa11 f288 	uxtah	r2, r1, r8
 8008eca:	1414      	asrs	r4, r2, #16
 8008ecc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008ed0:	b292      	uxth	r2, r2
 8008ed2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008ed6:	f84e 2b04 	str.w	r2, [lr], #4
 8008eda:	1421      	asrs	r1, r4, #16
 8008edc:	e7e0      	b.n	8008ea0 <__mdiff+0xc8>
 8008ede:	3f01      	subs	r7, #1
 8008ee0:	e7ea      	b.n	8008eb8 <__mdiff+0xe0>
 8008ee2:	bf00      	nop
 8008ee4:	08009a7c 	.word	0x08009a7c
 8008ee8:	08009a8d 	.word	0x08009a8d

08008eec <__d2b>:
 8008eec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ef0:	460f      	mov	r7, r1
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	ec59 8b10 	vmov	r8, r9, d0
 8008ef8:	4616      	mov	r6, r2
 8008efa:	f7ff fcd5 	bl	80088a8 <_Balloc>
 8008efe:	4604      	mov	r4, r0
 8008f00:	b930      	cbnz	r0, 8008f10 <__d2b+0x24>
 8008f02:	4602      	mov	r2, r0
 8008f04:	4b24      	ldr	r3, [pc, #144]	; (8008f98 <__d2b+0xac>)
 8008f06:	4825      	ldr	r0, [pc, #148]	; (8008f9c <__d2b+0xb0>)
 8008f08:	f240 310f 	movw	r1, #783	; 0x30f
 8008f0c:	f000 f8e2 	bl	80090d4 <__assert_func>
 8008f10:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f14:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f18:	bb2d      	cbnz	r5, 8008f66 <__d2b+0x7a>
 8008f1a:	9301      	str	r3, [sp, #4]
 8008f1c:	f1b8 0300 	subs.w	r3, r8, #0
 8008f20:	d026      	beq.n	8008f70 <__d2b+0x84>
 8008f22:	4668      	mov	r0, sp
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	f7ff fd87 	bl	8008a38 <__lo0bits>
 8008f2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f2e:	b1e8      	cbz	r0, 8008f6c <__d2b+0x80>
 8008f30:	f1c0 0320 	rsb	r3, r0, #32
 8008f34:	fa02 f303 	lsl.w	r3, r2, r3
 8008f38:	430b      	orrs	r3, r1
 8008f3a:	40c2      	lsrs	r2, r0
 8008f3c:	6163      	str	r3, [r4, #20]
 8008f3e:	9201      	str	r2, [sp, #4]
 8008f40:	9b01      	ldr	r3, [sp, #4]
 8008f42:	61a3      	str	r3, [r4, #24]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bf14      	ite	ne
 8008f48:	2202      	movne	r2, #2
 8008f4a:	2201      	moveq	r2, #1
 8008f4c:	6122      	str	r2, [r4, #16]
 8008f4e:	b1bd      	cbz	r5, 8008f80 <__d2b+0x94>
 8008f50:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008f54:	4405      	add	r5, r0
 8008f56:	603d      	str	r5, [r7, #0]
 8008f58:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f5c:	6030      	str	r0, [r6, #0]
 8008f5e:	4620      	mov	r0, r4
 8008f60:	b003      	add	sp, #12
 8008f62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f6a:	e7d6      	b.n	8008f1a <__d2b+0x2e>
 8008f6c:	6161      	str	r1, [r4, #20]
 8008f6e:	e7e7      	b.n	8008f40 <__d2b+0x54>
 8008f70:	a801      	add	r0, sp, #4
 8008f72:	f7ff fd61 	bl	8008a38 <__lo0bits>
 8008f76:	9b01      	ldr	r3, [sp, #4]
 8008f78:	6163      	str	r3, [r4, #20]
 8008f7a:	3020      	adds	r0, #32
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	e7e5      	b.n	8008f4c <__d2b+0x60>
 8008f80:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f88:	6038      	str	r0, [r7, #0]
 8008f8a:	6918      	ldr	r0, [r3, #16]
 8008f8c:	f7ff fd34 	bl	80089f8 <__hi0bits>
 8008f90:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f94:	e7e2      	b.n	8008f5c <__d2b+0x70>
 8008f96:	bf00      	nop
 8008f98:	08009a7c 	.word	0x08009a7c
 8008f9c:	08009a8d 	.word	0x08009a8d

08008fa0 <__sread>:
 8008fa0:	b510      	push	{r4, lr}
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fa8:	f000 f860 	bl	800906c <_read_r>
 8008fac:	2800      	cmp	r0, #0
 8008fae:	bfab      	itete	ge
 8008fb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fb2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fb4:	181b      	addge	r3, r3, r0
 8008fb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fba:	bfac      	ite	ge
 8008fbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fbe:	81a3      	strhlt	r3, [r4, #12]
 8008fc0:	bd10      	pop	{r4, pc}

08008fc2 <__swrite>:
 8008fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fc6:	461f      	mov	r7, r3
 8008fc8:	898b      	ldrh	r3, [r1, #12]
 8008fca:	05db      	lsls	r3, r3, #23
 8008fcc:	4605      	mov	r5, r0
 8008fce:	460c      	mov	r4, r1
 8008fd0:	4616      	mov	r6, r2
 8008fd2:	d505      	bpl.n	8008fe0 <__swrite+0x1e>
 8008fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd8:	2302      	movs	r3, #2
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f000 f834 	bl	8009048 <_lseek_r>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	4632      	mov	r2, r6
 8008fee:	463b      	mov	r3, r7
 8008ff0:	4628      	mov	r0, r5
 8008ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ff6:	f000 b85b 	b.w	80090b0 <_write_r>

08008ffa <__sseek>:
 8008ffa:	b510      	push	{r4, lr}
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009002:	f000 f821 	bl	8009048 <_lseek_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	89a3      	ldrh	r3, [r4, #12]
 800900a:	bf15      	itete	ne
 800900c:	6560      	strne	r0, [r4, #84]	; 0x54
 800900e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009016:	81a3      	strheq	r3, [r4, #12]
 8009018:	bf18      	it	ne
 800901a:	81a3      	strhne	r3, [r4, #12]
 800901c:	bd10      	pop	{r4, pc}

0800901e <__sclose>:
 800901e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009022:	f000 b801 	b.w	8009028 <_close_r>
	...

08009028 <_close_r>:
 8009028:	b538      	push	{r3, r4, r5, lr}
 800902a:	4d06      	ldr	r5, [pc, #24]	; (8009044 <_close_r+0x1c>)
 800902c:	2300      	movs	r3, #0
 800902e:	4604      	mov	r4, r0
 8009030:	4608      	mov	r0, r1
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7f9 f91a 	bl	800226c <_close>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_close_r+0x1a>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_close_r+0x1a>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20000818 	.word	0x20000818

08009048 <_lseek_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d07      	ldr	r5, [pc, #28]	; (8009068 <_lseek_r+0x20>)
 800904c:	4604      	mov	r4, r0
 800904e:	4608      	mov	r0, r1
 8009050:	4611      	mov	r1, r2
 8009052:	2200      	movs	r2, #0
 8009054:	602a      	str	r2, [r5, #0]
 8009056:	461a      	mov	r2, r3
 8009058:	f7f9 f92f 	bl	80022ba <_lseek>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d102      	bne.n	8009066 <_lseek_r+0x1e>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	b103      	cbz	r3, 8009066 <_lseek_r+0x1e>
 8009064:	6023      	str	r3, [r4, #0]
 8009066:	bd38      	pop	{r3, r4, r5, pc}
 8009068:	20000818 	.word	0x20000818

0800906c <_read_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d07      	ldr	r5, [pc, #28]	; (800908c <_read_r+0x20>)
 8009070:	4604      	mov	r4, r0
 8009072:	4608      	mov	r0, r1
 8009074:	4611      	mov	r1, r2
 8009076:	2200      	movs	r2, #0
 8009078:	602a      	str	r2, [r5, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	f7f9 f8bd 	bl	80021fa <_read>
 8009080:	1c43      	adds	r3, r0, #1
 8009082:	d102      	bne.n	800908a <_read_r+0x1e>
 8009084:	682b      	ldr	r3, [r5, #0]
 8009086:	b103      	cbz	r3, 800908a <_read_r+0x1e>
 8009088:	6023      	str	r3, [r4, #0]
 800908a:	bd38      	pop	{r3, r4, r5, pc}
 800908c:	20000818 	.word	0x20000818

08009090 <_sbrk_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4d06      	ldr	r5, [pc, #24]	; (80090ac <_sbrk_r+0x1c>)
 8009094:	2300      	movs	r3, #0
 8009096:	4604      	mov	r4, r0
 8009098:	4608      	mov	r0, r1
 800909a:	602b      	str	r3, [r5, #0]
 800909c:	f7f9 f91a 	bl	80022d4 <_sbrk>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d102      	bne.n	80090aa <_sbrk_r+0x1a>
 80090a4:	682b      	ldr	r3, [r5, #0]
 80090a6:	b103      	cbz	r3, 80090aa <_sbrk_r+0x1a>
 80090a8:	6023      	str	r3, [r4, #0]
 80090aa:	bd38      	pop	{r3, r4, r5, pc}
 80090ac:	20000818 	.word	0x20000818

080090b0 <_write_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	; (80090d0 <_write_r+0x20>)
 80090b4:	4604      	mov	r4, r0
 80090b6:	4608      	mov	r0, r1
 80090b8:	4611      	mov	r1, r2
 80090ba:	2200      	movs	r2, #0
 80090bc:	602a      	str	r2, [r5, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f7f9 f8b8 	bl	8002234 <_write>
 80090c4:	1c43      	adds	r3, r0, #1
 80090c6:	d102      	bne.n	80090ce <_write_r+0x1e>
 80090c8:	682b      	ldr	r3, [r5, #0]
 80090ca:	b103      	cbz	r3, 80090ce <_write_r+0x1e>
 80090cc:	6023      	str	r3, [r4, #0]
 80090ce:	bd38      	pop	{r3, r4, r5, pc}
 80090d0:	20000818 	.word	0x20000818

080090d4 <__assert_func>:
 80090d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090d6:	4614      	mov	r4, r2
 80090d8:	461a      	mov	r2, r3
 80090da:	4b09      	ldr	r3, [pc, #36]	; (8009100 <__assert_func+0x2c>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4605      	mov	r5, r0
 80090e0:	68d8      	ldr	r0, [r3, #12]
 80090e2:	b14c      	cbz	r4, 80090f8 <__assert_func+0x24>
 80090e4:	4b07      	ldr	r3, [pc, #28]	; (8009104 <__assert_func+0x30>)
 80090e6:	9100      	str	r1, [sp, #0]
 80090e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090ec:	4906      	ldr	r1, [pc, #24]	; (8009108 <__assert_func+0x34>)
 80090ee:	462b      	mov	r3, r5
 80090f0:	f000 f882 	bl	80091f8 <fiprintf>
 80090f4:	f000 f89f 	bl	8009236 <abort>
 80090f8:	4b04      	ldr	r3, [pc, #16]	; (800910c <__assert_func+0x38>)
 80090fa:	461c      	mov	r4, r3
 80090fc:	e7f3      	b.n	80090e6 <__assert_func+0x12>
 80090fe:	bf00      	nop
 8009100:	20000064 	.word	0x20000064
 8009104:	08009cef 	.word	0x08009cef
 8009108:	08009cfc 	.word	0x08009cfc
 800910c:	08009d2a 	.word	0x08009d2a

08009110 <_calloc_r>:
 8009110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009112:	fba1 2402 	umull	r2, r4, r1, r2
 8009116:	b94c      	cbnz	r4, 800912c <_calloc_r+0x1c>
 8009118:	4611      	mov	r1, r2
 800911a:	9201      	str	r2, [sp, #4]
 800911c:	f7ff fa8a 	bl	8008634 <_malloc_r>
 8009120:	9a01      	ldr	r2, [sp, #4]
 8009122:	4605      	mov	r5, r0
 8009124:	b930      	cbnz	r0, 8009134 <_calloc_r+0x24>
 8009126:	4628      	mov	r0, r5
 8009128:	b003      	add	sp, #12
 800912a:	bd30      	pop	{r4, r5, pc}
 800912c:	220c      	movs	r2, #12
 800912e:	6002      	str	r2, [r0, #0]
 8009130:	2500      	movs	r5, #0
 8009132:	e7f8      	b.n	8009126 <_calloc_r+0x16>
 8009134:	4621      	mov	r1, r4
 8009136:	f7fe fb91 	bl	800785c <memset>
 800913a:	e7f4      	b.n	8009126 <_calloc_r+0x16>

0800913c <_free_r>:
 800913c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800913e:	2900      	cmp	r1, #0
 8009140:	d044      	beq.n	80091cc <_free_r+0x90>
 8009142:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009146:	9001      	str	r0, [sp, #4]
 8009148:	2b00      	cmp	r3, #0
 800914a:	f1a1 0404 	sub.w	r4, r1, #4
 800914e:	bfb8      	it	lt
 8009150:	18e4      	addlt	r4, r4, r3
 8009152:	f7ff fb9d 	bl	8008890 <__malloc_lock>
 8009156:	4a1e      	ldr	r2, [pc, #120]	; (80091d0 <_free_r+0x94>)
 8009158:	9801      	ldr	r0, [sp, #4]
 800915a:	6813      	ldr	r3, [r2, #0]
 800915c:	b933      	cbnz	r3, 800916c <_free_r+0x30>
 800915e:	6063      	str	r3, [r4, #4]
 8009160:	6014      	str	r4, [r2, #0]
 8009162:	b003      	add	sp, #12
 8009164:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009168:	f7ff bb98 	b.w	800889c <__malloc_unlock>
 800916c:	42a3      	cmp	r3, r4
 800916e:	d908      	bls.n	8009182 <_free_r+0x46>
 8009170:	6825      	ldr	r5, [r4, #0]
 8009172:	1961      	adds	r1, r4, r5
 8009174:	428b      	cmp	r3, r1
 8009176:	bf01      	itttt	eq
 8009178:	6819      	ldreq	r1, [r3, #0]
 800917a:	685b      	ldreq	r3, [r3, #4]
 800917c:	1949      	addeq	r1, r1, r5
 800917e:	6021      	streq	r1, [r4, #0]
 8009180:	e7ed      	b.n	800915e <_free_r+0x22>
 8009182:	461a      	mov	r2, r3
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	b10b      	cbz	r3, 800918c <_free_r+0x50>
 8009188:	42a3      	cmp	r3, r4
 800918a:	d9fa      	bls.n	8009182 <_free_r+0x46>
 800918c:	6811      	ldr	r1, [r2, #0]
 800918e:	1855      	adds	r5, r2, r1
 8009190:	42a5      	cmp	r5, r4
 8009192:	d10b      	bne.n	80091ac <_free_r+0x70>
 8009194:	6824      	ldr	r4, [r4, #0]
 8009196:	4421      	add	r1, r4
 8009198:	1854      	adds	r4, r2, r1
 800919a:	42a3      	cmp	r3, r4
 800919c:	6011      	str	r1, [r2, #0]
 800919e:	d1e0      	bne.n	8009162 <_free_r+0x26>
 80091a0:	681c      	ldr	r4, [r3, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	6053      	str	r3, [r2, #4]
 80091a6:	440c      	add	r4, r1
 80091a8:	6014      	str	r4, [r2, #0]
 80091aa:	e7da      	b.n	8009162 <_free_r+0x26>
 80091ac:	d902      	bls.n	80091b4 <_free_r+0x78>
 80091ae:	230c      	movs	r3, #12
 80091b0:	6003      	str	r3, [r0, #0]
 80091b2:	e7d6      	b.n	8009162 <_free_r+0x26>
 80091b4:	6825      	ldr	r5, [r4, #0]
 80091b6:	1961      	adds	r1, r4, r5
 80091b8:	428b      	cmp	r3, r1
 80091ba:	bf04      	itt	eq
 80091bc:	6819      	ldreq	r1, [r3, #0]
 80091be:	685b      	ldreq	r3, [r3, #4]
 80091c0:	6063      	str	r3, [r4, #4]
 80091c2:	bf04      	itt	eq
 80091c4:	1949      	addeq	r1, r1, r5
 80091c6:	6021      	streq	r1, [r4, #0]
 80091c8:	6054      	str	r4, [r2, #4]
 80091ca:	e7ca      	b.n	8009162 <_free_r+0x26>
 80091cc:	b003      	add	sp, #12
 80091ce:	bd30      	pop	{r4, r5, pc}
 80091d0:	20000810 	.word	0x20000810

080091d4 <__ascii_mbtowc>:
 80091d4:	b082      	sub	sp, #8
 80091d6:	b901      	cbnz	r1, 80091da <__ascii_mbtowc+0x6>
 80091d8:	a901      	add	r1, sp, #4
 80091da:	b142      	cbz	r2, 80091ee <__ascii_mbtowc+0x1a>
 80091dc:	b14b      	cbz	r3, 80091f2 <__ascii_mbtowc+0x1e>
 80091de:	7813      	ldrb	r3, [r2, #0]
 80091e0:	600b      	str	r3, [r1, #0]
 80091e2:	7812      	ldrb	r2, [r2, #0]
 80091e4:	1e10      	subs	r0, r2, #0
 80091e6:	bf18      	it	ne
 80091e8:	2001      	movne	r0, #1
 80091ea:	b002      	add	sp, #8
 80091ec:	4770      	bx	lr
 80091ee:	4610      	mov	r0, r2
 80091f0:	e7fb      	b.n	80091ea <__ascii_mbtowc+0x16>
 80091f2:	f06f 0001 	mvn.w	r0, #1
 80091f6:	e7f8      	b.n	80091ea <__ascii_mbtowc+0x16>

080091f8 <fiprintf>:
 80091f8:	b40e      	push	{r1, r2, r3}
 80091fa:	b503      	push	{r0, r1, lr}
 80091fc:	4601      	mov	r1, r0
 80091fe:	ab03      	add	r3, sp, #12
 8009200:	4805      	ldr	r0, [pc, #20]	; (8009218 <fiprintf+0x20>)
 8009202:	f853 2b04 	ldr.w	r2, [r3], #4
 8009206:	6800      	ldr	r0, [r0, #0]
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	f000 f845 	bl	8009298 <_vfiprintf_r>
 800920e:	b002      	add	sp, #8
 8009210:	f85d eb04 	ldr.w	lr, [sp], #4
 8009214:	b003      	add	sp, #12
 8009216:	4770      	bx	lr
 8009218:	20000064 	.word	0x20000064

0800921c <__ascii_wctomb>:
 800921c:	b149      	cbz	r1, 8009232 <__ascii_wctomb+0x16>
 800921e:	2aff      	cmp	r2, #255	; 0xff
 8009220:	bf85      	ittet	hi
 8009222:	238a      	movhi	r3, #138	; 0x8a
 8009224:	6003      	strhi	r3, [r0, #0]
 8009226:	700a      	strbls	r2, [r1, #0]
 8009228:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800922c:	bf98      	it	ls
 800922e:	2001      	movls	r0, #1
 8009230:	4770      	bx	lr
 8009232:	4608      	mov	r0, r1
 8009234:	4770      	bx	lr

08009236 <abort>:
 8009236:	b508      	push	{r3, lr}
 8009238:	2006      	movs	r0, #6
 800923a:	f000 fa89 	bl	8009750 <raise>
 800923e:	2001      	movs	r0, #1
 8009240:	f7f8 ffd1 	bl	80021e6 <_exit>

08009244 <__sfputc_r>:
 8009244:	6893      	ldr	r3, [r2, #8]
 8009246:	3b01      	subs	r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	b410      	push	{r4}
 800924c:	6093      	str	r3, [r2, #8]
 800924e:	da08      	bge.n	8009262 <__sfputc_r+0x1e>
 8009250:	6994      	ldr	r4, [r2, #24]
 8009252:	42a3      	cmp	r3, r4
 8009254:	db01      	blt.n	800925a <__sfputc_r+0x16>
 8009256:	290a      	cmp	r1, #10
 8009258:	d103      	bne.n	8009262 <__sfputc_r+0x1e>
 800925a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800925e:	f000 b935 	b.w	80094cc <__swbuf_r>
 8009262:	6813      	ldr	r3, [r2, #0]
 8009264:	1c58      	adds	r0, r3, #1
 8009266:	6010      	str	r0, [r2, #0]
 8009268:	7019      	strb	r1, [r3, #0]
 800926a:	4608      	mov	r0, r1
 800926c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009270:	4770      	bx	lr

08009272 <__sfputs_r>:
 8009272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009274:	4606      	mov	r6, r0
 8009276:	460f      	mov	r7, r1
 8009278:	4614      	mov	r4, r2
 800927a:	18d5      	adds	r5, r2, r3
 800927c:	42ac      	cmp	r4, r5
 800927e:	d101      	bne.n	8009284 <__sfputs_r+0x12>
 8009280:	2000      	movs	r0, #0
 8009282:	e007      	b.n	8009294 <__sfputs_r+0x22>
 8009284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009288:	463a      	mov	r2, r7
 800928a:	4630      	mov	r0, r6
 800928c:	f7ff ffda 	bl	8009244 <__sfputc_r>
 8009290:	1c43      	adds	r3, r0, #1
 8009292:	d1f3      	bne.n	800927c <__sfputs_r+0xa>
 8009294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009298 <_vfiprintf_r>:
 8009298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800929c:	460d      	mov	r5, r1
 800929e:	b09d      	sub	sp, #116	; 0x74
 80092a0:	4614      	mov	r4, r2
 80092a2:	4698      	mov	r8, r3
 80092a4:	4606      	mov	r6, r0
 80092a6:	b118      	cbz	r0, 80092b0 <_vfiprintf_r+0x18>
 80092a8:	6a03      	ldr	r3, [r0, #32]
 80092aa:	b90b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x18>
 80092ac:	f7fe faa0 	bl	80077f0 <__sinit>
 80092b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b2:	07d9      	lsls	r1, r3, #31
 80092b4:	d405      	bmi.n	80092c2 <_vfiprintf_r+0x2a>
 80092b6:	89ab      	ldrh	r3, [r5, #12]
 80092b8:	059a      	lsls	r2, r3, #22
 80092ba:	d402      	bmi.n	80092c2 <_vfiprintf_r+0x2a>
 80092bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092be:	f7fe fb04 	bl	80078ca <__retarget_lock_acquire_recursive>
 80092c2:	89ab      	ldrh	r3, [r5, #12]
 80092c4:	071b      	lsls	r3, r3, #28
 80092c6:	d501      	bpl.n	80092cc <_vfiprintf_r+0x34>
 80092c8:	692b      	ldr	r3, [r5, #16]
 80092ca:	b99b      	cbnz	r3, 80092f4 <_vfiprintf_r+0x5c>
 80092cc:	4629      	mov	r1, r5
 80092ce:	4630      	mov	r0, r6
 80092d0:	f000 f93a 	bl	8009548 <__swsetup_r>
 80092d4:	b170      	cbz	r0, 80092f4 <_vfiprintf_r+0x5c>
 80092d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092d8:	07dc      	lsls	r4, r3, #31
 80092da:	d504      	bpl.n	80092e6 <_vfiprintf_r+0x4e>
 80092dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092e0:	b01d      	add	sp, #116	; 0x74
 80092e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	0598      	lsls	r0, r3, #22
 80092ea:	d4f7      	bmi.n	80092dc <_vfiprintf_r+0x44>
 80092ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ee:	f7fe faed 	bl	80078cc <__retarget_lock_release_recursive>
 80092f2:	e7f3      	b.n	80092dc <_vfiprintf_r+0x44>
 80092f4:	2300      	movs	r3, #0
 80092f6:	9309      	str	r3, [sp, #36]	; 0x24
 80092f8:	2320      	movs	r3, #32
 80092fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009302:	2330      	movs	r3, #48	; 0x30
 8009304:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80094b8 <_vfiprintf_r+0x220>
 8009308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800930c:	f04f 0901 	mov.w	r9, #1
 8009310:	4623      	mov	r3, r4
 8009312:	469a      	mov	sl, r3
 8009314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009318:	b10a      	cbz	r2, 800931e <_vfiprintf_r+0x86>
 800931a:	2a25      	cmp	r2, #37	; 0x25
 800931c:	d1f9      	bne.n	8009312 <_vfiprintf_r+0x7a>
 800931e:	ebba 0b04 	subs.w	fp, sl, r4
 8009322:	d00b      	beq.n	800933c <_vfiprintf_r+0xa4>
 8009324:	465b      	mov	r3, fp
 8009326:	4622      	mov	r2, r4
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ffa1 	bl	8009272 <__sfputs_r>
 8009330:	3001      	adds	r0, #1
 8009332:	f000 80a9 	beq.w	8009488 <_vfiprintf_r+0x1f0>
 8009336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009338:	445a      	add	r2, fp
 800933a:	9209      	str	r2, [sp, #36]	; 0x24
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 80a1 	beq.w	8009488 <_vfiprintf_r+0x1f0>
 8009346:	2300      	movs	r3, #0
 8009348:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800934c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009350:	f10a 0a01 	add.w	sl, sl, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800935c:	931a      	str	r3, [sp, #104]	; 0x68
 800935e:	4654      	mov	r4, sl
 8009360:	2205      	movs	r2, #5
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	4854      	ldr	r0, [pc, #336]	; (80094b8 <_vfiprintf_r+0x220>)
 8009368:	f7f6 ff7a 	bl	8000260 <memchr>
 800936c:	9a04      	ldr	r2, [sp, #16]
 800936e:	b9d8      	cbnz	r0, 80093a8 <_vfiprintf_r+0x110>
 8009370:	06d1      	lsls	r1, r2, #27
 8009372:	bf44      	itt	mi
 8009374:	2320      	movmi	r3, #32
 8009376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800937a:	0713      	lsls	r3, r2, #28
 800937c:	bf44      	itt	mi
 800937e:	232b      	movmi	r3, #43	; 0x2b
 8009380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009384:	f89a 3000 	ldrb.w	r3, [sl]
 8009388:	2b2a      	cmp	r3, #42	; 0x2a
 800938a:	d015      	beq.n	80093b8 <_vfiprintf_r+0x120>
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	4654      	mov	r4, sl
 8009390:	2000      	movs	r0, #0
 8009392:	f04f 0c0a 	mov.w	ip, #10
 8009396:	4621      	mov	r1, r4
 8009398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939c:	3b30      	subs	r3, #48	; 0x30
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d94d      	bls.n	800943e <_vfiprintf_r+0x1a6>
 80093a2:	b1b0      	cbz	r0, 80093d2 <_vfiprintf_r+0x13a>
 80093a4:	9207      	str	r2, [sp, #28]
 80093a6:	e014      	b.n	80093d2 <_vfiprintf_r+0x13a>
 80093a8:	eba0 0308 	sub.w	r3, r0, r8
 80093ac:	fa09 f303 	lsl.w	r3, r9, r3
 80093b0:	4313      	orrs	r3, r2
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	46a2      	mov	sl, r4
 80093b6:	e7d2      	b.n	800935e <_vfiprintf_r+0xc6>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	1d19      	adds	r1, r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	9103      	str	r1, [sp, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bfbb      	ittet	lt
 80093c4:	425b      	neglt	r3, r3
 80093c6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ca:	9307      	strge	r3, [sp, #28]
 80093cc:	9307      	strlt	r3, [sp, #28]
 80093ce:	bfb8      	it	lt
 80093d0:	9204      	strlt	r2, [sp, #16]
 80093d2:	7823      	ldrb	r3, [r4, #0]
 80093d4:	2b2e      	cmp	r3, #46	; 0x2e
 80093d6:	d10c      	bne.n	80093f2 <_vfiprintf_r+0x15a>
 80093d8:	7863      	ldrb	r3, [r4, #1]
 80093da:	2b2a      	cmp	r3, #42	; 0x2a
 80093dc:	d134      	bne.n	8009448 <_vfiprintf_r+0x1b0>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9203      	str	r2, [sp, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80093ee:	3402      	adds	r4, #2
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80094c8 <_vfiprintf_r+0x230>
 80093f6:	7821      	ldrb	r1, [r4, #0]
 80093f8:	2203      	movs	r2, #3
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7f6 ff30 	bl	8000260 <memchr>
 8009400:	b138      	cbz	r0, 8009412 <_vfiprintf_r+0x17a>
 8009402:	9b04      	ldr	r3, [sp, #16]
 8009404:	eba0 000a 	sub.w	r0, r0, sl
 8009408:	2240      	movs	r2, #64	; 0x40
 800940a:	4082      	lsls	r2, r0
 800940c:	4313      	orrs	r3, r2
 800940e:	3401      	adds	r4, #1
 8009410:	9304      	str	r3, [sp, #16]
 8009412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009416:	4829      	ldr	r0, [pc, #164]	; (80094bc <_vfiprintf_r+0x224>)
 8009418:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800941c:	2206      	movs	r2, #6
 800941e:	f7f6 ff1f 	bl	8000260 <memchr>
 8009422:	2800      	cmp	r0, #0
 8009424:	d03f      	beq.n	80094a6 <_vfiprintf_r+0x20e>
 8009426:	4b26      	ldr	r3, [pc, #152]	; (80094c0 <_vfiprintf_r+0x228>)
 8009428:	bb1b      	cbnz	r3, 8009472 <_vfiprintf_r+0x1da>
 800942a:	9b03      	ldr	r3, [sp, #12]
 800942c:	3307      	adds	r3, #7
 800942e:	f023 0307 	bic.w	r3, r3, #7
 8009432:	3308      	adds	r3, #8
 8009434:	9303      	str	r3, [sp, #12]
 8009436:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009438:	443b      	add	r3, r7
 800943a:	9309      	str	r3, [sp, #36]	; 0x24
 800943c:	e768      	b.n	8009310 <_vfiprintf_r+0x78>
 800943e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009442:	460c      	mov	r4, r1
 8009444:	2001      	movs	r0, #1
 8009446:	e7a6      	b.n	8009396 <_vfiprintf_r+0xfe>
 8009448:	2300      	movs	r3, #0
 800944a:	3401      	adds	r4, #1
 800944c:	9305      	str	r3, [sp, #20]
 800944e:	4619      	mov	r1, r3
 8009450:	f04f 0c0a 	mov.w	ip, #10
 8009454:	4620      	mov	r0, r4
 8009456:	f810 2b01 	ldrb.w	r2, [r0], #1
 800945a:	3a30      	subs	r2, #48	; 0x30
 800945c:	2a09      	cmp	r2, #9
 800945e:	d903      	bls.n	8009468 <_vfiprintf_r+0x1d0>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d0c6      	beq.n	80093f2 <_vfiprintf_r+0x15a>
 8009464:	9105      	str	r1, [sp, #20]
 8009466:	e7c4      	b.n	80093f2 <_vfiprintf_r+0x15a>
 8009468:	fb0c 2101 	mla	r1, ip, r1, r2
 800946c:	4604      	mov	r4, r0
 800946e:	2301      	movs	r3, #1
 8009470:	e7f0      	b.n	8009454 <_vfiprintf_r+0x1bc>
 8009472:	ab03      	add	r3, sp, #12
 8009474:	9300      	str	r3, [sp, #0]
 8009476:	462a      	mov	r2, r5
 8009478:	4b12      	ldr	r3, [pc, #72]	; (80094c4 <_vfiprintf_r+0x22c>)
 800947a:	a904      	add	r1, sp, #16
 800947c:	4630      	mov	r0, r6
 800947e:	f7fd fd65 	bl	8006f4c <_printf_float>
 8009482:	4607      	mov	r7, r0
 8009484:	1c78      	adds	r0, r7, #1
 8009486:	d1d6      	bne.n	8009436 <_vfiprintf_r+0x19e>
 8009488:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800948a:	07d9      	lsls	r1, r3, #31
 800948c:	d405      	bmi.n	800949a <_vfiprintf_r+0x202>
 800948e:	89ab      	ldrh	r3, [r5, #12]
 8009490:	059a      	lsls	r2, r3, #22
 8009492:	d402      	bmi.n	800949a <_vfiprintf_r+0x202>
 8009494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009496:	f7fe fa19 	bl	80078cc <__retarget_lock_release_recursive>
 800949a:	89ab      	ldrh	r3, [r5, #12]
 800949c:	065b      	lsls	r3, r3, #25
 800949e:	f53f af1d 	bmi.w	80092dc <_vfiprintf_r+0x44>
 80094a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a4:	e71c      	b.n	80092e0 <_vfiprintf_r+0x48>
 80094a6:	ab03      	add	r3, sp, #12
 80094a8:	9300      	str	r3, [sp, #0]
 80094aa:	462a      	mov	r2, r5
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <_vfiprintf_r+0x22c>)
 80094ae:	a904      	add	r1, sp, #16
 80094b0:	4630      	mov	r0, r6
 80094b2:	f7fd ffef 	bl	8007494 <_printf_i>
 80094b6:	e7e4      	b.n	8009482 <_vfiprintf_r+0x1ea>
 80094b8:	08009d2b 	.word	0x08009d2b
 80094bc:	08009d35 	.word	0x08009d35
 80094c0:	08006f4d 	.word	0x08006f4d
 80094c4:	08009273 	.word	0x08009273
 80094c8:	08009d31 	.word	0x08009d31

080094cc <__swbuf_r>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	460e      	mov	r6, r1
 80094d0:	4614      	mov	r4, r2
 80094d2:	4605      	mov	r5, r0
 80094d4:	b118      	cbz	r0, 80094de <__swbuf_r+0x12>
 80094d6:	6a03      	ldr	r3, [r0, #32]
 80094d8:	b90b      	cbnz	r3, 80094de <__swbuf_r+0x12>
 80094da:	f7fe f989 	bl	80077f0 <__sinit>
 80094de:	69a3      	ldr	r3, [r4, #24]
 80094e0:	60a3      	str	r3, [r4, #8]
 80094e2:	89a3      	ldrh	r3, [r4, #12]
 80094e4:	071a      	lsls	r2, r3, #28
 80094e6:	d525      	bpl.n	8009534 <__swbuf_r+0x68>
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	b31b      	cbz	r3, 8009534 <__swbuf_r+0x68>
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	6922      	ldr	r2, [r4, #16]
 80094f0:	1a98      	subs	r0, r3, r2
 80094f2:	6963      	ldr	r3, [r4, #20]
 80094f4:	b2f6      	uxtb	r6, r6
 80094f6:	4283      	cmp	r3, r0
 80094f8:	4637      	mov	r7, r6
 80094fa:	dc04      	bgt.n	8009506 <__swbuf_r+0x3a>
 80094fc:	4621      	mov	r1, r4
 80094fe:	4628      	mov	r0, r5
 8009500:	f7ff f99e 	bl	8008840 <_fflush_r>
 8009504:	b9e0      	cbnz	r0, 8009540 <__swbuf_r+0x74>
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	3b01      	subs	r3, #1
 800950a:	60a3      	str	r3, [r4, #8]
 800950c:	6823      	ldr	r3, [r4, #0]
 800950e:	1c5a      	adds	r2, r3, #1
 8009510:	6022      	str	r2, [r4, #0]
 8009512:	701e      	strb	r6, [r3, #0]
 8009514:	6962      	ldr	r2, [r4, #20]
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	429a      	cmp	r2, r3
 800951a:	d004      	beq.n	8009526 <__swbuf_r+0x5a>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	07db      	lsls	r3, r3, #31
 8009520:	d506      	bpl.n	8009530 <__swbuf_r+0x64>
 8009522:	2e0a      	cmp	r6, #10
 8009524:	d104      	bne.n	8009530 <__swbuf_r+0x64>
 8009526:	4621      	mov	r1, r4
 8009528:	4628      	mov	r0, r5
 800952a:	f7ff f989 	bl	8008840 <_fflush_r>
 800952e:	b938      	cbnz	r0, 8009540 <__swbuf_r+0x74>
 8009530:	4638      	mov	r0, r7
 8009532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009534:	4621      	mov	r1, r4
 8009536:	4628      	mov	r0, r5
 8009538:	f000 f806 	bl	8009548 <__swsetup_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	d0d5      	beq.n	80094ec <__swbuf_r+0x20>
 8009540:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009544:	e7f4      	b.n	8009530 <__swbuf_r+0x64>
	...

08009548 <__swsetup_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4b2a      	ldr	r3, [pc, #168]	; (80095f4 <__swsetup_r+0xac>)
 800954c:	4605      	mov	r5, r0
 800954e:	6818      	ldr	r0, [r3, #0]
 8009550:	460c      	mov	r4, r1
 8009552:	b118      	cbz	r0, 800955c <__swsetup_r+0x14>
 8009554:	6a03      	ldr	r3, [r0, #32]
 8009556:	b90b      	cbnz	r3, 800955c <__swsetup_r+0x14>
 8009558:	f7fe f94a 	bl	80077f0 <__sinit>
 800955c:	89a3      	ldrh	r3, [r4, #12]
 800955e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009562:	0718      	lsls	r0, r3, #28
 8009564:	d422      	bmi.n	80095ac <__swsetup_r+0x64>
 8009566:	06d9      	lsls	r1, r3, #27
 8009568:	d407      	bmi.n	800957a <__swsetup_r+0x32>
 800956a:	2309      	movs	r3, #9
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009572:	81a3      	strh	r3, [r4, #12]
 8009574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009578:	e034      	b.n	80095e4 <__swsetup_r+0x9c>
 800957a:	0758      	lsls	r0, r3, #29
 800957c:	d512      	bpl.n	80095a4 <__swsetup_r+0x5c>
 800957e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009580:	b141      	cbz	r1, 8009594 <__swsetup_r+0x4c>
 8009582:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009586:	4299      	cmp	r1, r3
 8009588:	d002      	beq.n	8009590 <__swsetup_r+0x48>
 800958a:	4628      	mov	r0, r5
 800958c:	f7ff fdd6 	bl	800913c <_free_r>
 8009590:	2300      	movs	r3, #0
 8009592:	6363      	str	r3, [r4, #52]	; 0x34
 8009594:	89a3      	ldrh	r3, [r4, #12]
 8009596:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800959a:	81a3      	strh	r3, [r4, #12]
 800959c:	2300      	movs	r3, #0
 800959e:	6063      	str	r3, [r4, #4]
 80095a0:	6923      	ldr	r3, [r4, #16]
 80095a2:	6023      	str	r3, [r4, #0]
 80095a4:	89a3      	ldrh	r3, [r4, #12]
 80095a6:	f043 0308 	orr.w	r3, r3, #8
 80095aa:	81a3      	strh	r3, [r4, #12]
 80095ac:	6923      	ldr	r3, [r4, #16]
 80095ae:	b94b      	cbnz	r3, 80095c4 <__swsetup_r+0x7c>
 80095b0:	89a3      	ldrh	r3, [r4, #12]
 80095b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095ba:	d003      	beq.n	80095c4 <__swsetup_r+0x7c>
 80095bc:	4621      	mov	r1, r4
 80095be:	4628      	mov	r0, r5
 80095c0:	f000 f840 	bl	8009644 <__smakebuf_r>
 80095c4:	89a0      	ldrh	r0, [r4, #12]
 80095c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095ca:	f010 0301 	ands.w	r3, r0, #1
 80095ce:	d00a      	beq.n	80095e6 <__swsetup_r+0x9e>
 80095d0:	2300      	movs	r3, #0
 80095d2:	60a3      	str	r3, [r4, #8]
 80095d4:	6963      	ldr	r3, [r4, #20]
 80095d6:	425b      	negs	r3, r3
 80095d8:	61a3      	str	r3, [r4, #24]
 80095da:	6923      	ldr	r3, [r4, #16]
 80095dc:	b943      	cbnz	r3, 80095f0 <__swsetup_r+0xa8>
 80095de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095e2:	d1c4      	bne.n	800956e <__swsetup_r+0x26>
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	0781      	lsls	r1, r0, #30
 80095e8:	bf58      	it	pl
 80095ea:	6963      	ldrpl	r3, [r4, #20]
 80095ec:	60a3      	str	r3, [r4, #8]
 80095ee:	e7f4      	b.n	80095da <__swsetup_r+0x92>
 80095f0:	2000      	movs	r0, #0
 80095f2:	e7f7      	b.n	80095e4 <__swsetup_r+0x9c>
 80095f4:	20000064 	.word	0x20000064

080095f8 <__swhatbuf_r>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	460c      	mov	r4, r1
 80095fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009600:	2900      	cmp	r1, #0
 8009602:	b096      	sub	sp, #88	; 0x58
 8009604:	4615      	mov	r5, r2
 8009606:	461e      	mov	r6, r3
 8009608:	da0d      	bge.n	8009626 <__swhatbuf_r+0x2e>
 800960a:	89a3      	ldrh	r3, [r4, #12]
 800960c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009610:	f04f 0100 	mov.w	r1, #0
 8009614:	bf0c      	ite	eq
 8009616:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800961a:	2340      	movne	r3, #64	; 0x40
 800961c:	2000      	movs	r0, #0
 800961e:	6031      	str	r1, [r6, #0]
 8009620:	602b      	str	r3, [r5, #0]
 8009622:	b016      	add	sp, #88	; 0x58
 8009624:	bd70      	pop	{r4, r5, r6, pc}
 8009626:	466a      	mov	r2, sp
 8009628:	f000 f848 	bl	80096bc <_fstat_r>
 800962c:	2800      	cmp	r0, #0
 800962e:	dbec      	blt.n	800960a <__swhatbuf_r+0x12>
 8009630:	9901      	ldr	r1, [sp, #4]
 8009632:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009636:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800963a:	4259      	negs	r1, r3
 800963c:	4159      	adcs	r1, r3
 800963e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009642:	e7eb      	b.n	800961c <__swhatbuf_r+0x24>

08009644 <__smakebuf_r>:
 8009644:	898b      	ldrh	r3, [r1, #12]
 8009646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009648:	079d      	lsls	r5, r3, #30
 800964a:	4606      	mov	r6, r0
 800964c:	460c      	mov	r4, r1
 800964e:	d507      	bpl.n	8009660 <__smakebuf_r+0x1c>
 8009650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	2301      	movs	r3, #1
 800965a:	6163      	str	r3, [r4, #20]
 800965c:	b002      	add	sp, #8
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	ab01      	add	r3, sp, #4
 8009662:	466a      	mov	r2, sp
 8009664:	f7ff ffc8 	bl	80095f8 <__swhatbuf_r>
 8009668:	9900      	ldr	r1, [sp, #0]
 800966a:	4605      	mov	r5, r0
 800966c:	4630      	mov	r0, r6
 800966e:	f7fe ffe1 	bl	8008634 <_malloc_r>
 8009672:	b948      	cbnz	r0, 8009688 <__smakebuf_r+0x44>
 8009674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009678:	059a      	lsls	r2, r3, #22
 800967a:	d4ef      	bmi.n	800965c <__smakebuf_r+0x18>
 800967c:	f023 0303 	bic.w	r3, r3, #3
 8009680:	f043 0302 	orr.w	r3, r3, #2
 8009684:	81a3      	strh	r3, [r4, #12]
 8009686:	e7e3      	b.n	8009650 <__smakebuf_r+0xc>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	6020      	str	r0, [r4, #0]
 800968c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009690:	81a3      	strh	r3, [r4, #12]
 8009692:	9b00      	ldr	r3, [sp, #0]
 8009694:	6163      	str	r3, [r4, #20]
 8009696:	9b01      	ldr	r3, [sp, #4]
 8009698:	6120      	str	r0, [r4, #16]
 800969a:	b15b      	cbz	r3, 80096b4 <__smakebuf_r+0x70>
 800969c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80096a0:	4630      	mov	r0, r6
 80096a2:	f000 f81d 	bl	80096e0 <_isatty_r>
 80096a6:	b128      	cbz	r0, 80096b4 <__smakebuf_r+0x70>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	f023 0303 	bic.w	r3, r3, #3
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	89a3      	ldrh	r3, [r4, #12]
 80096b6:	431d      	orrs	r5, r3
 80096b8:	81a5      	strh	r5, [r4, #12]
 80096ba:	e7cf      	b.n	800965c <__smakebuf_r+0x18>

080096bc <_fstat_r>:
 80096bc:	b538      	push	{r3, r4, r5, lr}
 80096be:	4d07      	ldr	r5, [pc, #28]	; (80096dc <_fstat_r+0x20>)
 80096c0:	2300      	movs	r3, #0
 80096c2:	4604      	mov	r4, r0
 80096c4:	4608      	mov	r0, r1
 80096c6:	4611      	mov	r1, r2
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f7f8 fddb 	bl	8002284 <_fstat>
 80096ce:	1c43      	adds	r3, r0, #1
 80096d0:	d102      	bne.n	80096d8 <_fstat_r+0x1c>
 80096d2:	682b      	ldr	r3, [r5, #0]
 80096d4:	b103      	cbz	r3, 80096d8 <_fstat_r+0x1c>
 80096d6:	6023      	str	r3, [r4, #0]
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	bf00      	nop
 80096dc:	20000818 	.word	0x20000818

080096e0 <_isatty_r>:
 80096e0:	b538      	push	{r3, r4, r5, lr}
 80096e2:	4d06      	ldr	r5, [pc, #24]	; (80096fc <_isatty_r+0x1c>)
 80096e4:	2300      	movs	r3, #0
 80096e6:	4604      	mov	r4, r0
 80096e8:	4608      	mov	r0, r1
 80096ea:	602b      	str	r3, [r5, #0]
 80096ec:	f7f8 fdda 	bl	80022a4 <_isatty>
 80096f0:	1c43      	adds	r3, r0, #1
 80096f2:	d102      	bne.n	80096fa <_isatty_r+0x1a>
 80096f4:	682b      	ldr	r3, [r5, #0]
 80096f6:	b103      	cbz	r3, 80096fa <_isatty_r+0x1a>
 80096f8:	6023      	str	r3, [r4, #0]
 80096fa:	bd38      	pop	{r3, r4, r5, pc}
 80096fc:	20000818 	.word	0x20000818

08009700 <_raise_r>:
 8009700:	291f      	cmp	r1, #31
 8009702:	b538      	push	{r3, r4, r5, lr}
 8009704:	4604      	mov	r4, r0
 8009706:	460d      	mov	r5, r1
 8009708:	d904      	bls.n	8009714 <_raise_r+0x14>
 800970a:	2316      	movs	r3, #22
 800970c:	6003      	str	r3, [r0, #0]
 800970e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009712:	bd38      	pop	{r3, r4, r5, pc}
 8009714:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009716:	b112      	cbz	r2, 800971e <_raise_r+0x1e>
 8009718:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800971c:	b94b      	cbnz	r3, 8009732 <_raise_r+0x32>
 800971e:	4620      	mov	r0, r4
 8009720:	f000 f830 	bl	8009784 <_getpid_r>
 8009724:	462a      	mov	r2, r5
 8009726:	4601      	mov	r1, r0
 8009728:	4620      	mov	r0, r4
 800972a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800972e:	f000 b817 	b.w	8009760 <_kill_r>
 8009732:	2b01      	cmp	r3, #1
 8009734:	d00a      	beq.n	800974c <_raise_r+0x4c>
 8009736:	1c59      	adds	r1, r3, #1
 8009738:	d103      	bne.n	8009742 <_raise_r+0x42>
 800973a:	2316      	movs	r3, #22
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	2001      	movs	r0, #1
 8009740:	e7e7      	b.n	8009712 <_raise_r+0x12>
 8009742:	2400      	movs	r4, #0
 8009744:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009748:	4628      	mov	r0, r5
 800974a:	4798      	blx	r3
 800974c:	2000      	movs	r0, #0
 800974e:	e7e0      	b.n	8009712 <_raise_r+0x12>

08009750 <raise>:
 8009750:	4b02      	ldr	r3, [pc, #8]	; (800975c <raise+0xc>)
 8009752:	4601      	mov	r1, r0
 8009754:	6818      	ldr	r0, [r3, #0]
 8009756:	f7ff bfd3 	b.w	8009700 <_raise_r>
 800975a:	bf00      	nop
 800975c:	20000064 	.word	0x20000064

08009760 <_kill_r>:
 8009760:	b538      	push	{r3, r4, r5, lr}
 8009762:	4d07      	ldr	r5, [pc, #28]	; (8009780 <_kill_r+0x20>)
 8009764:	2300      	movs	r3, #0
 8009766:	4604      	mov	r4, r0
 8009768:	4608      	mov	r0, r1
 800976a:	4611      	mov	r1, r2
 800976c:	602b      	str	r3, [r5, #0]
 800976e:	f7f8 fd2a 	bl	80021c6 <_kill>
 8009772:	1c43      	adds	r3, r0, #1
 8009774:	d102      	bne.n	800977c <_kill_r+0x1c>
 8009776:	682b      	ldr	r3, [r5, #0]
 8009778:	b103      	cbz	r3, 800977c <_kill_r+0x1c>
 800977a:	6023      	str	r3, [r4, #0]
 800977c:	bd38      	pop	{r3, r4, r5, pc}
 800977e:	bf00      	nop
 8009780:	20000818 	.word	0x20000818

08009784 <_getpid_r>:
 8009784:	f7f8 bd17 	b.w	80021b6 <_getpid>

08009788 <_init>:
 8009788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978a:	bf00      	nop
 800978c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800978e:	bc08      	pop	{r3}
 8009790:	469e      	mov	lr, r3
 8009792:	4770      	bx	lr

08009794 <_fini>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr
